// starting begin mp_selectmsg := true ;
   0: LD_ADDR_OWVAR 13
   4: PUSH
   5: LD_INT 1
   7: ST_TO_ADDR
// INIT_LoadMapParams ;
   8: CALL 4123 0 0
// INIT_LoadGameParams ;
  12: CALL 256 0 0
// INIT_ApplyGameParams ;
  16: CALL 815 0 0
// INIT_GenerateDeposits ;
  20: CALL 1217 0 0
// INIT_SetUpAllies ;
  24: CALL 1783 0 0
// INIT_SetUpTechs ;
  28: CALL 1985 0 0
// INIT_PrepareSquad ;
  32: CALL 2272 0 0
// INIT_PrepareReinforcements ;
  36: CALL 2884 0 0
// INIT_SpawnStartingUnits ;
  40: CALL 3148 0 0
// INIT_CameraFocus ;
  44: CALL 4061 0 0
// INIT_ActivateLUAInterface ;
  48: CALL 2073 0 0
// if Your_Side >= 1 and Your_Side <= 8 then
  52: LD_OWVAR 2
  56: PUSH
  57: LD_INT 1
  59: GREATEREQUAL
  60: PUSH
  61: LD_OWVAR 2
  65: PUSH
  66: LD_INT 8
  68: LESSEQUAL
  69: AND
  70: IFFALSE 88
// music_nat := Side_Nations [ Your_Side ] ;
  72: LD_ADDR_OWVAR 71
  76: PUSH
  77: LD_EXP 3
  81: PUSH
  82: LD_OWVAR 2
  86: ARRAY
  87: ST_TO_ADDR
// end ;
  88: END
// every 0 0$1 do
  89: GO 91
  91: DISABLE
// begin ShowTimer ;
  92: CALL 12174 0 0
// enable ;
  96: ENABLE
// end ;
  97: END
// every 0 0$3 trigger Multiplayer do
  98: LD_OWVAR 4
 102: IFFALSE 112
 104: GO 106
 106: DISABLE
// begin CheckPlayerPresence ;
 107: CALL 5980 0 0
// enable ;
 111: ENABLE
// end ;
 112: END
// every 0 0$1 trigger tick >= CLOCK_fluctuation and spawn_fluctuation <> 0 do
 113: LD_OWVAR 1
 117: PUSH
 118: LD_EXP 52
 122: GREATEREQUAL
 123: PUSH
 124: LD_EXP 24
 128: PUSH
 129: LD_INT 0
 131: NONEQUAL
 132: AND
 133: IFFALSE 159
 135: GO 137
 137: DISABLE
// begin enable ;
 138: ENABLE
// CLOCK_fluctuation := CLOCK_fluctuation + spawn_fluctuation ;
 139: LD_ADDR_EXP 52
 143: PUSH
 144: LD_EXP 52
 148: PUSH
 149: LD_EXP 24
 153: PLUS
 154: ST_TO_ADDR
// CYCLIC_Fluctuation ;
 155: CALL 12001 0 0
// end ;
 159: END
// every 0 0$1 trigger tick >= CLOCK_crate_spawn do
 160: LD_OWVAR 1
 164: PUSH
 165: LD_EXP 50
 169: GREATEREQUAL
 170: IFFALSE 202
 172: GO 174
 174: DISABLE
// begin enable ;
 175: ENABLE
// CLOCK_crate_spawn := CLOCK_crate_spawn + crate_spawn_rate + fluctuation_modifier_crates ;
 176: LD_ADDR_EXP 50
 180: PUSH
 181: LD_EXP 50
 185: PUSH
 186: LD_EXP 22
 190: PLUS
 191: PUSH
 192: LD_EXP 39
 196: PLUS
 197: ST_TO_ADDR
// CYCLIC_CrateSpawn ;
 198: CALL 10670 0 0
// end ;
 202: END
// every 0 0$1 trigger tick >= CLOCK_human_spawn and people_spawn_rate <> 0 do
 203: LD_OWVAR 1
 207: PUSH
 208: LD_EXP 51
 212: GREATEREQUAL
 213: PUSH
 214: LD_EXP 23
 218: PUSH
 219: LD_INT 0
 221: NONEQUAL
 222: AND
 223: IFFALSE 255
 225: GO 227
 227: DISABLE
// begin enable ;
 228: ENABLE
// CLOCK_human_spawn := CLOCK_human_spawn + people_spawn_rate + fluctuation_modifier_humans ;
 229: LD_ADDR_EXP 51
 233: PUSH
 234: LD_EXP 51
 238: PUSH
 239: LD_EXP 23
 243: PLUS
 244: PUSH
 245: LD_EXP 40
 249: PLUS
 250: ST_TO_ADDR
// CYCLIC_HumanSpawn ;
 251: CALL 10850 0 0
// end ; end_of_file
 255: END
// export function INIT_LoadGameParams ; begin
 256: LD_INT 0
 258: PPUSH
// if Multiplayer then
 259: LD_OWVAR 4
 263: IFFALSE 493
// begin Game_Type := mp_game_type ;
 265: LD_ADDR_EXP 1
 269: PUSH
 270: LD_OWVAR 6
 274: ST_TO_ADDR
// Your_Side := mp_player_side ;
 275: LD_ADDR_OWVAR 2
 279: PUSH
 280: LD_OWVAR 7
 284: ST_TO_ADDR
// Side_Positions := mp_sides_positions ;
 285: LD_ADDR_EXP 2
 289: PUSH
 290: LD_OWVAR 17
 294: ST_TO_ADDR
// Side_Nations := mp_sides_nations ;
 295: LD_ADDR_EXP 3
 299: PUSH
 300: LD_OWVAR 16
 304: ST_TO_ADDR
// Side_Comps := mp_sides_comps ;
 305: LD_ADDR_EXP 4
 309: PUSH
 310: CALL 5296 0 0
 314: ST_TO_ADDR
// Side_Teams := mp_sides_teams ;
 315: LD_ADDR_EXP 5
 319: PUSH
 320: LD_OWVAR 15
 324: ST_TO_ADDR
// Teams := mp_teams ;
 325: LD_ADDR_EXP 6
 329: PUSH
 330: LD_OWVAR 12
 334: ST_TO_ADDR
// Choice_people_num := GetMultiplayerSetting ( 0 ) ;
 335: LD_ADDR_EXP 7
 339: PUSH
 340: LD_INT 0
 342: PPUSH
 343: CALL_OW 426
 347: ST_TO_ADDR
// Choice_experience := GetMultiplayerSetting ( 1 ) ;
 348: LD_ADDR_EXP 8
 352: PUSH
 353: LD_INT 1
 355: PPUSH
 356: CALL_OW 426
 360: ST_TO_ADDR
// Choice_starting_resources := GetMultiplayerSetting ( 2 ) ;
 361: LD_ADDR_EXP 9
 365: PUSH
 366: LD_INT 2
 368: PPUSH
 369: CALL_OW 426
 373: ST_TO_ADDR
// Choice_crate_spawn_rate := GetMultiplayerSetting ( 3 ) ;
 374: LD_ADDR_EXP 10
 378: PUSH
 379: LD_INT 3
 381: PPUSH
 382: CALL_OW 426
 386: ST_TO_ADDR
// Choice_people_spawn_rate := GetMultiplayerSetting ( 4 ) ;
 387: LD_ADDR_EXP 11
 391: PUSH
 392: LD_INT 4
 394: PPUSH
 395: CALL_OW 426
 399: ST_TO_ADDR
// Choice_spawn_fluctuation := GetMultiplayerSetting ( 5 ) ;
 400: LD_ADDR_EXP 12
 404: PUSH
 405: LD_INT 5
 407: PPUSH
 408: CALL_OW 426
 412: ST_TO_ADDR
// Choice_oil_abundance := GetMultiplayerSetting ( 6 ) ;
 413: LD_ADDR_EXP 13
 417: PUSH
 418: LD_INT 6
 420: PPUSH
 421: CALL_OW 426
 425: ST_TO_ADDR
// Choice_sib_abundance := GetMultiplayerSetting ( 7 ) ;
 426: LD_ADDR_EXP 14
 430: PUSH
 431: LD_INT 7
 433: PPUSH
 434: CALL_OW 426
 438: ST_TO_ADDR
// Choice_victory_cond := GetMultiplayerSetting ( 8 ) ;
 439: LD_ADDR_EXP 15
 443: PUSH
 444: LD_INT 8
 446: PPUSH
 447: CALL_OW 426
 451: ST_TO_ADDR
// Choice_reinforce_cost := GetMultiplayerSetting ( 9 ) ;
 452: LD_ADDR_EXP 16
 456: PUSH
 457: LD_INT 9
 459: PPUSH
 460: CALL_OW 426
 464: ST_TO_ADDR
// Choice_black_FoW := GetMultiplayerSetting ( 10 ) ;
 465: LD_ADDR_EXP 17
 469: PUSH
 470: LD_INT 10
 472: PPUSH
 473: CALL_OW 426
 477: ST_TO_ADDR
// Choice_starting_tech_lvl := GetMultiplayerSetting ( 11 ) ;
 478: LD_ADDR_EXP 18
 482: PUSH
 483: LD_INT 11
 485: PPUSH
 486: CALL_OW 426
 490: ST_TO_ADDR
// end else
 491: GO 810
// begin RandomizeAll ;
 493: CALL_OW 11
// Game_Type := 1 ;
 497: LD_ADDR_EXP 1
 501: PUSH
 502: LD_INT 1
 504: ST_TO_ADDR
// Your_Side := 2 ;
 505: LD_ADDR_OWVAR 2
 509: PUSH
 510: LD_INT 2
 512: ST_TO_ADDR
// Side_Positions := [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] ;
 513: LD_ADDR_EXP 2
 517: PUSH
 518: LD_INT 1
 520: PUSH
 521: LD_INT 2
 523: PUSH
 524: LD_INT 3
 526: PUSH
 527: LD_INT 4
 529: PUSH
 530: LD_INT 5
 532: PUSH
 533: LD_INT 6
 535: PUSH
 536: LD_INT 7
 538: PUSH
 539: LD_INT 8
 541: PUSH
 542: EMPTY
 543: LIST
 544: LIST
 545: LIST
 546: LIST
 547: LIST
 548: LIST
 549: LIST
 550: LIST
 551: ST_TO_ADDR
// Side_Nations := [ 1 , 2 , 3 , 1 , 2 , 3 , 1 , 2 ] ;
 552: LD_ADDR_EXP 3
 556: PUSH
 557: LD_INT 1
 559: PUSH
 560: LD_INT 2
 562: PUSH
 563: LD_INT 3
 565: PUSH
 566: LD_INT 1
 568: PUSH
 569: LD_INT 2
 571: PUSH
 572: LD_INT 3
 574: PUSH
 575: LD_INT 1
 577: PUSH
 578: LD_INT 2
 580: PUSH
 581: EMPTY
 582: LIST
 583: LIST
 584: LIST
 585: LIST
 586: LIST
 587: LIST
 588: LIST
 589: LIST
 590: ST_TO_ADDR
// Side_Comps := [ 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 ] ;
 591: LD_ADDR_EXP 4
 595: PUSH
 596: LD_INT 1
 598: PUSH
 599: LD_INT 1
 601: PUSH
 602: LD_INT 1
 604: PUSH
 605: LD_INT 1
 607: PUSH
 608: LD_INT 1
 610: PUSH
 611: LD_INT 1
 613: PUSH
 614: LD_INT 1
 616: PUSH
 617: LD_INT 1
 619: PUSH
 620: EMPTY
 621: LIST
 622: LIST
 623: LIST
 624: LIST
 625: LIST
 626: LIST
 627: LIST
 628: LIST
 629: ST_TO_ADDR
// Side_Teams := [ 1 , 1 , 1 , 1 , 2 , 2 , 2 , 2 ] ;
 630: LD_ADDR_EXP 5
 634: PUSH
 635: LD_INT 1
 637: PUSH
 638: LD_INT 1
 640: PUSH
 641: LD_INT 1
 643: PUSH
 644: LD_INT 1
 646: PUSH
 647: LD_INT 2
 649: PUSH
 650: LD_INT 2
 652: PUSH
 653: LD_INT 2
 655: PUSH
 656: LD_INT 2
 658: PUSH
 659: EMPTY
 660: LIST
 661: LIST
 662: LIST
 663: LIST
 664: LIST
 665: LIST
 666: LIST
 667: LIST
 668: ST_TO_ADDR
// Teams := [ [ 1 , 2 , 3 , 4 ] , [ 5 , 6 , 7 , 8 ] ] ;
 669: LD_ADDR_EXP 6
 673: PUSH
 674: LD_INT 1
 676: PUSH
 677: LD_INT 2
 679: PUSH
 680: LD_INT 3
 682: PUSH
 683: LD_INT 4
 685: PUSH
 686: EMPTY
 687: LIST
 688: LIST
 689: LIST
 690: LIST
 691: PUSH
 692: LD_INT 5
 694: PUSH
 695: LD_INT 6
 697: PUSH
 698: LD_INT 7
 700: PUSH
 701: LD_INT 8
 703: PUSH
 704: EMPTY
 705: LIST
 706: LIST
 707: LIST
 708: LIST
 709: PUSH
 710: EMPTY
 711: LIST
 712: LIST
 713: ST_TO_ADDR
// Choice_people_num := 2 ;
 714: LD_ADDR_EXP 7
 718: PUSH
 719: LD_INT 2
 721: ST_TO_ADDR
// Choice_experience := 3 ;
 722: LD_ADDR_EXP 8
 726: PUSH
 727: LD_INT 3
 729: ST_TO_ADDR
// Choice_starting_resources := 1 ;
 730: LD_ADDR_EXP 9
 734: PUSH
 735: LD_INT 1
 737: ST_TO_ADDR
// Choice_crate_spawn_rate := 3 ;
 738: LD_ADDR_EXP 10
 742: PUSH
 743: LD_INT 3
 745: ST_TO_ADDR
// Choice_people_spawn_rate := 3 ;
 746: LD_ADDR_EXP 11
 750: PUSH
 751: LD_INT 3
 753: ST_TO_ADDR
// Choice_spawn_fluctuation := 0 ;
 754: LD_ADDR_EXP 12
 758: PUSH
 759: LD_INT 0
 761: ST_TO_ADDR
// Choice_oil_abundance := 0 ;
 762: LD_ADDR_EXP 13
 766: PUSH
 767: LD_INT 0
 769: ST_TO_ADDR
// Choice_sib_abundance := 0 ;
 770: LD_ADDR_EXP 14
 774: PUSH
 775: LD_INT 0
 777: ST_TO_ADDR
// Choice_victory_cond := 2 ;
 778: LD_ADDR_EXP 15
 782: PUSH
 783: LD_INT 2
 785: ST_TO_ADDR
// Choice_reinforce_cost := 1 ;
 786: LD_ADDR_EXP 16
 790: PUSH
 791: LD_INT 1
 793: ST_TO_ADDR
// Choice_black_FoW := 0 ;
 794: LD_ADDR_EXP 17
 798: PUSH
 799: LD_INT 0
 801: ST_TO_ADDR
// Choice_starting_tech_lvl := 0 ;
 802: LD_ADDR_EXP 18
 806: PUSH
 807: LD_INT 0
 809: ST_TO_ADDR
// end ; end ;
 810: LD_VAR 0 1
 814: RET
// export function INIT_ApplyGameParams ; var i ; begin
 815: LD_INT 0
 817: PPUSH
 818: PPUSH
// people_num := people_num [ Choice_people_num + 1 ] ;
 819: LD_ADDR_EXP 19
 823: PUSH
 824: LD_EXP 19
 828: PUSH
 829: LD_EXP 7
 833: PUSH
 834: LD_INT 1
 836: PLUS
 837: ARRAY
 838: ST_TO_ADDR
// experience := experience [ Choice_experience + 1 ] ;
 839: LD_ADDR_EXP 20
 843: PUSH
 844: LD_EXP 20
 848: PUSH
 849: LD_EXP 8
 853: PUSH
 854: LD_INT 1
 856: PLUS
 857: ARRAY
 858: ST_TO_ADDR
// starting_resources := starting_resources [ Choice_starting_resources + 1 ] ;
 859: LD_ADDR_EXP 21
 863: PUSH
 864: LD_EXP 21
 868: PUSH
 869: LD_EXP 9
 873: PUSH
 874: LD_INT 1
 876: PLUS
 877: ARRAY
 878: ST_TO_ADDR
// crate_spawn_rate := crate_spawn_rate [ Choice_crate_spawn_rate + 1 ] ;
 879: LD_ADDR_EXP 22
 883: PUSH
 884: LD_EXP 22
 888: PUSH
 889: LD_EXP 10
 893: PUSH
 894: LD_INT 1
 896: PLUS
 897: ARRAY
 898: ST_TO_ADDR
// people_spawn_rate := people_spawn_rate [ Choice_people_spawn_rate + 1 ] ;
 899: LD_ADDR_EXP 23
 903: PUSH
 904: LD_EXP 23
 908: PUSH
 909: LD_EXP 11
 913: PUSH
 914: LD_INT 1
 916: PLUS
 917: ARRAY
 918: ST_TO_ADDR
// spawn_fluctuation := spawn_fluctuation [ Choice_spawn_fluctuation + 1 ] ;
 919: LD_ADDR_EXP 24
 923: PUSH
 924: LD_EXP 24
 928: PUSH
 929: LD_EXP 12
 933: PUSH
 934: LD_INT 1
 936: PLUS
 937: ARRAY
 938: ST_TO_ADDR
// fluctuation_base_crates := fluctuation_base_crates [ Choice_crate_spawn_rate + 1 ] ;
 939: LD_ADDR_EXP 37
 943: PUSH
 944: LD_EXP 37
 948: PUSH
 949: LD_EXP 10
 953: PUSH
 954: LD_INT 1
 956: PLUS
 957: ARRAY
 958: ST_TO_ADDR
// fluctuation_base_humans := fluctuation_base_humans [ Choice_people_spawn_rate + 1 ] ;
 959: LD_ADDR_EXP 38
 963: PUSH
 964: LD_EXP 38
 968: PUSH
 969: LD_EXP 11
 973: PUSH
 974: LD_INT 1
 976: PLUS
 977: ARRAY
 978: ST_TO_ADDR
// oil_abundance := oil_abundance [ Choice_oil_abundance + 1 ] ;
 979: LD_ADDR_EXP 25
 983: PUSH
 984: LD_EXP 25
 988: PUSH
 989: LD_EXP 13
 993: PUSH
 994: LD_INT 1
 996: PLUS
 997: ARRAY
 998: ST_TO_ADDR
// sib_abundance := sib_abundance [ Choice_sib_abundance + 1 ] ;
 999: LD_ADDR_EXP 26
1003: PUSH
1004: LD_EXP 26
1008: PUSH
1009: LD_EXP 14
1013: PUSH
1014: LD_INT 1
1016: PLUS
1017: ARRAY
1018: ST_TO_ADDR
// victory_cond := victory_cond [ Choice_victory_cond + 1 ] ;
1019: LD_ADDR_EXP 27
1023: PUSH
1024: LD_EXP 27
1028: PUSH
1029: LD_EXP 15
1033: PUSH
1034: LD_INT 1
1036: PLUS
1037: ARRAY
1038: ST_TO_ADDR
// reinforce_cost := reinforce_cost [ Choice_reinforce_cost + 1 ] ;
1039: LD_ADDR_EXP 28
1043: PUSH
1044: LD_EXP 28
1048: PUSH
1049: LD_EXP 16
1053: PUSH
1054: LD_INT 1
1056: PLUS
1057: ARRAY
1058: ST_TO_ADDR
// soldier_limit := people_num [ Choice_people_num + 1 ] ;
1059: LD_ADDR_EXP 48
1063: PUSH
1064: LD_EXP 19
1068: PUSH
1069: LD_EXP 7
1073: PUSH
1074: LD_INT 1
1076: PLUS
1077: ARRAY
1078: ST_TO_ADDR
// black_fow := Choice_black_FoW ;
1079: LD_ADDR_EXP 29
1083: PUSH
1084: LD_EXP 17
1088: ST_TO_ADDR
// starting_tech_lvl := Choice_starting_tech_lvl ;
1089: LD_ADDR_EXP 30
1093: PUSH
1094: LD_EXP 18
1098: ST_TO_ADDR
// CLOCK_crate_spawn := crate_spawn_rate ;
1099: LD_ADDR_EXP 50
1103: PUSH
1104: LD_EXP 22
1108: ST_TO_ADDR
// CLOCK_human_spawn := people_spawn_rate ;
1109: LD_ADDR_EXP 51
1113: PUSH
1114: LD_EXP 23
1118: ST_TO_ADDR
// CLOCK_fluctuation := spawn_fluctuation ;
1119: LD_ADDR_EXP 52
1123: PUSH
1124: LD_EXP 24
1128: ST_TO_ADDR
// for i = 1 to Side_Positions do
1129: LD_ADDR_VAR 0 2
1133: PUSH
1134: DOUBLE
1135: LD_INT 1
1137: DEC
1138: ST_TO_ADDR
1139: LD_EXP 2
1143: PUSH
1144: FOR_TO
1145: IFFALSE 1210
// begin if not Side_Positions [ i ] then
1147: LD_EXP 2
1151: PUSH
1152: LD_VAR 0 2
1156: ARRAY
1157: NOT
1158: IFFALSE 1185
// side_isalive := Replace ( side_isalive , i , 0 ) else
1160: LD_ADDR_EXP 53
1164: PUSH
1165: LD_EXP 53
1169: PPUSH
1170: LD_VAR 0 2
1174: PPUSH
1175: LD_INT 0
1177: PPUSH
1178: CALL_OW 1
1182: ST_TO_ADDR
1183: GO 1208
// side_isalive := Replace ( side_isalive , i , 1 ) ;
1185: LD_ADDR_EXP 53
1189: PUSH
1190: LD_EXP 53
1194: PPUSH
1195: LD_VAR 0 2
1199: PPUSH
1200: LD_INT 1
1202: PPUSH
1203: CALL_OW 1
1207: ST_TO_ADDR
// end ;
1208: GO 1144
1210: POP
1211: POP
// end ;
1212: LD_VAR 0 1
1216: RET
// export function INIT_GenerateDeposits ; var x , y , i , j , pool_oil_deposits , pool_siberite_deposits ; begin
1217: LD_INT 0
1219: PPUSH
1220: PPUSH
1221: PPUSH
1222: PPUSH
1223: PPUSH
1224: PPUSH
1225: PPUSH
// pool_oil_deposits := available_oil_deposits ;
1226: LD_ADDR_VAR 0 6
1230: PUSH
1231: LD_EXP 32
1235: ST_TO_ADDR
// pool_siberite_deposits := available_siberite_deposits ;
1236: LD_ADDR_VAR 0 7
1240: PUSH
1241: LD_EXP 33
1245: ST_TO_ADDR
// i := 0 ;
1246: LD_ADDR_VAR 0 4
1250: PUSH
1251: LD_INT 0
1253: ST_TO_ADDR
// while i < oil_abundance do
1254: LD_VAR 0 4
1258: PUSH
1259: LD_EXP 25
1263: LESS
1264: IFFALSE 1512
// begin for j = 1 to pool_oil_deposits do
1266: LD_ADDR_VAR 0 5
1270: PUSH
1271: DOUBLE
1272: LD_INT 1
1274: DEC
1275: ST_TO_ADDR
1276: LD_VAR 0 6
1280: PUSH
1281: FOR_TO
1282: IFFALSE 1508
// begin i := i + 1 ;
1284: LD_ADDR_VAR 0 4
1288: PUSH
1289: LD_VAR 0 4
1293: PUSH
1294: LD_INT 1
1296: PLUS
1297: ST_TO_ADDR
// x := length ( pool_oil_deposits [ j ] ) ;
1298: LD_ADDR_VAR 0 2
1302: PUSH
1303: LD_VAR 0 6
1307: PUSH
1308: LD_VAR 0 5
1312: ARRAY
1313: PPUSH
1314: CALL 5248 0 1
1318: ST_TO_ADDR
// y := Rand ( 1 , x ) ;
1319: LD_ADDR_VAR 0 3
1323: PUSH
1324: LD_INT 1
1326: PPUSH
1327: LD_VAR 0 2
1331: PPUSH
1332: CALL_OW 12
1336: ST_TO_ADDR
// CreateDepositXY ( pool_oil_deposits [ j ] [ y ] [ 1 ] [ 1 ] , pool_oil_deposits [ j ] [ y ] [ 1 ] [ 2 ] , mat_oil ) ;
1337: LD_VAR 0 6
1341: PUSH
1342: LD_VAR 0 5
1346: ARRAY
1347: PUSH
1348: LD_VAR 0 3
1352: ARRAY
1353: PUSH
1354: LD_INT 1
1356: ARRAY
1357: PUSH
1358: LD_INT 1
1360: ARRAY
1361: PPUSH
1362: LD_VAR 0 6
1366: PUSH
1367: LD_VAR 0 5
1371: ARRAY
1372: PUSH
1373: LD_VAR 0 3
1377: ARRAY
1378: PUSH
1379: LD_INT 1
1381: ARRAY
1382: PUSH
1383: LD_INT 2
1385: ARRAY
1386: PPUSH
1387: LD_INT 2
1389: PPUSH
1390: CALL_OW 62
// CreateDepositXY ( pool_oil_deposits [ j ] [ y ] [ 2 ] [ 1 ] , pool_oil_deposits [ j ] [ y ] [ 2 ] [ 2 ] , mat_oil ) ;
1394: LD_VAR 0 6
1398: PUSH
1399: LD_VAR 0 5
1403: ARRAY
1404: PUSH
1405: LD_VAR 0 3
1409: ARRAY
1410: PUSH
1411: LD_INT 2
1413: ARRAY
1414: PUSH
1415: LD_INT 1
1417: ARRAY
1418: PPUSH
1419: LD_VAR 0 6
1423: PUSH
1424: LD_VAR 0 5
1428: ARRAY
1429: PUSH
1430: LD_VAR 0 3
1434: ARRAY
1435: PUSH
1436: LD_INT 2
1438: ARRAY
1439: PUSH
1440: LD_INT 2
1442: ARRAY
1443: PPUSH
1444: LD_INT 2
1446: PPUSH
1447: CALL_OW 62
// pool_oil_deposits := Replace ( pool_oil_deposits , j , Delete ( pool_oil_deposits [ j ] , y ) ) ;
1451: LD_ADDR_VAR 0 6
1455: PUSH
1456: LD_VAR 0 6
1460: PPUSH
1461: LD_VAR 0 5
1465: PPUSH
1466: LD_VAR 0 6
1470: PUSH
1471: LD_VAR 0 5
1475: ARRAY
1476: PPUSH
1477: LD_VAR 0 3
1481: PPUSH
1482: CALL_OW 3
1486: PPUSH
1487: CALL_OW 1
1491: ST_TO_ADDR
// if i >= oil_abundance then
1492: LD_VAR 0 4
1496: PUSH
1497: LD_EXP 25
1501: GREATEREQUAL
1502: IFFALSE 1506
// break ;
1504: GO 1508
// end ;
1506: GO 1281
1508: POP
1509: POP
// end ;
1510: GO 1254
// i := 0 ;
1512: LD_ADDR_VAR 0 4
1516: PUSH
1517: LD_INT 0
1519: ST_TO_ADDR
// while i < sib_abundance do
1520: LD_VAR 0 4
1524: PUSH
1525: LD_EXP 26
1529: LESS
1530: IFFALSE 1778
// begin for j = 1 to pool_siberite_deposits do
1532: LD_ADDR_VAR 0 5
1536: PUSH
1537: DOUBLE
1538: LD_INT 1
1540: DEC
1541: ST_TO_ADDR
1542: LD_VAR 0 7
1546: PUSH
1547: FOR_TO
1548: IFFALSE 1774
// begin i := i + 1 ;
1550: LD_ADDR_VAR 0 4
1554: PUSH
1555: LD_VAR 0 4
1559: PUSH
1560: LD_INT 1
1562: PLUS
1563: ST_TO_ADDR
// x := length ( pool_siberite_deposits [ j ] ) ;
1564: LD_ADDR_VAR 0 2
1568: PUSH
1569: LD_VAR 0 7
1573: PUSH
1574: LD_VAR 0 5
1578: ARRAY
1579: PPUSH
1580: CALL 5248 0 1
1584: ST_TO_ADDR
// y := Rand ( 1 , x ) ;
1585: LD_ADDR_VAR 0 3
1589: PUSH
1590: LD_INT 1
1592: PPUSH
1593: LD_VAR 0 2
1597: PPUSH
1598: CALL_OW 12
1602: ST_TO_ADDR
// CreateDepositXY ( pool_siberite_deposits [ j ] [ y ] [ 1 ] [ 1 ] , pool_siberite_deposits [ j ] [ y ] [ 1 ] [ 2 ] , mat_siberit ) ;
1603: LD_VAR 0 7
1607: PUSH
1608: LD_VAR 0 5
1612: ARRAY
1613: PUSH
1614: LD_VAR 0 3
1618: ARRAY
1619: PUSH
1620: LD_INT 1
1622: ARRAY
1623: PUSH
1624: LD_INT 1
1626: ARRAY
1627: PPUSH
1628: LD_VAR 0 7
1632: PUSH
1633: LD_VAR 0 5
1637: ARRAY
1638: PUSH
1639: LD_VAR 0 3
1643: ARRAY
1644: PUSH
1645: LD_INT 1
1647: ARRAY
1648: PUSH
1649: LD_INT 2
1651: ARRAY
1652: PPUSH
1653: LD_INT 3
1655: PPUSH
1656: CALL_OW 62
// CreateDepositXY ( pool_siberite_deposits [ j ] [ y ] [ 2 ] [ 1 ] , pool_siberite_deposits [ j ] [ y ] [ 2 ] [ 2 ] , mat_siberit ) ;
1660: LD_VAR 0 7
1664: PUSH
1665: LD_VAR 0 5
1669: ARRAY
1670: PUSH
1671: LD_VAR 0 3
1675: ARRAY
1676: PUSH
1677: LD_INT 2
1679: ARRAY
1680: PUSH
1681: LD_INT 1
1683: ARRAY
1684: PPUSH
1685: LD_VAR 0 7
1689: PUSH
1690: LD_VAR 0 5
1694: ARRAY
1695: PUSH
1696: LD_VAR 0 3
1700: ARRAY
1701: PUSH
1702: LD_INT 2
1704: ARRAY
1705: PUSH
1706: LD_INT 2
1708: ARRAY
1709: PPUSH
1710: LD_INT 3
1712: PPUSH
1713: CALL_OW 62
// pool_siberite_deposits := Replace ( pool_siberite_deposits , j , Delete ( pool_siberite_deposits [ j ] , y ) ) ;
1717: LD_ADDR_VAR 0 7
1721: PUSH
1722: LD_VAR 0 7
1726: PPUSH
1727: LD_VAR 0 5
1731: PPUSH
1732: LD_VAR 0 7
1736: PUSH
1737: LD_VAR 0 5
1741: ARRAY
1742: PPUSH
1743: LD_VAR 0 3
1747: PPUSH
1748: CALL_OW 3
1752: PPUSH
1753: CALL_OW 1
1757: ST_TO_ADDR
// if i >= sib_abundance then
1758: LD_VAR 0 4
1762: PUSH
1763: LD_EXP 26
1767: GREATEREQUAL
1768: IFFALSE 1772
// break ;
1770: GO 1774
// end ;
1772: GO 1547
1774: POP
1775: POP
// end ;
1776: GO 1520
// end ;
1778: LD_VAR 0 1
1782: RET
// export function INIT_SetUpAllies ; var i , j ; begin
1783: LD_INT 0
1785: PPUSH
1786: PPUSH
1787: PPUSH
// for i = 1 to 8 do
1788: LD_ADDR_VAR 0 2
1792: PUSH
1793: DOUBLE
1794: LD_INT 1
1796: DEC
1797: ST_TO_ADDR
1798: LD_INT 8
1800: PUSH
1801: FOR_TO
1802: IFFALSE 1892
// for j = 1 to 8 do
1804: LD_ADDR_VAR 0 3
1808: PUSH
1809: DOUBLE
1810: LD_INT 1
1812: DEC
1813: ST_TO_ADDR
1814: LD_INT 8
1816: PUSH
1817: FOR_TO
1818: IFFALSE 1888
// begin if Side_Teams [ i ] = Side_Teams [ j ] then
1820: LD_EXP 5
1824: PUSH
1825: LD_VAR 0 2
1829: ARRAY
1830: PUSH
1831: LD_EXP 5
1835: PUSH
1836: LD_VAR 0 3
1840: ARRAY
1841: EQUAL
1842: IFFALSE 1866
// SetAttitude ( i , j , att_friend , true ) else
1844: LD_VAR 0 2
1848: PPUSH
1849: LD_VAR 0 3
1853: PPUSH
1854: LD_INT 1
1856: PPUSH
1857: LD_INT 1
1859: PPUSH
1860: CALL_OW 80
1864: GO 1886
// SetAttitude ( i , j , att_enemy , true ) ;
1866: LD_VAR 0 2
1870: PPUSH
1871: LD_VAR 0 3
1875: PPUSH
1876: LD_INT 2
1878: PPUSH
1879: LD_INT 1
1881: PPUSH
1882: CALL_OW 80
// end ;
1886: GO 1817
1888: POP
1889: POP
1890: GO 1801
1892: POP
1893: POP
// for i = 1 to 8 do
1894: LD_ADDR_VAR 0 2
1898: PUSH
1899: DOUBLE
1900: LD_INT 1
1902: DEC
1903: ST_TO_ADDR
1904: LD_INT 8
1906: PUSH
1907: FOR_TO
1908: IFFALSE 1932
// ChangeSideFog ( i , Side_Teams [ i ] ) ;
1910: LD_VAR 0 2
1914: PPUSH
1915: LD_EXP 5
1919: PUSH
1920: LD_VAR 0 2
1924: ARRAY
1925: PPUSH
1926: CALL_OW 343
1930: GO 1907
1932: POP
1933: POP
// FogOff ( 0 ) ;
1934: LD_INT 0
1936: PPUSH
1937: CALL_OW 344
// ResetFog ;
1941: CALL_OW 335
// if black_fow then
1945: LD_EXP 29
1949: IFFALSE 1980
// for i = 1 to 8 do
1951: LD_ADDR_VAR 0 2
1955: PUSH
1956: DOUBLE
1957: LD_INT 1
1959: DEC
1960: ST_TO_ADDR
1961: LD_INT 8
1963: PUSH
1964: FOR_TO
1965: IFFALSE 1978
// ClearAllFogForSide ( i ) ;
1967: LD_VAR 0 2
1971: PPUSH
1972: CALL_OW 520
1976: GO 1964
1978: POP
1979: POP
// end ;
1980: LD_VAR 0 1
1984: RET
// export function INIT_SetUpTechs ; var i ; begin
1985: LD_INT 0
1987: PPUSH
1988: PPUSH
// for i = 1 to 8 do
1989: LD_ADDR_VAR 0 2
1993: PUSH
1994: DOUBLE
1995: LD_INT 1
1997: DEC
1998: ST_TO_ADDR
1999: LD_INT 8
2001: PUSH
2002: FOR_TO
2003: IFFALSE 2066
// begin DisableAllTechs ( i ) ;
2005: LD_VAR 0 2
2009: PPUSH
2010: CALL 6247 0 1
// side_tech_lvl := Replace ( side_tech_lvl , i , starting_tech_lvl ) ;
2014: LD_ADDR_EXP 31
2018: PUSH
2019: LD_EXP 31
2023: PPUSH
2024: LD_VAR 0 2
2028: PPUSH
2029: LD_EXP 30
2033: PPUSH
2034: CALL_OW 1
2038: ST_TO_ADDR
// TechUpgrade ( starting_tech_lvl , Side_Nations [ i ] , i ) ;
2039: LD_EXP 30
2043: PPUSH
2044: LD_EXP 3
2048: PUSH
2049: LD_VAR 0 2
2053: ARRAY
2054: PPUSH
2055: LD_VAR 0 2
2059: PPUSH
2060: CALL 6749 0 3
// end ;
2064: GO 2002
2066: POP
2067: POP
// end ;
2068: LD_VAR 0 1
2072: RET
// export function INIT_ActivateLUAInterface ; var colour , tech , i ; begin
2073: LD_INT 0
2075: PPUSH
2076: PPUSH
2077: PPUSH
2078: PPUSH
// if Your_Side >= 1 and Your_Side <= 8 then
2079: LD_OWVAR 2
2083: PUSH
2084: LD_INT 1
2086: GREATEREQUAL
2087: PUSH
2088: LD_OWVAR 2
2092: PUSH
2093: LD_INT 8
2095: LESSEQUAL
2096: AND
2097: IFFALSE 2148
// begin ToLua ( LUA_UpdateSideInterface( & Your_Side & , & side_tech_lvl [ Your_Side ] & ); ) ;
2099: LD_STRING LUA_UpdateSideInterface(
2101: PUSH
2102: LD_OWVAR 2
2106: STR
2107: PUSH
2108: LD_STRING ,
2110: STR
2111: PUSH
2112: LD_EXP 31
2116: PUSH
2117: LD_OWVAR 2
2121: ARRAY
2122: STR
2123: PUSH
2124: LD_STRING );
2126: STR
2127: PPUSH
2128: CALL_OW 559
// ToLua ( StartSideInterface(); ) ;
2132: LD_STRING StartSideInterface();
2134: PPUSH
2135: CALL_OW 559
// ToLua ( LUA_NoDepot(); ) ;
2139: LD_STRING LUA_NoDepot();
2141: PPUSH
2142: CALL_OW 559
// end else
2146: GO 2267
// begin for i = 1 to 8 do
2148: LD_ADDR_VAR 0 4
2152: PUSH
2153: DOUBLE
2154: LD_INT 1
2156: DEC
2157: ST_TO_ADDR
2158: LD_INT 8
2160: PUSH
2161: FOR_TO
2162: IFFALSE 2258
// begin colour := i ;
2164: LD_ADDR_VAR 0 2
2168: PUSH
2169: LD_VAR 0 4
2173: ST_TO_ADDR
// tech := side_tech_lvl [ i ] ;
2174: LD_ADDR_VAR 0 3
2178: PUSH
2179: LD_EXP 31
2183: PUSH
2184: LD_VAR 0 4
2188: ARRAY
2189: ST_TO_ADDR
// if not Side_Positions [ i ] then
2190: LD_EXP 2
2194: PUSH
2195: LD_VAR 0 4
2199: ARRAY
2200: NOT
2201: IFFALSE 2219
// begin colour := 0 ;
2203: LD_ADDR_VAR 0 2
2207: PUSH
2208: LD_INT 0
2210: ST_TO_ADDR
// tech := "X" ;
2211: LD_ADDR_VAR 0 3
2215: PUSH
2216: LD_STRING "X"
2218: ST_TO_ADDR
// end ; ToLua ( LUA_RenderSpecLabels( & i & , & colour & , & tech & ); ) ;
2219: LD_STRING LUA_RenderSpecLabels(
2221: PUSH
2222: LD_VAR 0 4
2226: STR
2227: PUSH
2228: LD_STRING ,
2230: STR
2231: PUSH
2232: LD_VAR 0 2
2236: STR
2237: PUSH
2238: LD_STRING ,
2240: STR
2241: PUSH
2242: LD_VAR 0 3
2246: STR
2247: PUSH
2248: LD_STRING );
2250: STR
2251: PPUSH
2252: CALL_OW 559
// end ;
2256: GO 2161
2258: POP
2259: POP
// ToLua ( StartSpecInterface(); ) ;
2260: LD_STRING StartSpecInterface();
2262: PPUSH
2263: CALL_OW 559
// end ; end ;
2267: LD_VAR 0 1
2271: RET
// export function INIT_PrepareSquad ; var i , j , commander , profession , attributes , basic_skills , skill_levels , importance , stat_array ; begin
2272: LD_INT 0
2274: PPUSH
2275: PPUSH
2276: PPUSH
2277: PPUSH
2278: PPUSH
2279: PPUSH
2280: PPUSH
2281: PPUSH
2282: PPUSH
2283: PPUSH
// stat_array := [ ] ;
2284: LD_ADDR_VAR 0 10
2288: PUSH
2289: EMPTY
2290: ST_TO_ADDR
// for i = 1 to people_num [ 1 ] do
2291: LD_ADDR_VAR 0 2
2295: PUSH
2296: DOUBLE
2297: LD_INT 1
2299: DEC
2300: ST_TO_ADDR
2301: LD_EXP 19
2305: PUSH
2306: LD_INT 1
2308: ARRAY
2309: PUSH
2310: FOR_TO
2311: IFFALSE 2528
// begin commander := 1 ;
2313: LD_ADDR_VAR 0 4
2317: PUSH
2318: LD_INT 1
2320: ST_TO_ADDR
// profession := 1 ;
2321: LD_ADDR_VAR 0 5
2325: PUSH
2326: LD_INT 1
2328: ST_TO_ADDR
// attributes := [ Rand ( 10 , 15 ) , Rand ( 9 , 11 ) ] ;
2329: LD_ADDR_VAR 0 6
2333: PUSH
2334: LD_INT 10
2336: PPUSH
2337: LD_INT 15
2339: PPUSH
2340: CALL_OW 12
2344: PUSH
2345: LD_INT 9
2347: PPUSH
2348: LD_INT 11
2350: PPUSH
2351: CALL_OW 12
2355: PUSH
2356: EMPTY
2357: LIST
2358: LIST
2359: ST_TO_ADDR
// basic_skills := [ Rand ( 1 , 3 ) , 0 , 0 , 0 ] ;
2360: LD_ADDR_VAR 0 7
2364: PUSH
2365: LD_INT 1
2367: PPUSH
2368: LD_INT 3
2370: PPUSH
2371: CALL_OW 12
2375: PUSH
2376: LD_INT 0
2378: PUSH
2379: LD_INT 0
2381: PUSH
2382: LD_INT 0
2384: PUSH
2385: EMPTY
2386: LIST
2387: LIST
2388: LIST
2389: LIST
2390: ST_TO_ADDR
// skill_levels := [ basic_skills [ 1 ] + experience , Rand ( 0 , experience ) , Rand ( 0 , experience ) , Rand ( 0 , experience ) ] ;
2391: LD_ADDR_VAR 0 8
2395: PUSH
2396: LD_VAR 0 7
2400: PUSH
2401: LD_INT 1
2403: ARRAY
2404: PUSH
2405: LD_EXP 20
2409: PLUS
2410: PUSH
2411: LD_INT 0
2413: PPUSH
2414: LD_EXP 20
2418: PPUSH
2419: CALL_OW 12
2423: PUSH
2424: LD_INT 0
2426: PPUSH
2427: LD_EXP 20
2431: PPUSH
2432: CALL_OW 12
2436: PUSH
2437: LD_INT 0
2439: PPUSH
2440: LD_EXP 20
2444: PPUSH
2445: CALL_OW 12
2449: PUSH
2450: EMPTY
2451: LIST
2452: LIST
2453: LIST
2454: LIST
2455: ST_TO_ADDR
// importance := 105 ;
2456: LD_ADDR_VAR 0 9
2460: PUSH
2461: LD_INT 105
2463: ST_TO_ADDR
// stat_array := Replace ( stat_array , stat_array + 1 , [ commander , profession , attributes , basic_skills , skill_levels , importance ] ) ;
2464: LD_ADDR_VAR 0 10
2468: PUSH
2469: LD_VAR 0 10
2473: PPUSH
2474: LD_VAR 0 10
2478: PUSH
2479: LD_INT 1
2481: PLUS
2482: PPUSH
2483: LD_VAR 0 4
2487: PUSH
2488: LD_VAR 0 5
2492: PUSH
2493: LD_VAR 0 6
2497: PUSH
2498: LD_VAR 0 7
2502: PUSH
2503: LD_VAR 0 8
2507: PUSH
2508: LD_VAR 0 9
2512: PUSH
2513: EMPTY
2514: LIST
2515: LIST
2516: LIST
2517: LIST
2518: LIST
2519: LIST
2520: PPUSH
2521: CALL_OW 1
2525: ST_TO_ADDR
// end ;
2526: GO 2310
2528: POP
2529: POP
// for j = 2 to people_num do
2530: LD_ADDR_VAR 0 3
2534: PUSH
2535: DOUBLE
2536: LD_INT 2
2538: DEC
2539: ST_TO_ADDR
2540: LD_EXP 19
2544: PUSH
2545: FOR_TO
2546: IFFALSE 2867
// begin commander := 0 ;
2548: LD_ADDR_VAR 0 4
2552: PUSH
2553: LD_INT 0
2555: ST_TO_ADDR
// attributes := [ Rand ( 8 , 12 ) , Rand ( 8 , 12 ) ] ;
2556: LD_ADDR_VAR 0 6
2560: PUSH
2561: LD_INT 8
2563: PPUSH
2564: LD_INT 12
2566: PPUSH
2567: CALL_OW 12
2571: PUSH
2572: LD_INT 8
2574: PPUSH
2575: LD_INT 12
2577: PPUSH
2578: CALL_OW 12
2582: PUSH
2583: EMPTY
2584: LIST
2585: LIST
2586: ST_TO_ADDR
// importance := 0 ;
2587: LD_ADDR_VAR 0 9
2591: PUSH
2592: LD_INT 0
2594: ST_TO_ADDR
// profession := j - 1 ;
2595: LD_ADDR_VAR 0 5
2599: PUSH
2600: LD_VAR 0 3
2604: PUSH
2605: LD_INT 1
2607: MINUS
2608: ST_TO_ADDR
// for i = 1 to people_num [ j ] do
2609: LD_ADDR_VAR 0 2
2613: PUSH
2614: DOUBLE
2615: LD_INT 1
2617: DEC
2618: ST_TO_ADDR
2619: LD_EXP 19
2623: PUSH
2624: LD_VAR 0 3
2628: ARRAY
2629: PUSH
2630: FOR_TO
2631: IFFALSE 2863
// begin basic_skills := [ 0 , 0 , 0 , 0 ] ;
2633: LD_ADDR_VAR 0 7
2637: PUSH
2638: LD_INT 0
2640: PUSH
2641: LD_INT 0
2643: PUSH
2644: LD_INT 0
2646: PUSH
2647: LD_INT 0
2649: PUSH
2650: EMPTY
2651: LIST
2652: LIST
2653: LIST
2654: LIST
2655: ST_TO_ADDR
// skill_levels := [ Rand ( 0 , experience ) , Rand ( 0 , experience ) , Rand ( 0 , experience ) , Rand ( 0 , experience ) ] ;
2656: LD_ADDR_VAR 0 8
2660: PUSH
2661: LD_INT 0
2663: PPUSH
2664: LD_EXP 20
2668: PPUSH
2669: CALL_OW 12
2673: PUSH
2674: LD_INT 0
2676: PPUSH
2677: LD_EXP 20
2681: PPUSH
2682: CALL_OW 12
2686: PUSH
2687: LD_INT 0
2689: PPUSH
2690: LD_EXP 20
2694: PPUSH
2695: CALL_OW 12
2699: PUSH
2700: LD_INT 0
2702: PPUSH
2703: LD_EXP 20
2707: PPUSH
2708: CALL_OW 12
2712: PUSH
2713: EMPTY
2714: LIST
2715: LIST
2716: LIST
2717: LIST
2718: ST_TO_ADDR
// basic_skills := Replace ( basic_skills , j - 1 , Rand ( 0 , 2 ) ) ;
2719: LD_ADDR_VAR 0 7
2723: PUSH
2724: LD_VAR 0 7
2728: PPUSH
2729: LD_VAR 0 3
2733: PUSH
2734: LD_INT 1
2736: MINUS
2737: PPUSH
2738: LD_INT 0
2740: PPUSH
2741: LD_INT 2
2743: PPUSH
2744: CALL_OW 12
2748: PPUSH
2749: CALL_OW 1
2753: ST_TO_ADDR
// skill_levels := Replace ( skill_levels , j - 1 , basic_skills [ j - 1 ] + experience ) ;
2754: LD_ADDR_VAR 0 8
2758: PUSH
2759: LD_VAR 0 8
2763: PPUSH
2764: LD_VAR 0 3
2768: PUSH
2769: LD_INT 1
2771: MINUS
2772: PPUSH
2773: LD_VAR 0 7
2777: PUSH
2778: LD_VAR 0 3
2782: PUSH
2783: LD_INT 1
2785: MINUS
2786: ARRAY
2787: PUSH
2788: LD_EXP 20
2792: PLUS
2793: PPUSH
2794: CALL_OW 1
2798: ST_TO_ADDR
// stat_array := Replace ( stat_array , stat_array + 1 , [ commander , profession , attributes , basic_skills , skill_levels , importance ] ) ;
2799: LD_ADDR_VAR 0 10
2803: PUSH
2804: LD_VAR 0 10
2808: PPUSH
2809: LD_VAR 0 10
2813: PUSH
2814: LD_INT 1
2816: PLUS
2817: PPUSH
2818: LD_VAR 0 4
2822: PUSH
2823: LD_VAR 0 5
2827: PUSH
2828: LD_VAR 0 6
2832: PUSH
2833: LD_VAR 0 7
2837: PUSH
2838: LD_VAR 0 8
2842: PUSH
2843: LD_VAR 0 9
2847: PUSH
2848: EMPTY
2849: LIST
2850: LIST
2851: LIST
2852: LIST
2853: LIST
2854: LIST
2855: PPUSH
2856: CALL_OW 1
2860: ST_TO_ADDR
// end ;
2861: GO 2630
2863: POP
2864: POP
// end ;
2865: GO 2545
2867: POP
2868: POP
// composition := stat_array ;
2869: LD_ADDR_EXP 43
2873: PUSH
2874: LD_VAR 0 10
2878: ST_TO_ADDR
// end ;
2879: LD_VAR 0 1
2883: RET
// export function INIT_PrepareReinforcements ; begin
2884: LD_INT 0
2886: PPUSH
// new_character_EON := [ 0 , Rand ( 1 , 4 ) , [ Rand ( 8 , 12 ) , Rand ( 8 , 12 ) ] , [ 0 , 0 , 0 , 0 ] , [ Rand ( 0 , experience ) , Rand ( 0 , experience ) , Rand ( 0 , experience ) , Rand ( 0 , experience ) ] , 0 ] ;
2887: LD_ADDR_EXP 44
2891: PUSH
2892: LD_INT 0
2894: PUSH
2895: LD_INT 1
2897: PPUSH
2898: LD_INT 4
2900: PPUSH
2901: CALL_OW 12
2905: PUSH
2906: LD_INT 8
2908: PPUSH
2909: LD_INT 12
2911: PPUSH
2912: CALL_OW 12
2916: PUSH
2917: LD_INT 8
2919: PPUSH
2920: LD_INT 12
2922: PPUSH
2923: CALL_OW 12
2927: PUSH
2928: EMPTY
2929: LIST
2930: LIST
2931: PUSH
2932: LD_INT 0
2934: PUSH
2935: LD_INT 0
2937: PUSH
2938: LD_INT 0
2940: PUSH
2941: LD_INT 0
2943: PUSH
2944: EMPTY
2945: LIST
2946: LIST
2947: LIST
2948: LIST
2949: PUSH
2950: LD_INT 0
2952: PPUSH
2953: LD_EXP 20
2957: PPUSH
2958: CALL_OW 12
2962: PUSH
2963: LD_INT 0
2965: PPUSH
2966: LD_EXP 20
2970: PPUSH
2971: CALL_OW 12
2975: PUSH
2976: LD_INT 0
2978: PPUSH
2979: LD_EXP 20
2983: PPUSH
2984: CALL_OW 12
2988: PUSH
2989: LD_INT 0
2991: PPUSH
2992: LD_EXP 20
2996: PPUSH
2997: CALL_OW 12
3001: PUSH
3002: EMPTY
3003: LIST
3004: LIST
3005: LIST
3006: LIST
3007: PUSH
3008: LD_INT 0
3010: PUSH
3011: EMPTY
3012: LIST
3013: LIST
3014: LIST
3015: LIST
3016: LIST
3017: LIST
3018: ST_TO_ADDR
// new_character_reinforcements := [ 0 , 1 , [ Rand ( 8 , 12 ) , Rand ( 8 , 12 ) ] , [ 0 , 0 , 0 , 0 ] , [ Rand ( 0 , experience ) , Rand ( 0 , experience ) , Rand ( 0 , experience ) , Rand ( 0 , experience ) ] , 0 ] ;
3019: LD_ADDR_EXP 45
3023: PUSH
3024: LD_INT 0
3026: PUSH
3027: LD_INT 1
3029: PUSH
3030: LD_INT 8
3032: PPUSH
3033: LD_INT 12
3035: PPUSH
3036: CALL_OW 12
3040: PUSH
3041: LD_INT 8
3043: PPUSH
3044: LD_INT 12
3046: PPUSH
3047: CALL_OW 12
3051: PUSH
3052: EMPTY
3053: LIST
3054: LIST
3055: PUSH
3056: LD_INT 0
3058: PUSH
3059: LD_INT 0
3061: PUSH
3062: LD_INT 0
3064: PUSH
3065: LD_INT 0
3067: PUSH
3068: EMPTY
3069: LIST
3070: LIST
3071: LIST
3072: LIST
3073: PUSH
3074: LD_INT 0
3076: PPUSH
3077: LD_EXP 20
3081: PPUSH
3082: CALL_OW 12
3086: PUSH
3087: LD_INT 0
3089: PPUSH
3090: LD_EXP 20
3094: PPUSH
3095: CALL_OW 12
3099: PUSH
3100: LD_INT 0
3102: PPUSH
3103: LD_EXP 20
3107: PPUSH
3108: CALL_OW 12
3112: PUSH
3113: LD_INT 0
3115: PPUSH
3116: LD_EXP 20
3120: PPUSH
3121: CALL_OW 12
3125: PUSH
3126: EMPTY
3127: LIST
3128: LIST
3129: LIST
3130: LIST
3131: PUSH
3132: LD_INT 0
3134: PUSH
3135: EMPTY
3136: LIST
3137: LIST
3138: LIST
3139: LIST
3140: LIST
3141: LIST
3142: ST_TO_ADDR
// end ;
3143: LD_VAR 0 1
3147: RET
// export function INIT_SpawnStartingUnits ; var i , j , human , vehicle , crates , oil , siberite , cargo_capacity , vehicle_amount ; begin
3148: LD_INT 0
3150: PPUSH
3151: PPUSH
3152: PPUSH
3153: PPUSH
3154: PPUSH
3155: PPUSH
3156: PPUSH
3157: PPUSH
3158: PPUSH
3159: PPUSH
// side_soldiers := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
3160: LD_ADDR_EXP 46
3164: PUSH
3165: EMPTY
3166: PUSH
3167: EMPTY
3168: PUSH
3169: EMPTY
3170: PUSH
3171: EMPTY
3172: PUSH
3173: EMPTY
3174: PUSH
3175: EMPTY
3176: PUSH
3177: EMPTY
3178: PUSH
3179: EMPTY
3180: PUSH
3181: EMPTY
3182: LIST
3183: LIST
3184: LIST
3185: LIST
3186: LIST
3187: LIST
3188: LIST
3189: LIST
3190: ST_TO_ADDR
// side_vehicles := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
3191: LD_ADDR_EXP 49
3195: PUSH
3196: EMPTY
3197: PUSH
3198: EMPTY
3199: PUSH
3200: EMPTY
3201: PUSH
3202: EMPTY
3203: PUSH
3204: EMPTY
3205: PUSH
3206: EMPTY
3207: PUSH
3208: EMPTY
3209: PUSH
3210: EMPTY
3211: PUSH
3212: EMPTY
3213: LIST
3214: LIST
3215: LIST
3216: LIST
3217: LIST
3218: LIST
3219: LIST
3220: LIST
3221: ST_TO_ADDR
// vehicle_amount := 0 ;
3222: LD_ADDR_VAR 0 10
3226: PUSH
3227: LD_INT 0
3229: ST_TO_ADDR
// crates := starting_resources [ 1 ] ;
3230: LD_ADDR_VAR 0 6
3234: PUSH
3235: LD_EXP 21
3239: PUSH
3240: LD_INT 1
3242: ARRAY
3243: ST_TO_ADDR
// oil := starting_resources [ 2 ] ;
3244: LD_ADDR_VAR 0 7
3248: PUSH
3249: LD_EXP 21
3253: PUSH
3254: LD_INT 2
3256: ARRAY
3257: ST_TO_ADDR
// siberite := starting_resources [ 3 ] ;
3258: LD_ADDR_VAR 0 8
3262: PUSH
3263: LD_EXP 21
3267: PUSH
3268: LD_INT 3
3270: ARRAY
3271: ST_TO_ADDR
// cargo_capacity := crates + oil + siberite ;
3272: LD_ADDR_VAR 0 9
3276: PUSH
3277: LD_VAR 0 6
3281: PUSH
3282: LD_VAR 0 7
3286: PLUS
3287: PUSH
3288: LD_VAR 0 8
3292: PLUS
3293: ST_TO_ADDR
// if cargo_capacity > 0 then
3294: LD_VAR 0 9
3298: PUSH
3299: LD_INT 0
3301: GREATER
3302: IFFALSE 3344
// begin while cargo_capacity > 0 do
3304: LD_VAR 0 9
3308: PUSH
3309: LD_INT 0
3311: GREATER
3312: IFFALSE 3344
// begin vehicle_amount := vehicle_amount + 1 ;
3314: LD_ADDR_VAR 0 10
3318: PUSH
3319: LD_VAR 0 10
3323: PUSH
3324: LD_INT 1
3326: PLUS
3327: ST_TO_ADDR
// cargo_capacity := cargo_capacity - 100 ;
3328: LD_ADDR_VAR 0 9
3332: PUSH
3333: LD_VAR 0 9
3337: PUSH
3338: LD_INT 100
3340: MINUS
3341: ST_TO_ADDR
// end ;
3342: GO 3304
// end ; for i = 1 to 8 do
3344: LD_ADDR_VAR 0 2
3348: PUSH
3349: DOUBLE
3350: LD_INT 1
3352: DEC
3353: ST_TO_ADDR
3354: LD_INT 8
3356: PUSH
3357: FOR_TO
3358: IFFALSE 4054
// begin if not side_isalive [ i ] then
3360: LD_EXP 53
3364: PUSH
3365: LD_VAR 0 2
3369: ARRAY
3370: NOT
3371: IFFALSE 3375
// continue ;
3373: GO 3357
// for j = 1 to composition do
3375: LD_ADDR_VAR 0 3
3379: PUSH
3380: DOUBLE
3381: LD_INT 1
3383: DEC
3384: ST_TO_ADDR
3385: LD_EXP 43
3389: PUSH
3390: FOR_TO
3391: IFFALSE 3463
// begin human := PrepareCharacters ( i , position_spawn_direction , composition [ j ] ) ;
3393: LD_ADDR_VAR 0 4
3397: PUSH
3398: LD_VAR 0 2
3402: PPUSH
3403: LD_EXP 34
3407: PPUSH
3408: LD_EXP 43
3412: PUSH
3413: LD_VAR 0 3
3417: ARRAY
3418: PPUSH
3419: CALL 5364 0 3
3423: ST_TO_ADDR
// side_soldiers := Replace ( side_soldiers , i , side_soldiers [ i ] ^ human ) ;
3424: LD_ADDR_EXP 46
3428: PUSH
3429: LD_EXP 46
3433: PPUSH
3434: LD_VAR 0 2
3438: PPUSH
3439: LD_EXP 46
3443: PUSH
3444: LD_VAR 0 2
3448: ARRAY
3449: PUSH
3450: LD_VAR 0 4
3454: ADD
3455: PPUSH
3456: CALL_OW 1
3460: ST_TO_ADDR
// end ;
3461: GO 3390
3463: POP
3464: POP
// crates := starting_resources [ 1 ] ;
3465: LD_ADDR_VAR 0 6
3469: PUSH
3470: LD_EXP 21
3474: PUSH
3475: LD_INT 1
3477: ARRAY
3478: ST_TO_ADDR
// oil := starting_resources [ 2 ] ;
3479: LD_ADDR_VAR 0 7
3483: PUSH
3484: LD_EXP 21
3488: PUSH
3489: LD_INT 2
3491: ARRAY
3492: ST_TO_ADDR
// siberite := starting_resources [ 3 ] ;
3493: LD_ADDR_VAR 0 8
3497: PUSH
3498: LD_EXP 21
3502: PUSH
3503: LD_INT 3
3505: ARRAY
3506: ST_TO_ADDR
// for j = 1 to vehicle_amount do
3507: LD_ADDR_VAR 0 3
3511: PUSH
3512: DOUBLE
3513: LD_INT 1
3515: DEC
3516: ST_TO_ADDR
3517: LD_VAR 0 10
3521: PUSH
3522: FOR_TO
3523: IFFALSE 3806
// begin vehicle := PrepareVehicles ( i , position_spawn_direction ) ;
3525: LD_ADDR_VAR 0 5
3529: PUSH
3530: LD_VAR 0 2
3534: PPUSH
3535: LD_EXP 34
3539: PPUSH
3540: CALL 5578 0 2
3544: ST_TO_ADDR
// if crates >= 100 then
3545: LD_VAR 0 6
3549: PUSH
3550: LD_INT 100
3552: GREATEREQUAL
3553: IFFALSE 3586
// begin AddCargo ( vehicle , mat_cans , 100 ) ;
3555: LD_VAR 0 5
3559: PPUSH
3560: LD_INT 1
3562: PPUSH
3563: LD_INT 100
3565: PPUSH
3566: CALL_OW 291
// crates := crates - 100 ;
3570: LD_ADDR_VAR 0 6
3574: PUSH
3575: LD_VAR 0 6
3579: PUSH
3580: LD_INT 100
3582: MINUS
3583: ST_TO_ADDR
// end else
3584: GO 3767
// begin AddCargo ( vehicle , mat_cans , crates ) ;
3586: LD_VAR 0 5
3590: PPUSH
3591: LD_INT 1
3593: PPUSH
3594: LD_VAR 0 6
3598: PPUSH
3599: CALL_OW 291
// if oil >= 100 then
3603: LD_VAR 0 7
3607: PUSH
3608: LD_INT 100
3610: GREATEREQUAL
3611: IFFALSE 3664
// begin AddCargo ( vehicle , mat_oil , 100 - crates ) ;
3613: LD_VAR 0 5
3617: PPUSH
3618: LD_INT 2
3620: PPUSH
3621: LD_INT 100
3623: PUSH
3624: LD_VAR 0 6
3628: MINUS
3629: PPUSH
3630: CALL_OW 291
// oil := oil - 100 + crates ;
3634: LD_ADDR_VAR 0 7
3638: PUSH
3639: LD_VAR 0 7
3643: PUSH
3644: LD_INT 100
3646: MINUS
3647: PUSH
3648: LD_VAR 0 6
3652: PLUS
3653: ST_TO_ADDR
// crates := 0 ;
3654: LD_ADDR_VAR 0 6
3658: PUSH
3659: LD_INT 0
3661: ST_TO_ADDR
// end else
3662: GO 3767
// begin AddCargo ( vehicle , mat_oil , oil ) ;
3664: LD_VAR 0 5
3668: PPUSH
3669: LD_INT 2
3671: PPUSH
3672: LD_VAR 0 7
3676: PPUSH
3677: CALL_OW 291
// if siberite >= 100 then
3681: LD_VAR 0 8
3685: PUSH
3686: LD_INT 100
3688: GREATEREQUAL
3689: IFFALSE 3742
// begin AddCargo ( vehicle , mat_siberit , 100 - oil ) ;
3691: LD_VAR 0 5
3695: PPUSH
3696: LD_INT 3
3698: PPUSH
3699: LD_INT 100
3701: PUSH
3702: LD_VAR 0 7
3706: MINUS
3707: PPUSH
3708: CALL_OW 291
// siberite := siberite - 100 + oil ;
3712: LD_ADDR_VAR 0 8
3716: PUSH
3717: LD_VAR 0 8
3721: PUSH
3722: LD_INT 100
3724: MINUS
3725: PUSH
3726: LD_VAR 0 7
3730: PLUS
3731: ST_TO_ADDR
// oil := 0 ;
3732: LD_ADDR_VAR 0 7
3736: PUSH
3737: LD_INT 0
3739: ST_TO_ADDR
// end else
3740: GO 3767
// begin AddCargo ( vehicle , mat_siberit , siberite ) ;
3742: LD_VAR 0 5
3746: PPUSH
3747: LD_INT 3
3749: PPUSH
3750: LD_VAR 0 8
3754: PPUSH
3755: CALL_OW 291
// siberite := 0 ;
3759: LD_ADDR_VAR 0 8
3763: PUSH
3764: LD_INT 0
3766: ST_TO_ADDR
// end ; end ; end ; side_vehicles := Replace ( side_vehicles , i , side_vehicles [ i ] ^ vehicle ) ;
3767: LD_ADDR_EXP 49
3771: PUSH
3772: LD_EXP 49
3776: PPUSH
3777: LD_VAR 0 2
3781: PPUSH
3782: LD_EXP 49
3786: PUSH
3787: LD_VAR 0 2
3791: ARRAY
3792: PUSH
3793: LD_VAR 0 5
3797: ADD
3798: PPUSH
3799: CALL_OW 1
3803: ST_TO_ADDR
// end ;
3804: GO 3522
3806: POP
3807: POP
// for j = 1 to side_vehicles [ i ] do
3808: LD_ADDR_VAR 0 3
3812: PUSH
3813: DOUBLE
3814: LD_INT 1
3816: DEC
3817: ST_TO_ADDR
3818: LD_EXP 49
3822: PUSH
3823: LD_VAR 0 2
3827: ARRAY
3828: PUSH
3829: FOR_TO
3830: IFFALSE 3912
// PlaceHumanInUnit ( side_soldiers [ i ] [ people_num [ 1 ] + people_num [ 2 ] + people_num [ 3 ] + people_num [ 4 ] - j ] , side_vehicles [ i ] [ j ] ) ;
3832: LD_EXP 46
3836: PUSH
3837: LD_VAR 0 2
3841: ARRAY
3842: PUSH
3843: LD_EXP 19
3847: PUSH
3848: LD_INT 1
3850: ARRAY
3851: PUSH
3852: LD_EXP 19
3856: PUSH
3857: LD_INT 2
3859: ARRAY
3860: PLUS
3861: PUSH
3862: LD_EXP 19
3866: PUSH
3867: LD_INT 3
3869: ARRAY
3870: PLUS
3871: PUSH
3872: LD_EXP 19
3876: PUSH
3877: LD_INT 4
3879: ARRAY
3880: PLUS
3881: PUSH
3882: LD_VAR 0 3
3886: MINUS
3887: ARRAY
3888: PPUSH
3889: LD_EXP 49
3893: PUSH
3894: LD_VAR 0 2
3898: ARRAY
3899: PUSH
3900: LD_VAR 0 3
3904: ARRAY
3905: PPUSH
3906: CALL_OW 52
3910: GO 3829
3912: POP
3913: POP
// for j = 1 to side_soldiers [ i ] do
3914: LD_ADDR_VAR 0 3
3918: PUSH
3919: DOUBLE
3920: LD_INT 1
3922: DEC
3923: ST_TO_ADDR
3924: LD_EXP 46
3928: PUSH
3929: LD_VAR 0 2
3933: ARRAY
3934: PUSH
3935: FOR_TO
3936: IFFALSE 3981
// PlaceUnitArea ( side_soldiers [ i ] [ j ] , position_spawn_area [ Side_Positions [ i ] ] , false ) ;
3938: LD_EXP 46
3942: PUSH
3943: LD_VAR 0 2
3947: ARRAY
3948: PUSH
3949: LD_VAR 0 3
3953: ARRAY
3954: PPUSH
3955: LD_EXP 35
3959: PUSH
3960: LD_EXP 2
3964: PUSH
3965: LD_VAR 0 2
3969: ARRAY
3970: ARRAY
3971: PPUSH
3972: LD_INT 0
3974: PPUSH
3975: CALL_OW 49
3979: GO 3935
3981: POP
3982: POP
// for j = 1 to side_vehicles [ i ] do
3983: LD_ADDR_VAR 0 3
3987: PUSH
3988: DOUBLE
3989: LD_INT 1
3991: DEC
3992: ST_TO_ADDR
3993: LD_EXP 49
3997: PUSH
3998: LD_VAR 0 2
4002: ARRAY
4003: PUSH
4004: FOR_TO
4005: IFFALSE 4050
// PlaceUnitArea ( side_vehicles [ i ] [ j ] , position_spawn_area [ Side_Positions [ i ] ] , false ) ;
4007: LD_EXP 49
4011: PUSH
4012: LD_VAR 0 2
4016: ARRAY
4017: PUSH
4018: LD_VAR 0 3
4022: ARRAY
4023: PPUSH
4024: LD_EXP 35
4028: PUSH
4029: LD_EXP 2
4033: PUSH
4034: LD_VAR 0 2
4038: ARRAY
4039: ARRAY
4040: PPUSH
4041: LD_INT 0
4043: PPUSH
4044: CALL_OW 49
4048: GO 4004
4050: POP
4051: POP
// end ;
4052: GO 3357
4054: POP
4055: POP
// end ;
4056: LD_VAR 0 1
4060: RET
// export function INIT_CameraFocus ; begin
4061: LD_INT 0
4063: PPUSH
// if Your_Side >= 1 and Your_Side <= 8 then
4064: LD_OWVAR 2
4068: PUSH
4069: LD_INT 1
4071: GREATEREQUAL
4072: PUSH
4073: LD_OWVAR 2
4077: PUSH
4078: LD_INT 8
4080: LESSEQUAL
4081: AND
4082: IFFALSE 4101
// CenterNowOnUnits ( side_soldiers [ Your_Side ] ) else
4084: LD_EXP 46
4088: PUSH
4089: LD_OWVAR 2
4093: ARRAY
4094: PPUSH
4095: CALL_OW 87
4099: GO 4118
// begin CenterNowOnXY ( 164 , 129 ) ;
4101: LD_INT 164
4103: PPUSH
4104: LD_INT 129
4106: PPUSH
4107: CALL_OW 86
// FogOff ( 1 ) ;
4111: LD_INT 1
4113: PPUSH
4114: CALL_OW 344
// end ; end ; end_of_file
4118: LD_VAR 0 1
4122: RET
// export Game_Type , Side_Positions , Side_Nations , Side_Comps , Side_Teams , Teams , Choice_people_num , Choice_experience , Choice_starting_resources , Choice_crate_spawn_rate , Choice_people_spawn_rate , Choice_spawn_fluctuation , Choice_oil_abundance , Choice_sib_abundance , Choice_victory_cond , Choice_reinforce_cost , Choice_black_FoW , Choice_starting_tech_lvl , people_num , experience , starting_resources , crate_spawn_rate , people_spawn_rate , spawn_fluctuation , oil_abundance , sib_abundance , victory_cond , reinforce_cost , black_fow , starting_tech_lvl , side_tech_lvl , available_oil_deposits , available_siberite_deposits , position_spawn_direction , position_spawn_area , position_drop_zones , fluctuation_base_crates , fluctuation_base_humans , fluctuation_modifier_crates , fluctuation_modifier_humans , current_spawn_rate , past_spawn_rate , composition , new_character_EON , new_character_reinforcements , side_soldiers , side_soldier_count , soldier_limit , side_vehicles , CLOCK_crate_spawn , CLOCK_human_spawn , CLOCK_fluctuation , side_isalive ; export function INIT_LoadMapParams ; begin
4123: LD_INT 0
4125: PPUSH
// people_num := [ [ 1 , 1 , 1 , 1 , 1 ] , [ 1 , 2 , 2 , 2 , 2 ] , [ 1 , 3 , 3 , 3 , 3 ] , [ 1 , 4 , 4 , 4 , 4 ] ] ;
4126: LD_ADDR_EXP 19
4130: PUSH
4131: LD_INT 1
4133: PUSH
4134: LD_INT 1
4136: PUSH
4137: LD_INT 1
4139: PUSH
4140: LD_INT 1
4142: PUSH
4143: LD_INT 1
4145: PUSH
4146: EMPTY
4147: LIST
4148: LIST
4149: LIST
4150: LIST
4151: LIST
4152: PUSH
4153: LD_INT 1
4155: PUSH
4156: LD_INT 2
4158: PUSH
4159: LD_INT 2
4161: PUSH
4162: LD_INT 2
4164: PUSH
4165: LD_INT 2
4167: PUSH
4168: EMPTY
4169: LIST
4170: LIST
4171: LIST
4172: LIST
4173: LIST
4174: PUSH
4175: LD_INT 1
4177: PUSH
4178: LD_INT 3
4180: PUSH
4181: LD_INT 3
4183: PUSH
4184: LD_INT 3
4186: PUSH
4187: LD_INT 3
4189: PUSH
4190: EMPTY
4191: LIST
4192: LIST
4193: LIST
4194: LIST
4195: LIST
4196: PUSH
4197: LD_INT 1
4199: PUSH
4200: LD_INT 4
4202: PUSH
4203: LD_INT 4
4205: PUSH
4206: LD_INT 4
4208: PUSH
4209: LD_INT 4
4211: PUSH
4212: EMPTY
4213: LIST
4214: LIST
4215: LIST
4216: LIST
4217: LIST
4218: PUSH
4219: EMPTY
4220: LIST
4221: LIST
4222: LIST
4223: LIST
4224: ST_TO_ADDR
// experience := [ 1 , 2 , 4 , 5 ] ;
4225: LD_ADDR_EXP 20
4229: PUSH
4230: LD_INT 1
4232: PUSH
4233: LD_INT 2
4235: PUSH
4236: LD_INT 4
4238: PUSH
4239: LD_INT 5
4241: PUSH
4242: EMPTY
4243: LIST
4244: LIST
4245: LIST
4246: LIST
4247: ST_TO_ADDR
// starting_resources := [ [ 0 , 0 , 0 ] , [ 50 , 30 , 0 ] , [ 100 , 30 , 0 ] , [ 150 , 50 , 0 ] ] ;
4248: LD_ADDR_EXP 21
4252: PUSH
4253: LD_INT 0
4255: PUSH
4256: LD_INT 0
4258: PUSH
4259: LD_INT 0
4261: PUSH
4262: EMPTY
4263: LIST
4264: LIST
4265: LIST
4266: PUSH
4267: LD_INT 50
4269: PUSH
4270: LD_INT 30
4272: PUSH
4273: LD_INT 0
4275: PUSH
4276: EMPTY
4277: LIST
4278: LIST
4279: LIST
4280: PUSH
4281: LD_INT 100
4283: PUSH
4284: LD_INT 30
4286: PUSH
4287: LD_INT 0
4289: PUSH
4290: EMPTY
4291: LIST
4292: LIST
4293: LIST
4294: PUSH
4295: LD_INT 150
4297: PUSH
4298: LD_INT 50
4300: PUSH
4301: LD_INT 0
4303: PUSH
4304: EMPTY
4305: LIST
4306: LIST
4307: LIST
4308: PUSH
4309: EMPTY
4310: LIST
4311: LIST
4312: LIST
4313: LIST
4314: ST_TO_ADDR
// crate_spawn_rate := [ 2 2$00 , 1 1$30 , 1 1$00 , 0 0$30 ] ;
4315: LD_ADDR_EXP 22
4319: PUSH
4320: LD_INT 4200
4322: PUSH
4323: LD_INT 3150
4325: PUSH
4326: LD_INT 2100
4328: PUSH
4329: LD_INT 1050
4331: PUSH
4332: EMPTY
4333: LIST
4334: LIST
4335: LIST
4336: LIST
4337: ST_TO_ADDR
// people_spawn_rate := [ 0 , 15 15$0 , 10 10$0 , 5 5$0 ] ;
4338: LD_ADDR_EXP 23
4342: PUSH
4343: LD_INT 0
4345: PUSH
4346: LD_INT 31500
4348: PUSH
4349: LD_INT 21000
4351: PUSH
4352: LD_INT 10500
4354: PUSH
4355: EMPTY
4356: LIST
4357: LIST
4358: LIST
4359: LIST
4360: ST_TO_ADDR
// spawn_fluctuation := [ 0 , 5 5$0 , 2 2$30 ] ;
4361: LD_ADDR_EXP 24
4365: PUSH
4366: LD_INT 0
4368: PUSH
4369: LD_INT 10500
4371: PUSH
4372: LD_INT 5250
4374: PUSH
4375: EMPTY
4376: LIST
4377: LIST
4378: LIST
4379: ST_TO_ADDR
// oil_abundance := [ 4 , 6 , 8 ] ;
4380: LD_ADDR_EXP 25
4384: PUSH
4385: LD_INT 4
4387: PUSH
4388: LD_INT 6
4390: PUSH
4391: LD_INT 8
4393: PUSH
4394: EMPTY
4395: LIST
4396: LIST
4397: LIST
4398: ST_TO_ADDR
// sib_abundance := [ 2 , 3 , 4 ] ;
4399: LD_ADDR_EXP 26
4403: PUSH
4404: LD_INT 2
4406: PUSH
4407: LD_INT 3
4409: PUSH
4410: LD_INT 4
4412: PUSH
4413: EMPTY
4414: LIST
4415: LIST
4416: LIST
4417: ST_TO_ADDR
// victory_cond := [ 0 , 200 , 400 , 800 ] ;
4418: LD_ADDR_EXP 27
4422: PUSH
4423: LD_INT 0
4425: PUSH
4426: LD_INT 200
4428: PUSH
4429: LD_INT 400
4431: PUSH
4432: LD_INT 800
4434: PUSH
4435: EMPTY
4436: LIST
4437: LIST
4438: LIST
4439: LIST
4440: ST_TO_ADDR
// reinforce_cost := [ 0.5 , 1 , 1.5 , 2 ] ;
4441: LD_ADDR_EXP 28
4445: PUSH
4446: LD_REAL  5.00000000000000E-0001
4449: PUSH
4450: LD_INT 1
4452: PUSH
4453: LD_REAL  1.50000000000000E+0000
4456: PUSH
4457: LD_INT 2
4459: PUSH
4460: EMPTY
4461: LIST
4462: LIST
4463: LIST
4464: LIST
4465: ST_TO_ADDR
// available_oil_deposits := [ [ [ [ 12 , 17 ] , [ 317 , 242 ] ] , [ [ 46 , 47 ] , [ 283 , 211 ] ] , [ [ 34 , 12 ] , [ 295 , 247 ] ] , [ [ 72 , 48 ] , [ 257 , 211 ] ] , [ [ 95 , 78 ] , [ 235 , 182 ] ] ] , [ [ [ 89 , 28 ] , [ 241 , 232 ] ] , [ [ 118 , 41 ] , [ 211 , 218 ] ] , [ [ 125 , 7 ] , [ 203 , 252 ] ] , [ [ 166 , 80 ] , [ 163 , 179 ] ] ] , [ [ [ 192 , 57 ] , [ 137 , 202 ] ] , [ [ 197 , 6 ] , [ 150 , 253 ] ] , [ [ 214 , 66 ] , [ 115 , 192 ] ] , [ [ 208 , 25 ] , [ 121 , 234 ] ] , [ [ 242 , 89 ] , [ 87 , 170 ] ] ] ] ;
4466: LD_ADDR_EXP 32
4470: PUSH
4471: LD_INT 12
4473: PUSH
4474: LD_INT 17
4476: PUSH
4477: EMPTY
4478: LIST
4479: LIST
4480: PUSH
4481: LD_INT 317
4483: PUSH
4484: LD_INT 242
4486: PUSH
4487: EMPTY
4488: LIST
4489: LIST
4490: PUSH
4491: EMPTY
4492: LIST
4493: LIST
4494: PUSH
4495: LD_INT 46
4497: PUSH
4498: LD_INT 47
4500: PUSH
4501: EMPTY
4502: LIST
4503: LIST
4504: PUSH
4505: LD_INT 283
4507: PUSH
4508: LD_INT 211
4510: PUSH
4511: EMPTY
4512: LIST
4513: LIST
4514: PUSH
4515: EMPTY
4516: LIST
4517: LIST
4518: PUSH
4519: LD_INT 34
4521: PUSH
4522: LD_INT 12
4524: PUSH
4525: EMPTY
4526: LIST
4527: LIST
4528: PUSH
4529: LD_INT 295
4531: PUSH
4532: LD_INT 247
4534: PUSH
4535: EMPTY
4536: LIST
4537: LIST
4538: PUSH
4539: EMPTY
4540: LIST
4541: LIST
4542: PUSH
4543: LD_INT 72
4545: PUSH
4546: LD_INT 48
4548: PUSH
4549: EMPTY
4550: LIST
4551: LIST
4552: PUSH
4553: LD_INT 257
4555: PUSH
4556: LD_INT 211
4558: PUSH
4559: EMPTY
4560: LIST
4561: LIST
4562: PUSH
4563: EMPTY
4564: LIST
4565: LIST
4566: PUSH
4567: LD_INT 95
4569: PUSH
4570: LD_INT 78
4572: PUSH
4573: EMPTY
4574: LIST
4575: LIST
4576: PUSH
4577: LD_INT 235
4579: PUSH
4580: LD_INT 182
4582: PUSH
4583: EMPTY
4584: LIST
4585: LIST
4586: PUSH
4587: EMPTY
4588: LIST
4589: LIST
4590: PUSH
4591: EMPTY
4592: LIST
4593: LIST
4594: LIST
4595: LIST
4596: LIST
4597: PUSH
4598: LD_INT 89
4600: PUSH
4601: LD_INT 28
4603: PUSH
4604: EMPTY
4605: LIST
4606: LIST
4607: PUSH
4608: LD_INT 241
4610: PUSH
4611: LD_INT 232
4613: PUSH
4614: EMPTY
4615: LIST
4616: LIST
4617: PUSH
4618: EMPTY
4619: LIST
4620: LIST
4621: PUSH
4622: LD_INT 118
4624: PUSH
4625: LD_INT 41
4627: PUSH
4628: EMPTY
4629: LIST
4630: LIST
4631: PUSH
4632: LD_INT 211
4634: PUSH
4635: LD_INT 218
4637: PUSH
4638: EMPTY
4639: LIST
4640: LIST
4641: PUSH
4642: EMPTY
4643: LIST
4644: LIST
4645: PUSH
4646: LD_INT 125
4648: PUSH
4649: LD_INT 7
4651: PUSH
4652: EMPTY
4653: LIST
4654: LIST
4655: PUSH
4656: LD_INT 203
4658: PUSH
4659: LD_INT 252
4661: PUSH
4662: EMPTY
4663: LIST
4664: LIST
4665: PUSH
4666: EMPTY
4667: LIST
4668: LIST
4669: PUSH
4670: LD_INT 166
4672: PUSH
4673: LD_INT 80
4675: PUSH
4676: EMPTY
4677: LIST
4678: LIST
4679: PUSH
4680: LD_INT 163
4682: PUSH
4683: LD_INT 179
4685: PUSH
4686: EMPTY
4687: LIST
4688: LIST
4689: PUSH
4690: EMPTY
4691: LIST
4692: LIST
4693: PUSH
4694: EMPTY
4695: LIST
4696: LIST
4697: LIST
4698: LIST
4699: PUSH
4700: LD_INT 192
4702: PUSH
4703: LD_INT 57
4705: PUSH
4706: EMPTY
4707: LIST
4708: LIST
4709: PUSH
4710: LD_INT 137
4712: PUSH
4713: LD_INT 202
4715: PUSH
4716: EMPTY
4717: LIST
4718: LIST
4719: PUSH
4720: EMPTY
4721: LIST
4722: LIST
4723: PUSH
4724: LD_INT 197
4726: PUSH
4727: LD_INT 6
4729: PUSH
4730: EMPTY
4731: LIST
4732: LIST
4733: PUSH
4734: LD_INT 150
4736: PUSH
4737: LD_INT 253
4739: PUSH
4740: EMPTY
4741: LIST
4742: LIST
4743: PUSH
4744: EMPTY
4745: LIST
4746: LIST
4747: PUSH
4748: LD_INT 214
4750: PUSH
4751: LD_INT 66
4753: PUSH
4754: EMPTY
4755: LIST
4756: LIST
4757: PUSH
4758: LD_INT 115
4760: PUSH
4761: LD_INT 192
4763: PUSH
4764: EMPTY
4765: LIST
4766: LIST
4767: PUSH
4768: EMPTY
4769: LIST
4770: LIST
4771: PUSH
4772: LD_INT 208
4774: PUSH
4775: LD_INT 25
4777: PUSH
4778: EMPTY
4779: LIST
4780: LIST
4781: PUSH
4782: LD_INT 121
4784: PUSH
4785: LD_INT 234
4787: PUSH
4788: EMPTY
4789: LIST
4790: LIST
4791: PUSH
4792: EMPTY
4793: LIST
4794: LIST
4795: PUSH
4796: LD_INT 242
4798: PUSH
4799: LD_INT 89
4801: PUSH
4802: EMPTY
4803: LIST
4804: LIST
4805: PUSH
4806: LD_INT 87
4808: PUSH
4809: LD_INT 170
4811: PUSH
4812: EMPTY
4813: LIST
4814: LIST
4815: PUSH
4816: EMPTY
4817: LIST
4818: LIST
4819: PUSH
4820: EMPTY
4821: LIST
4822: LIST
4823: LIST
4824: LIST
4825: LIST
4826: PUSH
4827: EMPTY
4828: LIST
4829: LIST
4830: LIST
4831: ST_TO_ADDR
// available_siberite_deposits := [ [ [ [ 61 , 103 ] , [ 268 , 156 ] ] , [ [ 100 , 115 ] , [ 229 , 144 ] ] , [ [ 128 , 105 ] , [ 201 , 154 ] ] , [ [ 113 , 75 ] , [ 216 , 184 ] ] ] , [ [ [ 167 , 143 ] , [ 162 , 116 ] ] , [ [ 129 , 157 ] , [ 200 , 102 ] ] ] ] ;
4832: LD_ADDR_EXP 33
4836: PUSH
4837: LD_INT 61
4839: PUSH
4840: LD_INT 103
4842: PUSH
4843: EMPTY
4844: LIST
4845: LIST
4846: PUSH
4847: LD_INT 268
4849: PUSH
4850: LD_INT 156
4852: PUSH
4853: EMPTY
4854: LIST
4855: LIST
4856: PUSH
4857: EMPTY
4858: LIST
4859: LIST
4860: PUSH
4861: LD_INT 100
4863: PUSH
4864: LD_INT 115
4866: PUSH
4867: EMPTY
4868: LIST
4869: LIST
4870: PUSH
4871: LD_INT 229
4873: PUSH
4874: LD_INT 144
4876: PUSH
4877: EMPTY
4878: LIST
4879: LIST
4880: PUSH
4881: EMPTY
4882: LIST
4883: LIST
4884: PUSH
4885: LD_INT 128
4887: PUSH
4888: LD_INT 105
4890: PUSH
4891: EMPTY
4892: LIST
4893: LIST
4894: PUSH
4895: LD_INT 201
4897: PUSH
4898: LD_INT 154
4900: PUSH
4901: EMPTY
4902: LIST
4903: LIST
4904: PUSH
4905: EMPTY
4906: LIST
4907: LIST
4908: PUSH
4909: LD_INT 113
4911: PUSH
4912: LD_INT 75
4914: PUSH
4915: EMPTY
4916: LIST
4917: LIST
4918: PUSH
4919: LD_INT 216
4921: PUSH
4922: LD_INT 184
4924: PUSH
4925: EMPTY
4926: LIST
4927: LIST
4928: PUSH
4929: EMPTY
4930: LIST
4931: LIST
4932: PUSH
4933: EMPTY
4934: LIST
4935: LIST
4936: LIST
4937: LIST
4938: PUSH
4939: LD_INT 167
4941: PUSH
4942: LD_INT 143
4944: PUSH
4945: EMPTY
4946: LIST
4947: LIST
4948: PUSH
4949: LD_INT 162
4951: PUSH
4952: LD_INT 116
4954: PUSH
4955: EMPTY
4956: LIST
4957: LIST
4958: PUSH
4959: EMPTY
4960: LIST
4961: LIST
4962: PUSH
4963: LD_INT 129
4965: PUSH
4966: LD_INT 157
4968: PUSH
4969: EMPTY
4970: LIST
4971: LIST
4972: PUSH
4973: LD_INT 200
4975: PUSH
4976: LD_INT 102
4978: PUSH
4979: EMPTY
4980: LIST
4981: LIST
4982: PUSH
4983: EMPTY
4984: LIST
4985: LIST
4986: PUSH
4987: EMPTY
4988: LIST
4989: LIST
4990: PUSH
4991: EMPTY
4992: LIST
4993: LIST
4994: ST_TO_ADDR
// position_spawn_direction := [ 2 , 2 , 3 , 3 , 0 , 0 , 5 , 5 ] ;
4995: LD_ADDR_EXP 34
4999: PUSH
5000: LD_INT 2
5002: PUSH
5003: LD_INT 2
5005: PUSH
5006: LD_INT 3
5008: PUSH
5009: LD_INT 3
5011: PUSH
5012: LD_INT 0
5014: PUSH
5015: LD_INT 0
5017: PUSH
5018: LD_INT 5
5020: PUSH
5021: LD_INT 5
5023: PUSH
5024: EMPTY
5025: LIST
5026: LIST
5027: LIST
5028: LIST
5029: LIST
5030: LIST
5031: LIST
5032: LIST
5033: ST_TO_ADDR
// position_spawn_area := [ INIT_SpawnNW , INIT_SpawnNW , INIT_SpawnNE , INIT_SpawnNE , INIT_SpawnSW , INIT_SpawnSW , INIT_SpawnSE , INIT_SpawnSE ] ;
5034: LD_ADDR_EXP 35
5038: PUSH
5039: LD_INT 1
5041: PUSH
5042: LD_INT 1
5044: PUSH
5045: LD_INT 2
5047: PUSH
5048: LD_INT 2
5050: PUSH
5051: LD_INT 4
5053: PUSH
5054: LD_INT 4
5056: PUSH
5057: LD_INT 3
5059: PUSH
5060: LD_INT 3
5062: PUSH
5063: EMPTY
5064: LIST
5065: LIST
5066: LIST
5067: LIST
5068: LIST
5069: LIST
5070: LIST
5071: LIST
5072: ST_TO_ADDR
// position_drop_zones := [ [ 1 , 50 , [ CrateDropSW , CrateDropSE , CrateDropNW , CrateDropNE ] ] , [ 2 , 60 , [ CrateDropMidSW , CrateDropMidNE ] , [ CrateDropMidNW , CrateDropMidSE ] ] , [ 3 , 70 , [ CrateDropMidN , CrateDropMidS ] ] ] ;
5073: LD_ADDR_EXP 36
5077: PUSH
5078: LD_INT 1
5080: PUSH
5081: LD_INT 50
5083: PUSH
5084: LD_INT 5
5086: PUSH
5087: LD_INT 6
5089: PUSH
5090: LD_INT 7
5092: PUSH
5093: LD_INT 8
5095: PUSH
5096: EMPTY
5097: LIST
5098: LIST
5099: LIST
5100: LIST
5101: PUSH
5102: EMPTY
5103: LIST
5104: LIST
5105: LIST
5106: PUSH
5107: LD_INT 2
5109: PUSH
5110: LD_INT 60
5112: PUSH
5113: LD_INT 9
5115: PUSH
5116: LD_INT 13
5118: PUSH
5119: EMPTY
5120: LIST
5121: LIST
5122: PUSH
5123: LD_INT 10
5125: PUSH
5126: LD_INT 14
5128: PUSH
5129: EMPTY
5130: LIST
5131: LIST
5132: PUSH
5133: EMPTY
5134: LIST
5135: LIST
5136: LIST
5137: LIST
5138: PUSH
5139: LD_INT 3
5141: PUSH
5142: LD_INT 70
5144: PUSH
5145: LD_INT 11
5147: PUSH
5148: LD_INT 12
5150: PUSH
5151: EMPTY
5152: LIST
5153: LIST
5154: PUSH
5155: EMPTY
5156: LIST
5157: LIST
5158: LIST
5159: PUSH
5160: EMPTY
5161: LIST
5162: LIST
5163: LIST
5164: ST_TO_ADDR
// fluctuation_base_crates := [ 0 0$12 , 0 0$9 , 0 0$6 , 0 0$2 ] ;
5165: LD_ADDR_EXP 37
5169: PUSH
5170: LD_INT 420
5172: PUSH
5173: LD_INT 315
5175: PUSH
5176: LD_INT 210
5178: PUSH
5179: LD_INT 70
5181: PUSH
5182: EMPTY
5183: LIST
5184: LIST
5185: LIST
5186: LIST
5187: ST_TO_ADDR
// fluctuation_base_humans := [ 0 , 1 1$30 , 1 1$00 , 0 0$30 ] ;
5188: LD_ADDR_EXP 38
5192: PUSH
5193: LD_INT 0
5195: PUSH
5196: LD_INT 3150
5198: PUSH
5199: LD_INT 2100
5201: PUSH
5202: LD_INT 1050
5204: PUSH
5205: EMPTY
5206: LIST
5207: LIST
5208: LIST
5209: LIST
5210: ST_TO_ADDR
// fluctuation_modifier_crates := 0 ;
5211: LD_ADDR_EXP 39
5215: PUSH
5216: LD_INT 0
5218: ST_TO_ADDR
// fluctuation_modifier_humans := 0 ;
5219: LD_ADDR_EXP 40
5223: PUSH
5224: LD_INT 0
5226: ST_TO_ADDR
// current_spawn_rate := 0 ;
5227: LD_ADDR_EXP 41
5231: PUSH
5232: LD_INT 0
5234: ST_TO_ADDR
// past_spawn_rate := 0 ;
5235: LD_ADDR_EXP 42
5239: PUSH
5240: LD_INT 0
5242: ST_TO_ADDR
// end ; end_of_file
5243: LD_VAR 0 1
5247: RET
// export function length ( _array ) ; var _x ; begin
5248: LD_INT 0
5250: PPUSH
5251: PPUSH
// Result := 0 ;
5252: LD_ADDR_VAR 0 2
5256: PUSH
5257: LD_INT 0
5259: ST_TO_ADDR
// for _x in _array do
5260: LD_ADDR_VAR 0 3
5264: PUSH
5265: LD_VAR 0 1
5269: PUSH
5270: FOR_IN
5271: IFFALSE 5289
// begin Result := Result + 1 ;
5273: LD_ADDR_VAR 0 2
5277: PUSH
5278: LD_VAR 0 2
5282: PUSH
5283: LD_INT 1
5285: PLUS
5286: ST_TO_ADDR
// end ;
5287: GO 5270
5289: POP
5290: POP
// end ;
5291: LD_VAR 0 2
5295: RET
// export function mp_sides_comps ; var c , i ; begin
5296: LD_INT 0
5298: PPUSH
5299: PPUSH
5300: PPUSH
// c = [ ] ;
5301: LD_ADDR_VAR 0 2
5305: PUSH
5306: EMPTY
5307: ST_TO_ADDR
// for i = 1 to 8 do
5308: LD_ADDR_VAR 0 3
5312: PUSH
5313: DOUBLE
5314: LD_INT 1
5316: DEC
5317: ST_TO_ADDR
5318: LD_INT 8
5320: PUSH
5321: FOR_TO
5322: IFFALSE 5347
// c = c ^ Multiplayer_GetPlayerIsComp ( i ) ;
5324: LD_ADDR_VAR 0 2
5328: PUSH
5329: LD_VAR 0 2
5333: PUSH
5334: LD_VAR 0 3
5338: PPUSH
5339: CALL_OW 532
5343: ADD
5344: ST_TO_ADDR
5345: GO 5321
5347: POP
5348: POP
// result = c ;
5349: LD_ADDR_VAR 0 1
5353: PUSH
5354: LD_VAR 0 2
5358: ST_TO_ADDR
// end ;
5359: LD_VAR 0 1
5363: RET
// export function PrepareCharacters ( side , direction , loadout ) ; begin
5364: LD_INT 0
5366: PPUSH
// InitHc ( ) ;
5367: CALL_OW 19
// InitUc ( ) ;
5371: CALL_OW 18
// if loadout [ 1 ] and Multiplayer then
5375: LD_VAR 0 3
5379: PUSH
5380: LD_INT 1
5382: ARRAY
5383: PUSH
5384: LD_OWVAR 4
5388: AND
5389: IFFALSE 5445
// begin hc_name := mp_sides_players_names [ side ] ;
5391: LD_ADDR_OWVAR 26
5395: PUSH
5396: LD_OWVAR 19
5400: PUSH
5401: LD_VAR 0 1
5405: ARRAY
5406: ST_TO_ADDR
// hc_gallery := MULTIAVATARS ;
5407: LD_ADDR_OWVAR 33
5411: PUSH
5412: LD_STRING MULTIAVATARS
5414: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( side ) ;
5415: LD_ADDR_OWVAR 34
5419: PUSH
5420: LD_VAR 0 1
5424: PPUSH
5425: CALL_OW 525
5429: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( side ) ;
5430: LD_ADDR_OWVAR 27
5434: PUSH
5435: LD_VAR 0 1
5439: PPUSH
5440: CALL_OW 526
5444: ST_TO_ADDR
// end ; uc_side := side ;
5445: LD_ADDR_OWVAR 20
5449: PUSH
5450: LD_VAR 0 1
5454: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
5455: LD_ADDR_OWVAR 21
5459: PUSH
5460: LD_EXP 3
5464: PUSH
5465: LD_VAR 0 1
5469: ARRAY
5470: ST_TO_ADDR
// uc_direction := direction [ Side_Positions [ side ] ] ;
5471: LD_ADDR_OWVAR 24
5475: PUSH
5476: LD_VAR 0 2
5480: PUSH
5481: LD_EXP 2
5485: PUSH
5486: LD_VAR 0 1
5490: ARRAY
5491: ARRAY
5492: ST_TO_ADDR
// hc_class := loadout [ 2 ] ;
5493: LD_ADDR_OWVAR 28
5497: PUSH
5498: LD_VAR 0 3
5502: PUSH
5503: LD_INT 2
5505: ARRAY
5506: ST_TO_ADDR
// hc_attr := loadout [ 3 ] ;
5507: LD_ADDR_OWVAR 29
5511: PUSH
5512: LD_VAR 0 3
5516: PUSH
5517: LD_INT 3
5519: ARRAY
5520: ST_TO_ADDR
// hc_basic_skills := loadout [ 4 ] ;
5521: LD_ADDR_OWVAR 30
5525: PUSH
5526: LD_VAR 0 3
5530: PUSH
5531: LD_INT 4
5533: ARRAY
5534: ST_TO_ADDR
// hc_skills := loadout [ 5 ] ;
5535: LD_ADDR_OWVAR 31
5539: PUSH
5540: LD_VAR 0 3
5544: PUSH
5545: LD_INT 5
5547: ARRAY
5548: ST_TO_ADDR
// hc_importance := loadout [ 6 ] ;
5549: LD_ADDR_OWVAR 32
5553: PUSH
5554: LD_VAR 0 3
5558: PUSH
5559: LD_INT 6
5561: ARRAY
5562: ST_TO_ADDR
// Result := CreateHuman ;
5563: LD_ADDR_VAR 0 4
5567: PUSH
5568: CALL_OW 44
5572: ST_TO_ADDR
// end ;
5573: LD_VAR 0 4
5577: RET
// export function PrepareVehicles ( side , direction ) ; begin
5578: LD_INT 0
5580: PPUSH
// InitUc ( ) ;
5581: CALL_OW 18
// InitVc ( ) ;
5585: CALL_OW 20
// uc_direction := direction [ Side_Positions [ side ] ] ;
5589: LD_ADDR_OWVAR 24
5593: PUSH
5594: LD_VAR 0 2
5598: PUSH
5599: LD_EXP 2
5603: PUSH
5604: LD_VAR 0 1
5608: ARRAY
5609: ARRAY
5610: ST_TO_ADDR
// uc_side := side ;
5611: LD_ADDR_OWVAR 20
5615: PUSH
5616: LD_VAR 0 1
5620: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
5621: LD_ADDR_OWVAR 21
5625: PUSH
5626: LD_EXP 3
5630: PUSH
5631: LD_VAR 0 1
5635: ARRAY
5636: ST_TO_ADDR
// vc_control := 1 ;
5637: LD_ADDR_OWVAR 38
5641: PUSH
5642: LD_INT 1
5644: ST_TO_ADDR
// vc_engine := 1 ;
5645: LD_ADDR_OWVAR 39
5649: PUSH
5650: LD_INT 1
5652: ST_TO_ADDR
// vc_fuel_battery := 85 ;
5653: LD_ADDR_OWVAR 41
5657: PUSH
5658: LD_INT 85
5660: ST_TO_ADDR
// case Side_Nations [ side ] of 1 :
5661: LD_EXP 3
5665: PUSH
5666: LD_VAR 0 1
5670: ARRAY
5671: PUSH
5672: LD_INT 1
5674: DOUBLE
5675: EQUAL
5676: IFTRUE 5680
5678: GO 5699
5680: POP
// begin vc_chassis := 2 ;
5681: LD_ADDR_OWVAR 37
5685: PUSH
5686: LD_INT 2
5688: ST_TO_ADDR
// vc_weapon := 12 ;
5689: LD_ADDR_OWVAR 40
5693: PUSH
5694: LD_INT 12
5696: ST_TO_ADDR
// end ; 2 :
5697: GO 5754
5699: LD_INT 2
5701: DOUBLE
5702: EQUAL
5703: IFTRUE 5707
5705: GO 5726
5707: POP
// begin vc_chassis := 13 ;
5708: LD_ADDR_OWVAR 37
5712: PUSH
5713: LD_INT 13
5715: ST_TO_ADDR
// vc_weapon := 32 ;
5716: LD_ADDR_OWVAR 40
5720: PUSH
5721: LD_INT 32
5723: ST_TO_ADDR
// end ; 3 :
5724: GO 5754
5726: LD_INT 3
5728: DOUBLE
5729: EQUAL
5730: IFTRUE 5734
5732: GO 5753
5734: POP
// begin vc_chassis := 21 ;
5735: LD_ADDR_OWVAR 37
5739: PUSH
5740: LD_INT 21
5742: ST_TO_ADDR
// vc_weapon := 51 ;
5743: LD_ADDR_OWVAR 40
5747: PUSH
5748: LD_INT 51
5750: ST_TO_ADDR
// end ; end ;
5751: GO 5754
5753: POP
// Result := CreateVehicle ;
5754: LD_ADDR_VAR 0 3
5758: PUSH
5759: CALL_OW 45
5763: ST_TO_ADDR
// end ;
5764: LD_VAR 0 3
5768: RET
// export function DidPlayerLose ( side ) ; var depots , colour ; begin
5769: LD_INT 0
5771: PPUSH
5772: PPUSH
5773: PPUSH
// if side_soldiers [ side ] = 0 then
5774: LD_EXP 46
5778: PUSH
5779: LD_VAR 0 1
5783: ARRAY
5784: PUSH
5785: LD_INT 0
5787: EQUAL
5788: IFFALSE 5975
// begin depots := FilterAllUnits ( [ [ f_side , side ] , [ f_type , 3 ] , [ f_btype , 0 ] , [ f_or ] , [ f_btype , 1 ] ] ) ;
5790: LD_ADDR_VAR 0 3
5794: PUSH
5795: LD_INT 22
5797: PUSH
5798: LD_VAR 0 1
5802: PUSH
5803: EMPTY
5804: LIST
5805: LIST
5806: PUSH
5807: LD_INT 21
5809: PUSH
5810: LD_INT 3
5812: PUSH
5813: EMPTY
5814: LIST
5815: LIST
5816: PUSH
5817: LD_INT 30
5819: PUSH
5820: LD_INT 0
5822: PUSH
5823: EMPTY
5824: LIST
5825: LIST
5826: PUSH
5827: LD_INT 2
5829: PUSH
5830: EMPTY
5831: LIST
5832: PUSH
5833: LD_INT 30
5835: PUSH
5836: LD_INT 1
5838: PUSH
5839: EMPTY
5840: LIST
5841: LIST
5842: PUSH
5843: EMPTY
5844: LIST
5845: LIST
5846: LIST
5847: LIST
5848: LIST
5849: PPUSH
5850: CALL_OW 69
5854: ST_TO_ADDR
// if depots + 0 = 0 then
5855: LD_VAR 0 3
5859: PUSH
5860: LD_INT 0
5862: PLUS
5863: PUSH
5864: LD_INT 0
5866: EQUAL
5867: IFFALSE 5975
// begin side_isalive := Replace ( side_isalive , side , 0 ) ;
5869: LD_ADDR_EXP 53
5873: PUSH
5874: LD_EXP 53
5878: PPUSH
5879: LD_VAR 0 1
5883: PPUSH
5884: LD_INT 0
5886: PPUSH
5887: CALL_OW 1
5891: ST_TO_ADDR
// colour := 0 ;
5892: LD_ADDR_VAR 0 4
5896: PUSH
5897: LD_INT 0
5899: ST_TO_ADDR
// RaiseSailEvent ( 66 ) ;
5900: LD_INT 66
5902: PPUSH
5903: CALL_OW 427
// if side = Your_Side then
5907: LD_VAR 0 1
5911: PUSH
5912: LD_OWVAR 2
5916: EQUAL
5917: IFFALSE 5932
// begin ToLua ( LUA_Lost(); ) ;
5919: LD_STRING LUA_Lost();
5921: PPUSH
5922: CALL_OW 559
// Multiplayer_Loose_Message ( ) ;
5926: CALL_OW 521
// end else
5930: GO 5975
// ToLua ( LUA_UpdateSpecInterface( & side & , & colour & , & side_tech_lvl [ side ] & ); ) ;
5932: LD_STRING LUA_UpdateSpecInterface(
5934: PUSH
5935: LD_VAR 0 1
5939: STR
5940: PUSH
5941: LD_STRING ,
5943: STR
5944: PUSH
5945: LD_VAR 0 4
5949: STR
5950: PUSH
5951: LD_STRING ,
5953: STR
5954: PUSH
5955: LD_EXP 31
5959: PUSH
5960: LD_VAR 0 1
5964: ARRAY
5965: STR
5966: PUSH
5967: LD_STRING );
5969: STR
5970: PPUSH
5971: CALL_OW 559
// end ; end ; end ;
5975: LD_VAR 0 2
5979: RET
// export function CheckPlayerPresence ; var i , colour ; begin
5980: LD_INT 0
5982: PPUSH
5983: PPUSH
5984: PPUSH
// for i = 1 to 8 do
5985: LD_ADDR_VAR 0 2
5989: PUSH
5990: DOUBLE
5991: LD_INT 1
5993: DEC
5994: ST_TO_ADDR
5995: LD_INT 8
5997: PUSH
5998: FOR_TO
5999: IFFALSE 6150
// begin if not MultiplayerSideAlive ( i ) and side_isalive [ i ] then
6001: LD_VAR 0 2
6005: PPUSH
6006: CALL_OW 108
6010: NOT
6011: PUSH
6012: LD_EXP 53
6016: PUSH
6017: LD_VAR 0 2
6021: ARRAY
6022: AND
6023: IFFALSE 6148
// begin side_isalive := Replace ( side_isalive , i , 0 ) ;
6025: LD_ADDR_EXP 53
6029: PUSH
6030: LD_EXP 53
6034: PPUSH
6035: LD_VAR 0 2
6039: PPUSH
6040: LD_INT 0
6042: PPUSH
6043: CALL_OW 1
6047: ST_TO_ADDR
// RaiseSailEvent ( 66 ) ;
6048: LD_INT 66
6050: PPUSH
6051: CALL_OW 427
// if not Your_Side in [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] then
6055: LD_OWVAR 2
6059: PUSH
6060: LD_INT 1
6062: PUSH
6063: LD_INT 2
6065: PUSH
6066: LD_INT 3
6068: PUSH
6069: LD_INT 4
6071: PUSH
6072: LD_INT 5
6074: PUSH
6075: LD_INT 6
6077: PUSH
6078: LD_INT 7
6080: PUSH
6081: LD_INT 8
6083: PUSH
6084: EMPTY
6085: LIST
6086: LIST
6087: LIST
6088: LIST
6089: LIST
6090: LIST
6091: LIST
6092: LIST
6093: IN
6094: NOT
6095: IFFALSE 6148
// begin colour := 0 ;
6097: LD_ADDR_VAR 0 3
6101: PUSH
6102: LD_INT 0
6104: ST_TO_ADDR
// ToLua ( LUA_UpdateSpecInterface( & i & , & colour & , & side_tech_lvl [ i ] & ); ) ;
6105: LD_STRING LUA_UpdateSpecInterface(
6107: PUSH
6108: LD_VAR 0 2
6112: STR
6113: PUSH
6114: LD_STRING ,
6116: STR
6117: PUSH
6118: LD_VAR 0 3
6122: STR
6123: PUSH
6124: LD_STRING ,
6126: STR
6127: PUSH
6128: LD_EXP 31
6132: PUSH
6133: LD_VAR 0 2
6137: ARRAY
6138: STR
6139: PUSH
6140: LD_STRING );
6142: STR
6143: PPUSH
6144: CALL_OW 559
// end ; end ; end ;
6148: GO 5998
6150: POP
6151: POP
// end ;
6152: LD_VAR 0 1
6156: RET
// function TechUnlock ( techs , side , state ) ; var i ; begin
6157: LD_INT 0
6159: PPUSH
6160: PPUSH
// for i in techs do
6161: LD_ADDR_VAR 0 5
6165: PUSH
6166: LD_VAR 0 1
6170: PUSH
6171: FOR_IN
6172: IFFALSE 6195
// SetTech ( i , side , state ) ;
6174: LD_VAR 0 5
6178: PPUSH
6179: LD_VAR 0 2
6183: PPUSH
6184: LD_VAR 0 3
6188: PPUSH
6189: CALL_OW 322
6193: GO 6171
6195: POP
6196: POP
// end ;
6197: LD_VAR 0 4
6201: RET
// function BuildingUnlock ( buildings , side , state ) ; var i ; begin
6202: LD_INT 0
6204: PPUSH
6205: PPUSH
// for i in buildings do
6206: LD_ADDR_VAR 0 5
6210: PUSH
6211: LD_VAR 0 1
6215: PUSH
6216: FOR_IN
6217: IFFALSE 6240
// SetRestrict ( i , side , state ) ;
6219: LD_VAR 0 5
6223: PPUSH
6224: LD_VAR 0 2
6228: PPUSH
6229: LD_VAR 0 3
6233: PPUSH
6234: CALL_OW 324
6238: GO 6216
6240: POP
6241: POP
// end ;
6242: LD_VAR 0 4
6246: RET
// export function DisableAllTechs ( side ) ; var techs , buildings ; begin
6247: LD_INT 0
6249: PPUSH
6250: PPUSH
6251: PPUSH
// techs := [ 35 , 45 , 46 , 47 , 1 , 2 , 11 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 12 , 13 , 10 , 14 , 15 , 18 , 16 , 17 , 20 , 19 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 36 , 70 , 69 , 39 , 34 , 40 , 71 , 41 , 42 , 43 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 63 , 64 , 65 , 66 , 67 , 68 ] ;
6252: LD_ADDR_VAR 0 3
6256: PUSH
6257: LD_INT 35
6259: PUSH
6260: LD_INT 45
6262: PUSH
6263: LD_INT 46
6265: PUSH
6266: LD_INT 47
6268: PUSH
6269: LD_INT 1
6271: PUSH
6272: LD_INT 2
6274: PUSH
6275: LD_INT 11
6277: PUSH
6278: LD_INT 3
6280: PUSH
6281: LD_INT 4
6283: PUSH
6284: LD_INT 5
6286: PUSH
6287: LD_INT 6
6289: PUSH
6290: LD_INT 7
6292: PUSH
6293: LD_INT 8
6295: PUSH
6296: LD_INT 9
6298: PUSH
6299: LD_INT 12
6301: PUSH
6302: LD_INT 13
6304: PUSH
6305: LD_INT 10
6307: PUSH
6308: LD_INT 14
6310: PUSH
6311: LD_INT 15
6313: PUSH
6314: LD_INT 18
6316: PUSH
6317: LD_INT 16
6319: PUSH
6320: LD_INT 17
6322: PUSH
6323: LD_INT 20
6325: PUSH
6326: LD_INT 19
6328: PUSH
6329: LD_INT 21
6331: PUSH
6332: LD_INT 22
6334: PUSH
6335: LD_INT 23
6337: PUSH
6338: LD_INT 24
6340: PUSH
6341: LD_INT 25
6343: PUSH
6344: LD_INT 26
6346: PUSH
6347: LD_INT 28
6349: PUSH
6350: LD_INT 29
6352: PUSH
6353: LD_INT 30
6355: PUSH
6356: LD_INT 31
6358: PUSH
6359: LD_INT 37
6361: PUSH
6362: LD_INT 38
6364: PUSH
6365: LD_INT 32
6367: PUSH
6368: LD_INT 27
6370: PUSH
6371: LD_INT 33
6373: PUSH
6374: LD_INT 36
6376: PUSH
6377: LD_INT 70
6379: PUSH
6380: LD_INT 69
6382: PUSH
6383: LD_INT 39
6385: PUSH
6386: LD_INT 34
6388: PUSH
6389: LD_INT 40
6391: PUSH
6392: LD_INT 71
6394: PUSH
6395: LD_INT 41
6397: PUSH
6398: LD_INT 42
6400: PUSH
6401: LD_INT 43
6403: PUSH
6404: LD_INT 44
6406: PUSH
6407: LD_INT 48
6409: PUSH
6410: LD_INT 49
6412: PUSH
6413: LD_INT 50
6415: PUSH
6416: LD_INT 51
6418: PUSH
6419: LD_INT 52
6421: PUSH
6422: LD_INT 53
6424: PUSH
6425: LD_INT 54
6427: PUSH
6428: LD_INT 55
6430: PUSH
6431: LD_INT 56
6433: PUSH
6434: LD_INT 57
6436: PUSH
6437: LD_INT 58
6439: PUSH
6440: LD_INT 59
6442: PUSH
6443: LD_INT 60
6445: PUSH
6446: LD_INT 61
6448: PUSH
6449: LD_INT 62
6451: PUSH
6452: LD_INT 63
6454: PUSH
6455: LD_INT 64
6457: PUSH
6458: LD_INT 65
6460: PUSH
6461: LD_INT 66
6463: PUSH
6464: LD_INT 67
6466: PUSH
6467: LD_INT 68
6469: PUSH
6470: EMPTY
6471: LIST
6472: LIST
6473: LIST
6474: LIST
6475: LIST
6476: LIST
6477: LIST
6478: LIST
6479: LIST
6480: LIST
6481: LIST
6482: LIST
6483: LIST
6484: LIST
6485: LIST
6486: LIST
6487: LIST
6488: LIST
6489: LIST
6490: LIST
6491: LIST
6492: LIST
6493: LIST
6494: LIST
6495: LIST
6496: LIST
6497: LIST
6498: LIST
6499: LIST
6500: LIST
6501: LIST
6502: LIST
6503: LIST
6504: LIST
6505: LIST
6506: LIST
6507: LIST
6508: LIST
6509: LIST
6510: LIST
6511: LIST
6512: LIST
6513: LIST
6514: LIST
6515: LIST
6516: LIST
6517: LIST
6518: LIST
6519: LIST
6520: LIST
6521: LIST
6522: LIST
6523: LIST
6524: LIST
6525: LIST
6526: LIST
6527: LIST
6528: LIST
6529: LIST
6530: LIST
6531: LIST
6532: LIST
6533: LIST
6534: LIST
6535: LIST
6536: LIST
6537: LIST
6538: LIST
6539: LIST
6540: LIST
6541: LIST
6542: ST_TO_ADDR
// buildings := [ 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 , 37 , 38 , 39 ] ;
6543: LD_ADDR_VAR 0 4
6547: PUSH
6548: LD_INT 0
6550: PUSH
6551: LD_INT 1
6553: PUSH
6554: LD_INT 2
6556: PUSH
6557: LD_INT 3
6559: PUSH
6560: LD_INT 4
6562: PUSH
6563: LD_INT 5
6565: PUSH
6566: LD_INT 6
6568: PUSH
6569: LD_INT 7
6571: PUSH
6572: LD_INT 8
6574: PUSH
6575: LD_INT 9
6577: PUSH
6578: LD_INT 10
6580: PUSH
6581: LD_INT 11
6583: PUSH
6584: LD_INT 12
6586: PUSH
6587: LD_INT 13
6589: PUSH
6590: LD_INT 14
6592: PUSH
6593: LD_INT 15
6595: PUSH
6596: LD_INT 16
6598: PUSH
6599: LD_INT 17
6601: PUSH
6602: LD_INT 18
6604: PUSH
6605: LD_INT 19
6607: PUSH
6608: LD_INT 20
6610: PUSH
6611: LD_INT 21
6613: PUSH
6614: LD_INT 22
6616: PUSH
6617: LD_INT 23
6619: PUSH
6620: LD_INT 24
6622: PUSH
6623: LD_INT 25
6625: PUSH
6626: LD_INT 26
6628: PUSH
6629: LD_INT 27
6631: PUSH
6632: LD_INT 28
6634: PUSH
6635: LD_INT 29
6637: PUSH
6638: LD_INT 30
6640: PUSH
6641: LD_INT 31
6643: PUSH
6644: LD_INT 32
6646: PUSH
6647: LD_INT 33
6649: PUSH
6650: LD_INT 34
6652: PUSH
6653: LD_INT 35
6655: PUSH
6656: LD_INT 36
6658: PUSH
6659: LD_INT 37
6661: PUSH
6662: LD_INT 38
6664: PUSH
6665: LD_INT 39
6667: PUSH
6668: EMPTY
6669: LIST
6670: LIST
6671: LIST
6672: LIST
6673: LIST
6674: LIST
6675: LIST
6676: LIST
6677: LIST
6678: LIST
6679: LIST
6680: LIST
6681: LIST
6682: LIST
6683: LIST
6684: LIST
6685: LIST
6686: LIST
6687: LIST
6688: LIST
6689: LIST
6690: LIST
6691: LIST
6692: LIST
6693: LIST
6694: LIST
6695: LIST
6696: LIST
6697: LIST
6698: LIST
6699: LIST
6700: LIST
6701: LIST
6702: LIST
6703: LIST
6704: LIST
6705: LIST
6706: LIST
6707: LIST
6708: LIST
6709: ST_TO_ADDR
// TechUnlock ( techs , side , 0 ) ;
6710: LD_VAR 0 3
6714: PPUSH
6715: LD_VAR 0 1
6719: PPUSH
6720: LD_INT 0
6722: PPUSH
6723: CALL 6157 0 3
// BuildingUnlock ( buildings , side , 0 ) ;
6727: LD_VAR 0 4
6731: PPUSH
6732: LD_VAR 0 1
6736: PPUSH
6737: LD_INT 0
6739: PPUSH
6740: CALL 6202 0 3
// end ;
6744: LD_VAR 0 2
6748: RET
// export function TechUpgrade ( tier , nation , side ) ; var techs , buildings , i ; begin
6749: LD_INT 0
6751: PPUSH
6752: PPUSH
6753: PPUSH
6754: PPUSH
// techs := [ ] ;
6755: LD_ADDR_VAR 0 5
6759: PUSH
6760: EMPTY
6761: ST_TO_ADDR
// buildings := [ ] ;
6762: LD_ADDR_VAR 0 6
6766: PUSH
6767: EMPTY
6768: ST_TO_ADDR
// case tier of 0 :
6769: LD_VAR 0 1
6773: PUSH
6774: LD_INT 0
6776: DOUBLE
6777: EQUAL
6778: IFTRUE 6782
6780: GO 7118
6782: POP
// begin case nation of 1 :
6783: LD_VAR 0 2
6787: PUSH
6788: LD_INT 1
6790: DOUBLE
6791: EQUAL
6792: IFTRUE 6796
6794: GO 6901
6796: POP
// begin techs := [ 35 , 45 , 46 , 47 , 69 , 48 , 51 ] ;
6797: LD_ADDR_VAR 0 5
6801: PUSH
6802: LD_INT 35
6804: PUSH
6805: LD_INT 45
6807: PUSH
6808: LD_INT 46
6810: PUSH
6811: LD_INT 47
6813: PUSH
6814: LD_INT 69
6816: PUSH
6817: LD_INT 48
6819: PUSH
6820: LD_INT 51
6822: PUSH
6823: EMPTY
6824: LIST
6825: LIST
6826: LIST
6827: LIST
6828: LIST
6829: LIST
6830: LIST
6831: ST_TO_ADDR
// buildings := [ 0 , 2 , 3 , 4 , 6 , 7 , 8 , 10 , 16 , 19 , 26 , 27 , 29 , 31 , 32 ] ;
6832: LD_ADDR_VAR 0 6
6836: PUSH
6837: LD_INT 0
6839: PUSH
6840: LD_INT 2
6842: PUSH
6843: LD_INT 3
6845: PUSH
6846: LD_INT 4
6848: PUSH
6849: LD_INT 6
6851: PUSH
6852: LD_INT 7
6854: PUSH
6855: LD_INT 8
6857: PUSH
6858: LD_INT 10
6860: PUSH
6861: LD_INT 16
6863: PUSH
6864: LD_INT 19
6866: PUSH
6867: LD_INT 26
6869: PUSH
6870: LD_INT 27
6872: PUSH
6873: LD_INT 29
6875: PUSH
6876: LD_INT 31
6878: PUSH
6879: LD_INT 32
6881: PUSH
6882: EMPTY
6883: LIST
6884: LIST
6885: LIST
6886: LIST
6887: LIST
6888: LIST
6889: LIST
6890: LIST
6891: LIST
6892: LIST
6893: LIST
6894: LIST
6895: LIST
6896: LIST
6897: LIST
6898: ST_TO_ADDR
// end ; 2 :
6899: GO 7116
6901: LD_INT 2
6903: DOUBLE
6904: EQUAL
6905: IFTRUE 6909
6907: GO 7014
6909: POP
// begin techs := [ 35 , 45 , 46 , 47 , 69 , 48 , 51 ] ;
6910: LD_ADDR_VAR 0 5
6914: PUSH
6915: LD_INT 35
6917: PUSH
6918: LD_INT 45
6920: PUSH
6921: LD_INT 46
6923: PUSH
6924: LD_INT 47
6926: PUSH
6927: LD_INT 69
6929: PUSH
6930: LD_INT 48
6932: PUSH
6933: LD_INT 51
6935: PUSH
6936: EMPTY
6937: LIST
6938: LIST
6939: LIST
6940: LIST
6941: LIST
6942: LIST
6943: LIST
6944: ST_TO_ADDR
// buildings := [ 0 , 2 , 3 , 4 , 6 , 7 , 8 , 10 , 16 , 23 , 26 , 27 , 29 , 31 , 32 ] ;
6945: LD_ADDR_VAR 0 6
6949: PUSH
6950: LD_INT 0
6952: PUSH
6953: LD_INT 2
6955: PUSH
6956: LD_INT 3
6958: PUSH
6959: LD_INT 4
6961: PUSH
6962: LD_INT 6
6964: PUSH
6965: LD_INT 7
6967: PUSH
6968: LD_INT 8
6970: PUSH
6971: LD_INT 10
6973: PUSH
6974: LD_INT 16
6976: PUSH
6977: LD_INT 23
6979: PUSH
6980: LD_INT 26
6982: PUSH
6983: LD_INT 27
6985: PUSH
6986: LD_INT 29
6988: PUSH
6989: LD_INT 31
6991: PUSH
6992: LD_INT 32
6994: PUSH
6995: EMPTY
6996: LIST
6997: LIST
6998: LIST
6999: LIST
7000: LIST
7001: LIST
7002: LIST
7003: LIST
7004: LIST
7005: LIST
7006: LIST
7007: LIST
7008: LIST
7009: LIST
7010: LIST
7011: ST_TO_ADDR
// end ; 3 :
7012: GO 7116
7014: LD_INT 3
7016: DOUBLE
7017: EQUAL
7018: IFTRUE 7022
7020: GO 7115
7022: POP
// begin techs := [ 46 , 47 , 69 , 48 , 51 ] ;
7023: LD_ADDR_VAR 0 5
7027: PUSH
7028: LD_INT 46
7030: PUSH
7031: LD_INT 47
7033: PUSH
7034: LD_INT 69
7036: PUSH
7037: LD_INT 48
7039: PUSH
7040: LD_INT 51
7042: PUSH
7043: EMPTY
7044: LIST
7045: LIST
7046: LIST
7047: LIST
7048: LIST
7049: ST_TO_ADDR
// buildings := [ 0 , 2 , 3 , 4 , 6 , 7 , 8 , 10 , 16 , 19 , 26 , 29 , 31 , 32 ] ;
7050: LD_ADDR_VAR 0 6
7054: PUSH
7055: LD_INT 0
7057: PUSH
7058: LD_INT 2
7060: PUSH
7061: LD_INT 3
7063: PUSH
7064: LD_INT 4
7066: PUSH
7067: LD_INT 6
7069: PUSH
7070: LD_INT 7
7072: PUSH
7073: LD_INT 8
7075: PUSH
7076: LD_INT 10
7078: PUSH
7079: LD_INT 16
7081: PUSH
7082: LD_INT 19
7084: PUSH
7085: LD_INT 26
7087: PUSH
7088: LD_INT 29
7090: PUSH
7091: LD_INT 31
7093: PUSH
7094: LD_INT 32
7096: PUSH
7097: EMPTY
7098: LIST
7099: LIST
7100: LIST
7101: LIST
7102: LIST
7103: LIST
7104: LIST
7105: LIST
7106: LIST
7107: LIST
7108: LIST
7109: LIST
7110: LIST
7111: LIST
7112: ST_TO_ADDR
// end ; end ;
7113: GO 7116
7115: POP
// end ; 1 :
7116: GO 9930
7118: LD_INT 1
7120: DOUBLE
7121: EQUAL
7122: IFTRUE 7126
7124: GO 7594
7126: POP
// begin case nation of 1 :
7127: LD_VAR 0 2
7131: PUSH
7132: LD_INT 1
7134: DOUBLE
7135: EQUAL
7136: IFTRUE 7140
7138: GO 7289
7140: POP
// begin techs := [ 35 , 45 , 46 , 47 , 6 , 7 , 20 , 69 , 39 , 48 , 49 , 51 , 52 , 60 ] ;
7141: LD_ADDR_VAR 0 5
7145: PUSH
7146: LD_INT 35
7148: PUSH
7149: LD_INT 45
7151: PUSH
7152: LD_INT 46
7154: PUSH
7155: LD_INT 47
7157: PUSH
7158: LD_INT 6
7160: PUSH
7161: LD_INT 7
7163: PUSH
7164: LD_INT 20
7166: PUSH
7167: LD_INT 69
7169: PUSH
7170: LD_INT 39
7172: PUSH
7173: LD_INT 48
7175: PUSH
7176: LD_INT 49
7178: PUSH
7179: LD_INT 51
7181: PUSH
7182: LD_INT 52
7184: PUSH
7185: LD_INT 60
7187: PUSH
7188: EMPTY
7189: LIST
7190: LIST
7191: LIST
7192: LIST
7193: LIST
7194: LIST
7195: LIST
7196: LIST
7197: LIST
7198: LIST
7199: LIST
7200: LIST
7201: LIST
7202: LIST
7203: ST_TO_ADDR
// buildings := [ 0 , 2 , 3 , 4 , 6 , 7 , 8 , 10 , 15 , 16 , 17 , 19 , 20 , 26 , 27 , 29 , 30 , 31 , 32 ] ;
7204: LD_ADDR_VAR 0 6
7208: PUSH
7209: LD_INT 0
7211: PUSH
7212: LD_INT 2
7214: PUSH
7215: LD_INT 3
7217: PUSH
7218: LD_INT 4
7220: PUSH
7221: LD_INT 6
7223: PUSH
7224: LD_INT 7
7226: PUSH
7227: LD_INT 8
7229: PUSH
7230: LD_INT 10
7232: PUSH
7233: LD_INT 15
7235: PUSH
7236: LD_INT 16
7238: PUSH
7239: LD_INT 17
7241: PUSH
7242: LD_INT 19
7244: PUSH
7245: LD_INT 20
7247: PUSH
7248: LD_INT 26
7250: PUSH
7251: LD_INT 27
7253: PUSH
7254: LD_INT 29
7256: PUSH
7257: LD_INT 30
7259: PUSH
7260: LD_INT 31
7262: PUSH
7263: LD_INT 32
7265: PUSH
7266: EMPTY
7267: LIST
7268: LIST
7269: LIST
7270: LIST
7271: LIST
7272: LIST
7273: LIST
7274: LIST
7275: LIST
7276: LIST
7277: LIST
7278: LIST
7279: LIST
7280: LIST
7281: LIST
7282: LIST
7283: LIST
7284: LIST
7285: LIST
7286: ST_TO_ADDR
// end ; 2 :
7287: GO 7592
7289: LD_INT 2
7291: DOUBLE
7292: EQUAL
7293: IFTRUE 7297
7295: GO 7454
7297: POP
// begin techs := [ 35 , 45 , 46 , 47 , 6 , 7 , 20 , 70 , 69 , 39 , 48 , 49 , 51 , 52 , 60 ] ;
7298: LD_ADDR_VAR 0 5
7302: PUSH
7303: LD_INT 35
7305: PUSH
7306: LD_INT 45
7308: PUSH
7309: LD_INT 46
7311: PUSH
7312: LD_INT 47
7314: PUSH
7315: LD_INT 6
7317: PUSH
7318: LD_INT 7
7320: PUSH
7321: LD_INT 20
7323: PUSH
7324: LD_INT 70
7326: PUSH
7327: LD_INT 69
7329: PUSH
7330: LD_INT 39
7332: PUSH
7333: LD_INT 48
7335: PUSH
7336: LD_INT 49
7338: PUSH
7339: LD_INT 51
7341: PUSH
7342: LD_INT 52
7344: PUSH
7345: LD_INT 60
7347: PUSH
7348: EMPTY
7349: LIST
7350: LIST
7351: LIST
7352: LIST
7353: LIST
7354: LIST
7355: LIST
7356: LIST
7357: LIST
7358: LIST
7359: LIST
7360: LIST
7361: LIST
7362: LIST
7363: LIST
7364: ST_TO_ADDR
// buildings := [ 0 , 2 , 3 , 4 , 6 , 7 , 8 , 10 , 15 , 16 , 17 , 20 , 23 , 26 , 27 , 29 , 30 , 31 , 32 , 42 ] ;
7365: LD_ADDR_VAR 0 6
7369: PUSH
7370: LD_INT 0
7372: PUSH
7373: LD_INT 2
7375: PUSH
7376: LD_INT 3
7378: PUSH
7379: LD_INT 4
7381: PUSH
7382: LD_INT 6
7384: PUSH
7385: LD_INT 7
7387: PUSH
7388: LD_INT 8
7390: PUSH
7391: LD_INT 10
7393: PUSH
7394: LD_INT 15
7396: PUSH
7397: LD_INT 16
7399: PUSH
7400: LD_INT 17
7402: PUSH
7403: LD_INT 20
7405: PUSH
7406: LD_INT 23
7408: PUSH
7409: LD_INT 26
7411: PUSH
7412: LD_INT 27
7414: PUSH
7415: LD_INT 29
7417: PUSH
7418: LD_INT 30
7420: PUSH
7421: LD_INT 31
7423: PUSH
7424: LD_INT 32
7426: PUSH
7427: LD_INT 42
7429: PUSH
7430: EMPTY
7431: LIST
7432: LIST
7433: LIST
7434: LIST
7435: LIST
7436: LIST
7437: LIST
7438: LIST
7439: LIST
7440: LIST
7441: LIST
7442: LIST
7443: LIST
7444: LIST
7445: LIST
7446: LIST
7447: LIST
7448: LIST
7449: LIST
7450: LIST
7451: ST_TO_ADDR
// end ; 3 :
7452: GO 7592
7454: LD_INT 3
7456: DOUBLE
7457: EQUAL
7458: IFTRUE 7462
7460: GO 7591
7462: POP
// begin techs := [ 46 , 47 , 9 , 20 , 69 , 39 , 48 , 49 , 51 , 52 , 57 ] ;
7463: LD_ADDR_VAR 0 5
7467: PUSH
7468: LD_INT 46
7470: PUSH
7471: LD_INT 47
7473: PUSH
7474: LD_INT 9
7476: PUSH
7477: LD_INT 20
7479: PUSH
7480: LD_INT 69
7482: PUSH
7483: LD_INT 39
7485: PUSH
7486: LD_INT 48
7488: PUSH
7489: LD_INT 49
7491: PUSH
7492: LD_INT 51
7494: PUSH
7495: LD_INT 52
7497: PUSH
7498: LD_INT 57
7500: PUSH
7501: EMPTY
7502: LIST
7503: LIST
7504: LIST
7505: LIST
7506: LIST
7507: LIST
7508: LIST
7509: LIST
7510: LIST
7511: LIST
7512: LIST
7513: ST_TO_ADDR
// buildings := [ 0 , 2 , 3 , 4 , 6 , 7 , 8 , 10 , 12 , 16 , 17 , 19 , 26 , 29 , 30 , 31 , 32 ] ;
7514: LD_ADDR_VAR 0 6
7518: PUSH
7519: LD_INT 0
7521: PUSH
7522: LD_INT 2
7524: PUSH
7525: LD_INT 3
7527: PUSH
7528: LD_INT 4
7530: PUSH
7531: LD_INT 6
7533: PUSH
7534: LD_INT 7
7536: PUSH
7537: LD_INT 8
7539: PUSH
7540: LD_INT 10
7542: PUSH
7543: LD_INT 12
7545: PUSH
7546: LD_INT 16
7548: PUSH
7549: LD_INT 17
7551: PUSH
7552: LD_INT 19
7554: PUSH
7555: LD_INT 26
7557: PUSH
7558: LD_INT 29
7560: PUSH
7561: LD_INT 30
7563: PUSH
7564: LD_INT 31
7566: PUSH
7567: LD_INT 32
7569: PUSH
7570: EMPTY
7571: LIST
7572: LIST
7573: LIST
7574: LIST
7575: LIST
7576: LIST
7577: LIST
7578: LIST
7579: LIST
7580: LIST
7581: LIST
7582: LIST
7583: LIST
7584: LIST
7585: LIST
7586: LIST
7587: LIST
7588: ST_TO_ADDR
// end ; end ;
7589: GO 7592
7591: POP
// end ; 2 :
7592: GO 9930
7594: LD_INT 2
7596: DOUBLE
7597: EQUAL
7598: IFTRUE 7602
7600: GO 8210
7602: POP
// begin case nation of 1 :
7603: LD_VAR 0 2
7607: PUSH
7608: LD_INT 1
7610: DOUBLE
7611: EQUAL
7612: IFTRUE 7616
7614: GO 7793
7616: POP
// begin techs := [ 35 , 45 , 46 , 47 , 6 , 7 , 12 , 15 , 20 , 69 , 39 , 48 , 49 , 50 , 51 , 52 , 60 , 61 ] ;
7617: LD_ADDR_VAR 0 5
7621: PUSH
7622: LD_INT 35
7624: PUSH
7625: LD_INT 45
7627: PUSH
7628: LD_INT 46
7630: PUSH
7631: LD_INT 47
7633: PUSH
7634: LD_INT 6
7636: PUSH
7637: LD_INT 7
7639: PUSH
7640: LD_INT 12
7642: PUSH
7643: LD_INT 15
7645: PUSH
7646: LD_INT 20
7648: PUSH
7649: LD_INT 69
7651: PUSH
7652: LD_INT 39
7654: PUSH
7655: LD_INT 48
7657: PUSH
7658: LD_INT 49
7660: PUSH
7661: LD_INT 50
7663: PUSH
7664: LD_INT 51
7666: PUSH
7667: LD_INT 52
7669: PUSH
7670: LD_INT 60
7672: PUSH
7673: LD_INT 61
7675: PUSH
7676: EMPTY
7677: LIST
7678: LIST
7679: LIST
7680: LIST
7681: LIST
7682: LIST
7683: LIST
7684: LIST
7685: LIST
7686: LIST
7687: LIST
7688: LIST
7689: LIST
7690: LIST
7691: LIST
7692: LIST
7693: LIST
7694: LIST
7695: ST_TO_ADDR
// buildings := [ 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 10 , 15 , 16 , 17 , 19 , 20 , 26 , 27 , 29 , 30 , 31 , 32 , 36 ] ;
7696: LD_ADDR_VAR 0 6
7700: PUSH
7701: LD_INT 0
7703: PUSH
7704: LD_INT 1
7706: PUSH
7707: LD_INT 2
7709: PUSH
7710: LD_INT 3
7712: PUSH
7713: LD_INT 4
7715: PUSH
7716: LD_INT 5
7718: PUSH
7719: LD_INT 6
7721: PUSH
7722: LD_INT 7
7724: PUSH
7725: LD_INT 8
7727: PUSH
7728: LD_INT 10
7730: PUSH
7731: LD_INT 15
7733: PUSH
7734: LD_INT 16
7736: PUSH
7737: LD_INT 17
7739: PUSH
7740: LD_INT 19
7742: PUSH
7743: LD_INT 20
7745: PUSH
7746: LD_INT 26
7748: PUSH
7749: LD_INT 27
7751: PUSH
7752: LD_INT 29
7754: PUSH
7755: LD_INT 30
7757: PUSH
7758: LD_INT 31
7760: PUSH
7761: LD_INT 32
7763: PUSH
7764: LD_INT 36
7766: PUSH
7767: EMPTY
7768: LIST
7769: LIST
7770: LIST
7771: LIST
7772: LIST
7773: LIST
7774: LIST
7775: LIST
7776: LIST
7777: LIST
7778: LIST
7779: LIST
7780: LIST
7781: LIST
7782: LIST
7783: LIST
7784: LIST
7785: LIST
7786: LIST
7787: LIST
7788: LIST
7789: LIST
7790: ST_TO_ADDR
// end ; 2 :
7791: GO 8208
7793: LD_INT 2
7795: DOUBLE
7796: EQUAL
7797: IFTRUE 7801
7799: GO 7998
7801: POP
// begin techs := [ 35 , 45 , 46 , 47 , 5 , 6 , 7 , 15 , 17 , 20 , 70 , 69 , 39 , 41 , 42 , 48 , 49 , 50 , 51 , 52 , 60 , 61 , 66 ] ;
7802: LD_ADDR_VAR 0 5
7806: PUSH
7807: LD_INT 35
7809: PUSH
7810: LD_INT 45
7812: PUSH
7813: LD_INT 46
7815: PUSH
7816: LD_INT 47
7818: PUSH
7819: LD_INT 5
7821: PUSH
7822: LD_INT 6
7824: PUSH
7825: LD_INT 7
7827: PUSH
7828: LD_INT 15
7830: PUSH
7831: LD_INT 17
7833: PUSH
7834: LD_INT 20
7836: PUSH
7837: LD_INT 70
7839: PUSH
7840: LD_INT 69
7842: PUSH
7843: LD_INT 39
7845: PUSH
7846: LD_INT 41
7848: PUSH
7849: LD_INT 42
7851: PUSH
7852: LD_INT 48
7854: PUSH
7855: LD_INT 49
7857: PUSH
7858: LD_INT 50
7860: PUSH
7861: LD_INT 51
7863: PUSH
7864: LD_INT 52
7866: PUSH
7867: LD_INT 60
7869: PUSH
7870: LD_INT 61
7872: PUSH
7873: LD_INT 66
7875: PUSH
7876: EMPTY
7877: LIST
7878: LIST
7879: LIST
7880: LIST
7881: LIST
7882: LIST
7883: LIST
7884: LIST
7885: LIST
7886: LIST
7887: LIST
7888: LIST
7889: LIST
7890: LIST
7891: LIST
7892: LIST
7893: LIST
7894: LIST
7895: LIST
7896: LIST
7897: LIST
7898: LIST
7899: LIST
7900: ST_TO_ADDR
// buildings := [ 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 10 , 13 , 15 , 16 , 17 , 20 , 23 , 26 , 27 , 29 , 30 , 31 , 32 ] ;
7901: LD_ADDR_VAR 0 6
7905: PUSH
7906: LD_INT 0
7908: PUSH
7909: LD_INT 1
7911: PUSH
7912: LD_INT 2
7914: PUSH
7915: LD_INT 3
7917: PUSH
7918: LD_INT 4
7920: PUSH
7921: LD_INT 5
7923: PUSH
7924: LD_INT 6
7926: PUSH
7927: LD_INT 7
7929: PUSH
7930: LD_INT 8
7932: PUSH
7933: LD_INT 10
7935: PUSH
7936: LD_INT 13
7938: PUSH
7939: LD_INT 15
7941: PUSH
7942: LD_INT 16
7944: PUSH
7945: LD_INT 17
7947: PUSH
7948: LD_INT 20
7950: PUSH
7951: LD_INT 23
7953: PUSH
7954: LD_INT 26
7956: PUSH
7957: LD_INT 27
7959: PUSH
7960: LD_INT 29
7962: PUSH
7963: LD_INT 30
7965: PUSH
7966: LD_INT 31
7968: PUSH
7969: LD_INT 32
7971: PUSH
7972: EMPTY
7973: LIST
7974: LIST
7975: LIST
7976: LIST
7977: LIST
7978: LIST
7979: LIST
7980: LIST
7981: LIST
7982: LIST
7983: LIST
7984: LIST
7985: LIST
7986: LIST
7987: LIST
7988: LIST
7989: LIST
7990: LIST
7991: LIST
7992: LIST
7993: LIST
7994: LIST
7995: ST_TO_ADDR
// end ; 3 :
7996: GO 8208
7998: LD_INT 3
8000: DOUBLE
8001: EQUAL
8002: IFTRUE 8006
8004: GO 8207
8006: POP
// begin techs := [ 46 , 47 , 9 , 20 , 21 , 22 , 30 , 32 , 27 , 69 , 39 , 44 , 48 , 49 , 50 , 51 , 52 , 54 , 57 , 58 , 63 ] ;
8007: LD_ADDR_VAR 0 5
8011: PUSH
8012: LD_INT 46
8014: PUSH
8015: LD_INT 47
8017: PUSH
8018: LD_INT 9
8020: PUSH
8021: LD_INT 20
8023: PUSH
8024: LD_INT 21
8026: PUSH
8027: LD_INT 22
8029: PUSH
8030: LD_INT 30
8032: PUSH
8033: LD_INT 32
8035: PUSH
8036: LD_INT 27
8038: PUSH
8039: LD_INT 69
8041: PUSH
8042: LD_INT 39
8044: PUSH
8045: LD_INT 44
8047: PUSH
8048: LD_INT 48
8050: PUSH
8051: LD_INT 49
8053: PUSH
8054: LD_INT 50
8056: PUSH
8057: LD_INT 51
8059: PUSH
8060: LD_INT 52
8062: PUSH
8063: LD_INT 54
8065: PUSH
8066: LD_INT 57
8068: PUSH
8069: LD_INT 58
8071: PUSH
8072: LD_INT 63
8074: PUSH
8075: EMPTY
8076: LIST
8077: LIST
8078: LIST
8079: LIST
8080: LIST
8081: LIST
8082: LIST
8083: LIST
8084: LIST
8085: LIST
8086: LIST
8087: LIST
8088: LIST
8089: LIST
8090: LIST
8091: LIST
8092: LIST
8093: LIST
8094: LIST
8095: LIST
8096: LIST
8097: ST_TO_ADDR
// buildings := [ 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 10 , 11 , 12 , 14 , 16 , 17 , 19 , 21 , 24 , 26 , 28 , 29 , 30 , 31 , 32 , 33 ] ;
8098: LD_ADDR_VAR 0 6
8102: PUSH
8103: LD_INT 0
8105: PUSH
8106: LD_INT 1
8108: PUSH
8109: LD_INT 2
8111: PUSH
8112: LD_INT 3
8114: PUSH
8115: LD_INT 4
8117: PUSH
8118: LD_INT 5
8120: PUSH
8121: LD_INT 6
8123: PUSH
8124: LD_INT 7
8126: PUSH
8127: LD_INT 8
8129: PUSH
8130: LD_INT 10
8132: PUSH
8133: LD_INT 11
8135: PUSH
8136: LD_INT 12
8138: PUSH
8139: LD_INT 14
8141: PUSH
8142: LD_INT 16
8144: PUSH
8145: LD_INT 17
8147: PUSH
8148: LD_INT 19
8150: PUSH
8151: LD_INT 21
8153: PUSH
8154: LD_INT 24
8156: PUSH
8157: LD_INT 26
8159: PUSH
8160: LD_INT 28
8162: PUSH
8163: LD_INT 29
8165: PUSH
8166: LD_INT 30
8168: PUSH
8169: LD_INT 31
8171: PUSH
8172: LD_INT 32
8174: PUSH
8175: LD_INT 33
8177: PUSH
8178: EMPTY
8179: LIST
8180: LIST
8181: LIST
8182: LIST
8183: LIST
8184: LIST
8185: LIST
8186: LIST
8187: LIST
8188: LIST
8189: LIST
8190: LIST
8191: LIST
8192: LIST
8193: LIST
8194: LIST
8195: LIST
8196: LIST
8197: LIST
8198: LIST
8199: LIST
8200: LIST
8201: LIST
8202: LIST
8203: LIST
8204: ST_TO_ADDR
// end ; end ;
8205: GO 8208
8207: POP
// end ; 3 :
8208: GO 9930
8210: LD_INT 3
8212: DOUBLE
8213: EQUAL
8214: IFTRUE 8218
8216: GO 9034
8218: POP
// begin case nation of 1 :
8219: LD_VAR 0 2
8223: PUSH
8224: LD_INT 1
8226: DOUBLE
8227: EQUAL
8228: IFTRUE 8232
8230: GO 8501
8232: POP
// begin techs := [ 35 , 45 , 46 , 47 , 6 , 7 , 12 , 13 , 10 , 15 , 16 , 20 , 21 , 22 , 32 , 27 , 69 , 39 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 57 , 58 , 59 , 60 , 61 , 62 ] ;
8233: LD_ADDR_VAR 0 5
8237: PUSH
8238: LD_INT 35
8240: PUSH
8241: LD_INT 45
8243: PUSH
8244: LD_INT 46
8246: PUSH
8247: LD_INT 47
8249: PUSH
8250: LD_INT 6
8252: PUSH
8253: LD_INT 7
8255: PUSH
8256: LD_INT 12
8258: PUSH
8259: LD_INT 13
8261: PUSH
8262: LD_INT 10
8264: PUSH
8265: LD_INT 15
8267: PUSH
8268: LD_INT 16
8270: PUSH
8271: LD_INT 20
8273: PUSH
8274: LD_INT 21
8276: PUSH
8277: LD_INT 22
8279: PUSH
8280: LD_INT 32
8282: PUSH
8283: LD_INT 27
8285: PUSH
8286: LD_INT 69
8288: PUSH
8289: LD_INT 39
8291: PUSH
8292: LD_INT 40
8294: PUSH
8295: LD_INT 48
8297: PUSH
8298: LD_INT 49
8300: PUSH
8301: LD_INT 50
8303: PUSH
8304: LD_INT 51
8306: PUSH
8307: LD_INT 52
8309: PUSH
8310: LD_INT 53
8312: PUSH
8313: LD_INT 54
8315: PUSH
8316: LD_INT 55
8318: PUSH
8319: LD_INT 57
8321: PUSH
8322: LD_INT 58
8324: PUSH
8325: LD_INT 59
8327: PUSH
8328: LD_INT 60
8330: PUSH
8331: LD_INT 61
8333: PUSH
8334: LD_INT 62
8336: PUSH
8337: EMPTY
8338: LIST
8339: LIST
8340: LIST
8341: LIST
8342: LIST
8343: LIST
8344: LIST
8345: LIST
8346: LIST
8347: LIST
8348: LIST
8349: LIST
8350: LIST
8351: LIST
8352: LIST
8353: LIST
8354: LIST
8355: LIST
8356: LIST
8357: LIST
8358: LIST
8359: LIST
8360: LIST
8361: LIST
8362: LIST
8363: LIST
8364: LIST
8365: LIST
8366: LIST
8367: LIST
8368: LIST
8369: LIST
8370: LIST
8371: ST_TO_ADDR
// buildings := [ 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 10 , 11 , 12 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 36 ] ;
8372: LD_ADDR_VAR 0 6
8376: PUSH
8377: LD_INT 0
8379: PUSH
8380: LD_INT 1
8382: PUSH
8383: LD_INT 2
8385: PUSH
8386: LD_INT 3
8388: PUSH
8389: LD_INT 4
8391: PUSH
8392: LD_INT 5
8394: PUSH
8395: LD_INT 6
8397: PUSH
8398: LD_INT 7
8400: PUSH
8401: LD_INT 8
8403: PUSH
8404: LD_INT 10
8406: PUSH
8407: LD_INT 11
8409: PUSH
8410: LD_INT 12
8412: PUSH
8413: LD_INT 15
8415: PUSH
8416: LD_INT 16
8418: PUSH
8419: LD_INT 17
8421: PUSH
8422: LD_INT 18
8424: PUSH
8425: LD_INT 19
8427: PUSH
8428: LD_INT 20
8430: PUSH
8431: LD_INT 21
8433: PUSH
8434: LD_INT 24
8436: PUSH
8437: LD_INT 25
8439: PUSH
8440: LD_INT 26
8442: PUSH
8443: LD_INT 27
8445: PUSH
8446: LD_INT 28
8448: PUSH
8449: LD_INT 29
8451: PUSH
8452: LD_INT 30
8454: PUSH
8455: LD_INT 31
8457: PUSH
8458: LD_INT 32
8460: PUSH
8461: LD_INT 33
8463: PUSH
8464: LD_INT 36
8466: PUSH
8467: EMPTY
8468: LIST
8469: LIST
8470: LIST
8471: LIST
8472: LIST
8473: LIST
8474: LIST
8475: LIST
8476: LIST
8477: LIST
8478: LIST
8479: LIST
8480: LIST
8481: LIST
8482: LIST
8483: LIST
8484: LIST
8485: LIST
8486: LIST
8487: LIST
8488: LIST
8489: LIST
8490: LIST
8491: LIST
8492: LIST
8493: LIST
8494: LIST
8495: LIST
8496: LIST
8497: LIST
8498: ST_TO_ADDR
// end ; 2 :
8499: GO 9032
8501: LD_INT 2
8503: DOUBLE
8504: EQUAL
8505: IFTRUE 8509
8507: GO 8774
8509: POP
// begin techs := [ 35 , 45 , 46 , 47 , 5 , 6 , 7 , 8 , 15 , 18 , 17 , 20 , 21 , 22 , 26 , 70 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 60 , 61 , 62 , 66 , 67 , 68 ] ;
8510: LD_ADDR_VAR 0 5
8514: PUSH
8515: LD_INT 35
8517: PUSH
8518: LD_INT 45
8520: PUSH
8521: LD_INT 46
8523: PUSH
8524: LD_INT 47
8526: PUSH
8527: LD_INT 5
8529: PUSH
8530: LD_INT 6
8532: PUSH
8533: LD_INT 7
8535: PUSH
8536: LD_INT 8
8538: PUSH
8539: LD_INT 15
8541: PUSH
8542: LD_INT 18
8544: PUSH
8545: LD_INT 17
8547: PUSH
8548: LD_INT 20
8550: PUSH
8551: LD_INT 21
8553: PUSH
8554: LD_INT 22
8556: PUSH
8557: LD_INT 26
8559: PUSH
8560: LD_INT 70
8562: PUSH
8563: LD_INT 69
8565: PUSH
8566: LD_INT 39
8568: PUSH
8569: LD_INT 40
8571: PUSH
8572: LD_INT 41
8574: PUSH
8575: LD_INT 42
8577: PUSH
8578: LD_INT 43
8580: PUSH
8581: LD_INT 48
8583: PUSH
8584: LD_INT 49
8586: PUSH
8587: LD_INT 50
8589: PUSH
8590: LD_INT 51
8592: PUSH
8593: LD_INT 52
8595: PUSH
8596: LD_INT 53
8598: PUSH
8599: LD_INT 54
8601: PUSH
8602: LD_INT 55
8604: PUSH
8605: LD_INT 60
8607: PUSH
8608: LD_INT 61
8610: PUSH
8611: LD_INT 62
8613: PUSH
8614: LD_INT 66
8616: PUSH
8617: LD_INT 67
8619: PUSH
8620: LD_INT 68
8622: PUSH
8623: EMPTY
8624: LIST
8625: LIST
8626: LIST
8627: LIST
8628: LIST
8629: LIST
8630: LIST
8631: LIST
8632: LIST
8633: LIST
8634: LIST
8635: LIST
8636: LIST
8637: LIST
8638: LIST
8639: LIST
8640: LIST
8641: LIST
8642: LIST
8643: LIST
8644: LIST
8645: LIST
8646: LIST
8647: LIST
8648: LIST
8649: LIST
8650: LIST
8651: LIST
8652: LIST
8653: LIST
8654: LIST
8655: LIST
8656: LIST
8657: LIST
8658: LIST
8659: LIST
8660: ST_TO_ADDR
// buildings := [ 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 10 , 11 , 13 , 15 , 16 , 17 , 18 , 20 , 21 , 23 , 26 , 27 , 28 , 29 , 30 , 31 , 32 ] ;
8661: LD_ADDR_VAR 0 6
8665: PUSH
8666: LD_INT 0
8668: PUSH
8669: LD_INT 1
8671: PUSH
8672: LD_INT 2
8674: PUSH
8675: LD_INT 3
8677: PUSH
8678: LD_INT 4
8680: PUSH
8681: LD_INT 5
8683: PUSH
8684: LD_INT 6
8686: PUSH
8687: LD_INT 7
8689: PUSH
8690: LD_INT 8
8692: PUSH
8693: LD_INT 10
8695: PUSH
8696: LD_INT 11
8698: PUSH
8699: LD_INT 13
8701: PUSH
8702: LD_INT 15
8704: PUSH
8705: LD_INT 16
8707: PUSH
8708: LD_INT 17
8710: PUSH
8711: LD_INT 18
8713: PUSH
8714: LD_INT 20
8716: PUSH
8717: LD_INT 21
8719: PUSH
8720: LD_INT 23
8722: PUSH
8723: LD_INT 26
8725: PUSH
8726: LD_INT 27
8728: PUSH
8729: LD_INT 28
8731: PUSH
8732: LD_INT 29
8734: PUSH
8735: LD_INT 30
8737: PUSH
8738: LD_INT 31
8740: PUSH
8741: LD_INT 32
8743: PUSH
8744: EMPTY
8745: LIST
8746: LIST
8747: LIST
8748: LIST
8749: LIST
8750: LIST
8751: LIST
8752: LIST
8753: LIST
8754: LIST
8755: LIST
8756: LIST
8757: LIST
8758: LIST
8759: LIST
8760: LIST
8761: LIST
8762: LIST
8763: LIST
8764: LIST
8765: LIST
8766: LIST
8767: LIST
8768: LIST
8769: LIST
8770: LIST
8771: ST_TO_ADDR
// end ; 3 :
8772: GO 9032
8774: LD_INT 3
8776: DOUBLE
8777: EQUAL
8778: IFTRUE 8782
8780: GO 9031
8782: POP
// begin techs := [ 46 , 47 , 9 , 20 , 19 , 21 , 22 , 28 , 29 , 30 , 37 , 32 , 27 , 69 , 39 , 34 , 40 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 ] ;
8783: LD_ADDR_VAR 0 5
8787: PUSH
8788: LD_INT 46
8790: PUSH
8791: LD_INT 47
8793: PUSH
8794: LD_INT 9
8796: PUSH
8797: LD_INT 20
8799: PUSH
8800: LD_INT 19
8802: PUSH
8803: LD_INT 21
8805: PUSH
8806: LD_INT 22
8808: PUSH
8809: LD_INT 28
8811: PUSH
8812: LD_INT 29
8814: PUSH
8815: LD_INT 30
8817: PUSH
8818: LD_INT 37
8820: PUSH
8821: LD_INT 32
8823: PUSH
8824: LD_INT 27
8826: PUSH
8827: LD_INT 69
8829: PUSH
8830: LD_INT 39
8832: PUSH
8833: LD_INT 34
8835: PUSH
8836: LD_INT 40
8838: PUSH
8839: LD_INT 44
8841: PUSH
8842: LD_INT 48
8844: PUSH
8845: LD_INT 49
8847: PUSH
8848: LD_INT 50
8850: PUSH
8851: LD_INT 51
8853: PUSH
8854: LD_INT 52
8856: PUSH
8857: LD_INT 53
8859: PUSH
8860: LD_INT 54
8862: PUSH
8863: LD_INT 55
8865: PUSH
8866: LD_INT 56
8868: PUSH
8869: LD_INT 57
8871: PUSH
8872: LD_INT 58
8874: PUSH
8875: LD_INT 59
8877: PUSH
8878: LD_INT 63
8880: PUSH
8881: LD_INT 64
8883: PUSH
8884: EMPTY
8885: LIST
8886: LIST
8887: LIST
8888: LIST
8889: LIST
8890: LIST
8891: LIST
8892: LIST
8893: LIST
8894: LIST
8895: LIST
8896: LIST
8897: LIST
8898: LIST
8899: LIST
8900: LIST
8901: LIST
8902: LIST
8903: LIST
8904: LIST
8905: LIST
8906: LIST
8907: LIST
8908: LIST
8909: LIST
8910: LIST
8911: LIST
8912: LIST
8913: LIST
8914: LIST
8915: LIST
8916: LIST
8917: ST_TO_ADDR
// buildings := [ 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 10 , 11 , 12 , 14 , 16 , 17 , 18 , 19 , 21 , 24 , 26 , 28 , 29 , 30 , 31 , 32 , 33 ] ;
8918: LD_ADDR_VAR 0 6
8922: PUSH
8923: LD_INT 0
8925: PUSH
8926: LD_INT 1
8928: PUSH
8929: LD_INT 2
8931: PUSH
8932: LD_INT 3
8934: PUSH
8935: LD_INT 4
8937: PUSH
8938: LD_INT 5
8940: PUSH
8941: LD_INT 6
8943: PUSH
8944: LD_INT 7
8946: PUSH
8947: LD_INT 8
8949: PUSH
8950: LD_INT 10
8952: PUSH
8953: LD_INT 11
8955: PUSH
8956: LD_INT 12
8958: PUSH
8959: LD_INT 14
8961: PUSH
8962: LD_INT 16
8964: PUSH
8965: LD_INT 17
8967: PUSH
8968: LD_INT 18
8970: PUSH
8971: LD_INT 19
8973: PUSH
8974: LD_INT 21
8976: PUSH
8977: LD_INT 24
8979: PUSH
8980: LD_INT 26
8982: PUSH
8983: LD_INT 28
8985: PUSH
8986: LD_INT 29
8988: PUSH
8989: LD_INT 30
8991: PUSH
8992: LD_INT 31
8994: PUSH
8995: LD_INT 32
8997: PUSH
8998: LD_INT 33
9000: PUSH
9001: EMPTY
9002: LIST
9003: LIST
9004: LIST
9005: LIST
9006: LIST
9007: LIST
9008: LIST
9009: LIST
9010: LIST
9011: LIST
9012: LIST
9013: LIST
9014: LIST
9015: LIST
9016: LIST
9017: LIST
9018: LIST
9019: LIST
9020: LIST
9021: LIST
9022: LIST
9023: LIST
9024: LIST
9025: LIST
9026: LIST
9027: LIST
9028: ST_TO_ADDR
// end ; end ;
9029: GO 9032
9031: POP
// end ; 4 :
9032: GO 9930
9034: LD_INT 4
9036: DOUBLE
9037: EQUAL
9038: IFTRUE 9042
9040: GO 9929
9042: POP
// begin case nation of 1 :
9043: LD_VAR 0 2
9047: PUSH
9048: LD_INT 1
9050: DOUBLE
9051: EQUAL
9052: IFTRUE 9056
9054: GO 9345
9056: POP
// begin techs := [ 35 , 45 , 46 , 47 , 6 , 7 , 12 , 13 , 10 , 14 , 15 , 16 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 ] ;
9057: LD_ADDR_VAR 0 5
9061: PUSH
9062: LD_INT 35
9064: PUSH
9065: LD_INT 45
9067: PUSH
9068: LD_INT 46
9070: PUSH
9071: LD_INT 47
9073: PUSH
9074: LD_INT 6
9076: PUSH
9077: LD_INT 7
9079: PUSH
9080: LD_INT 12
9082: PUSH
9083: LD_INT 13
9085: PUSH
9086: LD_INT 10
9088: PUSH
9089: LD_INT 14
9091: PUSH
9092: LD_INT 15
9094: PUSH
9095: LD_INT 16
9097: PUSH
9098: LD_INT 20
9100: PUSH
9101: LD_INT 21
9103: PUSH
9104: LD_INT 22
9106: PUSH
9107: LD_INT 25
9109: PUSH
9110: LD_INT 32
9112: PUSH
9113: LD_INT 27
9115: PUSH
9116: LD_INT 36
9118: PUSH
9119: LD_INT 69
9121: PUSH
9122: LD_INT 39
9124: PUSH
9125: LD_INT 34
9127: PUSH
9128: LD_INT 40
9130: PUSH
9131: LD_INT 48
9133: PUSH
9134: LD_INT 49
9136: PUSH
9137: LD_INT 50
9139: PUSH
9140: LD_INT 51
9142: PUSH
9143: LD_INT 52
9145: PUSH
9146: LD_INT 53
9148: PUSH
9149: LD_INT 54
9151: PUSH
9152: LD_INT 55
9154: PUSH
9155: LD_INT 56
9157: PUSH
9158: LD_INT 57
9160: PUSH
9161: LD_INT 58
9163: PUSH
9164: LD_INT 59
9166: PUSH
9167: LD_INT 60
9169: PUSH
9170: LD_INT 61
9172: PUSH
9173: LD_INT 62
9175: PUSH
9176: EMPTY
9177: LIST
9178: LIST
9179: LIST
9180: LIST
9181: LIST
9182: LIST
9183: LIST
9184: LIST
9185: LIST
9186: LIST
9187: LIST
9188: LIST
9189: LIST
9190: LIST
9191: LIST
9192: LIST
9193: LIST
9194: LIST
9195: LIST
9196: LIST
9197: LIST
9198: LIST
9199: LIST
9200: LIST
9201: LIST
9202: LIST
9203: LIST
9204: LIST
9205: LIST
9206: LIST
9207: LIST
9208: LIST
9209: LIST
9210: LIST
9211: LIST
9212: LIST
9213: LIST
9214: LIST
9215: ST_TO_ADDR
// buildings := [ 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 10 , 11 , 12 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 36 ] ;
9216: LD_ADDR_VAR 0 6
9220: PUSH
9221: LD_INT 0
9223: PUSH
9224: LD_INT 1
9226: PUSH
9227: LD_INT 2
9229: PUSH
9230: LD_INT 3
9232: PUSH
9233: LD_INT 4
9235: PUSH
9236: LD_INT 5
9238: PUSH
9239: LD_INT 6
9241: PUSH
9242: LD_INT 7
9244: PUSH
9245: LD_INT 8
9247: PUSH
9248: LD_INT 10
9250: PUSH
9251: LD_INT 11
9253: PUSH
9254: LD_INT 12
9256: PUSH
9257: LD_INT 15
9259: PUSH
9260: LD_INT 16
9262: PUSH
9263: LD_INT 17
9265: PUSH
9266: LD_INT 18
9268: PUSH
9269: LD_INT 19
9271: PUSH
9272: LD_INT 20
9274: PUSH
9275: LD_INT 21
9277: PUSH
9278: LD_INT 24
9280: PUSH
9281: LD_INT 25
9283: PUSH
9284: LD_INT 26
9286: PUSH
9287: LD_INT 27
9289: PUSH
9290: LD_INT 28
9292: PUSH
9293: LD_INT 29
9295: PUSH
9296: LD_INT 30
9298: PUSH
9299: LD_INT 31
9301: PUSH
9302: LD_INT 32
9304: PUSH
9305: LD_INT 33
9307: PUSH
9308: LD_INT 36
9310: PUSH
9311: EMPTY
9312: LIST
9313: LIST
9314: LIST
9315: LIST
9316: LIST
9317: LIST
9318: LIST
9319: LIST
9320: LIST
9321: LIST
9322: LIST
9323: LIST
9324: LIST
9325: LIST
9326: LIST
9327: LIST
9328: LIST
9329: LIST
9330: LIST
9331: LIST
9332: LIST
9333: LIST
9334: LIST
9335: LIST
9336: LIST
9337: LIST
9338: LIST
9339: LIST
9340: LIST
9341: LIST
9342: ST_TO_ADDR
// end ; 2 :
9343: GO 9920
9345: LD_INT 2
9347: DOUBLE
9348: EQUAL
9349: IFTRUE 9353
9351: GO 9626
9353: POP
// begin techs := [ 35 , 45 , 46 , 47 , 5 , 6 , 7 , 8 , 15 , 18 , 17 , 20 , 21 , 22 , 25 , 26 , 70 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 ] ;
9354: LD_ADDR_VAR 0 5
9358: PUSH
9359: LD_INT 35
9361: PUSH
9362: LD_INT 45
9364: PUSH
9365: LD_INT 46
9367: PUSH
9368: LD_INT 47
9370: PUSH
9371: LD_INT 5
9373: PUSH
9374: LD_INT 6
9376: PUSH
9377: LD_INT 7
9379: PUSH
9380: LD_INT 8
9382: PUSH
9383: LD_INT 15
9385: PUSH
9386: LD_INT 18
9388: PUSH
9389: LD_INT 17
9391: PUSH
9392: LD_INT 20
9394: PUSH
9395: LD_INT 21
9397: PUSH
9398: LD_INT 22
9400: PUSH
9401: LD_INT 25
9403: PUSH
9404: LD_INT 26
9406: PUSH
9407: LD_INT 70
9409: PUSH
9410: LD_INT 69
9412: PUSH
9413: LD_INT 39
9415: PUSH
9416: LD_INT 40
9418: PUSH
9419: LD_INT 41
9421: PUSH
9422: LD_INT 42
9424: PUSH
9425: LD_INT 43
9427: PUSH
9428: LD_INT 48
9430: PUSH
9431: LD_INT 49
9433: PUSH
9434: LD_INT 50
9436: PUSH
9437: LD_INT 51
9439: PUSH
9440: LD_INT 52
9442: PUSH
9443: LD_INT 53
9445: PUSH
9446: LD_INT 54
9448: PUSH
9449: LD_INT 55
9451: PUSH
9452: LD_INT 56
9454: PUSH
9455: LD_INT 60
9457: PUSH
9458: LD_INT 61
9460: PUSH
9461: LD_INT 62
9463: PUSH
9464: LD_INT 66
9466: PUSH
9467: LD_INT 67
9469: PUSH
9470: LD_INT 68
9472: PUSH
9473: EMPTY
9474: LIST
9475: LIST
9476: LIST
9477: LIST
9478: LIST
9479: LIST
9480: LIST
9481: LIST
9482: LIST
9483: LIST
9484: LIST
9485: LIST
9486: LIST
9487: LIST
9488: LIST
9489: LIST
9490: LIST
9491: LIST
9492: LIST
9493: LIST
9494: LIST
9495: LIST
9496: LIST
9497: LIST
9498: LIST
9499: LIST
9500: LIST
9501: LIST
9502: LIST
9503: LIST
9504: LIST
9505: LIST
9506: LIST
9507: LIST
9508: LIST
9509: LIST
9510: LIST
9511: LIST
9512: ST_TO_ADDR
// buildings := [ 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 10 , 11 , 13 , 15 , 16 , 17 , 18 , 20 , 21 , 23 , 26 , 27 , 28 , 29 , 30 , 31 , 32 ] ;
9513: LD_ADDR_VAR 0 6
9517: PUSH
9518: LD_INT 0
9520: PUSH
9521: LD_INT 1
9523: PUSH
9524: LD_INT 2
9526: PUSH
9527: LD_INT 3
9529: PUSH
9530: LD_INT 4
9532: PUSH
9533: LD_INT 5
9535: PUSH
9536: LD_INT 6
9538: PUSH
9539: LD_INT 7
9541: PUSH
9542: LD_INT 8
9544: PUSH
9545: LD_INT 10
9547: PUSH
9548: LD_INT 11
9550: PUSH
9551: LD_INT 13
9553: PUSH
9554: LD_INT 15
9556: PUSH
9557: LD_INT 16
9559: PUSH
9560: LD_INT 17
9562: PUSH
9563: LD_INT 18
9565: PUSH
9566: LD_INT 20
9568: PUSH
9569: LD_INT 21
9571: PUSH
9572: LD_INT 23
9574: PUSH
9575: LD_INT 26
9577: PUSH
9578: LD_INT 27
9580: PUSH
9581: LD_INT 28
9583: PUSH
9584: LD_INT 29
9586: PUSH
9587: LD_INT 30
9589: PUSH
9590: LD_INT 31
9592: PUSH
9593: LD_INT 32
9595: PUSH
9596: EMPTY
9597: LIST
9598: LIST
9599: LIST
9600: LIST
9601: LIST
9602: LIST
9603: LIST
9604: LIST
9605: LIST
9606: LIST
9607: LIST
9608: LIST
9609: LIST
9610: LIST
9611: LIST
9612: LIST
9613: LIST
9614: LIST
9615: LIST
9616: LIST
9617: LIST
9618: LIST
9619: LIST
9620: LIST
9621: LIST
9622: LIST
9623: ST_TO_ADDR
// end ; 3 :
9624: GO 9920
9626: LD_INT 3
9628: DOUBLE
9629: EQUAL
9630: IFTRUE 9634
9632: GO 9919
9634: POP
// begin techs := [ 46 , 47 , 9 , 20 , 19 , 21 , 22 , 23 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 ] ;
9635: LD_ADDR_VAR 0 5
9639: PUSH
9640: LD_INT 46
9642: PUSH
9643: LD_INT 47
9645: PUSH
9646: LD_INT 9
9648: PUSH
9649: LD_INT 20
9651: PUSH
9652: LD_INT 19
9654: PUSH
9655: LD_INT 21
9657: PUSH
9658: LD_INT 22
9660: PUSH
9661: LD_INT 23
9663: PUSH
9664: LD_INT 25
9666: PUSH
9667: LD_INT 28
9669: PUSH
9670: LD_INT 29
9672: PUSH
9673: LD_INT 30
9675: PUSH
9676: LD_INT 31
9678: PUSH
9679: LD_INT 37
9681: PUSH
9682: LD_INT 38
9684: PUSH
9685: LD_INT 32
9687: PUSH
9688: LD_INT 27
9690: PUSH
9691: LD_INT 33
9693: PUSH
9694: LD_INT 69
9696: PUSH
9697: LD_INT 39
9699: PUSH
9700: LD_INT 34
9702: PUSH
9703: LD_INT 40
9705: PUSH
9706: LD_INT 71
9708: PUSH
9709: LD_INT 44
9711: PUSH
9712: LD_INT 48
9714: PUSH
9715: LD_INT 49
9717: PUSH
9718: LD_INT 50
9720: PUSH
9721: LD_INT 51
9723: PUSH
9724: LD_INT 52
9726: PUSH
9727: LD_INT 53
9729: PUSH
9730: LD_INT 54
9732: PUSH
9733: LD_INT 55
9735: PUSH
9736: LD_INT 56
9738: PUSH
9739: LD_INT 57
9741: PUSH
9742: LD_INT 58
9744: PUSH
9745: LD_INT 59
9747: PUSH
9748: LD_INT 63
9750: PUSH
9751: LD_INT 64
9753: PUSH
9754: LD_INT 65
9756: PUSH
9757: EMPTY
9758: LIST
9759: LIST
9760: LIST
9761: LIST
9762: LIST
9763: LIST
9764: LIST
9765: LIST
9766: LIST
9767: LIST
9768: LIST
9769: LIST
9770: LIST
9771: LIST
9772: LIST
9773: LIST
9774: LIST
9775: LIST
9776: LIST
9777: LIST
9778: LIST
9779: LIST
9780: LIST
9781: LIST
9782: LIST
9783: LIST
9784: LIST
9785: LIST
9786: LIST
9787: LIST
9788: LIST
9789: LIST
9790: LIST
9791: LIST
9792: LIST
9793: LIST
9794: LIST
9795: LIST
9796: LIST
9797: ST_TO_ADDR
// buildings := [ 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 10 , 11 , 12 , 14 , 16 , 17 , 18 , 19 , 21 , 24 , 26 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 37 ] ;
9798: LD_ADDR_VAR 0 6
9802: PUSH
9803: LD_INT 0
9805: PUSH
9806: LD_INT 1
9808: PUSH
9809: LD_INT 2
9811: PUSH
9812: LD_INT 3
9814: PUSH
9815: LD_INT 4
9817: PUSH
9818: LD_INT 5
9820: PUSH
9821: LD_INT 6
9823: PUSH
9824: LD_INT 7
9826: PUSH
9827: LD_INT 8
9829: PUSH
9830: LD_INT 10
9832: PUSH
9833: LD_INT 11
9835: PUSH
9836: LD_INT 12
9838: PUSH
9839: LD_INT 14
9841: PUSH
9842: LD_INT 16
9844: PUSH
9845: LD_INT 17
9847: PUSH
9848: LD_INT 18
9850: PUSH
9851: LD_INT 19
9853: PUSH
9854: LD_INT 21
9856: PUSH
9857: LD_INT 24
9859: PUSH
9860: LD_INT 26
9862: PUSH
9863: LD_INT 28
9865: PUSH
9866: LD_INT 29
9868: PUSH
9869: LD_INT 30
9871: PUSH
9872: LD_INT 31
9874: PUSH
9875: LD_INT 32
9877: PUSH
9878: LD_INT 33
9880: PUSH
9881: LD_INT 34
9883: PUSH
9884: LD_INT 37
9886: PUSH
9887: EMPTY
9888: LIST
9889: LIST
9890: LIST
9891: LIST
9892: LIST
9893: LIST
9894: LIST
9895: LIST
9896: LIST
9897: LIST
9898: LIST
9899: LIST
9900: LIST
9901: LIST
9902: LIST
9903: LIST
9904: LIST
9905: LIST
9906: LIST
9907: LIST
9908: LIST
9909: LIST
9910: LIST
9911: LIST
9912: LIST
9913: LIST
9914: LIST
9915: LIST
9916: ST_TO_ADDR
// end ; end ;
9917: GO 9920
9919: POP
// ToLua ( LUA_SideTechMax(); ) ;
9920: LD_STRING LUA_SideTechMax();
9922: PPUSH
9923: CALL_OW 559
// end ; end ;
9927: GO 9930
9929: POP
// TechUnlock ( techs , side , 1 ) ;
9930: LD_VAR 0 5
9934: PPUSH
9935: LD_VAR 0 3
9939: PPUSH
9940: LD_INT 1
9942: PPUSH
9943: CALL 6157 0 3
// BuildingUnlock ( buildings , side , 1 ) ;
9947: LD_VAR 0 6
9951: PPUSH
9952: LD_VAR 0 3
9956: PPUSH
9957: LD_INT 1
9959: PPUSH
9960: CALL 6202 0 3
// end ; end_of_file
9964: LD_VAR 0 4
9968: RET
// on BuildingStarted ( b , u ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
9969: LD_VAR 0 1
9973: PPUSH
9974: CALL_OW 266
9978: PUSH
9979: LD_INT 0
9981: PUSH
9982: LD_INT 1
9984: PUSH
9985: EMPTY
9986: LIST
9987: LIST
9988: IN
9989: IFFALSE 10124
// begin SetBName ( b , @ & GetSide ( b ) ) ;
9991: LD_VAR 0 1
9995: PPUSH
9996: LD_STRING @
9998: PUSH
9999: LD_VAR 0 1
10003: PPUSH
10004: CALL_OW 255
10008: STR
10009: PPUSH
10010: CALL_OW 500
// if GetSide ( b ) = Your_Side then
10014: LD_VAR 0 1
10018: PPUSH
10019: CALL_OW 255
10023: PUSH
10024: LD_OWVAR 2
10028: EQUAL
10029: IFFALSE 10096
// if FilterAllUnits ( [ [ f_side , b ] , [ f_btype , b_depot ] , [ f_or ] , [ f_btype , b_warehouse ] ] ) + 0 = 0 then
10031: LD_INT 22
10033: PUSH
10034: LD_VAR 0 1
10038: PUSH
10039: EMPTY
10040: LIST
10041: LIST
10042: PUSH
10043: LD_INT 30
10045: PUSH
10046: LD_INT 0
10048: PUSH
10049: EMPTY
10050: LIST
10051: LIST
10052: PUSH
10053: LD_INT 2
10055: PUSH
10056: EMPTY
10057: LIST
10058: PUSH
10059: LD_INT 30
10061: PUSH
10062: LD_INT 1
10064: PUSH
10065: EMPTY
10066: LIST
10067: LIST
10068: PUSH
10069: EMPTY
10070: LIST
10071: LIST
10072: LIST
10073: LIST
10074: PPUSH
10075: CALL_OW 69
10079: PUSH
10080: LD_INT 0
10082: PLUS
10083: PUSH
10084: LD_INT 0
10086: EQUAL
10087: IFFALSE 10096
// ToLua ( LUA_IsDepot(); ) ;
10089: LD_STRING LUA_IsDepot();
10091: PPUSH
10092: CALL_OW 559
// if side_tech_lvl [ GetSide ( b ) ] = 4 then
10096: LD_EXP 31
10100: PUSH
10101: LD_VAR 0 1
10105: PPUSH
10106: CALL_OW 255
10110: ARRAY
10111: PUSH
10112: LD_INT 4
10114: EQUAL
10115: IFFALSE 10124
// ToLua ( LUA_SideTechMax() ) ;
10117: LD_STRING LUA_SideTechMax()
10119: PPUSH
10120: CALL_OW 559
// end ; end ;
10124: PPOPN 2
10126: END
// on BuildingCaptured ( b , o , e ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
10127: LD_VAR 0 1
10131: PPUSH
10132: CALL_OW 266
10136: PUSH
10137: LD_INT 0
10139: PUSH
10140: LD_INT 1
10142: PUSH
10143: EMPTY
10144: LIST
10145: LIST
10146: IN
10147: IFFALSE 10330
// begin SetBName ( b , @ & GetSide ( b ) ) ;
10149: LD_VAR 0 1
10153: PPUSH
10154: LD_STRING @
10156: PUSH
10157: LD_VAR 0 1
10161: PPUSH
10162: CALL_OW 255
10166: STR
10167: PPUSH
10168: CALL_OW 500
// if FilterAllUnits ( [ [ f_side , b ] , [ f_btype , b_depot ] , [ f_or ] , [ f_btype , b_warehouse ] ] ) + 0 = 0 then
10172: LD_INT 22
10174: PUSH
10175: LD_VAR 0 1
10179: PUSH
10180: EMPTY
10181: LIST
10182: LIST
10183: PUSH
10184: LD_INT 30
10186: PUSH
10187: LD_INT 0
10189: PUSH
10190: EMPTY
10191: LIST
10192: LIST
10193: PUSH
10194: LD_INT 2
10196: PUSH
10197: EMPTY
10198: LIST
10199: PUSH
10200: LD_INT 30
10202: PUSH
10203: LD_INT 1
10205: PUSH
10206: EMPTY
10207: LIST
10208: LIST
10209: PUSH
10210: EMPTY
10211: LIST
10212: LIST
10213: LIST
10214: LIST
10215: PPUSH
10216: CALL_OW 69
10220: PUSH
10221: LD_INT 0
10223: PLUS
10224: PUSH
10225: LD_INT 0
10227: EQUAL
10228: IFFALSE 10237
// ToLua ( LUA_IsDepot(); ) ;
10230: LD_STRING LUA_IsDepot();
10232: PPUSH
10233: CALL_OW 559
// if side_tech_lvl [ GetSide ( b ) ] = 4 then
10237: LD_EXP 31
10241: PUSH
10242: LD_VAR 0 1
10246: PPUSH
10247: CALL_OW 255
10251: ARRAY
10252: PUSH
10253: LD_INT 4
10255: EQUAL
10256: IFFALSE 10265
// ToLua ( LUA_SideTechMax() ) ;
10258: LD_STRING LUA_SideTechMax()
10260: PPUSH
10261: CALL_OW 559
// if FilterAllUnits ( [ [ f_side , o ] , [ f_btype , b_depot ] , [ f_or ] , [ f_btype , b_warehouse ] ] ) + 0 = 0 then
10265: LD_INT 22
10267: PUSH
10268: LD_VAR 0 2
10272: PUSH
10273: EMPTY
10274: LIST
10275: LIST
10276: PUSH
10277: LD_INT 30
10279: PUSH
10280: LD_INT 0
10282: PUSH
10283: EMPTY
10284: LIST
10285: LIST
10286: PUSH
10287: LD_INT 2
10289: PUSH
10290: EMPTY
10291: LIST
10292: PUSH
10293: LD_INT 30
10295: PUSH
10296: LD_INT 1
10298: PUSH
10299: EMPTY
10300: LIST
10301: LIST
10302: PUSH
10303: EMPTY
10304: LIST
10305: LIST
10306: LIST
10307: LIST
10308: PPUSH
10309: CALL_OW 69
10313: PUSH
10314: LD_INT 0
10316: PLUS
10317: PUSH
10318: LD_INT 0
10320: EQUAL
10321: IFFALSE 10330
// ToLua ( LUA_NoDepot(); ) ;
10323: LD_STRING LUA_NoDepot();
10325: PPUSH
10326: CALL_OW 559
// end ; end ;
10330: PPOPN 3
10332: END
// on UnitDestroyed ( i ) do var side ;
10333: LD_INT 0
10335: PPUSH
// begin if GetType ( i ) = 1 then
10336: LD_VAR 0 1
10340: PPUSH
10341: CALL_OW 247
10345: PUSH
10346: LD_INT 1
10348: EQUAL
10349: IFFALSE 10412
// begin side := GetSide ( i ) ;
10351: LD_ADDR_VAR 0 2
10355: PUSH
10356: LD_VAR 0 1
10360: PPUSH
10361: CALL_OW 255
10365: ST_TO_ADDR
// side_soldiers := Replace ( side_soldiers , side , side_soldiers [ side ] diff i ) ;
10366: LD_ADDR_EXP 46
10370: PUSH
10371: LD_EXP 46
10375: PPUSH
10376: LD_VAR 0 2
10380: PPUSH
10381: LD_EXP 46
10385: PUSH
10386: LD_VAR 0 2
10390: ARRAY
10391: PUSH
10392: LD_VAR 0 1
10396: DIFF
10397: PPUSH
10398: CALL_OW 1
10402: ST_TO_ADDR
// DidPlayerLose ( side ) ;
10403: LD_VAR 0 2
10407: PPUSH
10408: CALL 5769 0 1
// end ; if GetBType ( i ) in [ b_depot , b_warehouse ] then
10412: LD_VAR 0 1
10416: PPUSH
10417: CALL_OW 266
10421: PUSH
10422: LD_INT 0
10424: PUSH
10425: LD_INT 1
10427: PUSH
10428: EMPTY
10429: LIST
10430: LIST
10431: IN
10432: IFFALSE 10499
// if FilterAllUnits ( [ [ f_side , i ] , [ f_btype , b_depot ] , [ f_or ] , [ f_btype , b_warehouse ] ] ) + 0 = 0 then
10434: LD_INT 22
10436: PUSH
10437: LD_VAR 0 1
10441: PUSH
10442: EMPTY
10443: LIST
10444: LIST
10445: PUSH
10446: LD_INT 30
10448: PUSH
10449: LD_INT 0
10451: PUSH
10452: EMPTY
10453: LIST
10454: LIST
10455: PUSH
10456: LD_INT 2
10458: PUSH
10459: EMPTY
10460: LIST
10461: PUSH
10462: LD_INT 30
10464: PUSH
10465: LD_INT 1
10467: PUSH
10468: EMPTY
10469: LIST
10470: LIST
10471: PUSH
10472: EMPTY
10473: LIST
10474: LIST
10475: LIST
10476: LIST
10477: PPUSH
10478: CALL_OW 69
10482: PUSH
10483: LD_INT 0
10485: PLUS
10486: PUSH
10487: LD_INT 0
10489: EQUAL
10490: IFFALSE 10499
// ToLua ( LUA_NoDepot(); ) ;
10492: LD_STRING LUA_NoDepot();
10494: PPUSH
10495: CALL_OW 559
// end ;
10499: PPOPN 2
10501: END
// on SailEvent ( ID ) do var i , j , lost ;
10502: LD_INT 0
10504: PPUSH
10505: PPUSH
10506: PPUSH
// begin case ID of 66 :
10507: LD_VAR 0 1
10511: PUSH
10512: LD_INT 66
10514: DOUBLE
10515: EQUAL
10516: IFTRUE 10520
10518: GO 10666
10520: POP
// begin for i = 1 to Teams do
10521: LD_ADDR_VAR 0 2
10525: PUSH
10526: DOUBLE
10527: LD_INT 1
10529: DEC
10530: ST_TO_ADDR
10531: LD_EXP 6
10535: PUSH
10536: FOR_TO
10537: IFFALSE 10662
// begin lost := 0 ;
10539: LD_ADDR_VAR 0 4
10543: PUSH
10544: LD_INT 0
10546: ST_TO_ADDR
// for j in Teams [ i ] do
10547: LD_ADDR_VAR 0 3
10551: PUSH
10552: LD_EXP 6
10556: PUSH
10557: LD_VAR 0 2
10561: ARRAY
10562: PUSH
10563: FOR_IN
10564: IFFALSE 10598
// if side_isalive [ j ] = 0 then
10566: LD_EXP 53
10570: PUSH
10571: LD_VAR 0 3
10575: ARRAY
10576: PUSH
10577: LD_INT 0
10579: EQUAL
10580: IFFALSE 10596
// lost := lost + 1 ;
10582: LD_ADDR_VAR 0 4
10586: PUSH
10587: LD_VAR 0 4
10591: PUSH
10592: LD_INT 1
10594: PLUS
10595: ST_TO_ADDR
10596: GO 10563
10598: POP
10599: POP
// if lost = Teams [ i ] + 0 then
10600: LD_VAR 0 4
10604: PUSH
10605: LD_EXP 6
10609: PUSH
10610: LD_VAR 0 2
10614: ARRAY
10615: PUSH
10616: LD_INT 0
10618: PLUS
10619: EQUAL
10620: IFFALSE 10658
// if IAmSpec or Your_Side in Teams [ i ] then
10622: CALL_OW 531
10626: PUSH
10627: LD_OWVAR 2
10631: PUSH
10632: LD_EXP 6
10636: PUSH
10637: LD_VAR 0 2
10641: ARRAY
10642: IN
10643: OR
10644: IFFALSE 10652
// YouLostInMultiplayer else
10646: CALL_OW 107
10650: GO 10656
// YouWinInMultiplayer else
10652: CALL_OW 106
10656: GO 10660
// continue end ;
10658: GO 10536
10660: GO 10536
10662: POP
10663: POP
// end ; end ;
10664: GO 10667
10666: POP
// end ; end_of_file
10667: PPOPN 4
10669: END
// export function CYCLIC_CrateSpawn ; var i , j , k , amount ; begin
10670: LD_INT 0
10672: PPUSH
10673: PPUSH
10674: PPUSH
10675: PPUSH
10676: PPUSH
// for i = 1 to position_drop_zones do
10677: LD_ADDR_VAR 0 2
10681: PUSH
10682: DOUBLE
10683: LD_INT 1
10685: DEC
10686: ST_TO_ADDR
10687: LD_EXP 36
10691: PUSH
10692: FOR_TO
10693: IFFALSE 10843
// begin amount := Rand ( position_drop_zones [ i ] [ 1 ] , 5 ) ;
10695: LD_ADDR_VAR 0 5
10699: PUSH
10700: LD_EXP 36
10704: PUSH
10705: LD_VAR 0 2
10709: ARRAY
10710: PUSH
10711: LD_INT 1
10713: ARRAY
10714: PPUSH
10715: LD_INT 5
10717: PPUSH
10718: CALL_OW 12
10722: ST_TO_ADDR
// for j = 3 to position_drop_zones [ i ] do
10723: LD_ADDR_VAR 0 3
10727: PUSH
10728: DOUBLE
10729: LD_INT 3
10731: DEC
10732: ST_TO_ADDR
10733: LD_EXP 36
10737: PUSH
10738: LD_VAR 0 2
10742: ARRAY
10743: PUSH
10744: FOR_TO
10745: IFFALSE 10839
// if Prob ( position_drop_zones [ i ] [ 2 ] ) then
10747: LD_EXP 36
10751: PUSH
10752: LD_VAR 0 2
10756: ARRAY
10757: PUSH
10758: LD_INT 2
10760: ARRAY
10761: PPUSH
10762: CALL_OW 13
10766: IFFALSE 10837
// for k = 1 to position_drop_zones [ i ] [ j ] do
10768: LD_ADDR_VAR 0 4
10772: PUSH
10773: DOUBLE
10774: LD_INT 1
10776: DEC
10777: ST_TO_ADDR
10778: LD_EXP 36
10782: PUSH
10783: LD_VAR 0 2
10787: ARRAY
10788: PUSH
10789: LD_VAR 0 3
10793: ARRAY
10794: PUSH
10795: FOR_TO
10796: IFFALSE 10835
// CreateCratesArea ( amount , position_drop_zones [ i ] [ j ] [ k ] , true ) ;
10798: LD_VAR 0 5
10802: PPUSH
10803: LD_EXP 36
10807: PUSH
10808: LD_VAR 0 2
10812: ARRAY
10813: PUSH
10814: LD_VAR 0 3
10818: ARRAY
10819: PUSH
10820: LD_VAR 0 4
10824: ARRAY
10825: PPUSH
10826: LD_INT 1
10828: PPUSH
10829: CALL_OW 55
10833: GO 10795
10835: POP
10836: POP
10837: GO 10744
10839: POP
10840: POP
// end ;
10841: GO 10692
10843: POP
10844: POP
// end ;
10845: LD_VAR 0 1
10849: RET
// export function CYCLIC_HumanSpawn ; var i , j , entity , areas , outside , side , arguments , human ; begin
10850: LD_INT 0
10852: PPUSH
10853: PPUSH
10854: PPUSH
10855: PPUSH
10856: PPUSH
10857: PPUSH
10858: PPUSH
10859: PPUSH
10860: PPUSH
// side_soldier_count := [ [ 1 , 0 ] , [ 2 , 0 ] , [ 3 , 0 ] , [ 4 , 0 ] , [ 5 , 0 ] , [ 6 , 0 ] , [ 7 , 0 ] , [ 8 , 0 ] ] ;
10861: LD_ADDR_EXP 47
10865: PUSH
10866: LD_INT 1
10868: PUSH
10869: LD_INT 0
10871: PUSH
10872: EMPTY
10873: LIST
10874: LIST
10875: PUSH
10876: LD_INT 2
10878: PUSH
10879: LD_INT 0
10881: PUSH
10882: EMPTY
10883: LIST
10884: LIST
10885: PUSH
10886: LD_INT 3
10888: PUSH
10889: LD_INT 0
10891: PUSH
10892: EMPTY
10893: LIST
10894: LIST
10895: PUSH
10896: LD_INT 4
10898: PUSH
10899: LD_INT 0
10901: PUSH
10902: EMPTY
10903: LIST
10904: LIST
10905: PUSH
10906: LD_INT 5
10908: PUSH
10909: LD_INT 0
10911: PUSH
10912: EMPTY
10913: LIST
10914: LIST
10915: PUSH
10916: LD_INT 6
10918: PUSH
10919: LD_INT 0
10921: PUSH
10922: EMPTY
10923: LIST
10924: LIST
10925: PUSH
10926: LD_INT 7
10928: PUSH
10929: LD_INT 0
10931: PUSH
10932: EMPTY
10933: LIST
10934: LIST
10935: PUSH
10936: LD_INT 8
10938: PUSH
10939: LD_INT 0
10941: PUSH
10942: EMPTY
10943: LIST
10944: LIST
10945: PUSH
10946: EMPTY
10947: LIST
10948: LIST
10949: LIST
10950: LIST
10951: LIST
10952: LIST
10953: LIST
10954: LIST
10955: ST_TO_ADDR
// arguments := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
10956: LD_ADDR_VAR 0 8
10960: PUSH
10961: LD_INT 0
10963: PUSH
10964: LD_INT 0
10966: PUSH
10967: LD_INT 0
10969: PUSH
10970: LD_INT 0
10972: PUSH
10973: LD_INT 0
10975: PUSH
10976: LD_INT 0
10978: PUSH
10979: LD_INT 0
10981: PUSH
10982: LD_INT 0
10984: PUSH
10985: EMPTY
10986: LIST
10987: LIST
10988: LIST
10989: LIST
10990: LIST
10991: LIST
10992: LIST
10993: LIST
10994: ST_TO_ADDR
// for i = 8 downto 1 do
10995: LD_ADDR_VAR 0 2
10999: PUSH
11000: DOUBLE
11001: LD_INT 8
11003: INC
11004: ST_TO_ADDR
11005: LD_INT 1
11007: PUSH
11008: FOR_DOWNTO
11009: IFFALSE 11102
// begin side_soldier_count := Replace ( side_soldier_count , i , Replace ( side_soldier_count [ i ] , 2 , side_soldiers [ i ] + 0 ) ) ;
11011: LD_ADDR_EXP 47
11015: PUSH
11016: LD_EXP 47
11020: PPUSH
11021: LD_VAR 0 2
11025: PPUSH
11026: LD_EXP 47
11030: PUSH
11031: LD_VAR 0 2
11035: ARRAY
11036: PPUSH
11037: LD_INT 2
11039: PPUSH
11040: LD_EXP 46
11044: PUSH
11045: LD_VAR 0 2
11049: ARRAY
11050: PUSH
11051: LD_INT 0
11053: PLUS
11054: PPUSH
11055: CALL_OW 1
11059: PPUSH
11060: CALL_OW 1
11064: ST_TO_ADDR
// arguments := Replace ( arguments , i , side_soldiers [ i ] + 0 ) ;
11065: LD_ADDR_VAR 0 8
11069: PUSH
11070: LD_VAR 0 8
11074: PPUSH
11075: LD_VAR 0 2
11079: PPUSH
11080: LD_EXP 46
11084: PUSH
11085: LD_VAR 0 2
11089: ARRAY
11090: PUSH
11091: LD_INT 0
11093: PLUS
11094: PPUSH
11095: CALL_OW 1
11099: ST_TO_ADDR
// end ;
11100: GO 11008
11102: POP
11103: POP
// for i = 8 downto 1 do
11104: LD_ADDR_VAR 0 2
11108: PUSH
11109: DOUBLE
11110: LD_INT 8
11112: INC
11113: ST_TO_ADDR
11114: LD_INT 1
11116: PUSH
11117: FOR_DOWNTO
11118: IFFALSE 11155
// if not side_isalive [ i ] then
11120: LD_EXP 53
11124: PUSH
11125: LD_VAR 0 2
11129: ARRAY
11130: NOT
11131: IFFALSE 11153
// side_soldier_count := Delete ( side_soldier_count , i ) ;
11133: LD_ADDR_EXP 47
11137: PUSH
11138: LD_EXP 47
11142: PPUSH
11143: LD_VAR 0 2
11147: PPUSH
11148: CALL_OW 3
11152: ST_TO_ADDR
11153: GO 11117
11155: POP
11156: POP
// side_soldier_count := SortListByListAsc ( side_soldier_count , arguments ) ;
11157: LD_ADDR_EXP 47
11161: PUSH
11162: LD_EXP 47
11166: PPUSH
11167: LD_VAR 0 8
11171: PPUSH
11172: CALL_OW 76
11176: ST_TO_ADDR
// for i = side_soldier_count + 0 downto 1 do
11177: LD_ADDR_VAR 0 2
11181: PUSH
11182: DOUBLE
11183: LD_EXP 47
11187: PUSH
11188: LD_INT 0
11190: PLUS
11191: INC
11192: ST_TO_ADDR
11193: LD_INT 1
11195: PUSH
11196: FOR_DOWNTO
11197: IFFALSE 11251
// begin if side_soldier_count [ i ] [ 2 ] > side_soldier_count [ 1 ] [ 2 ] then
11199: LD_EXP 47
11203: PUSH
11204: LD_VAR 0 2
11208: ARRAY
11209: PUSH
11210: LD_INT 2
11212: ARRAY
11213: PUSH
11214: LD_EXP 47
11218: PUSH
11219: LD_INT 1
11221: ARRAY
11222: PUSH
11223: LD_INT 2
11225: ARRAY
11226: GREATER
11227: IFFALSE 11249
// side_soldier_count := Delete ( side_soldier_count , i ) ;
11229: LD_ADDR_EXP 47
11233: PUSH
11234: LD_EXP 47
11238: PPUSH
11239: LD_VAR 0 2
11243: PPUSH
11244: CALL_OW 3
11248: ST_TO_ADDR
// end ;
11249: GO 11196
11251: POP
11252: POP
// side := side_soldier_count [ Rand ( 1 , side_soldier_count ) ] [ 1 ] ;
11253: LD_ADDR_VAR 0 7
11257: PUSH
11258: LD_EXP 47
11262: PUSH
11263: LD_INT 1
11265: PPUSH
11266: LD_EXP 47
11270: PPUSH
11271: CALL_OW 12
11275: ARRAY
11276: PUSH
11277: LD_INT 1
11279: ARRAY
11280: ST_TO_ADDR
// if side_soldiers [ side ] > 0 then
11281: LD_EXP 46
11285: PUSH
11286: LD_VAR 0 7
11290: ARRAY
11291: PUSH
11292: LD_INT 0
11294: GREATER
11295: IFFALSE 11335
// entity := side_soldiers [ side ] [ Rand ( 1 , side_soldiers [ side ] ) ] else
11297: LD_ADDR_VAR 0 4
11301: PUSH
11302: LD_EXP 46
11306: PUSH
11307: LD_VAR 0 7
11311: ARRAY
11312: PUSH
11313: LD_INT 1
11315: PPUSH
11316: LD_EXP 46
11320: PUSH
11321: LD_VAR 0 7
11325: ARRAY
11326: PPUSH
11327: CALL_OW 12
11331: ARRAY
11332: ST_TO_ADDR
11333: GO 11424
// begin entity := FilterAllUnits ( [ [ f_side , side ] , [ f_type , 3 ] , [ f_btype , 0 ] , [ f_or ] , [ f_btype , 1 ] ] ) ;
11335: LD_ADDR_VAR 0 4
11339: PUSH
11340: LD_INT 22
11342: PUSH
11343: LD_VAR 0 7
11347: PUSH
11348: EMPTY
11349: LIST
11350: LIST
11351: PUSH
11352: LD_INT 21
11354: PUSH
11355: LD_INT 3
11357: PUSH
11358: EMPTY
11359: LIST
11360: LIST
11361: PUSH
11362: LD_INT 30
11364: PUSH
11365: LD_INT 0
11367: PUSH
11368: EMPTY
11369: LIST
11370: LIST
11371: PUSH
11372: LD_INT 2
11374: PUSH
11375: EMPTY
11376: LIST
11377: PUSH
11378: LD_INT 30
11380: PUSH
11381: LD_INT 1
11383: PUSH
11384: EMPTY
11385: LIST
11386: LIST
11387: PUSH
11388: EMPTY
11389: LIST
11390: LIST
11391: LIST
11392: LIST
11393: LIST
11394: PPUSH
11395: CALL_OW 69
11399: ST_TO_ADDR
// entity := entity [ Rand ( 1 , entity ) ] ;
11400: LD_ADDR_VAR 0 4
11404: PUSH
11405: LD_VAR 0 4
11409: PUSH
11410: LD_INT 1
11412: PPUSH
11413: LD_VAR 0 4
11417: PPUSH
11418: CALL_OW 12
11422: ARRAY
11423: ST_TO_ADDR
// end ; outside := 0 ;
11424: LD_ADDR_VAR 0 6
11428: PUSH
11429: LD_INT 0
11431: ST_TO_ADDR
// areas := 0 ;
11432: LD_ADDR_VAR 0 5
11436: PUSH
11437: LD_INT 0
11439: ST_TO_ADDR
// for i = 1 to position_drop_zones do
11440: LD_ADDR_VAR 0 2
11444: PUSH
11445: DOUBLE
11446: LD_INT 1
11448: DEC
11449: ST_TO_ADDR
11450: LD_EXP 36
11454: PUSH
11455: FOR_TO
11456: IFFALSE 11748
// for j = 1 to position_drop_zones [ i ] [ 3 ] do
11458: LD_ADDR_VAR 0 3
11462: PUSH
11463: DOUBLE
11464: LD_INT 1
11466: DEC
11467: ST_TO_ADDR
11468: LD_EXP 36
11472: PUSH
11473: LD_VAR 0 2
11477: ARRAY
11478: PUSH
11479: LD_INT 3
11481: ARRAY
11482: PUSH
11483: FOR_TO
11484: IFFALSE 11744
// begin areas := areas + 1 ;
11486: LD_ADDR_VAR 0 5
11490: PUSH
11491: LD_VAR 0 5
11495: PUSH
11496: LD_INT 1
11498: PLUS
11499: ST_TO_ADDR
// if IsInArea ( entity , position_drop_zones [ i ] [ 3 ] [ j ] ) then
11500: LD_VAR 0 4
11504: PPUSH
11505: LD_EXP 36
11509: PUSH
11510: LD_VAR 0 2
11514: ARRAY
11515: PUSH
11516: LD_INT 3
11518: ARRAY
11519: PUSH
11520: LD_VAR 0 3
11524: ARRAY
11525: PPUSH
11526: CALL_OW 308
11530: IFFALSE 11728
// begin human := PrepareCharacters ( side , [ Rand ( 0 , 5 ) , Rand ( 0 , 5 ) , Rand ( 0 , 5 ) , Rand ( 0 , 5 ) , Rand ( 0 , 5 ) , Rand ( 0 , 5 ) , Rand ( 0 , 5 ) , Rand ( 0 , 5 ) ] , new_character_EON ) ;
11532: LD_ADDR_VAR 0 9
11536: PUSH
11537: LD_VAR 0 7
11541: PPUSH
11542: LD_INT 0
11544: PPUSH
11545: LD_INT 5
11547: PPUSH
11548: CALL_OW 12
11552: PUSH
11553: LD_INT 0
11555: PPUSH
11556: LD_INT 5
11558: PPUSH
11559: CALL_OW 12
11563: PUSH
11564: LD_INT 0
11566: PPUSH
11567: LD_INT 5
11569: PPUSH
11570: CALL_OW 12
11574: PUSH
11575: LD_INT 0
11577: PPUSH
11578: LD_INT 5
11580: PPUSH
11581: CALL_OW 12
11585: PUSH
11586: LD_INT 0
11588: PPUSH
11589: LD_INT 5
11591: PPUSH
11592: CALL_OW 12
11596: PUSH
11597: LD_INT 0
11599: PPUSH
11600: LD_INT 5
11602: PPUSH
11603: CALL_OW 12
11607: PUSH
11608: LD_INT 0
11610: PPUSH
11611: LD_INT 5
11613: PPUSH
11614: CALL_OW 12
11618: PUSH
11619: LD_INT 0
11621: PPUSH
11622: LD_INT 5
11624: PPUSH
11625: CALL_OW 12
11629: PUSH
11630: EMPTY
11631: LIST
11632: LIST
11633: LIST
11634: LIST
11635: LIST
11636: LIST
11637: LIST
11638: LIST
11639: PPUSH
11640: LD_EXP 44
11644: PPUSH
11645: CALL 5364 0 3
11649: ST_TO_ADDR
// PlaceUnitArea ( human , position_drop_zones [ i ] [ 3 ] [ j ] , true ) ;
11650: LD_VAR 0 9
11654: PPUSH
11655: LD_EXP 36
11659: PUSH
11660: LD_VAR 0 2
11664: ARRAY
11665: PUSH
11666: LD_INT 3
11668: ARRAY
11669: PUSH
11670: LD_VAR 0 3
11674: ARRAY
11675: PPUSH
11676: LD_INT 1
11678: PPUSH
11679: CALL_OW 49
// side_soldiers := Replace ( side_soldiers , side , side_soldiers [ side ] ^ human ) ;
11683: LD_ADDR_EXP 46
11687: PUSH
11688: LD_EXP 46
11692: PPUSH
11693: LD_VAR 0 7
11697: PPUSH
11698: LD_EXP 46
11702: PUSH
11703: LD_VAR 0 7
11707: ARRAY
11708: PUSH
11709: LD_VAR 0 9
11713: ADD
11714: PPUSH
11715: CALL_OW 1
11719: ST_TO_ADDR
// exit ;
11720: POP
11721: POP
11722: POP
11723: POP
11724: GO 11996
// end else
11726: GO 11742
// begin outside := outside + 1 ;
11728: LD_ADDR_VAR 0 6
11732: PUSH
11733: LD_VAR 0 6
11737: PUSH
11738: LD_INT 1
11740: PLUS
11741: ST_TO_ADDR
// end ; end ;
11742: GO 11483
11744: POP
11745: POP
11746: GO 11455
11748: POP
11749: POP
// if areas = outside then
11750: LD_VAR 0 5
11754: PUSH
11755: LD_VAR 0 6
11759: EQUAL
11760: IFFALSE 11996
// begin i := Rand ( 1 , position_drop_zones ) ;
11762: LD_ADDR_VAR 0 2
11766: PUSH
11767: LD_INT 1
11769: PPUSH
11770: LD_EXP 36
11774: PPUSH
11775: CALL_OW 12
11779: ST_TO_ADDR
// j := Rand ( 1 , position_drop_zones [ i ] [ 3 ] ) ;
11780: LD_ADDR_VAR 0 3
11784: PUSH
11785: LD_INT 1
11787: PPUSH
11788: LD_EXP 36
11792: PUSH
11793: LD_VAR 0 2
11797: ARRAY
11798: PUSH
11799: LD_INT 3
11801: ARRAY
11802: PPUSH
11803: CALL_OW 12
11807: ST_TO_ADDR
// human := PrepareCharacters ( side , [ Rand ( 0 , 5 ) , Rand ( 0 , 5 ) , Rand ( 0 , 5 ) , Rand ( 0 , 5 ) , Rand ( 0 , 5 ) , Rand ( 0 , 5 ) , Rand ( 0 , 5 ) , Rand ( 0 , 5 ) ] , new_character_EON ) ;
11808: LD_ADDR_VAR 0 9
11812: PUSH
11813: LD_VAR 0 7
11817: PPUSH
11818: LD_INT 0
11820: PPUSH
11821: LD_INT 5
11823: PPUSH
11824: CALL_OW 12
11828: PUSH
11829: LD_INT 0
11831: PPUSH
11832: LD_INT 5
11834: PPUSH
11835: CALL_OW 12
11839: PUSH
11840: LD_INT 0
11842: PPUSH
11843: LD_INT 5
11845: PPUSH
11846: CALL_OW 12
11850: PUSH
11851: LD_INT 0
11853: PPUSH
11854: LD_INT 5
11856: PPUSH
11857: CALL_OW 12
11861: PUSH
11862: LD_INT 0
11864: PPUSH
11865: LD_INT 5
11867: PPUSH
11868: CALL_OW 12
11872: PUSH
11873: LD_INT 0
11875: PPUSH
11876: LD_INT 5
11878: PPUSH
11879: CALL_OW 12
11883: PUSH
11884: LD_INT 0
11886: PPUSH
11887: LD_INT 5
11889: PPUSH
11890: CALL_OW 12
11894: PUSH
11895: LD_INT 0
11897: PPUSH
11898: LD_INT 5
11900: PPUSH
11901: CALL_OW 12
11905: PUSH
11906: EMPTY
11907: LIST
11908: LIST
11909: LIST
11910: LIST
11911: LIST
11912: LIST
11913: LIST
11914: LIST
11915: PPUSH
11916: LD_EXP 44
11920: PPUSH
11921: CALL 5364 0 3
11925: ST_TO_ADDR
// PlaceUnitArea ( human , position_drop_zones [ i ] [ 3 ] [ j ] , true ) ;
11926: LD_VAR 0 9
11930: PPUSH
11931: LD_EXP 36
11935: PUSH
11936: LD_VAR 0 2
11940: ARRAY
11941: PUSH
11942: LD_INT 3
11944: ARRAY
11945: PUSH
11946: LD_VAR 0 3
11950: ARRAY
11951: PPUSH
11952: LD_INT 1
11954: PPUSH
11955: CALL_OW 49
// side_soldiers := Replace ( side_soldiers , side , side_soldiers [ side ] ^ human ) ;
11959: LD_ADDR_EXP 46
11963: PUSH
11964: LD_EXP 46
11968: PPUSH
11969: LD_VAR 0 7
11973: PPUSH
11974: LD_EXP 46
11978: PUSH
11979: LD_VAR 0 7
11983: ARRAY
11984: PUSH
11985: LD_VAR 0 9
11989: ADD
11990: PPUSH
11991: CALL_OW 1
11995: ST_TO_ADDR
// end ; end ;
11996: LD_VAR 0 1
12000: RET
// export function CYCLIC_Fluctuation ; var change ; begin
12001: LD_INT 0
12003: PPUSH
12004: PPUSH
// current_spawn_rate := Rand ( - 5 , 5 ) ;
12005: LD_ADDR_EXP 41
12009: PUSH
12010: LD_INT 5
12012: NEG
12013: PPUSH
12014: LD_INT 5
12016: PPUSH
12017: CALL_OW 12
12021: ST_TO_ADDR
// fluctuation_modifier_crates := fluctuation_base_crates * current_spawn_rate ;
12022: LD_ADDR_EXP 39
12026: PUSH
12027: LD_EXP 37
12031: PUSH
12032: LD_EXP 41
12036: MUL
12037: ST_TO_ADDR
// fluctuation_modifier_humans := fluctuation_base_humans * current_spawn_rate ;
12038: LD_ADDR_EXP 40
12042: PUSH
12043: LD_EXP 38
12047: PUSH
12048: LD_EXP 41
12052: MUL
12053: ST_TO_ADDR
// change := current_spawn_rate - past_spawn_rate ;
12054: LD_ADDR_VAR 0 2
12058: PUSH
12059: LD_EXP 41
12063: PUSH
12064: LD_EXP 42
12068: MINUS
12069: ST_TO_ADDR
// case change of - 10 .. - 6 :
12070: LD_VAR 0 2
12074: PUSH
12075: LD_INT 10
12077: NEG
12078: DOUBLE
12079: GREATEREQUAL
12080: IFFALSE 12089
12082: LD_INT 6
12084: NEG
12085: DOUBLE
12086: LESSEQUAL
12087: IFTRUE 12091
12089: GO 12094
12091: POP
// begin end ; - 5 .. - 1 :
12092: GO 12159
12094: LD_INT 5
12096: NEG
12097: DOUBLE
12098: GREATEREQUAL
12099: IFFALSE 12108
12101: LD_INT 1
12103: NEG
12104: DOUBLE
12105: LESSEQUAL
12106: IFTRUE 12110
12108: GO 12113
12110: POP
// begin end ; 0 :
12111: GO 12159
12113: LD_INT 0
12115: DOUBLE
12116: EQUAL
12117: IFTRUE 12121
12119: GO 12124
12121: POP
// begin end ; 1 .. 5 :
12122: GO 12159
12124: LD_INT 1
12126: DOUBLE
12127: GREATEREQUAL
12128: IFFALSE 12136
12130: LD_INT 5
12132: DOUBLE
12133: LESSEQUAL
12134: IFTRUE 12138
12136: GO 12141
12138: POP
// begin end ; 6 .. 10 :
12139: GO 12159
12141: LD_INT 6
12143: DOUBLE
12144: GREATEREQUAL
12145: IFFALSE 12153
12147: LD_INT 10
12149: DOUBLE
12150: LESSEQUAL
12151: IFTRUE 12155
12153: GO 12158
12155: POP
// begin end ; end ;
12156: GO 12159
12158: POP
// past_spawn_rate := current_spawn_rate ;
12159: LD_ADDR_EXP 42
12163: PUSH
12164: LD_EXP 41
12168: ST_TO_ADDR
// end ; end_of_file
12169: LD_VAR 0 1
12173: RET
// export ExtraStrings ; export WaitServerStrings ; export function ShowTimer ; var AllStrings ; begin
12174: LD_INT 0
12176: PPUSH
12177: PPUSH
// AllStrings := [ #Multi1x1-Time , tick ] ;
12178: LD_ADDR_VAR 0 2
12182: PUSH
12183: LD_STRING #Multi1x1-Time
12185: PUSH
12186: LD_OWVAR 1
12190: PUSH
12191: EMPTY
12192: LIST
12193: LIST
12194: ST_TO_ADDR
// if WaitServerStrings then
12195: LD_EXP 55
12199: IFFALSE 12217
// AllStrings = AllStrings ^ WaitServerStrings ;
12201: LD_ADDR_VAR 0 2
12205: PUSH
12206: LD_VAR 0 2
12210: PUSH
12211: LD_EXP 55
12215: ADD
12216: ST_TO_ADDR
// if ( ExtraStrings ) then
12217: LD_EXP 54
12221: IFFALSE 12243
// AllStrings := AllStrings ^  ^ ExtraStrings ;
12223: LD_ADDR_VAR 0 2
12227: PUSH
12228: LD_VAR 0 2
12232: PUSH
12233: LD_STRING 
12235: ADD
12236: PUSH
12237: LD_EXP 54
12241: ADD
12242: ST_TO_ADDR
// Display_Strings := AllStrings ;
12243: LD_ADDR_OWVAR 47
12247: PUSH
12248: LD_VAR 0 2
12252: ST_TO_ADDR
// end ; end_of_file
12253: LD_VAR 0 1
12257: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
12258: LD_INT 0
12260: PPUSH
12261: PPUSH
12262: PPUSH
12263: PPUSH
12264: PPUSH
12265: PPUSH
12266: PPUSH
12267: PPUSH
12268: PPUSH
// for i := 1 to 8 do
12269: LD_ADDR_VAR 0 2
12273: PUSH
12274: DOUBLE
12275: LD_INT 1
12277: DEC
12278: ST_TO_ADDR
12279: LD_INT 8
12281: PUSH
12282: FOR_TO
12283: IFFALSE 12667
// begin if Side_Positions [ i ] then
12285: LD_EXP 2
12289: PUSH
12290: LD_VAR 0 2
12294: ARRAY
12295: IFFALSE 12665
// begin people := FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) + 0 ;
12297: LD_ADDR_VAR 0 7
12301: PUSH
12302: LD_INT 22
12304: PUSH
12305: LD_VAR 0 2
12309: PUSH
12310: EMPTY
12311: LIST
12312: LIST
12313: PUSH
12314: LD_INT 21
12316: PUSH
12317: LD_INT 1
12319: PUSH
12320: EMPTY
12321: LIST
12322: LIST
12323: PUSH
12324: EMPTY
12325: LIST
12326: LIST
12327: PPUSH
12328: CALL_OW 69
12332: PUSH
12333: LD_INT 0
12335: PLUS
12336: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
12337: LD_ADDR_VAR 0 9
12341: PUSH
12342: LD_INT 22
12344: PUSH
12345: LD_VAR 0 2
12349: PUSH
12350: EMPTY
12351: LIST
12352: LIST
12353: PUSH
12354: LD_INT 2
12356: PUSH
12357: LD_INT 30
12359: PUSH
12360: LD_INT 0
12362: PUSH
12363: EMPTY
12364: LIST
12365: LIST
12366: PUSH
12367: LD_INT 30
12369: PUSH
12370: LD_INT 1
12372: PUSH
12373: EMPTY
12374: LIST
12375: LIST
12376: PUSH
12377: EMPTY
12378: LIST
12379: LIST
12380: LIST
12381: PUSH
12382: EMPTY
12383: LIST
12384: LIST
12385: PPUSH
12386: CALL_OW 69
12390: ST_TO_ADDR
// crates := 0 ;
12391: LD_ADDR_VAR 0 4
12395: PUSH
12396: LD_INT 0
12398: ST_TO_ADDR
// oil := 0 ;
12399: LD_ADDR_VAR 0 5
12403: PUSH
12404: LD_INT 0
12406: ST_TO_ADDR
// sib := 0 ;
12407: LD_ADDR_VAR 0 6
12411: PUSH
12412: LD_INT 0
12414: ST_TO_ADDR
// if bases then
12415: LD_VAR 0 9
12419: IFFALSE 12525
// begin for j in bases do
12421: LD_ADDR_VAR 0 3
12425: PUSH
12426: LD_VAR 0 9
12430: PUSH
12431: FOR_IN
12432: IFFALSE 12523
// begin base := GetBase ( j ) ;
12434: LD_ADDR_VAR 0 8
12438: PUSH
12439: LD_VAR 0 3
12443: PPUSH
12444: CALL_OW 274
12448: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
12449: LD_ADDR_VAR 0 4
12453: PUSH
12454: LD_VAR 0 4
12458: PUSH
12459: LD_VAR 0 8
12463: PPUSH
12464: LD_INT 1
12466: PPUSH
12467: CALL_OW 275
12471: PLUS
12472: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
12473: LD_ADDR_VAR 0 5
12477: PUSH
12478: LD_VAR 0 5
12482: PUSH
12483: LD_VAR 0 8
12487: PPUSH
12488: LD_INT 2
12490: PPUSH
12491: CALL_OW 275
12495: PLUS
12496: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
12497: LD_ADDR_VAR 0 6
12501: PUSH
12502: LD_VAR 0 6
12506: PUSH
12507: LD_VAR 0 8
12511: PPUSH
12512: LD_INT 3
12514: PPUSH
12515: CALL_OW 275
12519: PLUS
12520: ST_TO_ADDR
// end ;
12521: GO 12431
12523: POP
12524: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
12525: LD_STRING setSpecText(
12527: PUSH
12528: LD_VAR 0 2
12532: STR
12533: PUSH
12534: LD_STRING ,
12536: STR
12537: PUSH
12538: LD_INT 2
12540: STR
12541: PUSH
12542: LD_STRING ,
12544: STR
12545: PUSH
12546: LD_VAR 0 4
12550: STR
12551: PUSH
12552: LD_STRING )
12554: STR
12555: PPUSH
12556: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
12560: LD_STRING setSpecText(
12562: PUSH
12563: LD_VAR 0 2
12567: STR
12568: PUSH
12569: LD_STRING ,
12571: STR
12572: PUSH
12573: LD_INT 3
12575: STR
12576: PUSH
12577: LD_STRING ,
12579: STR
12580: PUSH
12581: LD_VAR 0 5
12585: STR
12586: PUSH
12587: LD_STRING )
12589: STR
12590: PPUSH
12591: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
12595: LD_STRING setSpecText(
12597: PUSH
12598: LD_VAR 0 2
12602: STR
12603: PUSH
12604: LD_STRING ,
12606: STR
12607: PUSH
12608: LD_INT 4
12610: STR
12611: PUSH
12612: LD_STRING ,
12614: STR
12615: PUSH
12616: LD_VAR 0 6
12620: STR
12621: PUSH
12622: LD_STRING )
12624: STR
12625: PPUSH
12626: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
12630: LD_STRING setSpecText(
12632: PUSH
12633: LD_VAR 0 2
12637: STR
12638: PUSH
12639: LD_STRING ,
12641: STR
12642: PUSH
12643: LD_INT 5
12645: STR
12646: PUSH
12647: LD_STRING ,
12649: STR
12650: PUSH
12651: LD_VAR 0 7
12655: STR
12656: PUSH
12657: LD_STRING )
12659: STR
12660: PPUSH
12661: CALL_OW 559
// end ; end ;
12665: GO 12282
12667: POP
12668: POP
// end ;
12669: LD_VAR 0 1
12673: RET
// every 0 0$1 do
12674: GO 12676
12676: DISABLE
// begin ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
12677: LD_STRING setSpecLogoNumber(
12679: PUSH
12680: LD_INT 2
12682: STR
12683: PUSH
12684: LD_STRING ,
12686: STR
12687: PUSH
12688: LD_INT 1
12690: STR
12691: PUSH
12692: LD_STRING )
12694: STR
12695: PPUSH
12696: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
12700: LD_STRING setSpecLogoNumber(
12702: PUSH
12703: LD_INT 3
12705: STR
12706: PUSH
12707: LD_STRING ,
12709: STR
12710: PUSH
12711: LD_INT 2
12713: STR
12714: PUSH
12715: LD_STRING )
12717: STR
12718: PPUSH
12719: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
12723: LD_STRING setSpecLogoNumber(
12725: PUSH
12726: LD_INT 4
12728: STR
12729: PUSH
12730: LD_STRING ,
12732: STR
12733: PUSH
12734: LD_INT 3
12736: STR
12737: PUSH
12738: LD_STRING )
12740: STR
12741: PPUSH
12742: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
12746: LD_STRING setSpecLogoNumber(
12748: PUSH
12749: LD_INT 5
12751: STR
12752: PUSH
12753: LD_STRING ,
12755: STR
12756: PUSH
12757: LD_INT 4
12759: STR
12760: PUSH
12761: LD_STRING )
12763: STR
12764: PPUSH
12765: CALL_OW 559
// end ;
12769: END
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
12770: LD_INT 2
12772: PUSH
12773: LD_INT 30
12775: PUSH
12776: LD_INT 0
12778: PUSH
12779: EMPTY
12780: LIST
12781: LIST
12782: PUSH
12783: LD_INT 30
12785: PUSH
12786: LD_INT 1
12788: PUSH
12789: EMPTY
12790: LIST
12791: LIST
12792: PUSH
12793: EMPTY
12794: LIST
12795: LIST
12796: LIST
12797: PPUSH
12798: CALL_OW 69
12802: IFFALSE 12812
12804: GO 12806
12806: DISABLE
// begin enable ;
12807: ENABLE
// UpdateSpectatorBar ;
12808: CALL 12258 0 0
// end ; end_of_file
12812: END
// export function SA_OnSiberiteRocketExploded ( siberite_rocket_vehicle , target_x , target_y , requestSide ) ; begin
12813: LD_INT 0
12815: PPUSH
// if GetSide ( siberite_rocket_vehicle ) = requestSide then
12816: LD_VAR 0 1
12820: PPUSH
12821: CALL_OW 255
12825: PUSH
12826: LD_VAR 0 4
12830: EQUAL
12831: IFFALSE 12850
// begin SetAchievement ( ACH_RAD ) ;
12833: LD_STRING ACH_RAD
12835: PPUSH
12836: CALL_OW 543
// SetAchievementEx ( ACH_NL , 1 ) ;
12840: LD_STRING ACH_NL
12842: PPUSH
12843: LD_INT 1
12845: PPUSH
12846: CALL_OW 564
// end end ;
12850: LD_VAR 0 5
12854: RET
// export function SA_Win ( side ) ; begin
12855: LD_INT 0
12857: PPUSH
// case side of 1 :
12858: LD_VAR 0 1
12862: PUSH
12863: LD_INT 1
12865: DOUBLE
12866: EQUAL
12867: IFTRUE 12871
12869: GO 12884
12871: POP
// SetAchievementEx ( ACH_AH , 1 ) ; 2 :
12872: LD_STRING ACH_AH
12874: PPUSH
12875: LD_INT 1
12877: PPUSH
12878: CALL_OW 564
12882: GO 13047
12884: LD_INT 2
12886: DOUBLE
12887: EQUAL
12888: IFTRUE 12892
12890: GO 12905
12892: POP
// SetAchievementEx ( ACH_E , 1 ) ; 3 :
12893: LD_STRING ACH_E
12895: PPUSH
12896: LD_INT 1
12898: PPUSH
12899: CALL_OW 564
12903: GO 13047
12905: LD_INT 3
12907: DOUBLE
12908: EQUAL
12909: IFTRUE 12913
12911: GO 12926
12913: POP
// SetAchievementEx ( ACH_OOL , 1 ) ; [ 1 , 2 ] :
12914: LD_STRING ACH_OOL
12916: PPUSH
12917: LD_INT 1
12919: PPUSH
12920: CALL_OW 564
12924: GO 13047
12926: LD_INT 1
12928: PUSH
12929: LD_INT 2
12931: PUSH
12932: EMPTY
12933: LIST
12934: LIST
12935: DOUBLE
12936: EQUAL
12937: IFTRUE 12941
12939: GO 12966
12941: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
12942: LD_STRING ACH_AH
12944: PPUSH
12945: LD_REAL  5.00000000000000E-0001
12948: PPUSH
12949: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
12953: LD_STRING ACH_E
12955: PPUSH
12956: LD_REAL  5.00000000000000E-0001
12959: PPUSH
12960: CALL_OW 564
// end ; [ 2 , 3 ] :
12964: GO 13047
12966: LD_INT 2
12968: PUSH
12969: LD_INT 3
12971: PUSH
12972: EMPTY
12973: LIST
12974: LIST
12975: DOUBLE
12976: EQUAL
12977: IFTRUE 12981
12979: GO 13006
12981: POP
// begin SetAchievementEx ( ACH_OOL , 0.5 ) ;
12982: LD_STRING ACH_OOL
12984: PPUSH
12985: LD_REAL  5.00000000000000E-0001
12988: PPUSH
12989: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
12993: LD_STRING ACH_E
12995: PPUSH
12996: LD_REAL  5.00000000000000E-0001
12999: PPUSH
13000: CALL_OW 564
// end ; [ 3 , 1 ] :
13004: GO 13047
13006: LD_INT 3
13008: PUSH
13009: LD_INT 1
13011: PUSH
13012: EMPTY
13013: LIST
13014: LIST
13015: DOUBLE
13016: EQUAL
13017: IFTRUE 13021
13019: GO 13046
13021: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
13022: LD_STRING ACH_AH
13024: PPUSH
13025: LD_REAL  5.00000000000000E-0001
13028: PPUSH
13029: CALL_OW 564
// SetAchievementEx ( ACH_OOL , 0.5 ) ;
13033: LD_STRING ACH_OOL
13035: PPUSH
13036: LD_REAL  5.00000000000000E-0001
13039: PPUSH
13040: CALL_OW 564
// end ; end ;
13044: GO 13047
13046: POP
// end ;
13047: LD_VAR 0 2
13051: RET
