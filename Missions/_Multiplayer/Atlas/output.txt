// starting begin mp_selectmsg := true ;
   0: LD_ADDR_OWVAR 13
   4: PUSH
   5: LD_INT 1
   7: ST_TO_ADDR
// INIT_LoadMapParams ;
   8: CALL 4369 0 0
// INIT_LoadGameParams ;
  12: CALL 451 0 0
// INIT_ApplyGameParams ;
  16: CALL 1010 0 0
// INIT_GenerateDeposits ;
  20: CALL 1483 0 0
// INIT_SetUpAllies ;
  24: CALL 2129 0 0
// INIT_SetUpTechs ;
  28: CALL 2331 0 0
// INIT_PrepareSquad ;
  32: CALL 2927 0 0
// INIT_SpawnStartingUnits ;
  36: CALL 3539 0 0
// INIT_CameraFocus ;
  40: CALL 4307 0 0
// INIT_ActivateLUAInterface ;
  44: CALL 2419 0 0
// if Your_Side >= 1 and Your_Side <= 8 then
  48: LD_OWVAR 2
  52: PUSH
  53: LD_INT 1
  55: GREATEREQUAL
  56: PUSH
  57: LD_OWVAR 2
  61: PUSH
  62: LD_INT 8
  64: LESSEQUAL
  65: AND
  66: IFFALSE 84
// music_nat := Side_Nations [ Your_Side ] ;
  68: LD_ADDR_OWVAR 71
  72: PUSH
  73: LD_EXP 3
  77: PUSH
  78: LD_OWVAR 2
  82: ARRAY
  83: ST_TO_ADDR
// end ;
  84: END
// every 0 0$1 do
  85: GO 87
  87: DISABLE
// begin ShowTimer ;
  88: CALL 19732 0 0
// enable ;
  92: ENABLE
// end ;
  93: END
// every 0 0$3 trigger Multiplayer do
  94: LD_OWVAR 4
  98: IFFALSE 108
 100: GO 102
 102: DISABLE
// begin CheckPlayerPresence ;
 103: CALL 7113 0 0
// enable ;
 107: ENABLE
// end ;
 108: END
// every 0 0$1 trigger tick >= CLOCK_fluctuation and spawn_fluctuation <> 0 do
 109: LD_OWVAR 1
 113: PUSH
 114: LD_EXP 53
 118: GREATEREQUAL
 119: PUSH
 120: LD_EXP 24
 124: PUSH
 125: LD_INT 0
 127: NONEQUAL
 128: AND
 129: IFFALSE 155
 131: GO 133
 133: DISABLE
// begin enable ;
 134: ENABLE
// CLOCK_fluctuation := CLOCK_fluctuation + spawn_fluctuation ;
 135: LD_ADDR_EXP 53
 139: PUSH
 140: LD_EXP 53
 144: PUSH
 145: LD_EXP 24
 149: PLUS
 150: ST_TO_ADDR
// CYCLIC_Fluctuation ;
 151: CALL 17434 0 0
// end ;
 155: END
// every 0 0$1 trigger tick >= CLOCK_crate_spawn do
 156: LD_OWVAR 1
 160: PUSH
 161: LD_EXP 51
 165: GREATEREQUAL
 166: IFFALSE 198
 168: GO 170
 170: DISABLE
// begin enable ;
 171: ENABLE
// CLOCK_crate_spawn := CLOCK_crate_spawn + crate_spawn_rate + fluctuation_modifier_crates ;
 172: LD_ADDR_EXP 51
 176: PUSH
 177: LD_EXP 51
 181: PUSH
 182: LD_EXP 22
 186: PLUS
 187: PUSH
 188: LD_EXP 39
 192: PLUS
 193: ST_TO_ADDR
// CYCLIC_CrateSpawn ;
 194: CALL 15951 0 0
// end ;
 198: END
// every 0 0$1 trigger tick >= CLOCK_human_spawn and people_spawn_rate <> 0 do
 199: LD_OWVAR 1
 203: PUSH
 204: LD_EXP 52
 208: GREATEREQUAL
 209: PUSH
 210: LD_EXP 23
 214: PUSH
 215: LD_INT 0
 217: NONEQUAL
 218: AND
 219: IFFALSE 251
 221: GO 223
 223: DISABLE
// begin enable ;
 224: ENABLE
// CLOCK_human_spawn := CLOCK_human_spawn + people_spawn_rate + fluctuation_modifier_humans ;
 225: LD_ADDR_EXP 52
 229: PUSH
 230: LD_EXP 52
 234: PUSH
 235: LD_EXP 23
 239: PLUS
 240: PUSH
 241: LD_EXP 40
 245: PLUS
 246: ST_TO_ADDR
// CYCLIC_HumanSpawn ;
 247: CALL 16131 0 0
// end ;
 251: END
// every 0 0$1 trigger 1 in side_zone_locked do
 252: LD_INT 1
 254: PUSH
 255: LD_EXP 65
 259: IN
 260: IFFALSE 270
 262: GO 264
 264: DISABLE
// begin CYCLIC_CheckTransportsInZones ;
 265: CALL 17607 0 0
// enable ;
 269: ENABLE
// end ;
 270: END
// every 0 0$1 trigger 1 in side_transfer_pending do var i , remaining ;
 271: LD_INT 1
 273: PUSH
 274: LD_EXP 70
 278: IN
 279: IFFALSE 448
 281: GO 283
 283: DISABLE
 284: LD_INT 0
 286: PPUSH
 287: PPUSH
// begin for i = 1 to 8 do
 288: LD_ADDR_VAR 0 1
 292: PUSH
 293: DOUBLE
 294: LD_INT 1
 296: DEC
 297: ST_TO_ADDR
 298: LD_INT 8
 300: PUSH
 301: FOR_TO
 302: IFFALSE 445
// begin if side_transfer_pending [ i ] = 1 then
 304: LD_EXP 70
 308: PUSH
 309: LD_VAR 0 1
 313: ARRAY
 314: PUSH
 315: LD_INT 1
 317: EQUAL
 318: IFFALSE 443
// begin remaining := side_transfer_clocks [ i ] - tick ;
 320: LD_ADDR_VAR 0 2
 324: PUSH
 325: LD_EXP 66
 329: PUSH
 330: LD_VAR 0 1
 334: ARRAY
 335: PUSH
 336: LD_OWVAR 1
 340: MINUS
 341: ST_TO_ADDR
// if tick >= side_transfer_clocks [ i ] then
 342: LD_OWVAR 1
 346: PUSH
 347: LD_EXP 66
 351: PUSH
 352: LD_VAR 0 1
 356: ARRAY
 357: GREATEREQUAL
 358: IFFALSE 414
// CYCLIC_FinalizeTransfer ( i , side_resources_remaining [ i ] [ 1 ] , side_resources_remaining [ i ] [ 2 ] , side_resources_remaining [ i ] [ 3 ] ) ;
 360: LD_VAR 0 1
 364: PPUSH
 365: LD_EXP 69
 369: PUSH
 370: LD_VAR 0 1
 374: ARRAY
 375: PUSH
 376: LD_INT 1
 378: ARRAY
 379: PPUSH
 380: LD_EXP 69
 384: PUSH
 385: LD_VAR 0 1
 389: ARRAY
 390: PUSH
 391: LD_INT 2
 393: ARRAY
 394: PPUSH
 395: LD_EXP 69
 399: PUSH
 400: LD_VAR 0 1
 404: ARRAY
 405: PUSH
 406: LD_INT 3
 408: ARRAY
 409: PPUSH
 410: CALL 18442 0 4
// if i = Your_Side then
 414: LD_VAR 0 1
 418: PUSH
 419: LD_OWVAR 2
 423: EQUAL
 424: IFFALSE 443
// ToLua ( LUA_UpdateClock( & remaining & ); ) ;
 426: LD_STRING LUA_UpdateClock(
 428: PUSH
 429: LD_VAR 0 2
 433: STR
 434: PUSH
 435: LD_STRING );
 437: STR
 438: PPUSH
 439: CALL_OW 559
// end ; end ;
 443: GO 301
 445: POP
 446: POP
// enable ;
 447: ENABLE
// end ; end_of_file
 448: PPOPN 2
 450: END
// export function INIT_LoadGameParams ; begin
 451: LD_INT 0
 453: PPUSH
// if Multiplayer then
 454: LD_OWVAR 4
 458: IFFALSE 688
// begin Game_Type := mp_game_type ;
 460: LD_ADDR_EXP 1
 464: PUSH
 465: LD_OWVAR 6
 469: ST_TO_ADDR
// Your_Side := mp_player_side ;
 470: LD_ADDR_OWVAR 2
 474: PUSH
 475: LD_OWVAR 7
 479: ST_TO_ADDR
// Side_Positions := mp_sides_positions ;
 480: LD_ADDR_EXP 2
 484: PUSH
 485: LD_OWVAR 17
 489: ST_TO_ADDR
// Side_Nations := mp_sides_nations ;
 490: LD_ADDR_EXP 3
 494: PUSH
 495: LD_OWVAR 16
 499: ST_TO_ADDR
// Side_Comps := mp_sides_comps ;
 500: LD_ADDR_EXP 4
 504: PUSH
 505: CALL 6431 0 0
 509: ST_TO_ADDR
// Side_Teams := mp_sides_teams ;
 510: LD_ADDR_EXP 5
 514: PUSH
 515: LD_OWVAR 15
 519: ST_TO_ADDR
// Teams := mp_teams ;
 520: LD_ADDR_EXP 6
 524: PUSH
 525: LD_OWVAR 12
 529: ST_TO_ADDR
// Choice_people_num := GetMultiplayerSetting ( 0 ) ;
 530: LD_ADDR_EXP 7
 534: PUSH
 535: LD_INT 0
 537: PPUSH
 538: CALL_OW 426
 542: ST_TO_ADDR
// Choice_experience := GetMultiplayerSetting ( 1 ) ;
 543: LD_ADDR_EXP 8
 547: PUSH
 548: LD_INT 1
 550: PPUSH
 551: CALL_OW 426
 555: ST_TO_ADDR
// Choice_starting_resources := GetMultiplayerSetting ( 2 ) ;
 556: LD_ADDR_EXP 9
 560: PUSH
 561: LD_INT 2
 563: PPUSH
 564: CALL_OW 426
 568: ST_TO_ADDR
// Choice_crate_spawn_rate := GetMultiplayerSetting ( 3 ) ;
 569: LD_ADDR_EXP 10
 573: PUSH
 574: LD_INT 3
 576: PPUSH
 577: CALL_OW 426
 581: ST_TO_ADDR
// Choice_people_spawn_rate := GetMultiplayerSetting ( 4 ) ;
 582: LD_ADDR_EXP 11
 586: PUSH
 587: LD_INT 4
 589: PPUSH
 590: CALL_OW 426
 594: ST_TO_ADDR
// Choice_spawn_fluctuation := GetMultiplayerSetting ( 5 ) ;
 595: LD_ADDR_EXP 12
 599: PUSH
 600: LD_INT 5
 602: PPUSH
 603: CALL_OW 426
 607: ST_TO_ADDR
// Choice_oil_abundance := GetMultiplayerSetting ( 6 ) ;
 608: LD_ADDR_EXP 13
 612: PUSH
 613: LD_INT 6
 615: PPUSH
 616: CALL_OW 426
 620: ST_TO_ADDR
// Choice_sib_abundance := GetMultiplayerSetting ( 7 ) ;
 621: LD_ADDR_EXP 14
 625: PUSH
 626: LD_INT 7
 628: PPUSH
 629: CALL_OW 426
 633: ST_TO_ADDR
// Choice_victory_cond := GetMultiplayerSetting ( 8 ) ;
 634: LD_ADDR_EXP 15
 638: PUSH
 639: LD_INT 8
 641: PPUSH
 642: CALL_OW 426
 646: ST_TO_ADDR
// Choice_reinforce_cost := GetMultiplayerSetting ( 9 ) ;
 647: LD_ADDR_EXP 16
 651: PUSH
 652: LD_INT 9
 654: PPUSH
 655: CALL_OW 426
 659: ST_TO_ADDR
// Choice_black_FoW := GetMultiplayerSetting ( 10 ) ;
 660: LD_ADDR_EXP 17
 664: PUSH
 665: LD_INT 10
 667: PPUSH
 668: CALL_OW 426
 672: ST_TO_ADDR
// Choice_starting_tech_lvl := GetMultiplayerSetting ( 11 ) ;
 673: LD_ADDR_EXP 18
 677: PUSH
 678: LD_INT 11
 680: PPUSH
 681: CALL_OW 426
 685: ST_TO_ADDR
// end else
 686: GO 1005
// begin RandomizeAll ;
 688: CALL_OW 11
// Game_Type := 1 ;
 692: LD_ADDR_EXP 1
 696: PUSH
 697: LD_INT 1
 699: ST_TO_ADDR
// Your_Side := 9 ;
 700: LD_ADDR_OWVAR 2
 704: PUSH
 705: LD_INT 9
 707: ST_TO_ADDR
// Side_Positions := [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] ;
 708: LD_ADDR_EXP 2
 712: PUSH
 713: LD_INT 1
 715: PUSH
 716: LD_INT 2
 718: PUSH
 719: LD_INT 3
 721: PUSH
 722: LD_INT 4
 724: PUSH
 725: LD_INT 5
 727: PUSH
 728: LD_INT 6
 730: PUSH
 731: LD_INT 7
 733: PUSH
 734: LD_INT 8
 736: PUSH
 737: EMPTY
 738: LIST
 739: LIST
 740: LIST
 741: LIST
 742: LIST
 743: LIST
 744: LIST
 745: LIST
 746: ST_TO_ADDR
// Side_Nations := [ 1 , 2 , 3 , 1 , 2 , 3 , 1 , 2 ] ;
 747: LD_ADDR_EXP 3
 751: PUSH
 752: LD_INT 1
 754: PUSH
 755: LD_INT 2
 757: PUSH
 758: LD_INT 3
 760: PUSH
 761: LD_INT 1
 763: PUSH
 764: LD_INT 2
 766: PUSH
 767: LD_INT 3
 769: PUSH
 770: LD_INT 1
 772: PUSH
 773: LD_INT 2
 775: PUSH
 776: EMPTY
 777: LIST
 778: LIST
 779: LIST
 780: LIST
 781: LIST
 782: LIST
 783: LIST
 784: LIST
 785: ST_TO_ADDR
// Side_Comps := [ 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 ] ;
 786: LD_ADDR_EXP 4
 790: PUSH
 791: LD_INT 1
 793: PUSH
 794: LD_INT 1
 796: PUSH
 797: LD_INT 1
 799: PUSH
 800: LD_INT 1
 802: PUSH
 803: LD_INT 1
 805: PUSH
 806: LD_INT 1
 808: PUSH
 809: LD_INT 1
 811: PUSH
 812: LD_INT 1
 814: PUSH
 815: EMPTY
 816: LIST
 817: LIST
 818: LIST
 819: LIST
 820: LIST
 821: LIST
 822: LIST
 823: LIST
 824: ST_TO_ADDR
// Side_Teams := [ 1 , 1 , 1 , 1 , 2 , 2 , 2 , 2 ] ;
 825: LD_ADDR_EXP 5
 829: PUSH
 830: LD_INT 1
 832: PUSH
 833: LD_INT 1
 835: PUSH
 836: LD_INT 1
 838: PUSH
 839: LD_INT 1
 841: PUSH
 842: LD_INT 2
 844: PUSH
 845: LD_INT 2
 847: PUSH
 848: LD_INT 2
 850: PUSH
 851: LD_INT 2
 853: PUSH
 854: EMPTY
 855: LIST
 856: LIST
 857: LIST
 858: LIST
 859: LIST
 860: LIST
 861: LIST
 862: LIST
 863: ST_TO_ADDR
// Teams := [ [ 1 , 2 , 3 , 4 ] , [ 5 , 6 , 7 , 8 ] ] ;
 864: LD_ADDR_EXP 6
 868: PUSH
 869: LD_INT 1
 871: PUSH
 872: LD_INT 2
 874: PUSH
 875: LD_INT 3
 877: PUSH
 878: LD_INT 4
 880: PUSH
 881: EMPTY
 882: LIST
 883: LIST
 884: LIST
 885: LIST
 886: PUSH
 887: LD_INT 5
 889: PUSH
 890: LD_INT 6
 892: PUSH
 893: LD_INT 7
 895: PUSH
 896: LD_INT 8
 898: PUSH
 899: EMPTY
 900: LIST
 901: LIST
 902: LIST
 903: LIST
 904: PUSH
 905: EMPTY
 906: LIST
 907: LIST
 908: ST_TO_ADDR
// Choice_people_num := 2 ;
 909: LD_ADDR_EXP 7
 913: PUSH
 914: LD_INT 2
 916: ST_TO_ADDR
// Choice_experience := 3 ;
 917: LD_ADDR_EXP 8
 921: PUSH
 922: LD_INT 3
 924: ST_TO_ADDR
// Choice_starting_resources := 3 ;
 925: LD_ADDR_EXP 9
 929: PUSH
 930: LD_INT 3
 932: ST_TO_ADDR
// Choice_crate_spawn_rate := 3 ;
 933: LD_ADDR_EXP 10
 937: PUSH
 938: LD_INT 3
 940: ST_TO_ADDR
// Choice_people_spawn_rate := 3 ;
 941: LD_ADDR_EXP 11
 945: PUSH
 946: LD_INT 3
 948: ST_TO_ADDR
// Choice_spawn_fluctuation := 0 ;
 949: LD_ADDR_EXP 12
 953: PUSH
 954: LD_INT 0
 956: ST_TO_ADDR
// Choice_oil_abundance := 2 ;
 957: LD_ADDR_EXP 13
 961: PUSH
 962: LD_INT 2
 964: ST_TO_ADDR
// Choice_sib_abundance := 2 ;
 965: LD_ADDR_EXP 14
 969: PUSH
 970: LD_INT 2
 972: ST_TO_ADDR
// Choice_victory_cond := 0 ;
 973: LD_ADDR_EXP 15
 977: PUSH
 978: LD_INT 0
 980: ST_TO_ADDR
// Choice_reinforce_cost := 1 ;
 981: LD_ADDR_EXP 16
 985: PUSH
 986: LD_INT 1
 988: ST_TO_ADDR
// Choice_black_FoW := 0 ;
 989: LD_ADDR_EXP 17
 993: PUSH
 994: LD_INT 0
 996: ST_TO_ADDR
// Choice_starting_tech_lvl := 0 ;
 997: LD_ADDR_EXP 18
1001: PUSH
1002: LD_INT 0
1004: ST_TO_ADDR
// end ; end ;
1005: LD_VAR 0 1
1009: RET
// export function INIT_ApplyGameParams ; var i ; begin
1010: LD_INT 0
1012: PPUSH
1013: PPUSH
// people_num := people_num [ Choice_people_num + 1 ] ;
1014: LD_ADDR_EXP 19
1018: PUSH
1019: LD_EXP 19
1023: PUSH
1024: LD_EXP 7
1028: PUSH
1029: LD_INT 1
1031: PLUS
1032: ARRAY
1033: ST_TO_ADDR
// experience := experience [ Choice_experience + 1 ] ;
1034: LD_ADDR_EXP 20
1038: PUSH
1039: LD_EXP 20
1043: PUSH
1044: LD_EXP 8
1048: PUSH
1049: LD_INT 1
1051: PLUS
1052: ARRAY
1053: ST_TO_ADDR
// starting_resources := starting_resources [ Choice_starting_resources + 1 ] ;
1054: LD_ADDR_EXP 21
1058: PUSH
1059: LD_EXP 21
1063: PUSH
1064: LD_EXP 9
1068: PUSH
1069: LD_INT 1
1071: PLUS
1072: ARRAY
1073: ST_TO_ADDR
// crate_spawn_rate := crate_spawn_rate [ Choice_crate_spawn_rate + 1 ] ;
1074: LD_ADDR_EXP 22
1078: PUSH
1079: LD_EXP 22
1083: PUSH
1084: LD_EXP 10
1088: PUSH
1089: LD_INT 1
1091: PLUS
1092: ARRAY
1093: ST_TO_ADDR
// people_spawn_rate := people_spawn_rate [ Choice_people_spawn_rate + 1 ] ;
1094: LD_ADDR_EXP 23
1098: PUSH
1099: LD_EXP 23
1103: PUSH
1104: LD_EXP 11
1108: PUSH
1109: LD_INT 1
1111: PLUS
1112: ARRAY
1113: ST_TO_ADDR
// spawn_fluctuation := spawn_fluctuation [ Choice_spawn_fluctuation + 1 ] ;
1114: LD_ADDR_EXP 24
1118: PUSH
1119: LD_EXP 24
1123: PUSH
1124: LD_EXP 12
1128: PUSH
1129: LD_INT 1
1131: PLUS
1132: ARRAY
1133: ST_TO_ADDR
// fluctuation_base_crates := fluctuation_base_crates [ Choice_crate_spawn_rate + 1 ] ;
1134: LD_ADDR_EXP 37
1138: PUSH
1139: LD_EXP 37
1143: PUSH
1144: LD_EXP 10
1148: PUSH
1149: LD_INT 1
1151: PLUS
1152: ARRAY
1153: ST_TO_ADDR
// fluctuation_base_humans := fluctuation_base_humans [ Choice_people_spawn_rate + 1 ] ;
1154: LD_ADDR_EXP 38
1158: PUSH
1159: LD_EXP 38
1163: PUSH
1164: LD_EXP 11
1168: PUSH
1169: LD_INT 1
1171: PLUS
1172: ARRAY
1173: ST_TO_ADDR
// oil_abundance := oil_abundance [ Choice_oil_abundance + 1 ] ;
1174: LD_ADDR_EXP 25
1178: PUSH
1179: LD_EXP 25
1183: PUSH
1184: LD_EXP 13
1188: PUSH
1189: LD_INT 1
1191: PLUS
1192: ARRAY
1193: ST_TO_ADDR
// sib_abundance := sib_abundance [ Choice_sib_abundance + 1 ] ;
1194: LD_ADDR_EXP 26
1198: PUSH
1199: LD_EXP 26
1203: PUSH
1204: LD_EXP 14
1208: PUSH
1209: LD_INT 1
1211: PLUS
1212: ARRAY
1213: ST_TO_ADDR
// victory_cond := victory_cond [ Choice_victory_cond + 1 ] ;
1214: LD_ADDR_EXP 27
1218: PUSH
1219: LD_EXP 27
1223: PUSH
1224: LD_EXP 15
1228: PUSH
1229: LD_INT 1
1231: PLUS
1232: ARRAY
1233: ST_TO_ADDR
// reinforce_cost := reinforce_cost [ Choice_reinforce_cost + 1 ] ;
1234: LD_ADDR_EXP 28
1238: PUSH
1239: LD_EXP 28
1243: PUSH
1244: LD_EXP 16
1248: PUSH
1249: LD_INT 1
1251: PLUS
1252: ARRAY
1253: ST_TO_ADDR
// soldier_limit := people_num [ Choice_people_num + 1 ] ;
1254: LD_ADDR_EXP 49
1258: PUSH
1259: LD_EXP 19
1263: PUSH
1264: LD_EXP 7
1268: PUSH
1269: LD_INT 1
1271: PLUS
1272: ARRAY
1273: ST_TO_ADDR
// black_fow := Choice_black_FoW ;
1274: LD_ADDR_EXP 29
1278: PUSH
1279: LD_EXP 17
1283: ST_TO_ADDR
// starting_tech_lvl := Choice_starting_tech_lvl ;
1284: LD_ADDR_EXP 30
1288: PUSH
1289: LD_EXP 18
1293: ST_TO_ADDR
// CLOCK_crate_spawn := crate_spawn_rate ;
1294: LD_ADDR_EXP 51
1298: PUSH
1299: LD_EXP 22
1303: ST_TO_ADDR
// CLOCK_human_spawn := people_spawn_rate ;
1304: LD_ADDR_EXP 52
1308: PUSH
1309: LD_EXP 23
1313: ST_TO_ADDR
// CLOCK_fluctuation := spawn_fluctuation ;
1314: LD_ADDR_EXP 53
1318: PUSH
1319: LD_EXP 24
1323: ST_TO_ADDR
// for i = 1 to Side_Positions do
1324: LD_ADDR_VAR 0 2
1328: PUSH
1329: DOUBLE
1330: LD_INT 1
1332: DEC
1333: ST_TO_ADDR
1334: LD_EXP 2
1338: PUSH
1339: FOR_TO
1340: IFFALSE 1405
// begin if not Side_Positions [ i ] then
1342: LD_EXP 2
1346: PUSH
1347: LD_VAR 0 2
1351: ARRAY
1352: NOT
1353: IFFALSE 1380
// side_isalive := Replace ( side_isalive , i , 0 ) else
1355: LD_ADDR_EXP 54
1359: PUSH
1360: LD_EXP 54
1364: PPUSH
1365: LD_VAR 0 2
1369: PPUSH
1370: LD_INT 0
1372: PPUSH
1373: CALL_OW 1
1377: ST_TO_ADDR
1378: GO 1403
// side_isalive := Replace ( side_isalive , i , 1 ) ;
1380: LD_ADDR_EXP 54
1384: PUSH
1385: LD_EXP 54
1389: PPUSH
1390: LD_VAR 0 2
1394: PPUSH
1395: LD_INT 1
1397: PPUSH
1398: CALL_OW 1
1402: ST_TO_ADDR
// end ;
1403: GO 1339
1405: POP
1406: POP
// for i = 1 to Teams do
1407: LD_ADDR_VAR 0 2
1411: PUSH
1412: DOUBLE
1413: LD_INT 1
1415: DEC
1416: ST_TO_ADDR
1417: LD_EXP 6
1421: PUSH
1422: FOR_TO
1423: IFFALSE 1450
// team_siberite_stocked := Replace ( team_siberite_stocked , i , 0 ) ;
1425: LD_ADDR_EXP 61
1429: PUSH
1430: LD_EXP 61
1434: PPUSH
1435: LD_VAR 0 2
1439: PPUSH
1440: LD_INT 0
1442: PPUSH
1443: CALL_OW 1
1447: ST_TO_ADDR
1448: GO 1422
1450: POP
1451: POP
// if victory_cond = 0 then
1452: LD_EXP 27
1456: PUSH
1457: LD_INT 0
1459: EQUAL
1460: IFFALSE 1471
// ToLua ( Deathmatch = 1; ) else
1462: LD_STRING Deathmatch = 1;
1464: PPUSH
1465: CALL_OW 559
1469: GO 1478
// ToLua ( Deathmatch = 0; ) ;
1471: LD_STRING Deathmatch = 0;
1473: PPUSH
1474: CALL_OW 559
// end ;
1478: LD_VAR 0 1
1482: RET
// export function INIT_GenerateDeposits ; var x , y , i , j , pool_oil_deposits , pool_siberite_deposits ; begin
1483: LD_INT 0
1485: PPUSH
1486: PPUSH
1487: PPUSH
1488: PPUSH
1489: PPUSH
1490: PPUSH
1491: PPUSH
// pool_oil_deposits := available_oil_deposits ;
1492: LD_ADDR_VAR 0 6
1496: PUSH
1497: LD_EXP 32
1501: ST_TO_ADDR
// pool_siberite_deposits := available_siberite_deposits ;
1502: LD_ADDR_VAR 0 7
1506: PUSH
1507: LD_EXP 33
1511: ST_TO_ADDR
// i := 0 ;
1512: LD_ADDR_VAR 0 4
1516: PUSH
1517: LD_INT 0
1519: ST_TO_ADDR
// while i < oil_abundance do
1520: LD_VAR 0 4
1524: PUSH
1525: LD_EXP 25
1529: LESS
1530: IFFALSE 1818
// begin for j = 1 to pool_oil_deposits do
1532: LD_ADDR_VAR 0 5
1536: PUSH
1537: DOUBLE
1538: LD_INT 1
1540: DEC
1541: ST_TO_ADDR
1542: LD_VAR 0 6
1546: PUSH
1547: FOR_TO
1548: IFFALSE 1814
// begin i := i + 1 ;
1550: LD_ADDR_VAR 0 4
1554: PUSH
1555: LD_VAR 0 4
1559: PUSH
1560: LD_INT 1
1562: PLUS
1563: ST_TO_ADDR
// x := length ( pool_oil_deposits [ j ] ) ;
1564: LD_ADDR_VAR 0 2
1568: PUSH
1569: LD_VAR 0 6
1573: PUSH
1574: LD_VAR 0 5
1578: ARRAY
1579: PPUSH
1580: CALL 6383 0 1
1584: ST_TO_ADDR
// y := Rand ( 1 , x ) ;
1585: LD_ADDR_VAR 0 3
1589: PUSH
1590: LD_INT 1
1592: PPUSH
1593: LD_VAR 0 2
1597: PPUSH
1598: CALL_OW 12
1602: ST_TO_ADDR
// CreateDepositXY ( pool_oil_deposits [ j ] [ y ] [ 1 ] [ 1 ] , pool_oil_deposits [ j ] [ y ] [ 1 ] [ 2 ] , mat_oil ) ;
1603: LD_VAR 0 6
1607: PUSH
1608: LD_VAR 0 5
1612: ARRAY
1613: PUSH
1614: LD_VAR 0 3
1618: ARRAY
1619: PUSH
1620: LD_INT 1
1622: ARRAY
1623: PUSH
1624: LD_INT 1
1626: ARRAY
1627: PPUSH
1628: LD_VAR 0 6
1632: PUSH
1633: LD_VAR 0 5
1637: ARRAY
1638: PUSH
1639: LD_VAR 0 3
1643: ARRAY
1644: PUSH
1645: LD_INT 1
1647: ARRAY
1648: PUSH
1649: LD_INT 2
1651: ARRAY
1652: PPUSH
1653: LD_INT 2
1655: PPUSH
1656: CALL_OW 62
// CreateDepositXY ( pool_oil_deposits [ j ] [ y ] [ 2 ] [ 1 ] , pool_oil_deposits [ j ] [ y ] [ 2 ] [ 2 ] , mat_oil ) ;
1660: LD_VAR 0 6
1664: PUSH
1665: LD_VAR 0 5
1669: ARRAY
1670: PUSH
1671: LD_VAR 0 3
1675: ARRAY
1676: PUSH
1677: LD_INT 2
1679: ARRAY
1680: PUSH
1681: LD_INT 1
1683: ARRAY
1684: PPUSH
1685: LD_VAR 0 6
1689: PUSH
1690: LD_VAR 0 5
1694: ARRAY
1695: PUSH
1696: LD_VAR 0 3
1700: ARRAY
1701: PUSH
1702: LD_INT 2
1704: ARRAY
1705: PUSH
1706: LD_INT 2
1708: ARRAY
1709: PPUSH
1710: LD_INT 2
1712: PPUSH
1713: CALL_OW 62
// pool_oil_deposits := Replace ( pool_oil_deposits , j , Delete ( pool_oil_deposits [ j ] , y ) ) ;
1717: LD_ADDR_VAR 0 6
1721: PUSH
1722: LD_VAR 0 6
1726: PPUSH
1727: LD_VAR 0 5
1731: PPUSH
1732: LD_VAR 0 6
1736: PUSH
1737: LD_VAR 0 5
1741: ARRAY
1742: PPUSH
1743: LD_VAR 0 3
1747: PPUSH
1748: CALL_OW 3
1752: PPUSH
1753: CALL_OW 1
1757: ST_TO_ADDR
// if pool_oil_deposits [ j ] + 0 = 0 then
1758: LD_VAR 0 6
1762: PUSH
1763: LD_VAR 0 5
1767: ARRAY
1768: PUSH
1769: LD_INT 0
1771: PLUS
1772: PUSH
1773: LD_INT 0
1775: EQUAL
1776: IFFALSE 1798
// pool_oil_deposits := Delete ( pool_oil_deposits , j ) ;
1778: LD_ADDR_VAR 0 6
1782: PUSH
1783: LD_VAR 0 6
1787: PPUSH
1788: LD_VAR 0 5
1792: PPUSH
1793: CALL_OW 3
1797: ST_TO_ADDR
// if i >= oil_abundance then
1798: LD_VAR 0 4
1802: PUSH
1803: LD_EXP 25
1807: GREATEREQUAL
1808: IFFALSE 1812
// break ;
1810: GO 1814
// end ;
1812: GO 1547
1814: POP
1815: POP
// end ;
1816: GO 1520
// i := 0 ;
1818: LD_ADDR_VAR 0 4
1822: PUSH
1823: LD_INT 0
1825: ST_TO_ADDR
// while i < sib_abundance do
1826: LD_VAR 0 4
1830: PUSH
1831: LD_EXP 26
1835: LESS
1836: IFFALSE 2124
// begin for j = 1 to pool_siberite_deposits do
1838: LD_ADDR_VAR 0 5
1842: PUSH
1843: DOUBLE
1844: LD_INT 1
1846: DEC
1847: ST_TO_ADDR
1848: LD_VAR 0 7
1852: PUSH
1853: FOR_TO
1854: IFFALSE 2120
// begin i := i + 1 ;
1856: LD_ADDR_VAR 0 4
1860: PUSH
1861: LD_VAR 0 4
1865: PUSH
1866: LD_INT 1
1868: PLUS
1869: ST_TO_ADDR
// x := length ( pool_siberite_deposits [ j ] ) ;
1870: LD_ADDR_VAR 0 2
1874: PUSH
1875: LD_VAR 0 7
1879: PUSH
1880: LD_VAR 0 5
1884: ARRAY
1885: PPUSH
1886: CALL 6383 0 1
1890: ST_TO_ADDR
// y := Rand ( 1 , x ) ;
1891: LD_ADDR_VAR 0 3
1895: PUSH
1896: LD_INT 1
1898: PPUSH
1899: LD_VAR 0 2
1903: PPUSH
1904: CALL_OW 12
1908: ST_TO_ADDR
// CreateDepositXY ( pool_siberite_deposits [ j ] [ y ] [ 1 ] [ 1 ] , pool_siberite_deposits [ j ] [ y ] [ 1 ] [ 2 ] , mat_siberit ) ;
1909: LD_VAR 0 7
1913: PUSH
1914: LD_VAR 0 5
1918: ARRAY
1919: PUSH
1920: LD_VAR 0 3
1924: ARRAY
1925: PUSH
1926: LD_INT 1
1928: ARRAY
1929: PUSH
1930: LD_INT 1
1932: ARRAY
1933: PPUSH
1934: LD_VAR 0 7
1938: PUSH
1939: LD_VAR 0 5
1943: ARRAY
1944: PUSH
1945: LD_VAR 0 3
1949: ARRAY
1950: PUSH
1951: LD_INT 1
1953: ARRAY
1954: PUSH
1955: LD_INT 2
1957: ARRAY
1958: PPUSH
1959: LD_INT 3
1961: PPUSH
1962: CALL_OW 62
// CreateDepositXY ( pool_siberite_deposits [ j ] [ y ] [ 2 ] [ 1 ] , pool_siberite_deposits [ j ] [ y ] [ 2 ] [ 2 ] , mat_siberit ) ;
1966: LD_VAR 0 7
1970: PUSH
1971: LD_VAR 0 5
1975: ARRAY
1976: PUSH
1977: LD_VAR 0 3
1981: ARRAY
1982: PUSH
1983: LD_INT 2
1985: ARRAY
1986: PUSH
1987: LD_INT 1
1989: ARRAY
1990: PPUSH
1991: LD_VAR 0 7
1995: PUSH
1996: LD_VAR 0 5
2000: ARRAY
2001: PUSH
2002: LD_VAR 0 3
2006: ARRAY
2007: PUSH
2008: LD_INT 2
2010: ARRAY
2011: PUSH
2012: LD_INT 2
2014: ARRAY
2015: PPUSH
2016: LD_INT 3
2018: PPUSH
2019: CALL_OW 62
// pool_siberite_deposits := Replace ( pool_siberite_deposits , j , Delete ( pool_siberite_deposits [ j ] , y ) ) ;
2023: LD_ADDR_VAR 0 7
2027: PUSH
2028: LD_VAR 0 7
2032: PPUSH
2033: LD_VAR 0 5
2037: PPUSH
2038: LD_VAR 0 7
2042: PUSH
2043: LD_VAR 0 5
2047: ARRAY
2048: PPUSH
2049: LD_VAR 0 3
2053: PPUSH
2054: CALL_OW 3
2058: PPUSH
2059: CALL_OW 1
2063: ST_TO_ADDR
// if pool_siberite_deposits [ j ] + 0 = 0 then
2064: LD_VAR 0 7
2068: PUSH
2069: LD_VAR 0 5
2073: ARRAY
2074: PUSH
2075: LD_INT 0
2077: PLUS
2078: PUSH
2079: LD_INT 0
2081: EQUAL
2082: IFFALSE 2104
// pool_siberite_deposits := Delete ( pool_siberite_deposits , j ) ;
2084: LD_ADDR_VAR 0 7
2088: PUSH
2089: LD_VAR 0 7
2093: PPUSH
2094: LD_VAR 0 5
2098: PPUSH
2099: CALL_OW 3
2103: ST_TO_ADDR
// if i >= sib_abundance then
2104: LD_VAR 0 4
2108: PUSH
2109: LD_EXP 26
2113: GREATEREQUAL
2114: IFFALSE 2118
// break ;
2116: GO 2120
// end ;
2118: GO 1853
2120: POP
2121: POP
// end ;
2122: GO 1826
// end ;
2124: LD_VAR 0 1
2128: RET
// export function INIT_SetUpAllies ; var i , j ; begin
2129: LD_INT 0
2131: PPUSH
2132: PPUSH
2133: PPUSH
// for i = 1 to 8 do
2134: LD_ADDR_VAR 0 2
2138: PUSH
2139: DOUBLE
2140: LD_INT 1
2142: DEC
2143: ST_TO_ADDR
2144: LD_INT 8
2146: PUSH
2147: FOR_TO
2148: IFFALSE 2238
// for j = 1 to 8 do
2150: LD_ADDR_VAR 0 3
2154: PUSH
2155: DOUBLE
2156: LD_INT 1
2158: DEC
2159: ST_TO_ADDR
2160: LD_INT 8
2162: PUSH
2163: FOR_TO
2164: IFFALSE 2234
// begin if Side_Teams [ i ] = Side_Teams [ j ] then
2166: LD_EXP 5
2170: PUSH
2171: LD_VAR 0 2
2175: ARRAY
2176: PUSH
2177: LD_EXP 5
2181: PUSH
2182: LD_VAR 0 3
2186: ARRAY
2187: EQUAL
2188: IFFALSE 2212
// SetAttitude ( i , j , att_friend , true ) else
2190: LD_VAR 0 2
2194: PPUSH
2195: LD_VAR 0 3
2199: PPUSH
2200: LD_INT 1
2202: PPUSH
2203: LD_INT 1
2205: PPUSH
2206: CALL_OW 80
2210: GO 2232
// SetAttitude ( i , j , att_enemy , true ) ;
2212: LD_VAR 0 2
2216: PPUSH
2217: LD_VAR 0 3
2221: PPUSH
2222: LD_INT 2
2224: PPUSH
2225: LD_INT 1
2227: PPUSH
2228: CALL_OW 80
// end ;
2232: GO 2163
2234: POP
2235: POP
2236: GO 2147
2238: POP
2239: POP
// for i = 1 to 8 do
2240: LD_ADDR_VAR 0 2
2244: PUSH
2245: DOUBLE
2246: LD_INT 1
2248: DEC
2249: ST_TO_ADDR
2250: LD_INT 8
2252: PUSH
2253: FOR_TO
2254: IFFALSE 2278
// ChangeSideFog ( i , Side_Teams [ i ] ) ;
2256: LD_VAR 0 2
2260: PPUSH
2261: LD_EXP 5
2265: PUSH
2266: LD_VAR 0 2
2270: ARRAY
2271: PPUSH
2272: CALL_OW 343
2276: GO 2253
2278: POP
2279: POP
// FogOff ( 0 ) ;
2280: LD_INT 0
2282: PPUSH
2283: CALL_OW 344
// ResetFog ;
2287: CALL_OW 335
// if black_fow then
2291: LD_EXP 29
2295: IFFALSE 2326
// for i = 1 to 8 do
2297: LD_ADDR_VAR 0 2
2301: PUSH
2302: DOUBLE
2303: LD_INT 1
2305: DEC
2306: ST_TO_ADDR
2307: LD_INT 8
2309: PUSH
2310: FOR_TO
2311: IFFALSE 2324
// ClearAllFogForSide ( i ) ;
2313: LD_VAR 0 2
2317: PPUSH
2318: CALL_OW 520
2322: GO 2310
2324: POP
2325: POP
// end ;
2326: LD_VAR 0 1
2330: RET
// export function INIT_SetUpTechs ; var i ; begin
2331: LD_INT 0
2333: PPUSH
2334: PPUSH
// for i = 1 to 8 do
2335: LD_ADDR_VAR 0 2
2339: PUSH
2340: DOUBLE
2341: LD_INT 1
2343: DEC
2344: ST_TO_ADDR
2345: LD_INT 8
2347: PUSH
2348: FOR_TO
2349: IFFALSE 2412
// begin DisableAllTechs ( i ) ;
2351: LD_VAR 0 2
2355: PPUSH
2356: CALL 7358 0 1
// side_tech_lvl := Replace ( side_tech_lvl , i , starting_tech_lvl ) ;
2360: LD_ADDR_EXP 31
2364: PUSH
2365: LD_EXP 31
2369: PPUSH
2370: LD_VAR 0 2
2374: PPUSH
2375: LD_EXP 30
2379: PPUSH
2380: CALL_OW 1
2384: ST_TO_ADDR
// TechUpgrade ( starting_tech_lvl , Side_Nations [ i ] , i ) ;
2385: LD_EXP 30
2389: PPUSH
2390: LD_EXP 3
2394: PUSH
2395: LD_VAR 0 2
2399: ARRAY
2400: PPUSH
2401: LD_VAR 0 2
2405: PPUSH
2406: CALL 7860 0 3
// end ;
2410: GO 2348
2412: POP
2413: POP
// end ;
2414: LD_VAR 0 1
2418: RET
// export function INIT_ActivateLUAInterface ; var colour , tech , i , team , count ; begin
2419: LD_INT 0
2421: PPUSH
2422: PPUSH
2423: PPUSH
2424: PPUSH
2425: PPUSH
2426: PPUSH
// if victory_cond = 0 then
2427: LD_EXP 27
2431: PUSH
2432: LD_INT 0
2434: EQUAL
2435: IFFALSE 2446
// ToLua ( Deathmatch = 1; ) else
2437: LD_STRING Deathmatch = 1;
2439: PPUSH
2440: CALL_OW 559
2444: GO 2453
// ToLua ( Deathmatch = 0; ) ;
2446: LD_STRING Deathmatch = 0;
2448: PPUSH
2449: CALL_OW 559
// count = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
2453: LD_ADDR_VAR 0 6
2457: PUSH
2458: LD_INT 0
2460: PUSH
2461: LD_INT 0
2463: PUSH
2464: LD_INT 0
2466: PUSH
2467: LD_INT 0
2469: PUSH
2470: LD_INT 0
2472: PUSH
2473: LD_INT 0
2475: PUSH
2476: LD_INT 0
2478: PUSH
2479: LD_INT 0
2481: PUSH
2482: EMPTY
2483: LIST
2484: LIST
2485: LIST
2486: LIST
2487: LIST
2488: LIST
2489: LIST
2490: LIST
2491: ST_TO_ADDR
// for i = 1 to 8 do
2492: LD_ADDR_VAR 0 4
2496: PUSH
2497: DOUBLE
2498: LD_INT 1
2500: DEC
2501: ST_TO_ADDR
2502: LD_INT 8
2504: PUSH
2505: FOR_TO
2506: IFFALSE 2671
// begin colour := i ;
2508: LD_ADDR_VAR 0 2
2512: PUSH
2513: LD_VAR 0 4
2517: ST_TO_ADDR
// tech := side_tech_lvl [ i ] ;
2518: LD_ADDR_VAR 0 3
2522: PUSH
2523: LD_EXP 31
2527: PUSH
2528: LD_VAR 0 4
2532: ARRAY
2533: ST_TO_ADDR
// team := Side_Teams [ i ] ;
2534: LD_ADDR_VAR 0 5
2538: PUSH
2539: LD_EXP 5
2543: PUSH
2544: LD_VAR 0 4
2548: ARRAY
2549: ST_TO_ADDR
// if not Side_Positions [ i ] then
2550: LD_EXP 2
2554: PUSH
2555: LD_VAR 0 4
2559: ARRAY
2560: NOT
2561: IFFALSE 2571
// team := 0 ;
2563: LD_ADDR_VAR 0 5
2567: PUSH
2568: LD_INT 0
2570: ST_TO_ADDR
// count := Replace ( count , team , count [ team ] + 1 ) ;
2571: LD_ADDR_VAR 0 6
2575: PUSH
2576: LD_VAR 0 6
2580: PPUSH
2581: LD_VAR 0 5
2585: PPUSH
2586: LD_VAR 0 6
2590: PUSH
2591: LD_VAR 0 5
2595: ARRAY
2596: PUSH
2597: LD_INT 1
2599: PLUS
2600: PPUSH
2601: CALL_OW 1
2605: ST_TO_ADDR
// ToLua ( LUA_RenderSpecLabels( & i & , & team & , & count [ team ] & , & colour & , & tech & ); ) ;
2606: LD_STRING LUA_RenderSpecLabels(
2608: PUSH
2609: LD_VAR 0 4
2613: STR
2614: PUSH
2615: LD_STRING ,
2617: STR
2618: PUSH
2619: LD_VAR 0 5
2623: STR
2624: PUSH
2625: LD_STRING ,
2627: STR
2628: PUSH
2629: LD_VAR 0 6
2633: PUSH
2634: LD_VAR 0 5
2638: ARRAY
2639: STR
2640: PUSH
2641: LD_STRING ,
2643: STR
2644: PUSH
2645: LD_VAR 0 2
2649: STR
2650: PUSH
2651: LD_STRING ,
2653: STR
2654: PUSH
2655: LD_VAR 0 3
2659: STR
2660: PUSH
2661: LD_STRING );
2663: STR
2664: PPUSH
2665: CALL_OW 559
// end ;
2669: GO 2505
2671: POP
2672: POP
// if Your_Side in [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] then
2673: LD_OWVAR 2
2677: PUSH
2678: LD_INT 1
2680: PUSH
2681: LD_INT 2
2683: PUSH
2684: LD_INT 3
2686: PUSH
2687: LD_INT 4
2689: PUSH
2690: LD_INT 5
2692: PUSH
2693: LD_INT 6
2695: PUSH
2696: LD_INT 7
2698: PUSH
2699: LD_INT 8
2701: PUSH
2702: EMPTY
2703: LIST
2704: LIST
2705: LIST
2706: LIST
2707: LIST
2708: LIST
2709: LIST
2710: LIST
2711: IN
2712: IFFALSE 2763
// begin ToLua ( LUA_UpdateSideInterface( & Your_Side & , & side_tech_lvl [ Your_Side ] & ); ) ;
2714: LD_STRING LUA_UpdateSideInterface(
2716: PUSH
2717: LD_OWVAR 2
2721: STR
2722: PUSH
2723: LD_STRING ,
2725: STR
2726: PUSH
2727: LD_EXP 31
2731: PUSH
2732: LD_OWVAR 2
2736: ARRAY
2737: STR
2738: PUSH
2739: LD_STRING );
2741: STR
2742: PPUSH
2743: CALL_OW 559
// ToLua ( StartSideInterface(); ) ;
2747: LD_STRING StartSideInterface();
2749: PPUSH
2750: CALL_OW 559
// ToLua ( LUA_NoDepot(); ) ;
2754: LD_STRING LUA_NoDepot();
2756: PPUSH
2757: CALL_OW 559
// end else
2761: GO 2770
// begin ToLua ( Is_Spectator = 1 ) ;
2763: LD_STRING Is_Spectator = 1
2765: PPUSH
2766: CALL_OW 559
// end ; ToLua ( StartSpecInterface(); ) ;
2770: LD_STRING StartSpecInterface();
2772: PPUSH
2773: CALL_OW 559
// if Your_Side in [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] then
2777: LD_OWVAR 2
2781: PUSH
2782: LD_INT 1
2784: PUSH
2785: LD_INT 2
2787: PUSH
2788: LD_INT 3
2790: PUSH
2791: LD_INT 4
2793: PUSH
2794: LD_INT 5
2796: PUSH
2797: LD_INT 6
2799: PUSH
2800: LD_INT 7
2802: PUSH
2803: LD_INT 8
2805: PUSH
2806: EMPTY
2807: LIST
2808: LIST
2809: LIST
2810: LIST
2811: LIST
2812: LIST
2813: LIST
2814: LIST
2815: IN
2816: IFFALSE 2857
// ToLua ( LUA_UpdateSiberiteSent( & team_siberite_stocked [ Side_Teams [ Your_Side ] ] & , & victory_cond & ); ) ;
2818: LD_STRING LUA_UpdateSiberiteSent(
2820: PUSH
2821: LD_EXP 61
2825: PUSH
2826: LD_EXP 5
2830: PUSH
2831: LD_OWVAR 2
2835: ARRAY
2836: ARRAY
2837: STR
2838: PUSH
2839: LD_STRING ,
2841: STR
2842: PUSH
2843: LD_EXP 27
2847: STR
2848: PUSH
2849: LD_STRING );
2851: STR
2852: PPUSH
2853: CALL_OW 559
// for i = 1 to Teams do
2857: LD_ADDR_VAR 0 4
2861: PUSH
2862: DOUBLE
2863: LD_INT 1
2865: DEC
2866: ST_TO_ADDR
2867: LD_EXP 6
2871: PUSH
2872: FOR_TO
2873: IFFALSE 2920
// ToLua ( LUA_UpdateSiberiteSpec( & team_siberite_stocked [ i ] & , & victory_cond & , & i & ); ) ;
2875: LD_STRING LUA_UpdateSiberiteSpec(
2877: PUSH
2878: LD_EXP 61
2882: PUSH
2883: LD_VAR 0 4
2887: ARRAY
2888: STR
2889: PUSH
2890: LD_STRING ,
2892: STR
2893: PUSH
2894: LD_EXP 27
2898: STR
2899: PUSH
2900: LD_STRING ,
2902: STR
2903: PUSH
2904: LD_VAR 0 4
2908: STR
2909: PUSH
2910: LD_STRING );
2912: STR
2913: PPUSH
2914: CALL_OW 559
2918: GO 2872
2920: POP
2921: POP
// end ;
2922: LD_VAR 0 1
2926: RET
// export function INIT_PrepareSquad ; var i , j , commander , profession , attributes , basic_skills , skill_levels , importance , stat_array ; begin
2927: LD_INT 0
2929: PPUSH
2930: PPUSH
2931: PPUSH
2932: PPUSH
2933: PPUSH
2934: PPUSH
2935: PPUSH
2936: PPUSH
2937: PPUSH
2938: PPUSH
// stat_array := [ ] ;
2939: LD_ADDR_VAR 0 10
2943: PUSH
2944: EMPTY
2945: ST_TO_ADDR
// for i = 1 to people_num [ 1 ] do
2946: LD_ADDR_VAR 0 2
2950: PUSH
2951: DOUBLE
2952: LD_INT 1
2954: DEC
2955: ST_TO_ADDR
2956: LD_EXP 19
2960: PUSH
2961: LD_INT 1
2963: ARRAY
2964: PUSH
2965: FOR_TO
2966: IFFALSE 3183
// begin commander := 1 ;
2968: LD_ADDR_VAR 0 4
2972: PUSH
2973: LD_INT 1
2975: ST_TO_ADDR
// profession := 1 ;
2976: LD_ADDR_VAR 0 5
2980: PUSH
2981: LD_INT 1
2983: ST_TO_ADDR
// attributes := [ Rand ( 10 , 15 ) , Rand ( 9 , 11 ) ] ;
2984: LD_ADDR_VAR 0 6
2988: PUSH
2989: LD_INT 10
2991: PPUSH
2992: LD_INT 15
2994: PPUSH
2995: CALL_OW 12
2999: PUSH
3000: LD_INT 9
3002: PPUSH
3003: LD_INT 11
3005: PPUSH
3006: CALL_OW 12
3010: PUSH
3011: EMPTY
3012: LIST
3013: LIST
3014: ST_TO_ADDR
// basic_skills := [ Rand ( 1 , 3 ) , 0 , 0 , 0 ] ;
3015: LD_ADDR_VAR 0 7
3019: PUSH
3020: LD_INT 1
3022: PPUSH
3023: LD_INT 3
3025: PPUSH
3026: CALL_OW 12
3030: PUSH
3031: LD_INT 0
3033: PUSH
3034: LD_INT 0
3036: PUSH
3037: LD_INT 0
3039: PUSH
3040: EMPTY
3041: LIST
3042: LIST
3043: LIST
3044: LIST
3045: ST_TO_ADDR
// skill_levels := [ basic_skills [ 1 ] + experience , Rand ( 0 , experience ) , Rand ( 0 , experience ) , Rand ( 0 , experience ) ] ;
3046: LD_ADDR_VAR 0 8
3050: PUSH
3051: LD_VAR 0 7
3055: PUSH
3056: LD_INT 1
3058: ARRAY
3059: PUSH
3060: LD_EXP 20
3064: PLUS
3065: PUSH
3066: LD_INT 0
3068: PPUSH
3069: LD_EXP 20
3073: PPUSH
3074: CALL_OW 12
3078: PUSH
3079: LD_INT 0
3081: PPUSH
3082: LD_EXP 20
3086: PPUSH
3087: CALL_OW 12
3091: PUSH
3092: LD_INT 0
3094: PPUSH
3095: LD_EXP 20
3099: PPUSH
3100: CALL_OW 12
3104: PUSH
3105: EMPTY
3106: LIST
3107: LIST
3108: LIST
3109: LIST
3110: ST_TO_ADDR
// importance := 105 ;
3111: LD_ADDR_VAR 0 9
3115: PUSH
3116: LD_INT 105
3118: ST_TO_ADDR
// stat_array := Replace ( stat_array , stat_array + 1 , [ commander , profession , attributes , basic_skills , skill_levels , importance ] ) ;
3119: LD_ADDR_VAR 0 10
3123: PUSH
3124: LD_VAR 0 10
3128: PPUSH
3129: LD_VAR 0 10
3133: PUSH
3134: LD_INT 1
3136: PLUS
3137: PPUSH
3138: LD_VAR 0 4
3142: PUSH
3143: LD_VAR 0 5
3147: PUSH
3148: LD_VAR 0 6
3152: PUSH
3153: LD_VAR 0 7
3157: PUSH
3158: LD_VAR 0 8
3162: PUSH
3163: LD_VAR 0 9
3167: PUSH
3168: EMPTY
3169: LIST
3170: LIST
3171: LIST
3172: LIST
3173: LIST
3174: LIST
3175: PPUSH
3176: CALL_OW 1
3180: ST_TO_ADDR
// end ;
3181: GO 2965
3183: POP
3184: POP
// for j = 2 to people_num do
3185: LD_ADDR_VAR 0 3
3189: PUSH
3190: DOUBLE
3191: LD_INT 2
3193: DEC
3194: ST_TO_ADDR
3195: LD_EXP 19
3199: PUSH
3200: FOR_TO
3201: IFFALSE 3522
// begin commander := 0 ;
3203: LD_ADDR_VAR 0 4
3207: PUSH
3208: LD_INT 0
3210: ST_TO_ADDR
// attributes := [ Rand ( 8 , 12 ) , Rand ( 8 , 12 ) ] ;
3211: LD_ADDR_VAR 0 6
3215: PUSH
3216: LD_INT 8
3218: PPUSH
3219: LD_INT 12
3221: PPUSH
3222: CALL_OW 12
3226: PUSH
3227: LD_INT 8
3229: PPUSH
3230: LD_INT 12
3232: PPUSH
3233: CALL_OW 12
3237: PUSH
3238: EMPTY
3239: LIST
3240: LIST
3241: ST_TO_ADDR
// importance := 0 ;
3242: LD_ADDR_VAR 0 9
3246: PUSH
3247: LD_INT 0
3249: ST_TO_ADDR
// profession := j - 1 ;
3250: LD_ADDR_VAR 0 5
3254: PUSH
3255: LD_VAR 0 3
3259: PUSH
3260: LD_INT 1
3262: MINUS
3263: ST_TO_ADDR
// for i = 1 to people_num [ j ] do
3264: LD_ADDR_VAR 0 2
3268: PUSH
3269: DOUBLE
3270: LD_INT 1
3272: DEC
3273: ST_TO_ADDR
3274: LD_EXP 19
3278: PUSH
3279: LD_VAR 0 3
3283: ARRAY
3284: PUSH
3285: FOR_TO
3286: IFFALSE 3518
// begin basic_skills := [ 0 , 0 , 0 , 0 ] ;
3288: LD_ADDR_VAR 0 7
3292: PUSH
3293: LD_INT 0
3295: PUSH
3296: LD_INT 0
3298: PUSH
3299: LD_INT 0
3301: PUSH
3302: LD_INT 0
3304: PUSH
3305: EMPTY
3306: LIST
3307: LIST
3308: LIST
3309: LIST
3310: ST_TO_ADDR
// skill_levels := [ Rand ( 0 , experience ) , Rand ( 0 , experience ) , Rand ( 0 , experience ) , Rand ( 0 , experience ) ] ;
3311: LD_ADDR_VAR 0 8
3315: PUSH
3316: LD_INT 0
3318: PPUSH
3319: LD_EXP 20
3323: PPUSH
3324: CALL_OW 12
3328: PUSH
3329: LD_INT 0
3331: PPUSH
3332: LD_EXP 20
3336: PPUSH
3337: CALL_OW 12
3341: PUSH
3342: LD_INT 0
3344: PPUSH
3345: LD_EXP 20
3349: PPUSH
3350: CALL_OW 12
3354: PUSH
3355: LD_INT 0
3357: PPUSH
3358: LD_EXP 20
3362: PPUSH
3363: CALL_OW 12
3367: PUSH
3368: EMPTY
3369: LIST
3370: LIST
3371: LIST
3372: LIST
3373: ST_TO_ADDR
// basic_skills := Replace ( basic_skills , j - 1 , Rand ( 0 , 2 ) ) ;
3374: LD_ADDR_VAR 0 7
3378: PUSH
3379: LD_VAR 0 7
3383: PPUSH
3384: LD_VAR 0 3
3388: PUSH
3389: LD_INT 1
3391: MINUS
3392: PPUSH
3393: LD_INT 0
3395: PPUSH
3396: LD_INT 2
3398: PPUSH
3399: CALL_OW 12
3403: PPUSH
3404: CALL_OW 1
3408: ST_TO_ADDR
// skill_levels := Replace ( skill_levels , j - 1 , basic_skills [ j - 1 ] + experience ) ;
3409: LD_ADDR_VAR 0 8
3413: PUSH
3414: LD_VAR 0 8
3418: PPUSH
3419: LD_VAR 0 3
3423: PUSH
3424: LD_INT 1
3426: MINUS
3427: PPUSH
3428: LD_VAR 0 7
3432: PUSH
3433: LD_VAR 0 3
3437: PUSH
3438: LD_INT 1
3440: MINUS
3441: ARRAY
3442: PUSH
3443: LD_EXP 20
3447: PLUS
3448: PPUSH
3449: CALL_OW 1
3453: ST_TO_ADDR
// stat_array := Replace ( stat_array , stat_array + 1 , [ commander , profession , attributes , basic_skills , skill_levels , importance ] ) ;
3454: LD_ADDR_VAR 0 10
3458: PUSH
3459: LD_VAR 0 10
3463: PPUSH
3464: LD_VAR 0 10
3468: PUSH
3469: LD_INT 1
3471: PLUS
3472: PPUSH
3473: LD_VAR 0 4
3477: PUSH
3478: LD_VAR 0 5
3482: PUSH
3483: LD_VAR 0 6
3487: PUSH
3488: LD_VAR 0 7
3492: PUSH
3493: LD_VAR 0 8
3497: PUSH
3498: LD_VAR 0 9
3502: PUSH
3503: EMPTY
3504: LIST
3505: LIST
3506: LIST
3507: LIST
3508: LIST
3509: LIST
3510: PPUSH
3511: CALL_OW 1
3515: ST_TO_ADDR
// end ;
3516: GO 3285
3518: POP
3519: POP
// end ;
3520: GO 3200
3522: POP
3523: POP
// composition := stat_array ;
3524: LD_ADDR_EXP 43
3528: PUSH
3529: LD_VAR 0 10
3533: ST_TO_ADDR
// end ;
3534: LD_VAR 0 1
3538: RET
// export function INIT_SpawnStartingUnits ; var i , j , human , vehicle , crates , oil , siberite , cargo_capacity , vehicle_amount , bulk ; begin
3539: LD_INT 0
3541: PPUSH
3542: PPUSH
3543: PPUSH
3544: PPUSH
3545: PPUSH
3546: PPUSH
3547: PPUSH
3548: PPUSH
3549: PPUSH
3550: PPUSH
3551: PPUSH
// side_soldiers := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
3552: LD_ADDR_EXP 46
3556: PUSH
3557: EMPTY
3558: PUSH
3559: EMPTY
3560: PUSH
3561: EMPTY
3562: PUSH
3563: EMPTY
3564: PUSH
3565: EMPTY
3566: PUSH
3567: EMPTY
3568: PUSH
3569: EMPTY
3570: PUSH
3571: EMPTY
3572: PUSH
3573: EMPTY
3574: LIST
3575: LIST
3576: LIST
3577: LIST
3578: LIST
3579: LIST
3580: LIST
3581: LIST
3582: ST_TO_ADDR
// side_vehicles := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
3583: LD_ADDR_EXP 50
3587: PUSH
3588: EMPTY
3589: PUSH
3590: EMPTY
3591: PUSH
3592: EMPTY
3593: PUSH
3594: EMPTY
3595: PUSH
3596: EMPTY
3597: PUSH
3598: EMPTY
3599: PUSH
3600: EMPTY
3601: PUSH
3602: EMPTY
3603: PUSH
3604: EMPTY
3605: LIST
3606: LIST
3607: LIST
3608: LIST
3609: LIST
3610: LIST
3611: LIST
3612: LIST
3613: ST_TO_ADDR
// vehicle_amount := 0 ;
3614: LD_ADDR_VAR 0 10
3618: PUSH
3619: LD_INT 0
3621: ST_TO_ADDR
// crates := starting_resources [ 1 ] ;
3622: LD_ADDR_VAR 0 6
3626: PUSH
3627: LD_EXP 21
3631: PUSH
3632: LD_INT 1
3634: ARRAY
3635: ST_TO_ADDR
// oil := starting_resources [ 2 ] ;
3636: LD_ADDR_VAR 0 7
3640: PUSH
3641: LD_EXP 21
3645: PUSH
3646: LD_INT 2
3648: ARRAY
3649: ST_TO_ADDR
// siberite := starting_resources [ 3 ] ;
3650: LD_ADDR_VAR 0 8
3654: PUSH
3655: LD_EXP 21
3659: PUSH
3660: LD_INT 3
3662: ARRAY
3663: ST_TO_ADDR
// cargo_capacity := crates + oil + siberite ;
3664: LD_ADDR_VAR 0 9
3668: PUSH
3669: LD_VAR 0 6
3673: PUSH
3674: LD_VAR 0 7
3678: PLUS
3679: PUSH
3680: LD_VAR 0 8
3684: PLUS
3685: ST_TO_ADDR
// if cargo_capacity > 0 then
3686: LD_VAR 0 9
3690: PUSH
3691: LD_INT 0
3693: GREATER
3694: IFFALSE 3736
// begin while cargo_capacity > 0 do
3696: LD_VAR 0 9
3700: PUSH
3701: LD_INT 0
3703: GREATER
3704: IFFALSE 3736
// begin vehicle_amount := vehicle_amount + 1 ;
3706: LD_ADDR_VAR 0 10
3710: PUSH
3711: LD_VAR 0 10
3715: PUSH
3716: LD_INT 1
3718: PLUS
3719: ST_TO_ADDR
// cargo_capacity := cargo_capacity - 100 ;
3720: LD_ADDR_VAR 0 9
3724: PUSH
3725: LD_VAR 0 9
3729: PUSH
3730: LD_INT 100
3732: MINUS
3733: ST_TO_ADDR
// end ;
3734: GO 3696
// end ; for i = 1 to 8 do
3736: LD_ADDR_VAR 0 2
3740: PUSH
3741: DOUBLE
3742: LD_INT 1
3744: DEC
3745: ST_TO_ADDR
3746: LD_INT 8
3748: PUSH
3749: FOR_TO
3750: IFFALSE 4300
// begin if not side_isalive [ i ] then
3752: LD_EXP 54
3756: PUSH
3757: LD_VAR 0 2
3761: ARRAY
3762: NOT
3763: IFFALSE 3767
// continue ;
3765: GO 3749
// for j = 1 to composition do
3767: LD_ADDR_VAR 0 3
3771: PUSH
3772: DOUBLE
3773: LD_INT 1
3775: DEC
3776: ST_TO_ADDR
3777: LD_EXP 43
3781: PUSH
3782: FOR_TO
3783: IFFALSE 3855
// begin human := PrepareCharacters ( i , position_spawn_direction , composition [ j ] ) ;
3785: LD_ADDR_VAR 0 4
3789: PUSH
3790: LD_VAR 0 2
3794: PPUSH
3795: LD_EXP 34
3799: PPUSH
3800: LD_EXP 43
3804: PUSH
3805: LD_VAR 0 3
3809: ARRAY
3810: PPUSH
3811: CALL 6499 0 3
3815: ST_TO_ADDR
// side_soldiers := Replace ( side_soldiers , i , side_soldiers [ i ] ^ human ) ;
3816: LD_ADDR_EXP 46
3820: PUSH
3821: LD_EXP 46
3825: PPUSH
3826: LD_VAR 0 2
3830: PPUSH
3831: LD_EXP 46
3835: PUSH
3836: LD_VAR 0 2
3840: ARRAY
3841: PUSH
3842: LD_VAR 0 4
3846: ADD
3847: PPUSH
3848: CALL_OW 1
3852: ST_TO_ADDR
// end ;
3853: GO 3782
3855: POP
3856: POP
// crates := starting_resources [ 1 ] ;
3857: LD_ADDR_VAR 0 6
3861: PUSH
3862: LD_EXP 21
3866: PUSH
3867: LD_INT 1
3869: ARRAY
3870: ST_TO_ADDR
// oil := starting_resources [ 2 ] ;
3871: LD_ADDR_VAR 0 7
3875: PUSH
3876: LD_EXP 21
3880: PUSH
3881: LD_INT 2
3883: ARRAY
3884: ST_TO_ADDR
// siberite := starting_resources [ 3 ] ;
3885: LD_ADDR_VAR 0 8
3889: PUSH
3890: LD_EXP 21
3894: PUSH
3895: LD_INT 3
3897: ARRAY
3898: ST_TO_ADDR
// for j = 1 to vehicle_amount do
3899: LD_ADDR_VAR 0 3
3903: PUSH
3904: DOUBLE
3905: LD_INT 1
3907: DEC
3908: ST_TO_ADDR
3909: LD_VAR 0 10
3913: PUSH
3914: FOR_TO
3915: IFFALSE 4052
// begin vehicle := PrepareVehicles ( i , position_spawn_direction ) ;
3917: LD_ADDR_VAR 0 5
3921: PUSH
3922: LD_VAR 0 2
3926: PPUSH
3927: LD_EXP 34
3931: PPUSH
3932: CALL 6713 0 2
3936: ST_TO_ADDR
// bulk := FillUpVehicles ( vehicle , crates , oil , siberite ) ;
3937: LD_ADDR_VAR 0 11
3941: PUSH
3942: LD_VAR 0 5
3946: PPUSH
3947: LD_VAR 0 6
3951: PPUSH
3952: LD_VAR 0 7
3956: PPUSH
3957: LD_VAR 0 8
3961: PPUSH
3962: CALL 11154 0 4
3966: ST_TO_ADDR
// crates := bulk [ 2 ] ;
3967: LD_ADDR_VAR 0 6
3971: PUSH
3972: LD_VAR 0 11
3976: PUSH
3977: LD_INT 2
3979: ARRAY
3980: ST_TO_ADDR
// oil := bulk [ 3 ] ;
3981: LD_ADDR_VAR 0 7
3985: PUSH
3986: LD_VAR 0 11
3990: PUSH
3991: LD_INT 3
3993: ARRAY
3994: ST_TO_ADDR
// siberite := bulk [ 4 ] ;
3995: LD_ADDR_VAR 0 8
3999: PUSH
4000: LD_VAR 0 11
4004: PUSH
4005: LD_INT 4
4007: ARRAY
4008: ST_TO_ADDR
// side_vehicles := Replace ( side_vehicles , i , side_vehicles [ i ] ^ bulk [ 1 ] ) ;
4009: LD_ADDR_EXP 50
4013: PUSH
4014: LD_EXP 50
4018: PPUSH
4019: LD_VAR 0 2
4023: PPUSH
4024: LD_EXP 50
4028: PUSH
4029: LD_VAR 0 2
4033: ARRAY
4034: PUSH
4035: LD_VAR 0 11
4039: PUSH
4040: LD_INT 1
4042: ARRAY
4043: ADD
4044: PPUSH
4045: CALL_OW 1
4049: ST_TO_ADDR
// end ;
4050: GO 3914
4052: POP
4053: POP
// for j = 1 to side_vehicles [ i ] do
4054: LD_ADDR_VAR 0 3
4058: PUSH
4059: DOUBLE
4060: LD_INT 1
4062: DEC
4063: ST_TO_ADDR
4064: LD_EXP 50
4068: PUSH
4069: LD_VAR 0 2
4073: ARRAY
4074: PUSH
4075: FOR_TO
4076: IFFALSE 4158
// PlaceHumanInUnit ( side_soldiers [ i ] [ people_num [ 1 ] + people_num [ 2 ] + people_num [ 3 ] + people_num [ 4 ] - j ] , side_vehicles [ i ] [ j ] ) ;
4078: LD_EXP 46
4082: PUSH
4083: LD_VAR 0 2
4087: ARRAY
4088: PUSH
4089: LD_EXP 19
4093: PUSH
4094: LD_INT 1
4096: ARRAY
4097: PUSH
4098: LD_EXP 19
4102: PUSH
4103: LD_INT 2
4105: ARRAY
4106: PLUS
4107: PUSH
4108: LD_EXP 19
4112: PUSH
4113: LD_INT 3
4115: ARRAY
4116: PLUS
4117: PUSH
4118: LD_EXP 19
4122: PUSH
4123: LD_INT 4
4125: ARRAY
4126: PLUS
4127: PUSH
4128: LD_VAR 0 3
4132: MINUS
4133: ARRAY
4134: PPUSH
4135: LD_EXP 50
4139: PUSH
4140: LD_VAR 0 2
4144: ARRAY
4145: PUSH
4146: LD_VAR 0 3
4150: ARRAY
4151: PPUSH
4152: CALL_OW 52
4156: GO 4075
4158: POP
4159: POP
// for j = 1 to side_soldiers [ i ] do
4160: LD_ADDR_VAR 0 3
4164: PUSH
4165: DOUBLE
4166: LD_INT 1
4168: DEC
4169: ST_TO_ADDR
4170: LD_EXP 46
4174: PUSH
4175: LD_VAR 0 2
4179: ARRAY
4180: PUSH
4181: FOR_TO
4182: IFFALSE 4227
// PlaceUnitArea ( side_soldiers [ i ] [ j ] , position_spawn_area [ Side_Positions [ i ] ] , false ) ;
4184: LD_EXP 46
4188: PUSH
4189: LD_VAR 0 2
4193: ARRAY
4194: PUSH
4195: LD_VAR 0 3
4199: ARRAY
4200: PPUSH
4201: LD_EXP 35
4205: PUSH
4206: LD_EXP 2
4210: PUSH
4211: LD_VAR 0 2
4215: ARRAY
4216: ARRAY
4217: PPUSH
4218: LD_INT 0
4220: PPUSH
4221: CALL_OW 49
4225: GO 4181
4227: POP
4228: POP
// for j = 1 to side_vehicles [ i ] do
4229: LD_ADDR_VAR 0 3
4233: PUSH
4234: DOUBLE
4235: LD_INT 1
4237: DEC
4238: ST_TO_ADDR
4239: LD_EXP 50
4243: PUSH
4244: LD_VAR 0 2
4248: ARRAY
4249: PUSH
4250: FOR_TO
4251: IFFALSE 4296
// PlaceUnitArea ( side_vehicles [ i ] [ j ] , position_spawn_area [ Side_Positions [ i ] ] , false ) ;
4253: LD_EXP 50
4257: PUSH
4258: LD_VAR 0 2
4262: ARRAY
4263: PUSH
4264: LD_VAR 0 3
4268: ARRAY
4269: PPUSH
4270: LD_EXP 35
4274: PUSH
4275: LD_EXP 2
4279: PUSH
4280: LD_VAR 0 2
4284: ARRAY
4285: ARRAY
4286: PPUSH
4287: LD_INT 0
4289: PPUSH
4290: CALL_OW 49
4294: GO 4250
4296: POP
4297: POP
// end ;
4298: GO 3749
4300: POP
4301: POP
// end ;
4302: LD_VAR 0 1
4306: RET
// export function INIT_CameraFocus ; begin
4307: LD_INT 0
4309: PPUSH
// if Your_Side >= 1 and Your_Side <= 8 then
4310: LD_OWVAR 2
4314: PUSH
4315: LD_INT 1
4317: GREATEREQUAL
4318: PUSH
4319: LD_OWVAR 2
4323: PUSH
4324: LD_INT 8
4326: LESSEQUAL
4327: AND
4328: IFFALSE 4347
// CenterNowOnUnits ( side_soldiers [ Your_Side ] ) else
4330: LD_EXP 46
4334: PUSH
4335: LD_OWVAR 2
4339: ARRAY
4340: PPUSH
4341: CALL_OW 87
4345: GO 4364
// begin CenterNowOnXY ( 164 , 129 ) ;
4347: LD_INT 164
4349: PPUSH
4350: LD_INT 129
4352: PPUSH
4353: CALL_OW 86
// FogOff ( 1 ) ;
4357: LD_INT 1
4359: PPUSH
4360: CALL_OW 344
// end ; end ; end_of_file
4364: LD_VAR 0 1
4368: RET
// export Game_Type , Side_Positions , Side_Nations , Side_Comps , Side_Teams , Teams , Choice_people_num , Choice_experience , Choice_starting_resources , Choice_crate_spawn_rate , Choice_people_spawn_rate , Choice_spawn_fluctuation , Choice_oil_abundance , Choice_sib_abundance , Choice_victory_cond , Choice_reinforce_cost , Choice_black_FoW , Choice_starting_tech_lvl , people_num , experience , starting_resources , crate_spawn_rate , people_spawn_rate , spawn_fluctuation , oil_abundance , sib_abundance , victory_cond , reinforce_cost , black_fow , starting_tech_lvl , side_tech_lvl , available_oil_deposits , available_siberite_deposits , position_spawn_direction , position_spawn_area , position_drop_zones , fluctuation_base_crates , fluctuation_base_humans , fluctuation_modifier_crates , fluctuation_modifier_humans , current_spawn_rate , past_spawn_rate , composition , new_character_EON , new_character_reinforcements , side_soldiers , side_depots , side_soldier_count , soldier_limit , side_vehicles , CLOCK_crate_spawn , CLOCK_human_spawn , CLOCK_fluctuation , side_isalive , cost_per_human , cost_per_upgrade , side_reinforcement_amount , side_reinforcement_cap , side_pending_order , side_resources_delivered , team_siberite_stocked , team_transfer_zones , transfer_zone_direction , side_chosen_zone , side_zone_locked , side_transfer_clocks , side_units_outside , side_order_type , side_resources_remaining , side_transfer_pending ; export function INIT_LoadMapParams ; var i ; begin
4369: LD_INT 0
4371: PPUSH
4372: PPUSH
// people_num := [ [ 1 , 1 , 1 , 1 , 1 ] , [ 1 , 2 , 2 , 2 , 2 ] , [ 1 , 3 , 3 , 3 , 3 ] , [ 1 , 4 , 4 , 4 , 4 ] ] ;
4373: LD_ADDR_EXP 19
4377: PUSH
4378: LD_INT 1
4380: PUSH
4381: LD_INT 1
4383: PUSH
4384: LD_INT 1
4386: PUSH
4387: LD_INT 1
4389: PUSH
4390: LD_INT 1
4392: PUSH
4393: EMPTY
4394: LIST
4395: LIST
4396: LIST
4397: LIST
4398: LIST
4399: PUSH
4400: LD_INT 1
4402: PUSH
4403: LD_INT 2
4405: PUSH
4406: LD_INT 2
4408: PUSH
4409: LD_INT 2
4411: PUSH
4412: LD_INT 2
4414: PUSH
4415: EMPTY
4416: LIST
4417: LIST
4418: LIST
4419: LIST
4420: LIST
4421: PUSH
4422: LD_INT 1
4424: PUSH
4425: LD_INT 3
4427: PUSH
4428: LD_INT 3
4430: PUSH
4431: LD_INT 3
4433: PUSH
4434: LD_INT 3
4436: PUSH
4437: EMPTY
4438: LIST
4439: LIST
4440: LIST
4441: LIST
4442: LIST
4443: PUSH
4444: LD_INT 1
4446: PUSH
4447: LD_INT 4
4449: PUSH
4450: LD_INT 4
4452: PUSH
4453: LD_INT 4
4455: PUSH
4456: LD_INT 4
4458: PUSH
4459: EMPTY
4460: LIST
4461: LIST
4462: LIST
4463: LIST
4464: LIST
4465: PUSH
4466: EMPTY
4467: LIST
4468: LIST
4469: LIST
4470: LIST
4471: ST_TO_ADDR
// experience := [ 1 , 2 , 4 , 5 ] ;
4472: LD_ADDR_EXP 20
4476: PUSH
4477: LD_INT 1
4479: PUSH
4480: LD_INT 2
4482: PUSH
4483: LD_INT 4
4485: PUSH
4486: LD_INT 5
4488: PUSH
4489: EMPTY
4490: LIST
4491: LIST
4492: LIST
4493: LIST
4494: ST_TO_ADDR
// starting_resources := [ [ 0 , 0 , 0 ] , [ 50 , 30 , 0 ] , [ 100 , 30 , 0 ] , [ 150 , 50 , 0 ] ] ;
4495: LD_ADDR_EXP 21
4499: PUSH
4500: LD_INT 0
4502: PUSH
4503: LD_INT 0
4505: PUSH
4506: LD_INT 0
4508: PUSH
4509: EMPTY
4510: LIST
4511: LIST
4512: LIST
4513: PUSH
4514: LD_INT 50
4516: PUSH
4517: LD_INT 30
4519: PUSH
4520: LD_INT 0
4522: PUSH
4523: EMPTY
4524: LIST
4525: LIST
4526: LIST
4527: PUSH
4528: LD_INT 100
4530: PUSH
4531: LD_INT 30
4533: PUSH
4534: LD_INT 0
4536: PUSH
4537: EMPTY
4538: LIST
4539: LIST
4540: LIST
4541: PUSH
4542: LD_INT 150
4544: PUSH
4545: LD_INT 50
4547: PUSH
4548: LD_INT 0
4550: PUSH
4551: EMPTY
4552: LIST
4553: LIST
4554: LIST
4555: PUSH
4556: EMPTY
4557: LIST
4558: LIST
4559: LIST
4560: LIST
4561: ST_TO_ADDR
// crate_spawn_rate := [ 2 2$00 , 1 1$30 , 1 1$00 , 0 0$30 ] ;
4562: LD_ADDR_EXP 22
4566: PUSH
4567: LD_INT 4200
4569: PUSH
4570: LD_INT 3150
4572: PUSH
4573: LD_INT 2100
4575: PUSH
4576: LD_INT 1050
4578: PUSH
4579: EMPTY
4580: LIST
4581: LIST
4582: LIST
4583: LIST
4584: ST_TO_ADDR
// people_spawn_rate := [ 0 , 15 15$0 , 10 10$0 , 5 5$0 ] ;
4585: LD_ADDR_EXP 23
4589: PUSH
4590: LD_INT 0
4592: PUSH
4593: LD_INT 31500
4595: PUSH
4596: LD_INT 21000
4598: PUSH
4599: LD_INT 10500
4601: PUSH
4602: EMPTY
4603: LIST
4604: LIST
4605: LIST
4606: LIST
4607: ST_TO_ADDR
// spawn_fluctuation := [ 0 , 5 5$0 , 2 2$30 ] ;
4608: LD_ADDR_EXP 24
4612: PUSH
4613: LD_INT 0
4615: PUSH
4616: LD_INT 10500
4618: PUSH
4619: LD_INT 5250
4621: PUSH
4622: EMPTY
4623: LIST
4624: LIST
4625: LIST
4626: ST_TO_ADDR
// oil_abundance := [ 4 , 6 , 8 ] ;
4627: LD_ADDR_EXP 25
4631: PUSH
4632: LD_INT 4
4634: PUSH
4635: LD_INT 6
4637: PUSH
4638: LD_INT 8
4640: PUSH
4641: EMPTY
4642: LIST
4643: LIST
4644: LIST
4645: ST_TO_ADDR
// sib_abundance := [ 2 , 3 , 4 ] ;
4646: LD_ADDR_EXP 26
4650: PUSH
4651: LD_INT 2
4653: PUSH
4654: LD_INT 3
4656: PUSH
4657: LD_INT 4
4659: PUSH
4660: EMPTY
4661: LIST
4662: LIST
4663: LIST
4664: ST_TO_ADDR
// victory_cond := [ 0 , 400 , 800 , 1200 ] ;
4665: LD_ADDR_EXP 27
4669: PUSH
4670: LD_INT 0
4672: PUSH
4673: LD_INT 400
4675: PUSH
4676: LD_INT 800
4678: PUSH
4679: LD_INT 1200
4681: PUSH
4682: EMPTY
4683: LIST
4684: LIST
4685: LIST
4686: LIST
4687: ST_TO_ADDR
// reinforce_cost := [ 1 , 2 , 3 , 4 ] ;
4688: LD_ADDR_EXP 28
4692: PUSH
4693: LD_INT 1
4695: PUSH
4696: LD_INT 2
4698: PUSH
4699: LD_INT 3
4701: PUSH
4702: LD_INT 4
4704: PUSH
4705: EMPTY
4706: LIST
4707: LIST
4708: LIST
4709: LIST
4710: ST_TO_ADDR
// cost_per_human := [ 50 , 70 , 100 , 150 ] ;
4711: LD_ADDR_EXP 55
4715: PUSH
4716: LD_INT 50
4718: PUSH
4719: LD_INT 70
4721: PUSH
4722: LD_INT 100
4724: PUSH
4725: LD_INT 150
4727: PUSH
4728: EMPTY
4729: LIST
4730: LIST
4731: LIST
4732: LIST
4733: ST_TO_ADDR
// cost_per_upgrade := [ [ [ 50 , 0 , 0 ] , [ 100 , 0 , 0 ] , [ 150 , 0 , 0 ] , [ 200 , 0 , 0 ] ] , [ [ 100 , 0 , 0 ] , [ 150 , 0 , 0 ] , [ 200 , 0 , 0 ] , [ 250 , 0 , 0 ] ] , [ [ 100 , 0 , 20 ] , [ 150 , 0 , 20 ] , [ 200 , 0 , 30 ] , [ 250 , 0 , 30 ] ] , [ [ 150 , 0 , 30 ] , [ 200 , 0 , 30 ] , [ 250 , 0 , 50 ] , [ 300 , 0 , 50 ] ] ] ;
4734: LD_ADDR_EXP 56
4738: PUSH
4739: LD_INT 50
4741: PUSH
4742: LD_INT 0
4744: PUSH
4745: LD_INT 0
4747: PUSH
4748: EMPTY
4749: LIST
4750: LIST
4751: LIST
4752: PUSH
4753: LD_INT 100
4755: PUSH
4756: LD_INT 0
4758: PUSH
4759: LD_INT 0
4761: PUSH
4762: EMPTY
4763: LIST
4764: LIST
4765: LIST
4766: PUSH
4767: LD_INT 150
4769: PUSH
4770: LD_INT 0
4772: PUSH
4773: LD_INT 0
4775: PUSH
4776: EMPTY
4777: LIST
4778: LIST
4779: LIST
4780: PUSH
4781: LD_INT 200
4783: PUSH
4784: LD_INT 0
4786: PUSH
4787: LD_INT 0
4789: PUSH
4790: EMPTY
4791: LIST
4792: LIST
4793: LIST
4794: PUSH
4795: EMPTY
4796: LIST
4797: LIST
4798: LIST
4799: LIST
4800: PUSH
4801: LD_INT 100
4803: PUSH
4804: LD_INT 0
4806: PUSH
4807: LD_INT 0
4809: PUSH
4810: EMPTY
4811: LIST
4812: LIST
4813: LIST
4814: PUSH
4815: LD_INT 150
4817: PUSH
4818: LD_INT 0
4820: PUSH
4821: LD_INT 0
4823: PUSH
4824: EMPTY
4825: LIST
4826: LIST
4827: LIST
4828: PUSH
4829: LD_INT 200
4831: PUSH
4832: LD_INT 0
4834: PUSH
4835: LD_INT 0
4837: PUSH
4838: EMPTY
4839: LIST
4840: LIST
4841: LIST
4842: PUSH
4843: LD_INT 250
4845: PUSH
4846: LD_INT 0
4848: PUSH
4849: LD_INT 0
4851: PUSH
4852: EMPTY
4853: LIST
4854: LIST
4855: LIST
4856: PUSH
4857: EMPTY
4858: LIST
4859: LIST
4860: LIST
4861: LIST
4862: PUSH
4863: LD_INT 100
4865: PUSH
4866: LD_INT 0
4868: PUSH
4869: LD_INT 20
4871: PUSH
4872: EMPTY
4873: LIST
4874: LIST
4875: LIST
4876: PUSH
4877: LD_INT 150
4879: PUSH
4880: LD_INT 0
4882: PUSH
4883: LD_INT 20
4885: PUSH
4886: EMPTY
4887: LIST
4888: LIST
4889: LIST
4890: PUSH
4891: LD_INT 200
4893: PUSH
4894: LD_INT 0
4896: PUSH
4897: LD_INT 30
4899: PUSH
4900: EMPTY
4901: LIST
4902: LIST
4903: LIST
4904: PUSH
4905: LD_INT 250
4907: PUSH
4908: LD_INT 0
4910: PUSH
4911: LD_INT 30
4913: PUSH
4914: EMPTY
4915: LIST
4916: LIST
4917: LIST
4918: PUSH
4919: EMPTY
4920: LIST
4921: LIST
4922: LIST
4923: LIST
4924: PUSH
4925: LD_INT 150
4927: PUSH
4928: LD_INT 0
4930: PUSH
4931: LD_INT 30
4933: PUSH
4934: EMPTY
4935: LIST
4936: LIST
4937: LIST
4938: PUSH
4939: LD_INT 200
4941: PUSH
4942: LD_INT 0
4944: PUSH
4945: LD_INT 30
4947: PUSH
4948: EMPTY
4949: LIST
4950: LIST
4951: LIST
4952: PUSH
4953: LD_INT 250
4955: PUSH
4956: LD_INT 0
4958: PUSH
4959: LD_INT 50
4961: PUSH
4962: EMPTY
4963: LIST
4964: LIST
4965: LIST
4966: PUSH
4967: LD_INT 300
4969: PUSH
4970: LD_INT 0
4972: PUSH
4973: LD_INT 50
4975: PUSH
4976: EMPTY
4977: LIST
4978: LIST
4979: LIST
4980: PUSH
4981: EMPTY
4982: LIST
4983: LIST
4984: LIST
4985: LIST
4986: PUSH
4987: EMPTY
4988: LIST
4989: LIST
4990: LIST
4991: LIST
4992: ST_TO_ADDR
// available_oil_deposits := [ [ [ [ 12 , 17 ] , [ 317 , 242 ] ] , [ [ 46 , 47 ] , [ 283 , 211 ] ] , [ [ 34 , 12 ] , [ 295 , 247 ] ] , [ [ 72 , 48 ] , [ 257 , 211 ] ] , [ [ 95 , 78 ] , [ 235 , 182 ] ] ] , [ [ [ 89 , 28 ] , [ 241 , 232 ] ] , [ [ 118 , 41 ] , [ 211 , 218 ] ] , [ [ 125 , 7 ] , [ 203 , 252 ] ] , [ [ 166 , 80 ] , [ 163 , 179 ] ] ] , [ [ [ 192 , 57 ] , [ 137 , 202 ] ] , [ [ 197 , 6 ] , [ 150 , 253 ] ] , [ [ 214 , 66 ] , [ 115 , 192 ] ] , [ [ 208 , 25 ] , [ 121 , 234 ] ] , [ [ 242 , 89 ] , [ 87 , 170 ] ] ] ] ;
4993: LD_ADDR_EXP 32
4997: PUSH
4998: LD_INT 12
5000: PUSH
5001: LD_INT 17
5003: PUSH
5004: EMPTY
5005: LIST
5006: LIST
5007: PUSH
5008: LD_INT 317
5010: PUSH
5011: LD_INT 242
5013: PUSH
5014: EMPTY
5015: LIST
5016: LIST
5017: PUSH
5018: EMPTY
5019: LIST
5020: LIST
5021: PUSH
5022: LD_INT 46
5024: PUSH
5025: LD_INT 47
5027: PUSH
5028: EMPTY
5029: LIST
5030: LIST
5031: PUSH
5032: LD_INT 283
5034: PUSH
5035: LD_INT 211
5037: PUSH
5038: EMPTY
5039: LIST
5040: LIST
5041: PUSH
5042: EMPTY
5043: LIST
5044: LIST
5045: PUSH
5046: LD_INT 34
5048: PUSH
5049: LD_INT 12
5051: PUSH
5052: EMPTY
5053: LIST
5054: LIST
5055: PUSH
5056: LD_INT 295
5058: PUSH
5059: LD_INT 247
5061: PUSH
5062: EMPTY
5063: LIST
5064: LIST
5065: PUSH
5066: EMPTY
5067: LIST
5068: LIST
5069: PUSH
5070: LD_INT 72
5072: PUSH
5073: LD_INT 48
5075: PUSH
5076: EMPTY
5077: LIST
5078: LIST
5079: PUSH
5080: LD_INT 257
5082: PUSH
5083: LD_INT 211
5085: PUSH
5086: EMPTY
5087: LIST
5088: LIST
5089: PUSH
5090: EMPTY
5091: LIST
5092: LIST
5093: PUSH
5094: LD_INT 95
5096: PUSH
5097: LD_INT 78
5099: PUSH
5100: EMPTY
5101: LIST
5102: LIST
5103: PUSH
5104: LD_INT 235
5106: PUSH
5107: LD_INT 182
5109: PUSH
5110: EMPTY
5111: LIST
5112: LIST
5113: PUSH
5114: EMPTY
5115: LIST
5116: LIST
5117: PUSH
5118: EMPTY
5119: LIST
5120: LIST
5121: LIST
5122: LIST
5123: LIST
5124: PUSH
5125: LD_INT 89
5127: PUSH
5128: LD_INT 28
5130: PUSH
5131: EMPTY
5132: LIST
5133: LIST
5134: PUSH
5135: LD_INT 241
5137: PUSH
5138: LD_INT 232
5140: PUSH
5141: EMPTY
5142: LIST
5143: LIST
5144: PUSH
5145: EMPTY
5146: LIST
5147: LIST
5148: PUSH
5149: LD_INT 118
5151: PUSH
5152: LD_INT 41
5154: PUSH
5155: EMPTY
5156: LIST
5157: LIST
5158: PUSH
5159: LD_INT 211
5161: PUSH
5162: LD_INT 218
5164: PUSH
5165: EMPTY
5166: LIST
5167: LIST
5168: PUSH
5169: EMPTY
5170: LIST
5171: LIST
5172: PUSH
5173: LD_INT 125
5175: PUSH
5176: LD_INT 7
5178: PUSH
5179: EMPTY
5180: LIST
5181: LIST
5182: PUSH
5183: LD_INT 203
5185: PUSH
5186: LD_INT 252
5188: PUSH
5189: EMPTY
5190: LIST
5191: LIST
5192: PUSH
5193: EMPTY
5194: LIST
5195: LIST
5196: PUSH
5197: LD_INT 166
5199: PUSH
5200: LD_INT 80
5202: PUSH
5203: EMPTY
5204: LIST
5205: LIST
5206: PUSH
5207: LD_INT 163
5209: PUSH
5210: LD_INT 179
5212: PUSH
5213: EMPTY
5214: LIST
5215: LIST
5216: PUSH
5217: EMPTY
5218: LIST
5219: LIST
5220: PUSH
5221: EMPTY
5222: LIST
5223: LIST
5224: LIST
5225: LIST
5226: PUSH
5227: LD_INT 192
5229: PUSH
5230: LD_INT 57
5232: PUSH
5233: EMPTY
5234: LIST
5235: LIST
5236: PUSH
5237: LD_INT 137
5239: PUSH
5240: LD_INT 202
5242: PUSH
5243: EMPTY
5244: LIST
5245: LIST
5246: PUSH
5247: EMPTY
5248: LIST
5249: LIST
5250: PUSH
5251: LD_INT 197
5253: PUSH
5254: LD_INT 6
5256: PUSH
5257: EMPTY
5258: LIST
5259: LIST
5260: PUSH
5261: LD_INT 150
5263: PUSH
5264: LD_INT 253
5266: PUSH
5267: EMPTY
5268: LIST
5269: LIST
5270: PUSH
5271: EMPTY
5272: LIST
5273: LIST
5274: PUSH
5275: LD_INT 214
5277: PUSH
5278: LD_INT 66
5280: PUSH
5281: EMPTY
5282: LIST
5283: LIST
5284: PUSH
5285: LD_INT 115
5287: PUSH
5288: LD_INT 192
5290: PUSH
5291: EMPTY
5292: LIST
5293: LIST
5294: PUSH
5295: EMPTY
5296: LIST
5297: LIST
5298: PUSH
5299: LD_INT 208
5301: PUSH
5302: LD_INT 25
5304: PUSH
5305: EMPTY
5306: LIST
5307: LIST
5308: PUSH
5309: LD_INT 121
5311: PUSH
5312: LD_INT 234
5314: PUSH
5315: EMPTY
5316: LIST
5317: LIST
5318: PUSH
5319: EMPTY
5320: LIST
5321: LIST
5322: PUSH
5323: LD_INT 242
5325: PUSH
5326: LD_INT 89
5328: PUSH
5329: EMPTY
5330: LIST
5331: LIST
5332: PUSH
5333: LD_INT 87
5335: PUSH
5336: LD_INT 170
5338: PUSH
5339: EMPTY
5340: LIST
5341: LIST
5342: PUSH
5343: EMPTY
5344: LIST
5345: LIST
5346: PUSH
5347: EMPTY
5348: LIST
5349: LIST
5350: LIST
5351: LIST
5352: LIST
5353: PUSH
5354: EMPTY
5355: LIST
5356: LIST
5357: LIST
5358: ST_TO_ADDR
// available_siberite_deposits := [ [ [ [ 61 , 103 ] , [ 268 , 156 ] ] , [ [ 100 , 115 ] , [ 229 , 144 ] ] , [ [ 128 , 105 ] , [ 201 , 154 ] ] , [ [ 113 , 75 ] , [ 216 , 184 ] ] ] , [ [ [ 167 , 143 ] , [ 162 , 116 ] ] , [ [ 129 , 157 ] , [ 200 , 102 ] ] ] ] ;
5359: LD_ADDR_EXP 33
5363: PUSH
5364: LD_INT 61
5366: PUSH
5367: LD_INT 103
5369: PUSH
5370: EMPTY
5371: LIST
5372: LIST
5373: PUSH
5374: LD_INT 268
5376: PUSH
5377: LD_INT 156
5379: PUSH
5380: EMPTY
5381: LIST
5382: LIST
5383: PUSH
5384: EMPTY
5385: LIST
5386: LIST
5387: PUSH
5388: LD_INT 100
5390: PUSH
5391: LD_INT 115
5393: PUSH
5394: EMPTY
5395: LIST
5396: LIST
5397: PUSH
5398: LD_INT 229
5400: PUSH
5401: LD_INT 144
5403: PUSH
5404: EMPTY
5405: LIST
5406: LIST
5407: PUSH
5408: EMPTY
5409: LIST
5410: LIST
5411: PUSH
5412: LD_INT 128
5414: PUSH
5415: LD_INT 105
5417: PUSH
5418: EMPTY
5419: LIST
5420: LIST
5421: PUSH
5422: LD_INT 201
5424: PUSH
5425: LD_INT 154
5427: PUSH
5428: EMPTY
5429: LIST
5430: LIST
5431: PUSH
5432: EMPTY
5433: LIST
5434: LIST
5435: PUSH
5436: LD_INT 113
5438: PUSH
5439: LD_INT 75
5441: PUSH
5442: EMPTY
5443: LIST
5444: LIST
5445: PUSH
5446: LD_INT 216
5448: PUSH
5449: LD_INT 184
5451: PUSH
5452: EMPTY
5453: LIST
5454: LIST
5455: PUSH
5456: EMPTY
5457: LIST
5458: LIST
5459: PUSH
5460: EMPTY
5461: LIST
5462: LIST
5463: LIST
5464: LIST
5465: PUSH
5466: LD_INT 167
5468: PUSH
5469: LD_INT 143
5471: PUSH
5472: EMPTY
5473: LIST
5474: LIST
5475: PUSH
5476: LD_INT 162
5478: PUSH
5479: LD_INT 116
5481: PUSH
5482: EMPTY
5483: LIST
5484: LIST
5485: PUSH
5486: EMPTY
5487: LIST
5488: LIST
5489: PUSH
5490: LD_INT 129
5492: PUSH
5493: LD_INT 157
5495: PUSH
5496: EMPTY
5497: LIST
5498: LIST
5499: PUSH
5500: LD_INT 200
5502: PUSH
5503: LD_INT 102
5505: PUSH
5506: EMPTY
5507: LIST
5508: LIST
5509: PUSH
5510: EMPTY
5511: LIST
5512: LIST
5513: PUSH
5514: EMPTY
5515: LIST
5516: LIST
5517: PUSH
5518: EMPTY
5519: LIST
5520: LIST
5521: ST_TO_ADDR
// position_spawn_direction := [ 2 , 2 , 3 , 3 , 0 , 0 , 5 , 5 ] ;
5522: LD_ADDR_EXP 34
5526: PUSH
5527: LD_INT 2
5529: PUSH
5530: LD_INT 2
5532: PUSH
5533: LD_INT 3
5535: PUSH
5536: LD_INT 3
5538: PUSH
5539: LD_INT 0
5541: PUSH
5542: LD_INT 0
5544: PUSH
5545: LD_INT 5
5547: PUSH
5548: LD_INT 5
5550: PUSH
5551: EMPTY
5552: LIST
5553: LIST
5554: LIST
5555: LIST
5556: LIST
5557: LIST
5558: LIST
5559: LIST
5560: ST_TO_ADDR
// position_spawn_area := [ INIT_SpawnNW , INIT_SpawnNW , INIT_SpawnNE , INIT_SpawnNE , INIT_SpawnSW , INIT_SpawnSW , INIT_SpawnSE , INIT_SpawnSE ] ;
5561: LD_ADDR_EXP 35
5565: PUSH
5566: LD_INT 1
5568: PUSH
5569: LD_INT 1
5571: PUSH
5572: LD_INT 2
5574: PUSH
5575: LD_INT 2
5577: PUSH
5578: LD_INT 4
5580: PUSH
5581: LD_INT 4
5583: PUSH
5584: LD_INT 3
5586: PUSH
5587: LD_INT 3
5589: PUSH
5590: EMPTY
5591: LIST
5592: LIST
5593: LIST
5594: LIST
5595: LIST
5596: LIST
5597: LIST
5598: LIST
5599: ST_TO_ADDR
// position_drop_zones := [ [ 1 , 100 , [ CrateDropSW , CrateDropSE , CrateDropNW , CrateDropNE ] ] , [ 2 , 50 , [ CrateDropMidSW , CrateDropMidNE ] , [ CrateDropMidNW , CrateDropMidSE ] ] , [ 3 , 40 , [ CrateDropMidN , CrateDropMidS ] ] ] ;
5600: LD_ADDR_EXP 36
5604: PUSH
5605: LD_INT 1
5607: PUSH
5608: LD_INT 100
5610: PUSH
5611: LD_INT 5
5613: PUSH
5614: LD_INT 6
5616: PUSH
5617: LD_INT 7
5619: PUSH
5620: LD_INT 8
5622: PUSH
5623: EMPTY
5624: LIST
5625: LIST
5626: LIST
5627: LIST
5628: PUSH
5629: EMPTY
5630: LIST
5631: LIST
5632: LIST
5633: PUSH
5634: LD_INT 2
5636: PUSH
5637: LD_INT 50
5639: PUSH
5640: LD_INT 9
5642: PUSH
5643: LD_INT 13
5645: PUSH
5646: EMPTY
5647: LIST
5648: LIST
5649: PUSH
5650: LD_INT 10
5652: PUSH
5653: LD_INT 14
5655: PUSH
5656: EMPTY
5657: LIST
5658: LIST
5659: PUSH
5660: EMPTY
5661: LIST
5662: LIST
5663: LIST
5664: LIST
5665: PUSH
5666: LD_INT 3
5668: PUSH
5669: LD_INT 40
5671: PUSH
5672: LD_INT 11
5674: PUSH
5675: LD_INT 12
5677: PUSH
5678: EMPTY
5679: LIST
5680: LIST
5681: PUSH
5682: EMPTY
5683: LIST
5684: LIST
5685: LIST
5686: PUSH
5687: EMPTY
5688: LIST
5689: LIST
5690: LIST
5691: ST_TO_ADDR
// fluctuation_base_crates := [ 0 0$12 , 0 0$9 , 0 0$6 , 0 0$2 ] ;
5692: LD_ADDR_EXP 37
5696: PUSH
5697: LD_INT 420
5699: PUSH
5700: LD_INT 315
5702: PUSH
5703: LD_INT 210
5705: PUSH
5706: LD_INT 70
5708: PUSH
5709: EMPTY
5710: LIST
5711: LIST
5712: LIST
5713: LIST
5714: ST_TO_ADDR
// fluctuation_base_humans := [ 0 , 1 1$30 , 1 1$00 , 0 0$30 ] ;
5715: LD_ADDR_EXP 38
5719: PUSH
5720: LD_INT 0
5722: PUSH
5723: LD_INT 3150
5725: PUSH
5726: LD_INT 2100
5728: PUSH
5729: LD_INT 1050
5731: PUSH
5732: EMPTY
5733: LIST
5734: LIST
5735: LIST
5736: LIST
5737: ST_TO_ADDR
// fluctuation_modifier_crates := 0 ;
5738: LD_ADDR_EXP 39
5742: PUSH
5743: LD_INT 0
5745: ST_TO_ADDR
// fluctuation_modifier_humans := 0 ;
5746: LD_ADDR_EXP 40
5750: PUSH
5751: LD_INT 0
5753: ST_TO_ADDR
// current_spawn_rate := 0 ;
5754: LD_ADDR_EXP 41
5758: PUSH
5759: LD_INT 0
5761: ST_TO_ADDR
// past_spawn_rate := 0 ;
5762: LD_ADDR_EXP 42
5766: PUSH
5767: LD_INT 0
5769: ST_TO_ADDR
// side_depots := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
5770: LD_ADDR_EXP 47
5774: PUSH
5775: EMPTY
5776: PUSH
5777: EMPTY
5778: PUSH
5779: EMPTY
5780: PUSH
5781: EMPTY
5782: PUSH
5783: EMPTY
5784: PUSH
5785: EMPTY
5786: PUSH
5787: EMPTY
5788: PUSH
5789: EMPTY
5790: PUSH
5791: EMPTY
5792: LIST
5793: LIST
5794: LIST
5795: LIST
5796: LIST
5797: LIST
5798: LIST
5799: LIST
5800: ST_TO_ADDR
// side_reinforcement_amount := [ 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 ] ;
5801: LD_ADDR_EXP 57
5805: PUSH
5806: LD_INT 1
5808: PUSH
5809: LD_INT 1
5811: PUSH
5812: LD_INT 1
5814: PUSH
5815: LD_INT 1
5817: PUSH
5818: LD_INT 1
5820: PUSH
5821: LD_INT 1
5823: PUSH
5824: LD_INT 1
5826: PUSH
5827: LD_INT 1
5829: PUSH
5830: EMPTY
5831: LIST
5832: LIST
5833: LIST
5834: LIST
5835: LIST
5836: LIST
5837: LIST
5838: LIST
5839: ST_TO_ADDR
// side_reinforcement_cap := [ 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 ] ;
5840: LD_ADDR_EXP 58
5844: PUSH
5845: LD_INT 3
5847: PUSH
5848: LD_INT 3
5850: PUSH
5851: LD_INT 3
5853: PUSH
5854: LD_INT 3
5856: PUSH
5857: LD_INT 3
5859: PUSH
5860: LD_INT 3
5862: PUSH
5863: LD_INT 3
5865: PUSH
5866: LD_INT 3
5868: PUSH
5869: EMPTY
5870: LIST
5871: LIST
5872: LIST
5873: LIST
5874: LIST
5875: LIST
5876: LIST
5877: LIST
5878: ST_TO_ADDR
// team_transfer_zones := [ [ TransferNW , TransferNE ] , [ TransferSW , TransferSE ] ] ;
5879: LD_ADDR_EXP 62
5883: PUSH
5884: LD_INT 15
5886: PUSH
5887: LD_INT 16
5889: PUSH
5890: EMPTY
5891: LIST
5892: LIST
5893: PUSH
5894: LD_INT 18
5896: PUSH
5897: LD_INT 17
5899: PUSH
5900: EMPTY
5901: LIST
5902: LIST
5903: PUSH
5904: EMPTY
5905: LIST
5906: LIST
5907: ST_TO_ADDR
// transfer_zone_direction := [ [ 3 , 4 ] , [ 1 , 5 ] ] ;
5908: LD_ADDR_EXP 63
5912: PUSH
5913: LD_INT 3
5915: PUSH
5916: LD_INT 4
5918: PUSH
5919: EMPTY
5920: LIST
5921: LIST
5922: PUSH
5923: LD_INT 1
5925: PUSH
5926: LD_INT 5
5928: PUSH
5929: EMPTY
5930: LIST
5931: LIST
5932: PUSH
5933: EMPTY
5934: LIST
5935: LIST
5936: ST_TO_ADDR
// side_chosen_zone := [ 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 ] ;
5937: LD_ADDR_EXP 64
5941: PUSH
5942: LD_INT 1
5944: PUSH
5945: LD_INT 1
5947: PUSH
5948: LD_INT 1
5950: PUSH
5951: LD_INT 1
5953: PUSH
5954: LD_INT 1
5956: PUSH
5957: LD_INT 1
5959: PUSH
5960: LD_INT 1
5962: PUSH
5963: LD_INT 1
5965: PUSH
5966: EMPTY
5967: LIST
5968: LIST
5969: LIST
5970: LIST
5971: LIST
5972: LIST
5973: LIST
5974: LIST
5975: ST_TO_ADDR
// side_zone_locked := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5976: LD_ADDR_EXP 65
5980: PUSH
5981: LD_INT 0
5983: PUSH
5984: LD_INT 0
5986: PUSH
5987: LD_INT 0
5989: PUSH
5990: LD_INT 0
5992: PUSH
5993: LD_INT 0
5995: PUSH
5996: LD_INT 0
5998: PUSH
5999: LD_INT 0
6001: PUSH
6002: LD_INT 0
6004: PUSH
6005: EMPTY
6006: LIST
6007: LIST
6008: LIST
6009: LIST
6010: LIST
6011: LIST
6012: LIST
6013: LIST
6014: ST_TO_ADDR
// side_pending_order := [ [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] ] ;
6015: LD_ADDR_EXP 59
6019: PUSH
6020: LD_INT 0
6022: PUSH
6023: LD_INT 0
6025: PUSH
6026: LD_INT 0
6028: PUSH
6029: EMPTY
6030: LIST
6031: LIST
6032: LIST
6033: PUSH
6034: LD_INT 0
6036: PUSH
6037: LD_INT 0
6039: PUSH
6040: LD_INT 0
6042: PUSH
6043: EMPTY
6044: LIST
6045: LIST
6046: LIST
6047: PUSH
6048: LD_INT 0
6050: PUSH
6051: LD_INT 0
6053: PUSH
6054: LD_INT 0
6056: PUSH
6057: EMPTY
6058: LIST
6059: LIST
6060: LIST
6061: PUSH
6062: LD_INT 0
6064: PUSH
6065: LD_INT 0
6067: PUSH
6068: LD_INT 0
6070: PUSH
6071: EMPTY
6072: LIST
6073: LIST
6074: LIST
6075: PUSH
6076: LD_INT 0
6078: PUSH
6079: LD_INT 0
6081: PUSH
6082: LD_INT 0
6084: PUSH
6085: EMPTY
6086: LIST
6087: LIST
6088: LIST
6089: PUSH
6090: LD_INT 0
6092: PUSH
6093: LD_INT 0
6095: PUSH
6096: LD_INT 0
6098: PUSH
6099: EMPTY
6100: LIST
6101: LIST
6102: LIST
6103: PUSH
6104: LD_INT 0
6106: PUSH
6107: LD_INT 0
6109: PUSH
6110: LD_INT 0
6112: PUSH
6113: EMPTY
6114: LIST
6115: LIST
6116: LIST
6117: PUSH
6118: LD_INT 0
6120: PUSH
6121: LD_INT 0
6123: PUSH
6124: LD_INT 0
6126: PUSH
6127: EMPTY
6128: LIST
6129: LIST
6130: LIST
6131: PUSH
6132: EMPTY
6133: LIST
6134: LIST
6135: LIST
6136: LIST
6137: LIST
6138: LIST
6139: LIST
6140: LIST
6141: ST_TO_ADDR
// side_order_type := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6142: LD_ADDR_EXP 68
6146: PUSH
6147: LD_INT 0
6149: PUSH
6150: LD_INT 0
6152: PUSH
6153: LD_INT 0
6155: PUSH
6156: LD_INT 0
6158: PUSH
6159: LD_INT 0
6161: PUSH
6162: LD_INT 0
6164: PUSH
6165: LD_INT 0
6167: PUSH
6168: LD_INT 0
6170: PUSH
6171: EMPTY
6172: LIST
6173: LIST
6174: LIST
6175: LIST
6176: LIST
6177: LIST
6178: LIST
6179: LIST
6180: ST_TO_ADDR
// side_units_outside := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
6181: LD_ADDR_EXP 67
6185: PUSH
6186: EMPTY
6187: PUSH
6188: EMPTY
6189: PUSH
6190: EMPTY
6191: PUSH
6192: EMPTY
6193: PUSH
6194: EMPTY
6195: PUSH
6196: EMPTY
6197: PUSH
6198: EMPTY
6199: PUSH
6200: EMPTY
6201: PUSH
6202: EMPTY
6203: LIST
6204: LIST
6205: LIST
6206: LIST
6207: LIST
6208: LIST
6209: LIST
6210: LIST
6211: ST_TO_ADDR
// side_transfer_pending := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6212: LD_ADDR_EXP 70
6216: PUSH
6217: LD_INT 0
6219: PUSH
6220: LD_INT 0
6222: PUSH
6223: LD_INT 0
6225: PUSH
6226: LD_INT 0
6228: PUSH
6229: LD_INT 0
6231: PUSH
6232: LD_INT 0
6234: PUSH
6235: LD_INT 0
6237: PUSH
6238: LD_INT 0
6240: PUSH
6241: EMPTY
6242: LIST
6243: LIST
6244: LIST
6245: LIST
6246: LIST
6247: LIST
6248: LIST
6249: LIST
6250: ST_TO_ADDR
// side_resources_remaining := [ [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] ] ;
6251: LD_ADDR_EXP 69
6255: PUSH
6256: LD_INT 0
6258: PUSH
6259: LD_INT 0
6261: PUSH
6262: LD_INT 0
6264: PUSH
6265: EMPTY
6266: LIST
6267: LIST
6268: LIST
6269: PUSH
6270: LD_INT 0
6272: PUSH
6273: LD_INT 0
6275: PUSH
6276: LD_INT 0
6278: PUSH
6279: EMPTY
6280: LIST
6281: LIST
6282: LIST
6283: PUSH
6284: LD_INT 0
6286: PUSH
6287: LD_INT 0
6289: PUSH
6290: LD_INT 0
6292: PUSH
6293: EMPTY
6294: LIST
6295: LIST
6296: LIST
6297: PUSH
6298: LD_INT 0
6300: PUSH
6301: LD_INT 0
6303: PUSH
6304: LD_INT 0
6306: PUSH
6307: EMPTY
6308: LIST
6309: LIST
6310: LIST
6311: PUSH
6312: LD_INT 0
6314: PUSH
6315: LD_INT 0
6317: PUSH
6318: LD_INT 0
6320: PUSH
6321: EMPTY
6322: LIST
6323: LIST
6324: LIST
6325: PUSH
6326: LD_INT 0
6328: PUSH
6329: LD_INT 0
6331: PUSH
6332: LD_INT 0
6334: PUSH
6335: EMPTY
6336: LIST
6337: LIST
6338: LIST
6339: PUSH
6340: LD_INT 0
6342: PUSH
6343: LD_INT 0
6345: PUSH
6346: LD_INT 0
6348: PUSH
6349: EMPTY
6350: LIST
6351: LIST
6352: LIST
6353: PUSH
6354: LD_INT 0
6356: PUSH
6357: LD_INT 0
6359: PUSH
6360: LD_INT 0
6362: PUSH
6363: EMPTY
6364: LIST
6365: LIST
6366: LIST
6367: PUSH
6368: EMPTY
6369: LIST
6370: LIST
6371: LIST
6372: LIST
6373: LIST
6374: LIST
6375: LIST
6376: LIST
6377: ST_TO_ADDR
// end ; end_of_file
6378: LD_VAR 0 1
6382: RET
// export function length ( _array ) ; var _x ; begin
6383: LD_INT 0
6385: PPUSH
6386: PPUSH
// Result := 0 ;
6387: LD_ADDR_VAR 0 2
6391: PUSH
6392: LD_INT 0
6394: ST_TO_ADDR
// for _x in _array do
6395: LD_ADDR_VAR 0 3
6399: PUSH
6400: LD_VAR 0 1
6404: PUSH
6405: FOR_IN
6406: IFFALSE 6424
// begin Result := Result + 1 ;
6408: LD_ADDR_VAR 0 2
6412: PUSH
6413: LD_VAR 0 2
6417: PUSH
6418: LD_INT 1
6420: PLUS
6421: ST_TO_ADDR
// end ;
6422: GO 6405
6424: POP
6425: POP
// end ;
6426: LD_VAR 0 2
6430: RET
// export function mp_sides_comps ; var c , i ; begin
6431: LD_INT 0
6433: PPUSH
6434: PPUSH
6435: PPUSH
// c = [ ] ;
6436: LD_ADDR_VAR 0 2
6440: PUSH
6441: EMPTY
6442: ST_TO_ADDR
// for i = 1 to 8 do
6443: LD_ADDR_VAR 0 3
6447: PUSH
6448: DOUBLE
6449: LD_INT 1
6451: DEC
6452: ST_TO_ADDR
6453: LD_INT 8
6455: PUSH
6456: FOR_TO
6457: IFFALSE 6482
// c = c ^ Multiplayer_GetPlayerIsComp ( i ) ;
6459: LD_ADDR_VAR 0 2
6463: PUSH
6464: LD_VAR 0 2
6468: PUSH
6469: LD_VAR 0 3
6473: PPUSH
6474: CALL_OW 532
6478: ADD
6479: ST_TO_ADDR
6480: GO 6456
6482: POP
6483: POP
// result = c ;
6484: LD_ADDR_VAR 0 1
6488: PUSH
6489: LD_VAR 0 2
6493: ST_TO_ADDR
// end ;
6494: LD_VAR 0 1
6498: RET
// export function PrepareCharacters ( side , direction , loadout ) ; begin
6499: LD_INT 0
6501: PPUSH
// InitHc ( ) ;
6502: CALL_OW 19
// InitUc ( ) ;
6506: CALL_OW 18
// if loadout [ 1 ] and Multiplayer then
6510: LD_VAR 0 3
6514: PUSH
6515: LD_INT 1
6517: ARRAY
6518: PUSH
6519: LD_OWVAR 4
6523: AND
6524: IFFALSE 6580
// begin hc_name := mp_sides_players_names [ side ] ;
6526: LD_ADDR_OWVAR 26
6530: PUSH
6531: LD_OWVAR 19
6535: PUSH
6536: LD_VAR 0 1
6540: ARRAY
6541: ST_TO_ADDR
// hc_gallery := MULTIAVATARS ;
6542: LD_ADDR_OWVAR 33
6546: PUSH
6547: LD_STRING MULTIAVATARS
6549: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( side ) ;
6550: LD_ADDR_OWVAR 34
6554: PUSH
6555: LD_VAR 0 1
6559: PPUSH
6560: CALL_OW 525
6564: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( side ) ;
6565: LD_ADDR_OWVAR 27
6569: PUSH
6570: LD_VAR 0 1
6574: PPUSH
6575: CALL_OW 526
6579: ST_TO_ADDR
// end ; uc_side := side ;
6580: LD_ADDR_OWVAR 20
6584: PUSH
6585: LD_VAR 0 1
6589: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
6590: LD_ADDR_OWVAR 21
6594: PUSH
6595: LD_EXP 3
6599: PUSH
6600: LD_VAR 0 1
6604: ARRAY
6605: ST_TO_ADDR
// uc_direction := direction [ Side_Positions [ side ] ] ;
6606: LD_ADDR_OWVAR 24
6610: PUSH
6611: LD_VAR 0 2
6615: PUSH
6616: LD_EXP 2
6620: PUSH
6621: LD_VAR 0 1
6625: ARRAY
6626: ARRAY
6627: ST_TO_ADDR
// hc_class := loadout [ 2 ] ;
6628: LD_ADDR_OWVAR 28
6632: PUSH
6633: LD_VAR 0 3
6637: PUSH
6638: LD_INT 2
6640: ARRAY
6641: ST_TO_ADDR
// hc_attr := loadout [ 3 ] ;
6642: LD_ADDR_OWVAR 29
6646: PUSH
6647: LD_VAR 0 3
6651: PUSH
6652: LD_INT 3
6654: ARRAY
6655: ST_TO_ADDR
// hc_basic_skills := loadout [ 4 ] ;
6656: LD_ADDR_OWVAR 30
6660: PUSH
6661: LD_VAR 0 3
6665: PUSH
6666: LD_INT 4
6668: ARRAY
6669: ST_TO_ADDR
// hc_skills := loadout [ 5 ] ;
6670: LD_ADDR_OWVAR 31
6674: PUSH
6675: LD_VAR 0 3
6679: PUSH
6680: LD_INT 5
6682: ARRAY
6683: ST_TO_ADDR
// hc_importance := loadout [ 6 ] ;
6684: LD_ADDR_OWVAR 32
6688: PUSH
6689: LD_VAR 0 3
6693: PUSH
6694: LD_INT 6
6696: ARRAY
6697: ST_TO_ADDR
// Result := CreateHuman ;
6698: LD_ADDR_VAR 0 4
6702: PUSH
6703: CALL_OW 44
6707: ST_TO_ADDR
// end ;
6708: LD_VAR 0 4
6712: RET
// export function PrepareVehicles ( side , direction ) ; begin
6713: LD_INT 0
6715: PPUSH
// InitUc ( ) ;
6716: CALL_OW 18
// InitVc ( ) ;
6720: CALL_OW 20
// uc_direction := direction [ Side_Positions [ side ] ] ;
6724: LD_ADDR_OWVAR 24
6728: PUSH
6729: LD_VAR 0 2
6733: PUSH
6734: LD_EXP 2
6738: PUSH
6739: LD_VAR 0 1
6743: ARRAY
6744: ARRAY
6745: ST_TO_ADDR
// uc_side := side ;
6746: LD_ADDR_OWVAR 20
6750: PUSH
6751: LD_VAR 0 1
6755: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
6756: LD_ADDR_OWVAR 21
6760: PUSH
6761: LD_EXP 3
6765: PUSH
6766: LD_VAR 0 1
6770: ARRAY
6771: ST_TO_ADDR
// vc_control := 1 ;
6772: LD_ADDR_OWVAR 38
6776: PUSH
6777: LD_INT 1
6779: ST_TO_ADDR
// vc_engine := 1 ;
6780: LD_ADDR_OWVAR 39
6784: PUSH
6785: LD_INT 1
6787: ST_TO_ADDR
// vc_fuel_battery := 85 ;
6788: LD_ADDR_OWVAR 41
6792: PUSH
6793: LD_INT 85
6795: ST_TO_ADDR
// case Side_Nations [ side ] of 1 :
6796: LD_EXP 3
6800: PUSH
6801: LD_VAR 0 1
6805: ARRAY
6806: PUSH
6807: LD_INT 1
6809: DOUBLE
6810: EQUAL
6811: IFTRUE 6815
6813: GO 6834
6815: POP
// begin vc_chassis := 2 ;
6816: LD_ADDR_OWVAR 37
6820: PUSH
6821: LD_INT 2
6823: ST_TO_ADDR
// vc_weapon := 12 ;
6824: LD_ADDR_OWVAR 40
6828: PUSH
6829: LD_INT 12
6831: ST_TO_ADDR
// end ; 2 :
6832: GO 6889
6834: LD_INT 2
6836: DOUBLE
6837: EQUAL
6838: IFTRUE 6842
6840: GO 6861
6842: POP
// begin vc_chassis := 13 ;
6843: LD_ADDR_OWVAR 37
6847: PUSH
6848: LD_INT 13
6850: ST_TO_ADDR
// vc_weapon := 32 ;
6851: LD_ADDR_OWVAR 40
6855: PUSH
6856: LD_INT 32
6858: ST_TO_ADDR
// end ; 3 :
6859: GO 6889
6861: LD_INT 3
6863: DOUBLE
6864: EQUAL
6865: IFTRUE 6869
6867: GO 6888
6869: POP
// begin vc_chassis := 21 ;
6870: LD_ADDR_OWVAR 37
6874: PUSH
6875: LD_INT 21
6877: ST_TO_ADDR
// vc_weapon := 51 ;
6878: LD_ADDR_OWVAR 40
6882: PUSH
6883: LD_INT 51
6885: ST_TO_ADDR
// end ; end ;
6886: GO 6889
6888: POP
// Result := CreateVehicle ;
6889: LD_ADDR_VAR 0 3
6893: PUSH
6894: CALL_OW 45
6898: ST_TO_ADDR
// end ;
6899: LD_VAR 0 3
6903: RET
// export function DidPlayerLose ( side ) ; var depots , colour ; begin
6904: LD_INT 0
6906: PPUSH
6907: PPUSH
6908: PPUSH
// if side_soldiers [ side ] = 0 then
6909: LD_EXP 46
6913: PUSH
6914: LD_VAR 0 1
6918: ARRAY
6919: PUSH
6920: LD_INT 0
6922: EQUAL
6923: IFFALSE 7108
// begin depots := FilterAllUnits ( [ [ f_side , side ] , [ f_type , 3 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) ;
6925: LD_ADDR_VAR 0 3
6929: PUSH
6930: LD_INT 22
6932: PUSH
6933: LD_VAR 0 1
6937: PUSH
6938: EMPTY
6939: LIST
6940: LIST
6941: PUSH
6942: LD_INT 21
6944: PUSH
6945: LD_INT 3
6947: PUSH
6948: EMPTY
6949: LIST
6950: LIST
6951: PUSH
6952: LD_INT 2
6954: PUSH
6955: LD_INT 30
6957: PUSH
6958: LD_INT 0
6960: PUSH
6961: EMPTY
6962: LIST
6963: LIST
6964: PUSH
6965: LD_INT 30
6967: PUSH
6968: LD_INT 1
6970: PUSH
6971: EMPTY
6972: LIST
6973: LIST
6974: PUSH
6975: EMPTY
6976: LIST
6977: LIST
6978: LIST
6979: PUSH
6980: EMPTY
6981: LIST
6982: LIST
6983: LIST
6984: PPUSH
6985: CALL_OW 69
6989: ST_TO_ADDR
// if depots + 0 = 0 then
6990: LD_VAR 0 3
6994: PUSH
6995: LD_INT 0
6997: PLUS
6998: PUSH
6999: LD_INT 0
7001: EQUAL
7002: IFFALSE 7108
// begin side_isalive := Replace ( side_isalive , side , 0 ) ;
7004: LD_ADDR_EXP 54
7008: PUSH
7009: LD_EXP 54
7013: PPUSH
7014: LD_VAR 0 1
7018: PPUSH
7019: LD_INT 0
7021: PPUSH
7022: CALL_OW 1
7026: ST_TO_ADDR
// if side = Your_Side then
7027: LD_VAR 0 1
7031: PUSH
7032: LD_OWVAR 2
7036: EQUAL
7037: IFFALSE 7050
// begin ToLua ( LUA_Lost(); ) ;
7039: LD_STRING LUA_Lost();
7041: PPUSH
7042: CALL_OW 559
// Multiplayer_Loose_Message ( ) ;
7046: CALL_OW 521
// end ; colour := 0 ;
7050: LD_ADDR_VAR 0 4
7054: PUSH
7055: LD_INT 0
7057: ST_TO_ADDR
// ToLua ( LUA_UpdateSpecInterface( & side & , & colour & , & side_tech_lvl [ side ] & ); ) ;
7058: LD_STRING LUA_UpdateSpecInterface(
7060: PUSH
7061: LD_VAR 0 1
7065: STR
7066: PUSH
7067: LD_STRING ,
7069: STR
7070: PUSH
7071: LD_VAR 0 4
7075: STR
7076: PUSH
7077: LD_STRING ,
7079: STR
7080: PUSH
7081: LD_EXP 31
7085: PUSH
7086: LD_VAR 0 1
7090: ARRAY
7091: STR
7092: PUSH
7093: LD_STRING );
7095: STR
7096: PPUSH
7097: CALL_OW 559
// RaiseSailEvent ( 66 ) ;
7101: LD_INT 66
7103: PPUSH
7104: CALL_OW 427
// end ; end ; end ;
7108: LD_VAR 0 2
7112: RET
// export function CheckPlayerPresence ; var i , colour ; begin
7113: LD_INT 0
7115: PPUSH
7116: PPUSH
7117: PPUSH
// for i = 1 to 8 do
7118: LD_ADDR_VAR 0 2
7122: PUSH
7123: DOUBLE
7124: LD_INT 1
7126: DEC
7127: ST_TO_ADDR
7128: LD_INT 8
7130: PUSH
7131: FOR_TO
7132: IFFALSE 7241
// begin if not MultiplayerSideAlive ( i ) and side_isalive [ i ] then
7134: LD_VAR 0 2
7138: PPUSH
7139: CALL_OW 108
7143: NOT
7144: PUSH
7145: LD_EXP 54
7149: PUSH
7150: LD_VAR 0 2
7154: ARRAY
7155: AND
7156: IFFALSE 7239
// begin side_isalive := Replace ( side_isalive , i , 0 ) ;
7158: LD_ADDR_EXP 54
7162: PUSH
7163: LD_EXP 54
7167: PPUSH
7168: LD_VAR 0 2
7172: PPUSH
7173: LD_INT 0
7175: PPUSH
7176: CALL_OW 1
7180: ST_TO_ADDR
// colour := 0 ;
7181: LD_ADDR_VAR 0 3
7185: PUSH
7186: LD_INT 0
7188: ST_TO_ADDR
// ToLua ( LUA_UpdateSpecInterface( & i & , & colour & , & side_tech_lvl [ i ] & ); ) ;
7189: LD_STRING LUA_UpdateSpecInterface(
7191: PUSH
7192: LD_VAR 0 2
7196: STR
7197: PUSH
7198: LD_STRING ,
7200: STR
7201: PUSH
7202: LD_VAR 0 3
7206: STR
7207: PUSH
7208: LD_STRING ,
7210: STR
7211: PUSH
7212: LD_EXP 31
7216: PUSH
7217: LD_VAR 0 2
7221: ARRAY
7222: STR
7223: PUSH
7224: LD_STRING );
7226: STR
7227: PPUSH
7228: CALL_OW 559
// RaiseSailEvent ( 66 ) ;
7232: LD_INT 66
7234: PPUSH
7235: CALL_OW 427
// end ; end ;
7239: GO 7131
7241: POP
7242: POP
// end ;
7243: LD_VAR 0 1
7247: RET
// function TechUnlock ( techs , side , state ) ; var i ; begin
7248: LD_INT 0
7250: PPUSH
7251: PPUSH
// for i in techs do
7252: LD_ADDR_VAR 0 5
7256: PUSH
7257: LD_VAR 0 1
7261: PUSH
7262: FOR_IN
7263: IFFALSE 7306
// if Researched ( side , i ) = 0 then
7265: LD_VAR 0 2
7269: PPUSH
7270: LD_VAR 0 5
7274: PPUSH
7275: CALL_OW 325
7279: PUSH
7280: LD_INT 0
7282: EQUAL
7283: IFFALSE 7304
// SetTech ( i , side , state ) ;
7285: LD_VAR 0 5
7289: PPUSH
7290: LD_VAR 0 2
7294: PPUSH
7295: LD_VAR 0 3
7299: PPUSH
7300: CALL_OW 322
7304: GO 7262
7306: POP
7307: POP
// end ;
7308: LD_VAR 0 4
7312: RET
// function BuildingUnlock ( buildings , side , state ) ; var i ; begin
7313: LD_INT 0
7315: PPUSH
7316: PPUSH
// for i in buildings do
7317: LD_ADDR_VAR 0 5
7321: PUSH
7322: LD_VAR 0 1
7326: PUSH
7327: FOR_IN
7328: IFFALSE 7351
// SetRestrict ( i , side , state ) ;
7330: LD_VAR 0 5
7334: PPUSH
7335: LD_VAR 0 2
7339: PPUSH
7340: LD_VAR 0 3
7344: PPUSH
7345: CALL_OW 324
7349: GO 7327
7351: POP
7352: POP
// end ;
7353: LD_VAR 0 4
7357: RET
// export function DisableAllTechs ( side ) ; var techs , buildings ; begin
7358: LD_INT 0
7360: PPUSH
7361: PPUSH
7362: PPUSH
// techs := [ 35 , 45 , 46 , 47 , 1 , 2 , 11 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 12 , 13 , 10 , 14 , 15 , 18 , 16 , 17 , 20 , 19 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 36 , 70 , 69 , 39 , 34 , 40 , 71 , 41 , 42 , 43 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 63 , 64 , 65 , 66 , 67 , 68 ] ;
7363: LD_ADDR_VAR 0 3
7367: PUSH
7368: LD_INT 35
7370: PUSH
7371: LD_INT 45
7373: PUSH
7374: LD_INT 46
7376: PUSH
7377: LD_INT 47
7379: PUSH
7380: LD_INT 1
7382: PUSH
7383: LD_INT 2
7385: PUSH
7386: LD_INT 11
7388: PUSH
7389: LD_INT 3
7391: PUSH
7392: LD_INT 4
7394: PUSH
7395: LD_INT 5
7397: PUSH
7398: LD_INT 6
7400: PUSH
7401: LD_INT 7
7403: PUSH
7404: LD_INT 8
7406: PUSH
7407: LD_INT 9
7409: PUSH
7410: LD_INT 12
7412: PUSH
7413: LD_INT 13
7415: PUSH
7416: LD_INT 10
7418: PUSH
7419: LD_INT 14
7421: PUSH
7422: LD_INT 15
7424: PUSH
7425: LD_INT 18
7427: PUSH
7428: LD_INT 16
7430: PUSH
7431: LD_INT 17
7433: PUSH
7434: LD_INT 20
7436: PUSH
7437: LD_INT 19
7439: PUSH
7440: LD_INT 21
7442: PUSH
7443: LD_INT 22
7445: PUSH
7446: LD_INT 23
7448: PUSH
7449: LD_INT 24
7451: PUSH
7452: LD_INT 25
7454: PUSH
7455: LD_INT 26
7457: PUSH
7458: LD_INT 28
7460: PUSH
7461: LD_INT 29
7463: PUSH
7464: LD_INT 30
7466: PUSH
7467: LD_INT 31
7469: PUSH
7470: LD_INT 37
7472: PUSH
7473: LD_INT 38
7475: PUSH
7476: LD_INT 32
7478: PUSH
7479: LD_INT 27
7481: PUSH
7482: LD_INT 33
7484: PUSH
7485: LD_INT 36
7487: PUSH
7488: LD_INT 70
7490: PUSH
7491: LD_INT 69
7493: PUSH
7494: LD_INT 39
7496: PUSH
7497: LD_INT 34
7499: PUSH
7500: LD_INT 40
7502: PUSH
7503: LD_INT 71
7505: PUSH
7506: LD_INT 41
7508: PUSH
7509: LD_INT 42
7511: PUSH
7512: LD_INT 43
7514: PUSH
7515: LD_INT 44
7517: PUSH
7518: LD_INT 48
7520: PUSH
7521: LD_INT 49
7523: PUSH
7524: LD_INT 50
7526: PUSH
7527: LD_INT 51
7529: PUSH
7530: LD_INT 52
7532: PUSH
7533: LD_INT 53
7535: PUSH
7536: LD_INT 54
7538: PUSH
7539: LD_INT 55
7541: PUSH
7542: LD_INT 56
7544: PUSH
7545: LD_INT 57
7547: PUSH
7548: LD_INT 58
7550: PUSH
7551: LD_INT 59
7553: PUSH
7554: LD_INT 60
7556: PUSH
7557: LD_INT 61
7559: PUSH
7560: LD_INT 62
7562: PUSH
7563: LD_INT 63
7565: PUSH
7566: LD_INT 64
7568: PUSH
7569: LD_INT 65
7571: PUSH
7572: LD_INT 66
7574: PUSH
7575: LD_INT 67
7577: PUSH
7578: LD_INT 68
7580: PUSH
7581: EMPTY
7582: LIST
7583: LIST
7584: LIST
7585: LIST
7586: LIST
7587: LIST
7588: LIST
7589: LIST
7590: LIST
7591: LIST
7592: LIST
7593: LIST
7594: LIST
7595: LIST
7596: LIST
7597: LIST
7598: LIST
7599: LIST
7600: LIST
7601: LIST
7602: LIST
7603: LIST
7604: LIST
7605: LIST
7606: LIST
7607: LIST
7608: LIST
7609: LIST
7610: LIST
7611: LIST
7612: LIST
7613: LIST
7614: LIST
7615: LIST
7616: LIST
7617: LIST
7618: LIST
7619: LIST
7620: LIST
7621: LIST
7622: LIST
7623: LIST
7624: LIST
7625: LIST
7626: LIST
7627: LIST
7628: LIST
7629: LIST
7630: LIST
7631: LIST
7632: LIST
7633: LIST
7634: LIST
7635: LIST
7636: LIST
7637: LIST
7638: LIST
7639: LIST
7640: LIST
7641: LIST
7642: LIST
7643: LIST
7644: LIST
7645: LIST
7646: LIST
7647: LIST
7648: LIST
7649: LIST
7650: LIST
7651: LIST
7652: LIST
7653: ST_TO_ADDR
// buildings := [ 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 , 37 , 38 , 39 ] ;
7654: LD_ADDR_VAR 0 4
7658: PUSH
7659: LD_INT 0
7661: PUSH
7662: LD_INT 1
7664: PUSH
7665: LD_INT 2
7667: PUSH
7668: LD_INT 3
7670: PUSH
7671: LD_INT 4
7673: PUSH
7674: LD_INT 5
7676: PUSH
7677: LD_INT 6
7679: PUSH
7680: LD_INT 7
7682: PUSH
7683: LD_INT 8
7685: PUSH
7686: LD_INT 9
7688: PUSH
7689: LD_INT 10
7691: PUSH
7692: LD_INT 11
7694: PUSH
7695: LD_INT 12
7697: PUSH
7698: LD_INT 13
7700: PUSH
7701: LD_INT 14
7703: PUSH
7704: LD_INT 15
7706: PUSH
7707: LD_INT 16
7709: PUSH
7710: LD_INT 17
7712: PUSH
7713: LD_INT 18
7715: PUSH
7716: LD_INT 19
7718: PUSH
7719: LD_INT 20
7721: PUSH
7722: LD_INT 21
7724: PUSH
7725: LD_INT 22
7727: PUSH
7728: LD_INT 23
7730: PUSH
7731: LD_INT 24
7733: PUSH
7734: LD_INT 25
7736: PUSH
7737: LD_INT 26
7739: PUSH
7740: LD_INT 27
7742: PUSH
7743: LD_INT 28
7745: PUSH
7746: LD_INT 29
7748: PUSH
7749: LD_INT 30
7751: PUSH
7752: LD_INT 31
7754: PUSH
7755: LD_INT 32
7757: PUSH
7758: LD_INT 33
7760: PUSH
7761: LD_INT 34
7763: PUSH
7764: LD_INT 35
7766: PUSH
7767: LD_INT 36
7769: PUSH
7770: LD_INT 37
7772: PUSH
7773: LD_INT 38
7775: PUSH
7776: LD_INT 39
7778: PUSH
7779: EMPTY
7780: LIST
7781: LIST
7782: LIST
7783: LIST
7784: LIST
7785: LIST
7786: LIST
7787: LIST
7788: LIST
7789: LIST
7790: LIST
7791: LIST
7792: LIST
7793: LIST
7794: LIST
7795: LIST
7796: LIST
7797: LIST
7798: LIST
7799: LIST
7800: LIST
7801: LIST
7802: LIST
7803: LIST
7804: LIST
7805: LIST
7806: LIST
7807: LIST
7808: LIST
7809: LIST
7810: LIST
7811: LIST
7812: LIST
7813: LIST
7814: LIST
7815: LIST
7816: LIST
7817: LIST
7818: LIST
7819: LIST
7820: ST_TO_ADDR
// TechUnlock ( techs , side , 0 ) ;
7821: LD_VAR 0 3
7825: PPUSH
7826: LD_VAR 0 1
7830: PPUSH
7831: LD_INT 0
7833: PPUSH
7834: CALL 7248 0 3
// BuildingUnlock ( buildings , side , 0 ) ;
7838: LD_VAR 0 4
7842: PPUSH
7843: LD_VAR 0 1
7847: PPUSH
7848: LD_INT 0
7850: PPUSH
7851: CALL 7313 0 3
// end ;
7855: LD_VAR 0 2
7859: RET
// export function TechUpgrade ( tier , nation , side ) ; var techs , buildings , reinforcement , i ; begin
7860: LD_INT 0
7862: PPUSH
7863: PPUSH
7864: PPUSH
7865: PPUSH
7866: PPUSH
// techs := [ ] ;
7867: LD_ADDR_VAR 0 5
7871: PUSH
7872: EMPTY
7873: ST_TO_ADDR
// buildings := [ ] ;
7874: LD_ADDR_VAR 0 6
7878: PUSH
7879: EMPTY
7880: ST_TO_ADDR
// case tier of 0 :
7881: LD_VAR 0 1
7885: PUSH
7886: LD_INT 0
7888: DOUBLE
7889: EQUAL
7890: IFTRUE 7894
7892: GO 8238
7894: POP
// begin case nation of 1 :
7895: LD_VAR 0 2
7899: PUSH
7900: LD_INT 1
7902: DOUBLE
7903: EQUAL
7904: IFTRUE 7908
7906: GO 8013
7908: POP
// begin techs := [ 35 , 45 , 46 , 47 , 69 , 48 , 51 ] ;
7909: LD_ADDR_VAR 0 5
7913: PUSH
7914: LD_INT 35
7916: PUSH
7917: LD_INT 45
7919: PUSH
7920: LD_INT 46
7922: PUSH
7923: LD_INT 47
7925: PUSH
7926: LD_INT 69
7928: PUSH
7929: LD_INT 48
7931: PUSH
7932: LD_INT 51
7934: PUSH
7935: EMPTY
7936: LIST
7937: LIST
7938: LIST
7939: LIST
7940: LIST
7941: LIST
7942: LIST
7943: ST_TO_ADDR
// buildings := [ 0 , 2 , 3 , 4 , 6 , 7 , 8 , 10 , 16 , 19 , 26 , 27 , 29 , 31 , 32 ] ;
7944: LD_ADDR_VAR 0 6
7948: PUSH
7949: LD_INT 0
7951: PUSH
7952: LD_INT 2
7954: PUSH
7955: LD_INT 3
7957: PUSH
7958: LD_INT 4
7960: PUSH
7961: LD_INT 6
7963: PUSH
7964: LD_INT 7
7966: PUSH
7967: LD_INT 8
7969: PUSH
7970: LD_INT 10
7972: PUSH
7973: LD_INT 16
7975: PUSH
7976: LD_INT 19
7978: PUSH
7979: LD_INT 26
7981: PUSH
7982: LD_INT 27
7984: PUSH
7985: LD_INT 29
7987: PUSH
7988: LD_INT 31
7990: PUSH
7991: LD_INT 32
7993: PUSH
7994: EMPTY
7995: LIST
7996: LIST
7997: LIST
7998: LIST
7999: LIST
8000: LIST
8001: LIST
8002: LIST
8003: LIST
8004: LIST
8005: LIST
8006: LIST
8007: LIST
8008: LIST
8009: LIST
8010: ST_TO_ADDR
// end ; 2 :
8011: GO 8228
8013: LD_INT 2
8015: DOUBLE
8016: EQUAL
8017: IFTRUE 8021
8019: GO 8126
8021: POP
// begin techs := [ 35 , 45 , 46 , 47 , 69 , 48 , 51 ] ;
8022: LD_ADDR_VAR 0 5
8026: PUSH
8027: LD_INT 35
8029: PUSH
8030: LD_INT 45
8032: PUSH
8033: LD_INT 46
8035: PUSH
8036: LD_INT 47
8038: PUSH
8039: LD_INT 69
8041: PUSH
8042: LD_INT 48
8044: PUSH
8045: LD_INT 51
8047: PUSH
8048: EMPTY
8049: LIST
8050: LIST
8051: LIST
8052: LIST
8053: LIST
8054: LIST
8055: LIST
8056: ST_TO_ADDR
// buildings := [ 0 , 2 , 3 , 4 , 6 , 7 , 8 , 10 , 16 , 23 , 26 , 27 , 29 , 31 , 32 ] ;
8057: LD_ADDR_VAR 0 6
8061: PUSH
8062: LD_INT 0
8064: PUSH
8065: LD_INT 2
8067: PUSH
8068: LD_INT 3
8070: PUSH
8071: LD_INT 4
8073: PUSH
8074: LD_INT 6
8076: PUSH
8077: LD_INT 7
8079: PUSH
8080: LD_INT 8
8082: PUSH
8083: LD_INT 10
8085: PUSH
8086: LD_INT 16
8088: PUSH
8089: LD_INT 23
8091: PUSH
8092: LD_INT 26
8094: PUSH
8095: LD_INT 27
8097: PUSH
8098: LD_INT 29
8100: PUSH
8101: LD_INT 31
8103: PUSH
8104: LD_INT 32
8106: PUSH
8107: EMPTY
8108: LIST
8109: LIST
8110: LIST
8111: LIST
8112: LIST
8113: LIST
8114: LIST
8115: LIST
8116: LIST
8117: LIST
8118: LIST
8119: LIST
8120: LIST
8121: LIST
8122: LIST
8123: ST_TO_ADDR
// end ; 3 :
8124: GO 8228
8126: LD_INT 3
8128: DOUBLE
8129: EQUAL
8130: IFTRUE 8134
8132: GO 8227
8134: POP
// begin techs := [ 46 , 47 , 69 , 48 , 51 ] ;
8135: LD_ADDR_VAR 0 5
8139: PUSH
8140: LD_INT 46
8142: PUSH
8143: LD_INT 47
8145: PUSH
8146: LD_INT 69
8148: PUSH
8149: LD_INT 48
8151: PUSH
8152: LD_INT 51
8154: PUSH
8155: EMPTY
8156: LIST
8157: LIST
8158: LIST
8159: LIST
8160: LIST
8161: ST_TO_ADDR
// buildings := [ 0 , 2 , 3 , 4 , 6 , 7 , 8 , 10 , 16 , 19 , 26 , 29 , 31 , 32 ] ;
8162: LD_ADDR_VAR 0 6
8166: PUSH
8167: LD_INT 0
8169: PUSH
8170: LD_INT 2
8172: PUSH
8173: LD_INT 3
8175: PUSH
8176: LD_INT 4
8178: PUSH
8179: LD_INT 6
8181: PUSH
8182: LD_INT 7
8184: PUSH
8185: LD_INT 8
8187: PUSH
8188: LD_INT 10
8190: PUSH
8191: LD_INT 16
8193: PUSH
8194: LD_INT 19
8196: PUSH
8197: LD_INT 26
8199: PUSH
8200: LD_INT 29
8202: PUSH
8203: LD_INT 31
8205: PUSH
8206: LD_INT 32
8208: PUSH
8209: EMPTY
8210: LIST
8211: LIST
8212: LIST
8213: LIST
8214: LIST
8215: LIST
8216: LIST
8217: LIST
8218: LIST
8219: LIST
8220: LIST
8221: LIST
8222: LIST
8223: LIST
8224: ST_TO_ADDR
// end ; end ;
8225: GO 8228
8227: POP
// reinforcement := 3 ;
8228: LD_ADDR_VAR 0 7
8232: PUSH
8233: LD_INT 3
8235: ST_TO_ADDR
// end ; 1 :
8236: GO 11090
8238: LD_INT 1
8240: DOUBLE
8241: EQUAL
8242: IFTRUE 8246
8244: GO 8718
8246: POP
// begin case nation of 1 :
8247: LD_VAR 0 2
8251: PUSH
8252: LD_INT 1
8254: DOUBLE
8255: EQUAL
8256: IFTRUE 8260
8258: GO 8409
8260: POP
// begin techs := [ 35 , 45 , 46 , 47 , 6 , 7 , 20 , 69 , 39 , 48 , 49 , 51 , 52 , 60 ] ;
8261: LD_ADDR_VAR 0 5
8265: PUSH
8266: LD_INT 35
8268: PUSH
8269: LD_INT 45
8271: PUSH
8272: LD_INT 46
8274: PUSH
8275: LD_INT 47
8277: PUSH
8278: LD_INT 6
8280: PUSH
8281: LD_INT 7
8283: PUSH
8284: LD_INT 20
8286: PUSH
8287: LD_INT 69
8289: PUSH
8290: LD_INT 39
8292: PUSH
8293: LD_INT 48
8295: PUSH
8296: LD_INT 49
8298: PUSH
8299: LD_INT 51
8301: PUSH
8302: LD_INT 52
8304: PUSH
8305: LD_INT 60
8307: PUSH
8308: EMPTY
8309: LIST
8310: LIST
8311: LIST
8312: LIST
8313: LIST
8314: LIST
8315: LIST
8316: LIST
8317: LIST
8318: LIST
8319: LIST
8320: LIST
8321: LIST
8322: LIST
8323: ST_TO_ADDR
// buildings := [ 0 , 2 , 3 , 4 , 6 , 7 , 8 , 10 , 15 , 16 , 17 , 19 , 20 , 26 , 27 , 29 , 30 , 31 , 32 ] ;
8324: LD_ADDR_VAR 0 6
8328: PUSH
8329: LD_INT 0
8331: PUSH
8332: LD_INT 2
8334: PUSH
8335: LD_INT 3
8337: PUSH
8338: LD_INT 4
8340: PUSH
8341: LD_INT 6
8343: PUSH
8344: LD_INT 7
8346: PUSH
8347: LD_INT 8
8349: PUSH
8350: LD_INT 10
8352: PUSH
8353: LD_INT 15
8355: PUSH
8356: LD_INT 16
8358: PUSH
8359: LD_INT 17
8361: PUSH
8362: LD_INT 19
8364: PUSH
8365: LD_INT 20
8367: PUSH
8368: LD_INT 26
8370: PUSH
8371: LD_INT 27
8373: PUSH
8374: LD_INT 29
8376: PUSH
8377: LD_INT 30
8379: PUSH
8380: LD_INT 31
8382: PUSH
8383: LD_INT 32
8385: PUSH
8386: EMPTY
8387: LIST
8388: LIST
8389: LIST
8390: LIST
8391: LIST
8392: LIST
8393: LIST
8394: LIST
8395: LIST
8396: LIST
8397: LIST
8398: LIST
8399: LIST
8400: LIST
8401: LIST
8402: LIST
8403: LIST
8404: LIST
8405: LIST
8406: ST_TO_ADDR
// end ; 2 :
8407: GO 8708
8409: LD_INT 2
8411: DOUBLE
8412: EQUAL
8413: IFTRUE 8417
8415: GO 8570
8417: POP
// begin techs := [ 35 , 45 , 46 , 47 , 6 , 7 , 20 , 69 , 39 , 48 , 49 , 51 , 52 , 60 ] ;
8418: LD_ADDR_VAR 0 5
8422: PUSH
8423: LD_INT 35
8425: PUSH
8426: LD_INT 45
8428: PUSH
8429: LD_INT 46
8431: PUSH
8432: LD_INT 47
8434: PUSH
8435: LD_INT 6
8437: PUSH
8438: LD_INT 7
8440: PUSH
8441: LD_INT 20
8443: PUSH
8444: LD_INT 69
8446: PUSH
8447: LD_INT 39
8449: PUSH
8450: LD_INT 48
8452: PUSH
8453: LD_INT 49
8455: PUSH
8456: LD_INT 51
8458: PUSH
8459: LD_INT 52
8461: PUSH
8462: LD_INT 60
8464: PUSH
8465: EMPTY
8466: LIST
8467: LIST
8468: LIST
8469: LIST
8470: LIST
8471: LIST
8472: LIST
8473: LIST
8474: LIST
8475: LIST
8476: LIST
8477: LIST
8478: LIST
8479: LIST
8480: ST_TO_ADDR
// buildings := [ 0 , 2 , 3 , 4 , 6 , 7 , 8 , 10 , 15 , 16 , 17 , 20 , 23 , 26 , 27 , 29 , 30 , 31 , 32 , 42 ] ;
8481: LD_ADDR_VAR 0 6
8485: PUSH
8486: LD_INT 0
8488: PUSH
8489: LD_INT 2
8491: PUSH
8492: LD_INT 3
8494: PUSH
8495: LD_INT 4
8497: PUSH
8498: LD_INT 6
8500: PUSH
8501: LD_INT 7
8503: PUSH
8504: LD_INT 8
8506: PUSH
8507: LD_INT 10
8509: PUSH
8510: LD_INT 15
8512: PUSH
8513: LD_INT 16
8515: PUSH
8516: LD_INT 17
8518: PUSH
8519: LD_INT 20
8521: PUSH
8522: LD_INT 23
8524: PUSH
8525: LD_INT 26
8527: PUSH
8528: LD_INT 27
8530: PUSH
8531: LD_INT 29
8533: PUSH
8534: LD_INT 30
8536: PUSH
8537: LD_INT 31
8539: PUSH
8540: LD_INT 32
8542: PUSH
8543: LD_INT 42
8545: PUSH
8546: EMPTY
8547: LIST
8548: LIST
8549: LIST
8550: LIST
8551: LIST
8552: LIST
8553: LIST
8554: LIST
8555: LIST
8556: LIST
8557: LIST
8558: LIST
8559: LIST
8560: LIST
8561: LIST
8562: LIST
8563: LIST
8564: LIST
8565: LIST
8566: LIST
8567: ST_TO_ADDR
// end ; 3 :
8568: GO 8708
8570: LD_INT 3
8572: DOUBLE
8573: EQUAL
8574: IFTRUE 8578
8576: GO 8707
8578: POP
// begin techs := [ 46 , 47 , 9 , 20 , 69 , 39 , 48 , 49 , 51 , 52 , 57 ] ;
8579: LD_ADDR_VAR 0 5
8583: PUSH
8584: LD_INT 46
8586: PUSH
8587: LD_INT 47
8589: PUSH
8590: LD_INT 9
8592: PUSH
8593: LD_INT 20
8595: PUSH
8596: LD_INT 69
8598: PUSH
8599: LD_INT 39
8601: PUSH
8602: LD_INT 48
8604: PUSH
8605: LD_INT 49
8607: PUSH
8608: LD_INT 51
8610: PUSH
8611: LD_INT 52
8613: PUSH
8614: LD_INT 57
8616: PUSH
8617: EMPTY
8618: LIST
8619: LIST
8620: LIST
8621: LIST
8622: LIST
8623: LIST
8624: LIST
8625: LIST
8626: LIST
8627: LIST
8628: LIST
8629: ST_TO_ADDR
// buildings := [ 0 , 2 , 3 , 4 , 6 , 7 , 8 , 10 , 12 , 16 , 17 , 19 , 26 , 29 , 30 , 31 , 32 ] ;
8630: LD_ADDR_VAR 0 6
8634: PUSH
8635: LD_INT 0
8637: PUSH
8638: LD_INT 2
8640: PUSH
8641: LD_INT 3
8643: PUSH
8644: LD_INT 4
8646: PUSH
8647: LD_INT 6
8649: PUSH
8650: LD_INT 7
8652: PUSH
8653: LD_INT 8
8655: PUSH
8656: LD_INT 10
8658: PUSH
8659: LD_INT 12
8661: PUSH
8662: LD_INT 16
8664: PUSH
8665: LD_INT 17
8667: PUSH
8668: LD_INT 19
8670: PUSH
8671: LD_INT 26
8673: PUSH
8674: LD_INT 29
8676: PUSH
8677: LD_INT 30
8679: PUSH
8680: LD_INT 31
8682: PUSH
8683: LD_INT 32
8685: PUSH
8686: EMPTY
8687: LIST
8688: LIST
8689: LIST
8690: LIST
8691: LIST
8692: LIST
8693: LIST
8694: LIST
8695: LIST
8696: LIST
8697: LIST
8698: LIST
8699: LIST
8700: LIST
8701: LIST
8702: LIST
8703: LIST
8704: ST_TO_ADDR
// end ; end ;
8705: GO 8708
8707: POP
// reinforcement := 3 ;
8708: LD_ADDR_VAR 0 7
8712: PUSH
8713: LD_INT 3
8715: ST_TO_ADDR
// end ; 2 :
8716: GO 11090
8718: LD_INT 2
8720: DOUBLE
8721: EQUAL
8722: IFTRUE 8726
8724: GO 9342
8726: POP
// begin case nation of 1 :
8727: LD_VAR 0 2
8731: PUSH
8732: LD_INT 1
8734: DOUBLE
8735: EQUAL
8736: IFTRUE 8740
8738: GO 8917
8740: POP
// begin techs := [ 35 , 45 , 46 , 47 , 6 , 7 , 12 , 15 , 20 , 69 , 39 , 48 , 49 , 50 , 51 , 52 , 60 , 61 ] ;
8741: LD_ADDR_VAR 0 5
8745: PUSH
8746: LD_INT 35
8748: PUSH
8749: LD_INT 45
8751: PUSH
8752: LD_INT 46
8754: PUSH
8755: LD_INT 47
8757: PUSH
8758: LD_INT 6
8760: PUSH
8761: LD_INT 7
8763: PUSH
8764: LD_INT 12
8766: PUSH
8767: LD_INT 15
8769: PUSH
8770: LD_INT 20
8772: PUSH
8773: LD_INT 69
8775: PUSH
8776: LD_INT 39
8778: PUSH
8779: LD_INT 48
8781: PUSH
8782: LD_INT 49
8784: PUSH
8785: LD_INT 50
8787: PUSH
8788: LD_INT 51
8790: PUSH
8791: LD_INT 52
8793: PUSH
8794: LD_INT 60
8796: PUSH
8797: LD_INT 61
8799: PUSH
8800: EMPTY
8801: LIST
8802: LIST
8803: LIST
8804: LIST
8805: LIST
8806: LIST
8807: LIST
8808: LIST
8809: LIST
8810: LIST
8811: LIST
8812: LIST
8813: LIST
8814: LIST
8815: LIST
8816: LIST
8817: LIST
8818: LIST
8819: ST_TO_ADDR
// buildings := [ 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 10 , 15 , 16 , 17 , 19 , 20 , 26 , 27 , 29 , 30 , 31 , 32 , 36 ] ;
8820: LD_ADDR_VAR 0 6
8824: PUSH
8825: LD_INT 0
8827: PUSH
8828: LD_INT 1
8830: PUSH
8831: LD_INT 2
8833: PUSH
8834: LD_INT 3
8836: PUSH
8837: LD_INT 4
8839: PUSH
8840: LD_INT 5
8842: PUSH
8843: LD_INT 6
8845: PUSH
8846: LD_INT 7
8848: PUSH
8849: LD_INT 8
8851: PUSH
8852: LD_INT 10
8854: PUSH
8855: LD_INT 15
8857: PUSH
8858: LD_INT 16
8860: PUSH
8861: LD_INT 17
8863: PUSH
8864: LD_INT 19
8866: PUSH
8867: LD_INT 20
8869: PUSH
8870: LD_INT 26
8872: PUSH
8873: LD_INT 27
8875: PUSH
8876: LD_INT 29
8878: PUSH
8879: LD_INT 30
8881: PUSH
8882: LD_INT 31
8884: PUSH
8885: LD_INT 32
8887: PUSH
8888: LD_INT 36
8890: PUSH
8891: EMPTY
8892: LIST
8893: LIST
8894: LIST
8895: LIST
8896: LIST
8897: LIST
8898: LIST
8899: LIST
8900: LIST
8901: LIST
8902: LIST
8903: LIST
8904: LIST
8905: LIST
8906: LIST
8907: LIST
8908: LIST
8909: LIST
8910: LIST
8911: LIST
8912: LIST
8913: LIST
8914: ST_TO_ADDR
// end ; 2 :
8915: GO 9332
8917: LD_INT 2
8919: DOUBLE
8920: EQUAL
8921: IFTRUE 8925
8923: GO 9122
8925: POP
// begin techs := [ 35 , 45 , 46 , 47 , 5 , 6 , 7 , 15 , 17 , 20 , 70 , 69 , 39 , 41 , 42 , 48 , 49 , 50 , 51 , 52 , 60 , 61 , 66 ] ;
8926: LD_ADDR_VAR 0 5
8930: PUSH
8931: LD_INT 35
8933: PUSH
8934: LD_INT 45
8936: PUSH
8937: LD_INT 46
8939: PUSH
8940: LD_INT 47
8942: PUSH
8943: LD_INT 5
8945: PUSH
8946: LD_INT 6
8948: PUSH
8949: LD_INT 7
8951: PUSH
8952: LD_INT 15
8954: PUSH
8955: LD_INT 17
8957: PUSH
8958: LD_INT 20
8960: PUSH
8961: LD_INT 70
8963: PUSH
8964: LD_INT 69
8966: PUSH
8967: LD_INT 39
8969: PUSH
8970: LD_INT 41
8972: PUSH
8973: LD_INT 42
8975: PUSH
8976: LD_INT 48
8978: PUSH
8979: LD_INT 49
8981: PUSH
8982: LD_INT 50
8984: PUSH
8985: LD_INT 51
8987: PUSH
8988: LD_INT 52
8990: PUSH
8991: LD_INT 60
8993: PUSH
8994: LD_INT 61
8996: PUSH
8997: LD_INT 66
8999: PUSH
9000: EMPTY
9001: LIST
9002: LIST
9003: LIST
9004: LIST
9005: LIST
9006: LIST
9007: LIST
9008: LIST
9009: LIST
9010: LIST
9011: LIST
9012: LIST
9013: LIST
9014: LIST
9015: LIST
9016: LIST
9017: LIST
9018: LIST
9019: LIST
9020: LIST
9021: LIST
9022: LIST
9023: LIST
9024: ST_TO_ADDR
// buildings := [ 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 10 , 13 , 15 , 16 , 17 , 20 , 23 , 26 , 27 , 29 , 30 , 31 , 32 ] ;
9025: LD_ADDR_VAR 0 6
9029: PUSH
9030: LD_INT 0
9032: PUSH
9033: LD_INT 1
9035: PUSH
9036: LD_INT 2
9038: PUSH
9039: LD_INT 3
9041: PUSH
9042: LD_INT 4
9044: PUSH
9045: LD_INT 5
9047: PUSH
9048: LD_INT 6
9050: PUSH
9051: LD_INT 7
9053: PUSH
9054: LD_INT 8
9056: PUSH
9057: LD_INT 10
9059: PUSH
9060: LD_INT 13
9062: PUSH
9063: LD_INT 15
9065: PUSH
9066: LD_INT 16
9068: PUSH
9069: LD_INT 17
9071: PUSH
9072: LD_INT 20
9074: PUSH
9075: LD_INT 23
9077: PUSH
9078: LD_INT 26
9080: PUSH
9081: LD_INT 27
9083: PUSH
9084: LD_INT 29
9086: PUSH
9087: LD_INT 30
9089: PUSH
9090: LD_INT 31
9092: PUSH
9093: LD_INT 32
9095: PUSH
9096: EMPTY
9097: LIST
9098: LIST
9099: LIST
9100: LIST
9101: LIST
9102: LIST
9103: LIST
9104: LIST
9105: LIST
9106: LIST
9107: LIST
9108: LIST
9109: LIST
9110: LIST
9111: LIST
9112: LIST
9113: LIST
9114: LIST
9115: LIST
9116: LIST
9117: LIST
9118: LIST
9119: ST_TO_ADDR
// end ; 3 :
9120: GO 9332
9122: LD_INT 3
9124: DOUBLE
9125: EQUAL
9126: IFTRUE 9130
9128: GO 9331
9130: POP
// begin techs := [ 46 , 47 , 9 , 20 , 21 , 22 , 30 , 32 , 27 , 69 , 39 , 44 , 48 , 49 , 50 , 51 , 52 , 54 , 57 , 58 , 63 ] ;
9131: LD_ADDR_VAR 0 5
9135: PUSH
9136: LD_INT 46
9138: PUSH
9139: LD_INT 47
9141: PUSH
9142: LD_INT 9
9144: PUSH
9145: LD_INT 20
9147: PUSH
9148: LD_INT 21
9150: PUSH
9151: LD_INT 22
9153: PUSH
9154: LD_INT 30
9156: PUSH
9157: LD_INT 32
9159: PUSH
9160: LD_INT 27
9162: PUSH
9163: LD_INT 69
9165: PUSH
9166: LD_INT 39
9168: PUSH
9169: LD_INT 44
9171: PUSH
9172: LD_INT 48
9174: PUSH
9175: LD_INT 49
9177: PUSH
9178: LD_INT 50
9180: PUSH
9181: LD_INT 51
9183: PUSH
9184: LD_INT 52
9186: PUSH
9187: LD_INT 54
9189: PUSH
9190: LD_INT 57
9192: PUSH
9193: LD_INT 58
9195: PUSH
9196: LD_INT 63
9198: PUSH
9199: EMPTY
9200: LIST
9201: LIST
9202: LIST
9203: LIST
9204: LIST
9205: LIST
9206: LIST
9207: LIST
9208: LIST
9209: LIST
9210: LIST
9211: LIST
9212: LIST
9213: LIST
9214: LIST
9215: LIST
9216: LIST
9217: LIST
9218: LIST
9219: LIST
9220: LIST
9221: ST_TO_ADDR
// buildings := [ 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 10 , 11 , 12 , 14 , 16 , 17 , 19 , 21 , 24 , 26 , 28 , 29 , 30 , 31 , 32 , 33 ] ;
9222: LD_ADDR_VAR 0 6
9226: PUSH
9227: LD_INT 0
9229: PUSH
9230: LD_INT 1
9232: PUSH
9233: LD_INT 2
9235: PUSH
9236: LD_INT 3
9238: PUSH
9239: LD_INT 4
9241: PUSH
9242: LD_INT 5
9244: PUSH
9245: LD_INT 6
9247: PUSH
9248: LD_INT 7
9250: PUSH
9251: LD_INT 8
9253: PUSH
9254: LD_INT 10
9256: PUSH
9257: LD_INT 11
9259: PUSH
9260: LD_INT 12
9262: PUSH
9263: LD_INT 14
9265: PUSH
9266: LD_INT 16
9268: PUSH
9269: LD_INT 17
9271: PUSH
9272: LD_INT 19
9274: PUSH
9275: LD_INT 21
9277: PUSH
9278: LD_INT 24
9280: PUSH
9281: LD_INT 26
9283: PUSH
9284: LD_INT 28
9286: PUSH
9287: LD_INT 29
9289: PUSH
9290: LD_INT 30
9292: PUSH
9293: LD_INT 31
9295: PUSH
9296: LD_INT 32
9298: PUSH
9299: LD_INT 33
9301: PUSH
9302: EMPTY
9303: LIST
9304: LIST
9305: LIST
9306: LIST
9307: LIST
9308: LIST
9309: LIST
9310: LIST
9311: LIST
9312: LIST
9313: LIST
9314: LIST
9315: LIST
9316: LIST
9317: LIST
9318: LIST
9319: LIST
9320: LIST
9321: LIST
9322: LIST
9323: LIST
9324: LIST
9325: LIST
9326: LIST
9327: LIST
9328: ST_TO_ADDR
// end ; end ;
9329: GO 9332
9331: POP
// reinforcement := 4 ;
9332: LD_ADDR_VAR 0 7
9336: PUSH
9337: LD_INT 4
9339: ST_TO_ADDR
// end ; 3 :
9340: GO 11090
9342: LD_INT 3
9344: DOUBLE
9345: EQUAL
9346: IFTRUE 9350
9348: GO 10174
9350: POP
// begin case nation of 1 :
9351: LD_VAR 0 2
9355: PUSH
9356: LD_INT 1
9358: DOUBLE
9359: EQUAL
9360: IFTRUE 9364
9362: GO 9633
9364: POP
// begin techs := [ 35 , 45 , 46 , 47 , 6 , 7 , 12 , 13 , 10 , 15 , 16 , 20 , 21 , 22 , 32 , 27 , 69 , 39 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 57 , 58 , 59 , 60 , 61 , 62 ] ;
9365: LD_ADDR_VAR 0 5
9369: PUSH
9370: LD_INT 35
9372: PUSH
9373: LD_INT 45
9375: PUSH
9376: LD_INT 46
9378: PUSH
9379: LD_INT 47
9381: PUSH
9382: LD_INT 6
9384: PUSH
9385: LD_INT 7
9387: PUSH
9388: LD_INT 12
9390: PUSH
9391: LD_INT 13
9393: PUSH
9394: LD_INT 10
9396: PUSH
9397: LD_INT 15
9399: PUSH
9400: LD_INT 16
9402: PUSH
9403: LD_INT 20
9405: PUSH
9406: LD_INT 21
9408: PUSH
9409: LD_INT 22
9411: PUSH
9412: LD_INT 32
9414: PUSH
9415: LD_INT 27
9417: PUSH
9418: LD_INT 69
9420: PUSH
9421: LD_INT 39
9423: PUSH
9424: LD_INT 40
9426: PUSH
9427: LD_INT 48
9429: PUSH
9430: LD_INT 49
9432: PUSH
9433: LD_INT 50
9435: PUSH
9436: LD_INT 51
9438: PUSH
9439: LD_INT 52
9441: PUSH
9442: LD_INT 53
9444: PUSH
9445: LD_INT 54
9447: PUSH
9448: LD_INT 55
9450: PUSH
9451: LD_INT 57
9453: PUSH
9454: LD_INT 58
9456: PUSH
9457: LD_INT 59
9459: PUSH
9460: LD_INT 60
9462: PUSH
9463: LD_INT 61
9465: PUSH
9466: LD_INT 62
9468: PUSH
9469: EMPTY
9470: LIST
9471: LIST
9472: LIST
9473: LIST
9474: LIST
9475: LIST
9476: LIST
9477: LIST
9478: LIST
9479: LIST
9480: LIST
9481: LIST
9482: LIST
9483: LIST
9484: LIST
9485: LIST
9486: LIST
9487: LIST
9488: LIST
9489: LIST
9490: LIST
9491: LIST
9492: LIST
9493: LIST
9494: LIST
9495: LIST
9496: LIST
9497: LIST
9498: LIST
9499: LIST
9500: LIST
9501: LIST
9502: LIST
9503: ST_TO_ADDR
// buildings := [ 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 10 , 11 , 12 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 36 ] ;
9504: LD_ADDR_VAR 0 6
9508: PUSH
9509: LD_INT 0
9511: PUSH
9512: LD_INT 1
9514: PUSH
9515: LD_INT 2
9517: PUSH
9518: LD_INT 3
9520: PUSH
9521: LD_INT 4
9523: PUSH
9524: LD_INT 5
9526: PUSH
9527: LD_INT 6
9529: PUSH
9530: LD_INT 7
9532: PUSH
9533: LD_INT 8
9535: PUSH
9536: LD_INT 10
9538: PUSH
9539: LD_INT 11
9541: PUSH
9542: LD_INT 12
9544: PUSH
9545: LD_INT 15
9547: PUSH
9548: LD_INT 16
9550: PUSH
9551: LD_INT 17
9553: PUSH
9554: LD_INT 18
9556: PUSH
9557: LD_INT 19
9559: PUSH
9560: LD_INT 20
9562: PUSH
9563: LD_INT 21
9565: PUSH
9566: LD_INT 24
9568: PUSH
9569: LD_INT 25
9571: PUSH
9572: LD_INT 26
9574: PUSH
9575: LD_INT 27
9577: PUSH
9578: LD_INT 28
9580: PUSH
9581: LD_INT 29
9583: PUSH
9584: LD_INT 30
9586: PUSH
9587: LD_INT 31
9589: PUSH
9590: LD_INT 32
9592: PUSH
9593: LD_INT 33
9595: PUSH
9596: LD_INT 36
9598: PUSH
9599: EMPTY
9600: LIST
9601: LIST
9602: LIST
9603: LIST
9604: LIST
9605: LIST
9606: LIST
9607: LIST
9608: LIST
9609: LIST
9610: LIST
9611: LIST
9612: LIST
9613: LIST
9614: LIST
9615: LIST
9616: LIST
9617: LIST
9618: LIST
9619: LIST
9620: LIST
9621: LIST
9622: LIST
9623: LIST
9624: LIST
9625: LIST
9626: LIST
9627: LIST
9628: LIST
9629: LIST
9630: ST_TO_ADDR
// end ; 2 :
9631: GO 10164
9633: LD_INT 2
9635: DOUBLE
9636: EQUAL
9637: IFTRUE 9641
9639: GO 9906
9641: POP
// begin techs := [ 35 , 45 , 46 , 47 , 5 , 6 , 7 , 8 , 15 , 18 , 17 , 20 , 21 , 22 , 26 , 70 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 60 , 61 , 62 , 66 , 67 , 68 ] ;
9642: LD_ADDR_VAR 0 5
9646: PUSH
9647: LD_INT 35
9649: PUSH
9650: LD_INT 45
9652: PUSH
9653: LD_INT 46
9655: PUSH
9656: LD_INT 47
9658: PUSH
9659: LD_INT 5
9661: PUSH
9662: LD_INT 6
9664: PUSH
9665: LD_INT 7
9667: PUSH
9668: LD_INT 8
9670: PUSH
9671: LD_INT 15
9673: PUSH
9674: LD_INT 18
9676: PUSH
9677: LD_INT 17
9679: PUSH
9680: LD_INT 20
9682: PUSH
9683: LD_INT 21
9685: PUSH
9686: LD_INT 22
9688: PUSH
9689: LD_INT 26
9691: PUSH
9692: LD_INT 70
9694: PUSH
9695: LD_INT 69
9697: PUSH
9698: LD_INT 39
9700: PUSH
9701: LD_INT 40
9703: PUSH
9704: LD_INT 41
9706: PUSH
9707: LD_INT 42
9709: PUSH
9710: LD_INT 43
9712: PUSH
9713: LD_INT 48
9715: PUSH
9716: LD_INT 49
9718: PUSH
9719: LD_INT 50
9721: PUSH
9722: LD_INT 51
9724: PUSH
9725: LD_INT 52
9727: PUSH
9728: LD_INT 53
9730: PUSH
9731: LD_INT 54
9733: PUSH
9734: LD_INT 55
9736: PUSH
9737: LD_INT 60
9739: PUSH
9740: LD_INT 61
9742: PUSH
9743: LD_INT 62
9745: PUSH
9746: LD_INT 66
9748: PUSH
9749: LD_INT 67
9751: PUSH
9752: LD_INT 68
9754: PUSH
9755: EMPTY
9756: LIST
9757: LIST
9758: LIST
9759: LIST
9760: LIST
9761: LIST
9762: LIST
9763: LIST
9764: LIST
9765: LIST
9766: LIST
9767: LIST
9768: LIST
9769: LIST
9770: LIST
9771: LIST
9772: LIST
9773: LIST
9774: LIST
9775: LIST
9776: LIST
9777: LIST
9778: LIST
9779: LIST
9780: LIST
9781: LIST
9782: LIST
9783: LIST
9784: LIST
9785: LIST
9786: LIST
9787: LIST
9788: LIST
9789: LIST
9790: LIST
9791: LIST
9792: ST_TO_ADDR
// buildings := [ 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 10 , 11 , 13 , 15 , 16 , 17 , 18 , 20 , 21 , 23 , 26 , 27 , 28 , 29 , 30 , 31 , 32 ] ;
9793: LD_ADDR_VAR 0 6
9797: PUSH
9798: LD_INT 0
9800: PUSH
9801: LD_INT 1
9803: PUSH
9804: LD_INT 2
9806: PUSH
9807: LD_INT 3
9809: PUSH
9810: LD_INT 4
9812: PUSH
9813: LD_INT 5
9815: PUSH
9816: LD_INT 6
9818: PUSH
9819: LD_INT 7
9821: PUSH
9822: LD_INT 8
9824: PUSH
9825: LD_INT 10
9827: PUSH
9828: LD_INT 11
9830: PUSH
9831: LD_INT 13
9833: PUSH
9834: LD_INT 15
9836: PUSH
9837: LD_INT 16
9839: PUSH
9840: LD_INT 17
9842: PUSH
9843: LD_INT 18
9845: PUSH
9846: LD_INT 20
9848: PUSH
9849: LD_INT 21
9851: PUSH
9852: LD_INT 23
9854: PUSH
9855: LD_INT 26
9857: PUSH
9858: LD_INT 27
9860: PUSH
9861: LD_INT 28
9863: PUSH
9864: LD_INT 29
9866: PUSH
9867: LD_INT 30
9869: PUSH
9870: LD_INT 31
9872: PUSH
9873: LD_INT 32
9875: PUSH
9876: EMPTY
9877: LIST
9878: LIST
9879: LIST
9880: LIST
9881: LIST
9882: LIST
9883: LIST
9884: LIST
9885: LIST
9886: LIST
9887: LIST
9888: LIST
9889: LIST
9890: LIST
9891: LIST
9892: LIST
9893: LIST
9894: LIST
9895: LIST
9896: LIST
9897: LIST
9898: LIST
9899: LIST
9900: LIST
9901: LIST
9902: LIST
9903: ST_TO_ADDR
// end ; 3 :
9904: GO 10164
9906: LD_INT 3
9908: DOUBLE
9909: EQUAL
9910: IFTRUE 9914
9912: GO 10163
9914: POP
// begin techs := [ 46 , 47 , 9 , 20 , 19 , 21 , 22 , 28 , 29 , 30 , 37 , 32 , 27 , 69 , 39 , 34 , 40 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 ] ;
9915: LD_ADDR_VAR 0 5
9919: PUSH
9920: LD_INT 46
9922: PUSH
9923: LD_INT 47
9925: PUSH
9926: LD_INT 9
9928: PUSH
9929: LD_INT 20
9931: PUSH
9932: LD_INT 19
9934: PUSH
9935: LD_INT 21
9937: PUSH
9938: LD_INT 22
9940: PUSH
9941: LD_INT 28
9943: PUSH
9944: LD_INT 29
9946: PUSH
9947: LD_INT 30
9949: PUSH
9950: LD_INT 37
9952: PUSH
9953: LD_INT 32
9955: PUSH
9956: LD_INT 27
9958: PUSH
9959: LD_INT 69
9961: PUSH
9962: LD_INT 39
9964: PUSH
9965: LD_INT 34
9967: PUSH
9968: LD_INT 40
9970: PUSH
9971: LD_INT 44
9973: PUSH
9974: LD_INT 48
9976: PUSH
9977: LD_INT 49
9979: PUSH
9980: LD_INT 50
9982: PUSH
9983: LD_INT 51
9985: PUSH
9986: LD_INT 52
9988: PUSH
9989: LD_INT 53
9991: PUSH
9992: LD_INT 54
9994: PUSH
9995: LD_INT 55
9997: PUSH
9998: LD_INT 56
10000: PUSH
10001: LD_INT 57
10003: PUSH
10004: LD_INT 58
10006: PUSH
10007: LD_INT 59
10009: PUSH
10010: LD_INT 63
10012: PUSH
10013: LD_INT 64
10015: PUSH
10016: EMPTY
10017: LIST
10018: LIST
10019: LIST
10020: LIST
10021: LIST
10022: LIST
10023: LIST
10024: LIST
10025: LIST
10026: LIST
10027: LIST
10028: LIST
10029: LIST
10030: LIST
10031: LIST
10032: LIST
10033: LIST
10034: LIST
10035: LIST
10036: LIST
10037: LIST
10038: LIST
10039: LIST
10040: LIST
10041: LIST
10042: LIST
10043: LIST
10044: LIST
10045: LIST
10046: LIST
10047: LIST
10048: LIST
10049: ST_TO_ADDR
// buildings := [ 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 10 , 11 , 12 , 14 , 16 , 17 , 18 , 19 , 21 , 24 , 26 , 28 , 29 , 30 , 31 , 32 , 33 ] ;
10050: LD_ADDR_VAR 0 6
10054: PUSH
10055: LD_INT 0
10057: PUSH
10058: LD_INT 1
10060: PUSH
10061: LD_INT 2
10063: PUSH
10064: LD_INT 3
10066: PUSH
10067: LD_INT 4
10069: PUSH
10070: LD_INT 5
10072: PUSH
10073: LD_INT 6
10075: PUSH
10076: LD_INT 7
10078: PUSH
10079: LD_INT 8
10081: PUSH
10082: LD_INT 10
10084: PUSH
10085: LD_INT 11
10087: PUSH
10088: LD_INT 12
10090: PUSH
10091: LD_INT 14
10093: PUSH
10094: LD_INT 16
10096: PUSH
10097: LD_INT 17
10099: PUSH
10100: LD_INT 18
10102: PUSH
10103: LD_INT 19
10105: PUSH
10106: LD_INT 21
10108: PUSH
10109: LD_INT 24
10111: PUSH
10112: LD_INT 26
10114: PUSH
10115: LD_INT 28
10117: PUSH
10118: LD_INT 29
10120: PUSH
10121: LD_INT 30
10123: PUSH
10124: LD_INT 31
10126: PUSH
10127: LD_INT 32
10129: PUSH
10130: LD_INT 33
10132: PUSH
10133: EMPTY
10134: LIST
10135: LIST
10136: LIST
10137: LIST
10138: LIST
10139: LIST
10140: LIST
10141: LIST
10142: LIST
10143: LIST
10144: LIST
10145: LIST
10146: LIST
10147: LIST
10148: LIST
10149: LIST
10150: LIST
10151: LIST
10152: LIST
10153: LIST
10154: LIST
10155: LIST
10156: LIST
10157: LIST
10158: LIST
10159: LIST
10160: ST_TO_ADDR
// end ; end ;
10161: GO 10164
10163: POP
// reinforcement := 4 ;
10164: LD_ADDR_VAR 0 7
10168: PUSH
10169: LD_INT 4
10171: ST_TO_ADDR
// end ; 4 :
10172: GO 11090
10174: LD_INT 4
10176: DOUBLE
10177: EQUAL
10178: IFTRUE 10182
10180: GO 11089
10182: POP
// begin case nation of 1 :
10183: LD_VAR 0 2
10187: PUSH
10188: LD_INT 1
10190: DOUBLE
10191: EQUAL
10192: IFTRUE 10196
10194: GO 10485
10196: POP
// begin techs := [ 35 , 45 , 46 , 47 , 6 , 7 , 12 , 13 , 10 , 14 , 15 , 16 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 ] ;
10197: LD_ADDR_VAR 0 5
10201: PUSH
10202: LD_INT 35
10204: PUSH
10205: LD_INT 45
10207: PUSH
10208: LD_INT 46
10210: PUSH
10211: LD_INT 47
10213: PUSH
10214: LD_INT 6
10216: PUSH
10217: LD_INT 7
10219: PUSH
10220: LD_INT 12
10222: PUSH
10223: LD_INT 13
10225: PUSH
10226: LD_INT 10
10228: PUSH
10229: LD_INT 14
10231: PUSH
10232: LD_INT 15
10234: PUSH
10235: LD_INT 16
10237: PUSH
10238: LD_INT 20
10240: PUSH
10241: LD_INT 21
10243: PUSH
10244: LD_INT 22
10246: PUSH
10247: LD_INT 25
10249: PUSH
10250: LD_INT 32
10252: PUSH
10253: LD_INT 27
10255: PUSH
10256: LD_INT 36
10258: PUSH
10259: LD_INT 69
10261: PUSH
10262: LD_INT 39
10264: PUSH
10265: LD_INT 34
10267: PUSH
10268: LD_INT 40
10270: PUSH
10271: LD_INT 48
10273: PUSH
10274: LD_INT 49
10276: PUSH
10277: LD_INT 50
10279: PUSH
10280: LD_INT 51
10282: PUSH
10283: LD_INT 52
10285: PUSH
10286: LD_INT 53
10288: PUSH
10289: LD_INT 54
10291: PUSH
10292: LD_INT 55
10294: PUSH
10295: LD_INT 56
10297: PUSH
10298: LD_INT 57
10300: PUSH
10301: LD_INT 58
10303: PUSH
10304: LD_INT 59
10306: PUSH
10307: LD_INT 60
10309: PUSH
10310: LD_INT 61
10312: PUSH
10313: LD_INT 62
10315: PUSH
10316: EMPTY
10317: LIST
10318: LIST
10319: LIST
10320: LIST
10321: LIST
10322: LIST
10323: LIST
10324: LIST
10325: LIST
10326: LIST
10327: LIST
10328: LIST
10329: LIST
10330: LIST
10331: LIST
10332: LIST
10333: LIST
10334: LIST
10335: LIST
10336: LIST
10337: LIST
10338: LIST
10339: LIST
10340: LIST
10341: LIST
10342: LIST
10343: LIST
10344: LIST
10345: LIST
10346: LIST
10347: LIST
10348: LIST
10349: LIST
10350: LIST
10351: LIST
10352: LIST
10353: LIST
10354: LIST
10355: ST_TO_ADDR
// buildings := [ 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 10 , 11 , 12 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 36 ] ;
10356: LD_ADDR_VAR 0 6
10360: PUSH
10361: LD_INT 0
10363: PUSH
10364: LD_INT 1
10366: PUSH
10367: LD_INT 2
10369: PUSH
10370: LD_INT 3
10372: PUSH
10373: LD_INT 4
10375: PUSH
10376: LD_INT 5
10378: PUSH
10379: LD_INT 6
10381: PUSH
10382: LD_INT 7
10384: PUSH
10385: LD_INT 8
10387: PUSH
10388: LD_INT 10
10390: PUSH
10391: LD_INT 11
10393: PUSH
10394: LD_INT 12
10396: PUSH
10397: LD_INT 15
10399: PUSH
10400: LD_INT 16
10402: PUSH
10403: LD_INT 17
10405: PUSH
10406: LD_INT 18
10408: PUSH
10409: LD_INT 19
10411: PUSH
10412: LD_INT 20
10414: PUSH
10415: LD_INT 21
10417: PUSH
10418: LD_INT 24
10420: PUSH
10421: LD_INT 25
10423: PUSH
10424: LD_INT 26
10426: PUSH
10427: LD_INT 27
10429: PUSH
10430: LD_INT 28
10432: PUSH
10433: LD_INT 29
10435: PUSH
10436: LD_INT 30
10438: PUSH
10439: LD_INT 31
10441: PUSH
10442: LD_INT 32
10444: PUSH
10445: LD_INT 33
10447: PUSH
10448: LD_INT 36
10450: PUSH
10451: EMPTY
10452: LIST
10453: LIST
10454: LIST
10455: LIST
10456: LIST
10457: LIST
10458: LIST
10459: LIST
10460: LIST
10461: LIST
10462: LIST
10463: LIST
10464: LIST
10465: LIST
10466: LIST
10467: LIST
10468: LIST
10469: LIST
10470: LIST
10471: LIST
10472: LIST
10473: LIST
10474: LIST
10475: LIST
10476: LIST
10477: LIST
10478: LIST
10479: LIST
10480: LIST
10481: LIST
10482: ST_TO_ADDR
// end ; 2 :
10483: GO 11060
10485: LD_INT 2
10487: DOUBLE
10488: EQUAL
10489: IFTRUE 10493
10491: GO 10766
10493: POP
// begin techs := [ 35 , 45 , 46 , 47 , 5 , 6 , 7 , 8 , 15 , 18 , 17 , 20 , 21 , 22 , 25 , 26 , 70 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 ] ;
10494: LD_ADDR_VAR 0 5
10498: PUSH
10499: LD_INT 35
10501: PUSH
10502: LD_INT 45
10504: PUSH
10505: LD_INT 46
10507: PUSH
10508: LD_INT 47
10510: PUSH
10511: LD_INT 5
10513: PUSH
10514: LD_INT 6
10516: PUSH
10517: LD_INT 7
10519: PUSH
10520: LD_INT 8
10522: PUSH
10523: LD_INT 15
10525: PUSH
10526: LD_INT 18
10528: PUSH
10529: LD_INT 17
10531: PUSH
10532: LD_INT 20
10534: PUSH
10535: LD_INT 21
10537: PUSH
10538: LD_INT 22
10540: PUSH
10541: LD_INT 25
10543: PUSH
10544: LD_INT 26
10546: PUSH
10547: LD_INT 70
10549: PUSH
10550: LD_INT 69
10552: PUSH
10553: LD_INT 39
10555: PUSH
10556: LD_INT 40
10558: PUSH
10559: LD_INT 41
10561: PUSH
10562: LD_INT 42
10564: PUSH
10565: LD_INT 43
10567: PUSH
10568: LD_INT 48
10570: PUSH
10571: LD_INT 49
10573: PUSH
10574: LD_INT 50
10576: PUSH
10577: LD_INT 51
10579: PUSH
10580: LD_INT 52
10582: PUSH
10583: LD_INT 53
10585: PUSH
10586: LD_INT 54
10588: PUSH
10589: LD_INT 55
10591: PUSH
10592: LD_INT 56
10594: PUSH
10595: LD_INT 60
10597: PUSH
10598: LD_INT 61
10600: PUSH
10601: LD_INT 62
10603: PUSH
10604: LD_INT 66
10606: PUSH
10607: LD_INT 67
10609: PUSH
10610: LD_INT 68
10612: PUSH
10613: EMPTY
10614: LIST
10615: LIST
10616: LIST
10617: LIST
10618: LIST
10619: LIST
10620: LIST
10621: LIST
10622: LIST
10623: LIST
10624: LIST
10625: LIST
10626: LIST
10627: LIST
10628: LIST
10629: LIST
10630: LIST
10631: LIST
10632: LIST
10633: LIST
10634: LIST
10635: LIST
10636: LIST
10637: LIST
10638: LIST
10639: LIST
10640: LIST
10641: LIST
10642: LIST
10643: LIST
10644: LIST
10645: LIST
10646: LIST
10647: LIST
10648: LIST
10649: LIST
10650: LIST
10651: LIST
10652: ST_TO_ADDR
// buildings := [ 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 10 , 11 , 13 , 15 , 16 , 17 , 18 , 20 , 21 , 23 , 26 , 27 , 28 , 29 , 30 , 31 , 32 ] ;
10653: LD_ADDR_VAR 0 6
10657: PUSH
10658: LD_INT 0
10660: PUSH
10661: LD_INT 1
10663: PUSH
10664: LD_INT 2
10666: PUSH
10667: LD_INT 3
10669: PUSH
10670: LD_INT 4
10672: PUSH
10673: LD_INT 5
10675: PUSH
10676: LD_INT 6
10678: PUSH
10679: LD_INT 7
10681: PUSH
10682: LD_INT 8
10684: PUSH
10685: LD_INT 10
10687: PUSH
10688: LD_INT 11
10690: PUSH
10691: LD_INT 13
10693: PUSH
10694: LD_INT 15
10696: PUSH
10697: LD_INT 16
10699: PUSH
10700: LD_INT 17
10702: PUSH
10703: LD_INT 18
10705: PUSH
10706: LD_INT 20
10708: PUSH
10709: LD_INT 21
10711: PUSH
10712: LD_INT 23
10714: PUSH
10715: LD_INT 26
10717: PUSH
10718: LD_INT 27
10720: PUSH
10721: LD_INT 28
10723: PUSH
10724: LD_INT 29
10726: PUSH
10727: LD_INT 30
10729: PUSH
10730: LD_INT 31
10732: PUSH
10733: LD_INT 32
10735: PUSH
10736: EMPTY
10737: LIST
10738: LIST
10739: LIST
10740: LIST
10741: LIST
10742: LIST
10743: LIST
10744: LIST
10745: LIST
10746: LIST
10747: LIST
10748: LIST
10749: LIST
10750: LIST
10751: LIST
10752: LIST
10753: LIST
10754: LIST
10755: LIST
10756: LIST
10757: LIST
10758: LIST
10759: LIST
10760: LIST
10761: LIST
10762: LIST
10763: ST_TO_ADDR
// end ; 3 :
10764: GO 11060
10766: LD_INT 3
10768: DOUBLE
10769: EQUAL
10770: IFTRUE 10774
10772: GO 11059
10774: POP
// begin techs := [ 46 , 47 , 9 , 20 , 19 , 21 , 22 , 23 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 ] ;
10775: LD_ADDR_VAR 0 5
10779: PUSH
10780: LD_INT 46
10782: PUSH
10783: LD_INT 47
10785: PUSH
10786: LD_INT 9
10788: PUSH
10789: LD_INT 20
10791: PUSH
10792: LD_INT 19
10794: PUSH
10795: LD_INT 21
10797: PUSH
10798: LD_INT 22
10800: PUSH
10801: LD_INT 23
10803: PUSH
10804: LD_INT 25
10806: PUSH
10807: LD_INT 28
10809: PUSH
10810: LD_INT 29
10812: PUSH
10813: LD_INT 30
10815: PUSH
10816: LD_INT 31
10818: PUSH
10819: LD_INT 37
10821: PUSH
10822: LD_INT 38
10824: PUSH
10825: LD_INT 32
10827: PUSH
10828: LD_INT 27
10830: PUSH
10831: LD_INT 33
10833: PUSH
10834: LD_INT 69
10836: PUSH
10837: LD_INT 39
10839: PUSH
10840: LD_INT 34
10842: PUSH
10843: LD_INT 40
10845: PUSH
10846: LD_INT 71
10848: PUSH
10849: LD_INT 44
10851: PUSH
10852: LD_INT 48
10854: PUSH
10855: LD_INT 49
10857: PUSH
10858: LD_INT 50
10860: PUSH
10861: LD_INT 51
10863: PUSH
10864: LD_INT 52
10866: PUSH
10867: LD_INT 53
10869: PUSH
10870: LD_INT 54
10872: PUSH
10873: LD_INT 55
10875: PUSH
10876: LD_INT 56
10878: PUSH
10879: LD_INT 57
10881: PUSH
10882: LD_INT 58
10884: PUSH
10885: LD_INT 59
10887: PUSH
10888: LD_INT 63
10890: PUSH
10891: LD_INT 64
10893: PUSH
10894: LD_INT 65
10896: PUSH
10897: EMPTY
10898: LIST
10899: LIST
10900: LIST
10901: LIST
10902: LIST
10903: LIST
10904: LIST
10905: LIST
10906: LIST
10907: LIST
10908: LIST
10909: LIST
10910: LIST
10911: LIST
10912: LIST
10913: LIST
10914: LIST
10915: LIST
10916: LIST
10917: LIST
10918: LIST
10919: LIST
10920: LIST
10921: LIST
10922: LIST
10923: LIST
10924: LIST
10925: LIST
10926: LIST
10927: LIST
10928: LIST
10929: LIST
10930: LIST
10931: LIST
10932: LIST
10933: LIST
10934: LIST
10935: LIST
10936: LIST
10937: ST_TO_ADDR
// buildings := [ 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 10 , 11 , 12 , 14 , 16 , 17 , 18 , 19 , 21 , 24 , 26 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 37 ] ;
10938: LD_ADDR_VAR 0 6
10942: PUSH
10943: LD_INT 0
10945: PUSH
10946: LD_INT 1
10948: PUSH
10949: LD_INT 2
10951: PUSH
10952: LD_INT 3
10954: PUSH
10955: LD_INT 4
10957: PUSH
10958: LD_INT 5
10960: PUSH
10961: LD_INT 6
10963: PUSH
10964: LD_INT 7
10966: PUSH
10967: LD_INT 8
10969: PUSH
10970: LD_INT 10
10972: PUSH
10973: LD_INT 11
10975: PUSH
10976: LD_INT 12
10978: PUSH
10979: LD_INT 14
10981: PUSH
10982: LD_INT 16
10984: PUSH
10985: LD_INT 17
10987: PUSH
10988: LD_INT 18
10990: PUSH
10991: LD_INT 19
10993: PUSH
10994: LD_INT 21
10996: PUSH
10997: LD_INT 24
10999: PUSH
11000: LD_INT 26
11002: PUSH
11003: LD_INT 28
11005: PUSH
11006: LD_INT 29
11008: PUSH
11009: LD_INT 30
11011: PUSH
11012: LD_INT 31
11014: PUSH
11015: LD_INT 32
11017: PUSH
11018: LD_INT 33
11020: PUSH
11021: LD_INT 34
11023: PUSH
11024: LD_INT 37
11026: PUSH
11027: EMPTY
11028: LIST
11029: LIST
11030: LIST
11031: LIST
11032: LIST
11033: LIST
11034: LIST
11035: LIST
11036: LIST
11037: LIST
11038: LIST
11039: LIST
11040: LIST
11041: LIST
11042: LIST
11043: LIST
11044: LIST
11045: LIST
11046: LIST
11047: LIST
11048: LIST
11049: LIST
11050: LIST
11051: LIST
11052: LIST
11053: LIST
11054: LIST
11055: LIST
11056: ST_TO_ADDR
// end ; end ;
11057: GO 11060
11059: POP
// reinforcement := 5 ;
11060: LD_ADDR_VAR 0 7
11064: PUSH
11065: LD_INT 5
11067: ST_TO_ADDR
// if side = Your_Side then
11068: LD_VAR 0 3
11072: PUSH
11073: LD_OWVAR 2
11077: EQUAL
11078: IFFALSE 11087
// ToLua ( LUA_SideTechMax(); ) ;
11080: LD_STRING LUA_SideTechMax();
11082: PPUSH
11083: CALL_OW 559
// end ; end ;
11087: GO 11090
11089: POP
// side_reinforcement_cap := Replace ( side_reinforcement_cap , side , reinforcement ) ;
11090: LD_ADDR_EXP 58
11094: PUSH
11095: LD_EXP 58
11099: PPUSH
11100: LD_VAR 0 3
11104: PPUSH
11105: LD_VAR 0 7
11109: PPUSH
11110: CALL_OW 1
11114: ST_TO_ADDR
// TechUnlock ( techs , side , 1 ) ;
11115: LD_VAR 0 5
11119: PPUSH
11120: LD_VAR 0 3
11124: PPUSH
11125: LD_INT 1
11127: PPUSH
11128: CALL 7248 0 3
// BuildingUnlock ( buildings , side , 1 ) ;
11132: LD_VAR 0 6
11136: PPUSH
11137: LD_VAR 0 3
11141: PPUSH
11142: LD_INT 1
11144: PPUSH
11145: CALL 7313 0 3
// end ;
11149: LD_VAR 0 4
11153: RET
// export function FillUpVehicles ( vehicle , crates , oil , siberite ) ; var occupied ; begin
11154: LD_INT 0
11156: PPUSH
11157: PPUSH
// if crates >= 100 then
11158: LD_VAR 0 2
11162: PUSH
11163: LD_INT 100
11165: GREATEREQUAL
11166: IFFALSE 11199
// begin AddCargo ( vehicle , mat_cans , 100 ) ;
11168: LD_VAR 0 1
11172: PPUSH
11173: LD_INT 1
11175: PPUSH
11176: LD_INT 100
11178: PPUSH
11179: CALL_OW 291
// crates := crates - 100 ;
11183: LD_ADDR_VAR 0 2
11187: PUSH
11188: LD_VAR 0 2
11192: PUSH
11193: LD_INT 100
11195: MINUS
11196: ST_TO_ADDR
// end else
11197: GO 11400
// begin AddCargo ( vehicle , mat_cans , crates ) ;
11199: LD_VAR 0 1
11203: PPUSH
11204: LD_INT 1
11206: PPUSH
11207: LD_VAR 0 2
11211: PPUSH
11212: CALL_OW 291
// occupied := crates ;
11216: LD_ADDR_VAR 0 6
11220: PUSH
11221: LD_VAR 0 2
11225: ST_TO_ADDR
// crates := 0 ;
11226: LD_ADDR_VAR 0 2
11230: PUSH
11231: LD_INT 0
11233: ST_TO_ADDR
// if oil >= 100 then
11234: LD_VAR 0 3
11238: PUSH
11239: LD_INT 100
11241: GREATEREQUAL
11242: IFFALSE 11287
// begin AddCargo ( vehicle , mat_oil , 100 - occupied ) ;
11244: LD_VAR 0 1
11248: PPUSH
11249: LD_INT 2
11251: PPUSH
11252: LD_INT 100
11254: PUSH
11255: LD_VAR 0 6
11259: MINUS
11260: PPUSH
11261: CALL_OW 291
// oil := oil - 100 + occupied ;
11265: LD_ADDR_VAR 0 3
11269: PUSH
11270: LD_VAR 0 3
11274: PUSH
11275: LD_INT 100
11277: MINUS
11278: PUSH
11279: LD_VAR 0 6
11283: PLUS
11284: ST_TO_ADDR
// end else
11285: GO 11400
// begin AddCargo ( vehicle , mat_oil , oil ) ;
11287: LD_VAR 0 1
11291: PPUSH
11292: LD_INT 2
11294: PPUSH
11295: LD_VAR 0 3
11299: PPUSH
11300: CALL_OW 291
// occupied := oil ;
11304: LD_ADDR_VAR 0 6
11308: PUSH
11309: LD_VAR 0 3
11313: ST_TO_ADDR
// oil := 0 ;
11314: LD_ADDR_VAR 0 3
11318: PUSH
11319: LD_INT 0
11321: ST_TO_ADDR
// if siberite >= 100 then
11322: LD_VAR 0 4
11326: PUSH
11327: LD_INT 100
11329: GREATEREQUAL
11330: IFFALSE 11375
// begin AddCargo ( vehicle , mat_siberit , 100 - occupied ) ;
11332: LD_VAR 0 1
11336: PPUSH
11337: LD_INT 3
11339: PPUSH
11340: LD_INT 100
11342: PUSH
11343: LD_VAR 0 6
11347: MINUS
11348: PPUSH
11349: CALL_OW 291
// siberite := siberite - 100 + occupied ;
11353: LD_ADDR_VAR 0 4
11357: PUSH
11358: LD_VAR 0 4
11362: PUSH
11363: LD_INT 100
11365: MINUS
11366: PUSH
11367: LD_VAR 0 6
11371: PLUS
11372: ST_TO_ADDR
// end else
11373: GO 11400
// begin AddCargo ( vehicle , mat_siberit , siberite ) ;
11375: LD_VAR 0 1
11379: PPUSH
11380: LD_INT 3
11382: PPUSH
11383: LD_VAR 0 4
11387: PPUSH
11388: CALL_OW 291
// siberite := 0 ;
11392: LD_ADDR_VAR 0 4
11396: PUSH
11397: LD_INT 0
11399: ST_TO_ADDR
// end ; end ; end ; result := [ vehicle , crates , oil , siberite ] ;
11400: LD_ADDR_VAR 0 5
11404: PUSH
11405: LD_VAR 0 1
11409: PUSH
11410: LD_VAR 0 2
11414: PUSH
11415: LD_VAR 0 3
11419: PUSH
11420: LD_VAR 0 4
11424: PUSH
11425: EMPTY
11426: LIST
11427: LIST
11428: LIST
11429: LIST
11430: ST_TO_ADDR
// end ;
11431: LD_VAR 0 5
11435: RET
// export function RotateUnit ( in_direction , rotation ) ; var r ; begin
11436: LD_INT 0
11438: PPUSH
11439: PPUSH
// rotation := rotation mod 6 ;
11440: LD_ADDR_VAR 0 2
11444: PUSH
11445: LD_VAR 0 2
11449: PUSH
11450: LD_INT 6
11452: MOD
11453: ST_TO_ADDR
// r := in_direction + rotation ;
11454: LD_ADDR_VAR 0 4
11458: PUSH
11459: LD_VAR 0 1
11463: PUSH
11464: LD_VAR 0 2
11468: PLUS
11469: ST_TO_ADDR
// if r >= 6 then
11470: LD_VAR 0 4
11474: PUSH
11475: LD_INT 6
11477: GREATEREQUAL
11478: IFFALSE 11494
// rotation := rotation - 6 ;
11480: LD_ADDR_VAR 0 2
11484: PUSH
11485: LD_VAR 0 2
11489: PUSH
11490: LD_INT 6
11492: MINUS
11493: ST_TO_ADDR
// if r <= 1 then
11494: LD_VAR 0 4
11498: PUSH
11499: LD_INT 1
11501: LESSEQUAL
11502: IFFALSE 11518
// rotation := rotation + 6 ;
11504: LD_ADDR_VAR 0 2
11508: PUSH
11509: LD_VAR 0 2
11513: PUSH
11514: LD_INT 6
11516: PLUS
11517: ST_TO_ADDR
// result := in_direction + rotation ;
11518: LD_ADDR_VAR 0 3
11522: PUSH
11523: LD_VAR 0 1
11527: PUSH
11528: LD_VAR 0 2
11532: PLUS
11533: ST_TO_ADDR
// end ; end_of_file
11534: LD_VAR 0 3
11538: RET
// on BuildingStarted ( b , u ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
11539: LD_VAR 0 1
11543: PPUSH
11544: CALL_OW 266
11548: PUSH
11549: LD_INT 0
11551: PUSH
11552: LD_INT 1
11554: PUSH
11555: EMPTY
11556: LIST
11557: LIST
11558: IN
11559: IFFALSE 11708
// begin SetBName ( b , @ & GetSide ( b ) ) ;
11561: LD_VAR 0 1
11565: PPUSH
11566: LD_STRING @
11568: PUSH
11569: LD_VAR 0 1
11573: PPUSH
11574: CALL_OW 255
11578: STR
11579: PPUSH
11580: CALL_OW 500
// if GetSide ( b ) = Your_Side then
11584: LD_VAR 0 1
11588: PPUSH
11589: CALL_OW 255
11593: PUSH
11594: LD_OWVAR 2
11598: EQUAL
11599: IFFALSE 11633
// if side_depots [ GetSide ( b ) ] + 0 = 0 then
11601: LD_EXP 47
11605: PUSH
11606: LD_VAR 0 1
11610: PPUSH
11611: CALL_OW 255
11615: ARRAY
11616: PUSH
11617: LD_INT 0
11619: PLUS
11620: PUSH
11621: LD_INT 0
11623: EQUAL
11624: IFFALSE 11633
// ToLua ( LUA_IsDepot(); ) ;
11626: LD_STRING LUA_IsDepot();
11628: PPUSH
11629: CALL_OW 559
// if side_tech_lvl [ GetSide ( b ) ] = 4 then
11633: LD_EXP 31
11637: PUSH
11638: LD_VAR 0 1
11642: PPUSH
11643: CALL_OW 255
11647: ARRAY
11648: PUSH
11649: LD_INT 4
11651: EQUAL
11652: IFFALSE 11661
// ToLua ( LUA_SideTechMax() ) ;
11654: LD_STRING LUA_SideTechMax()
11656: PPUSH
11657: CALL_OW 559
// side_depots := Replace ( side_depots , GetSide ( b ) , side_depots [ GetSide ( b ) ] ^ b ) ;
11661: LD_ADDR_EXP 47
11665: PUSH
11666: LD_EXP 47
11670: PPUSH
11671: LD_VAR 0 1
11675: PPUSH
11676: CALL_OW 255
11680: PPUSH
11681: LD_EXP 47
11685: PUSH
11686: LD_VAR 0 1
11690: PPUSH
11691: CALL_OW 255
11695: ARRAY
11696: PUSH
11697: LD_VAR 0 1
11701: ADD
11702: PPUSH
11703: CALL_OW 1
11707: ST_TO_ADDR
// end ; end ;
11708: PPOPN 2
11710: END
// on BuildingCaptured ( b , o , e ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
11711: LD_VAR 0 1
11715: PPUSH
11716: CALL_OW 266
11720: PUSH
11721: LD_INT 0
11723: PUSH
11724: LD_INT 1
11726: PUSH
11727: EMPTY
11728: LIST
11729: LIST
11730: IN
11731: IFFALSE 11965
// begin SetBName ( b , @ & GetSide ( b ) ) ;
11733: LD_VAR 0 1
11737: PPUSH
11738: LD_STRING @
11740: PUSH
11741: LD_VAR 0 1
11745: PPUSH
11746: CALL_OW 255
11750: STR
11751: PPUSH
11752: CALL_OW 500
// side_depots := Replace ( side_depots , o , side_depots [ o ] diff b ) ;
11756: LD_ADDR_EXP 47
11760: PUSH
11761: LD_EXP 47
11765: PPUSH
11766: LD_VAR 0 2
11770: PPUSH
11771: LD_EXP 47
11775: PUSH
11776: LD_VAR 0 2
11780: ARRAY
11781: PUSH
11782: LD_VAR 0 1
11786: DIFF
11787: PPUSH
11788: CALL_OW 1
11792: ST_TO_ADDR
// if GetSide ( b ) = Your_Side then
11793: LD_VAR 0 1
11797: PPUSH
11798: CALL_OW 255
11802: PUSH
11803: LD_OWVAR 2
11807: EQUAL
11808: IFFALSE 11870
// begin if side_depots [ GetSide ( b ) ] + 0 = 0 then
11810: LD_EXP 47
11814: PUSH
11815: LD_VAR 0 1
11819: PPUSH
11820: CALL_OW 255
11824: ARRAY
11825: PUSH
11826: LD_INT 0
11828: PLUS
11829: PUSH
11830: LD_INT 0
11832: EQUAL
11833: IFFALSE 11870
// begin ToLua ( LUA_IsDepot(); ) ;
11835: LD_STRING LUA_IsDepot();
11837: PPUSH
11838: CALL_OW 559
// if side_tech_lvl [ GetSide ( b ) ] = 4 then
11842: LD_EXP 31
11846: PUSH
11847: LD_VAR 0 1
11851: PPUSH
11852: CALL_OW 255
11856: ARRAY
11857: PUSH
11858: LD_INT 4
11860: EQUAL
11861: IFFALSE 11870
// ToLua ( LUA_SideTechMax() ) ;
11863: LD_STRING LUA_SideTechMax()
11865: PPUSH
11866: CALL_OW 559
// end ; end ; if side_depots [ o ] + 0 = 0 then
11870: LD_EXP 47
11874: PUSH
11875: LD_VAR 0 2
11879: ARRAY
11880: PUSH
11881: LD_INT 0
11883: PLUS
11884: PUSH
11885: LD_INT 0
11887: EQUAL
11888: IFFALSE 11918
// begin if o = Your_Side then
11890: LD_VAR 0 2
11894: PUSH
11895: LD_OWVAR 2
11899: EQUAL
11900: IFFALSE 11909
// ToLua ( LUA_NoDepot(); ) ;
11902: LD_STRING LUA_NoDepot();
11904: PPUSH
11905: CALL_OW 559
// DidPlayerLose ( o ) ;
11909: LD_VAR 0 2
11913: PPUSH
11914: CALL 6904 0 1
// end ; side_depots := Replace ( side_depots , GetSide ( b ) , side_depots [ GetSide ( b ) ] ^ b ) ;
11918: LD_ADDR_EXP 47
11922: PUSH
11923: LD_EXP 47
11927: PPUSH
11928: LD_VAR 0 1
11932: PPUSH
11933: CALL_OW 255
11937: PPUSH
11938: LD_EXP 47
11942: PUSH
11943: LD_VAR 0 1
11947: PPUSH
11948: CALL_OW 255
11952: ARRAY
11953: PUSH
11954: LD_VAR 0 1
11958: ADD
11959: PPUSH
11960: CALL_OW 1
11964: ST_TO_ADDR
// end ; end ;
11965: PPOPN 3
11967: END
// on UnitDestroyed ( i ) do var side ;
11968: LD_INT 0
11970: PPUSH
// begin if GetType ( i ) = 1 then
11971: LD_VAR 0 1
11975: PPUSH
11976: CALL_OW 247
11980: PUSH
11981: LD_INT 1
11983: EQUAL
11984: IFFALSE 12047
// begin side := GetSide ( i ) ;
11986: LD_ADDR_VAR 0 2
11990: PUSH
11991: LD_VAR 0 1
11995: PPUSH
11996: CALL_OW 255
12000: ST_TO_ADDR
// side_soldiers := Replace ( side_soldiers , side , side_soldiers [ side ] diff i ) ;
12001: LD_ADDR_EXP 46
12005: PUSH
12006: LD_EXP 46
12010: PPUSH
12011: LD_VAR 0 2
12015: PPUSH
12016: LD_EXP 46
12020: PUSH
12021: LD_VAR 0 2
12025: ARRAY
12026: PUSH
12027: LD_VAR 0 1
12031: DIFF
12032: PPUSH
12033: CALL_OW 1
12037: ST_TO_ADDR
// DidPlayerLose ( side ) ;
12038: LD_VAR 0 2
12042: PPUSH
12043: CALL 6904 0 1
// end ; if GetBType ( i ) in [ b_depot , b_warehouse ] then
12047: LD_VAR 0 1
12051: PPUSH
12052: CALL_OW 266
12056: PUSH
12057: LD_INT 0
12059: PUSH
12060: LD_INT 1
12062: PUSH
12063: EMPTY
12064: LIST
12065: LIST
12066: IN
12067: IFFALSE 12116
// side_depots := Replace ( side_depots , GetSide ( i ) , side_depots [ GetSide ( i ) ] diff i ) ;
12069: LD_ADDR_EXP 47
12073: PUSH
12074: LD_EXP 47
12078: PPUSH
12079: LD_VAR 0 1
12083: PPUSH
12084: CALL_OW 255
12088: PPUSH
12089: LD_EXP 47
12093: PUSH
12094: LD_VAR 0 1
12098: PPUSH
12099: CALL_OW 255
12103: ARRAY
12104: PUSH
12105: LD_VAR 0 1
12109: DIFF
12110: PPUSH
12111: CALL_OW 1
12115: ST_TO_ADDR
// if side_depots [ GetSide ( i ) ] + 0 = 0 then
12116: LD_EXP 47
12120: PUSH
12121: LD_VAR 0 1
12125: PPUSH
12126: CALL_OW 255
12130: ARRAY
12131: PUSH
12132: LD_INT 0
12134: PLUS
12135: PUSH
12136: LD_INT 0
12138: EQUAL
12139: IFFALSE 12179
// begin if GetSide ( i ) = Your_Side then
12141: LD_VAR 0 1
12145: PPUSH
12146: CALL_OW 255
12150: PUSH
12151: LD_OWVAR 2
12155: EQUAL
12156: IFFALSE 12165
// ToLua ( LUA_NoDepot(); ) ;
12158: LD_STRING LUA_NoDepot();
12160: PPUSH
12161: CALL_OW 559
// DidPlayerLose ( GetSide ( i ) ) ;
12165: LD_VAR 0 1
12169: PPUSH
12170: CALL_OW 255
12174: PPUSH
12175: CALL 6904 0 1
// end ; end ;
12179: PPOPN 2
12181: END
// on SailEvent ( ID ) do var i , j , lost ;
12182: LD_INT 0
12184: PPUSH
12185: PPUSH
12186: PPUSH
// begin case ID of 66 :
12187: LD_VAR 0 1
12191: PUSH
12192: LD_INT 66
12194: DOUBLE
12195: EQUAL
12196: IFTRUE 12200
12198: GO 12350
12200: POP
// begin for i = 1 to Teams do
12201: LD_ADDR_VAR 0 2
12205: PUSH
12206: DOUBLE
12207: LD_INT 1
12209: DEC
12210: ST_TO_ADDR
12211: LD_EXP 6
12215: PUSH
12216: FOR_TO
12217: IFFALSE 12346
// begin lost := 0 ;
12219: LD_ADDR_VAR 0 4
12223: PUSH
12224: LD_INT 0
12226: ST_TO_ADDR
// for j in Teams [ i ] do
12227: LD_ADDR_VAR 0 3
12231: PUSH
12232: LD_EXP 6
12236: PUSH
12237: LD_VAR 0 2
12241: ARRAY
12242: PUSH
12243: FOR_IN
12244: IFFALSE 12278
// if side_isalive [ j ] = 0 then
12246: LD_EXP 54
12250: PUSH
12251: LD_VAR 0 3
12255: ARRAY
12256: PUSH
12257: LD_INT 0
12259: EQUAL
12260: IFFALSE 12276
// lost := lost + 1 ;
12262: LD_ADDR_VAR 0 4
12266: PUSH
12267: LD_VAR 0 4
12271: PUSH
12272: LD_INT 1
12274: PLUS
12275: ST_TO_ADDR
12276: GO 12243
12278: POP
12279: POP
// if lost = Teams [ i ] + 0 then
12280: LD_VAR 0 4
12284: PUSH
12285: LD_EXP 6
12289: PUSH
12290: LD_VAR 0 2
12294: ARRAY
12295: PUSH
12296: LD_INT 0
12298: PLUS
12299: EQUAL
12300: IFFALSE 12342
// if Your_Side = 9 or Your_Side in Teams [ i ] then
12302: LD_OWVAR 2
12306: PUSH
12307: LD_INT 9
12309: EQUAL
12310: PUSH
12311: LD_OWVAR 2
12315: PUSH
12316: LD_EXP 6
12320: PUSH
12321: LD_VAR 0 2
12325: ARRAY
12326: IN
12327: OR
12328: IFFALSE 12336
// begin YouLostInMultiplayer ;
12330: CALL_OW 107
// end else
12334: GO 12340
// begin YouWinInMultiplayer ;
12336: CALL_OW 106
// end else
12340: GO 12344
// continue end ;
12342: GO 12216
12344: GO 12216
12346: POP
12347: POP
// end ; 67 :
12348: GO 12441
12350: LD_INT 67
12352: DOUBLE
12353: EQUAL
12354: IFTRUE 12358
12356: GO 12440
12358: POP
// begin if not victory_cond = 0 then
12359: LD_EXP 27
12363: PUSH
12364: LD_INT 0
12366: EQUAL
12367: NOT
12368: IFFALSE 12438
// begin for i = 1 to Teams do
12370: LD_ADDR_VAR 0 2
12374: PUSH
12375: DOUBLE
12376: LD_INT 1
12378: DEC
12379: ST_TO_ADDR
12380: LD_EXP 6
12384: PUSH
12385: FOR_TO
12386: IFFALSE 12436
// begin if team_siberite_stocked [ i ] >= victory_cond then
12388: LD_EXP 61
12392: PUSH
12393: LD_VAR 0 2
12397: ARRAY
12398: PUSH
12399: LD_EXP 27
12403: GREATEREQUAL
12404: IFFALSE 12434
// if Your_Side in Teams [ i ] then
12406: LD_OWVAR 2
12410: PUSH
12411: LD_EXP 6
12415: PUSH
12416: LD_VAR 0 2
12420: ARRAY
12421: IN
12422: IFFALSE 12430
// begin YouWinInMultiplayer ;
12424: CALL_OW 106
// end else
12428: GO 12434
// begin YouLostInMultiplayer ;
12430: CALL_OW 107
// end ; end ;
12434: GO 12385
12436: POP
12437: POP
// end ; end ; end ;
12438: GO 12441
12440: POP
// end ;
12441: PPOPN 4
12443: END
// on CustomCommand ( side , ComID , order , reserved1 , reserved2 , reserved3 ) do var i ;
12444: LD_INT 0
12446: PPUSH
// begin case ComID of 201 :
12447: LD_VAR 0 2
12451: PUSH
12452: LD_INT 201
12454: DOUBLE
12455: EQUAL
12456: IFTRUE 12460
12458: GO 12590
12460: POP
// begin if side = Your_Side then
12461: LD_VAR 0 1
12465: PUSH
12466: LD_OWVAR 2
12470: EQUAL
12471: IFFALSE 12588
// ToLua ( LUA_UpdateUpgradeCost( & cost_per_upgrade [ side_tech_lvl [ side ] + 1 ] [ reinforce_cost ] [ 1 ] & , & cost_per_upgrade [ side_tech_lvl [ side ] + 1 ] [ reinforce_cost ] [ 2 ] & , & cost_per_upgrade [ side_tech_lvl [ side ] + 1 ] [ reinforce_cost ] [ 3 ] & ); ) ;
12473: LD_STRING LUA_UpdateUpgradeCost(
12475: PUSH
12476: LD_EXP 56
12480: PUSH
12481: LD_EXP 31
12485: PUSH
12486: LD_VAR 0 1
12490: ARRAY
12491: PUSH
12492: LD_INT 1
12494: PLUS
12495: ARRAY
12496: PUSH
12497: LD_EXP 28
12501: ARRAY
12502: PUSH
12503: LD_INT 1
12505: ARRAY
12506: STR
12507: PUSH
12508: LD_STRING ,
12510: STR
12511: PUSH
12512: LD_EXP 56
12516: PUSH
12517: LD_EXP 31
12521: PUSH
12522: LD_VAR 0 1
12526: ARRAY
12527: PUSH
12528: LD_INT 1
12530: PLUS
12531: ARRAY
12532: PUSH
12533: LD_EXP 28
12537: ARRAY
12538: PUSH
12539: LD_INT 2
12541: ARRAY
12542: STR
12543: PUSH
12544: LD_STRING ,
12546: STR
12547: PUSH
12548: LD_EXP 56
12552: PUSH
12553: LD_EXP 31
12557: PUSH
12558: LD_VAR 0 1
12562: ARRAY
12563: PUSH
12564: LD_INT 1
12566: PLUS
12567: ARRAY
12568: PUSH
12569: LD_EXP 28
12573: ARRAY
12574: PUSH
12575: LD_INT 3
12577: ARRAY
12578: STR
12579: PUSH
12580: LD_STRING );
12582: STR
12583: PPUSH
12584: CALL_OW 559
// end ; 202 :
12588: GO 15948
12590: LD_INT 202
12592: DOUBLE
12593: EQUAL
12594: IFTRUE 12598
12596: GO 12747
12598: POP
// begin if side_reinforcement_amount [ side ] < 0 or side_reinforcement_amount [ side ] > side_reinforcement_cap [ side ] then
12599: LD_EXP 57
12603: PUSH
12604: LD_VAR 0 1
12608: ARRAY
12609: PUSH
12610: LD_INT 0
12612: LESS
12613: PUSH
12614: LD_EXP 57
12618: PUSH
12619: LD_VAR 0 1
12623: ARRAY
12624: PUSH
12625: LD_EXP 58
12629: PUSH
12630: LD_VAR 0 1
12634: ARRAY
12635: GREATER
12636: OR
12637: IFFALSE 12662
// side_reinforcement_amount := Replace ( side_reinforcement_amount , side , 1 ) ;
12639: LD_ADDR_EXP 57
12643: PUSH
12644: LD_EXP 57
12648: PPUSH
12649: LD_VAR 0 1
12653: PPUSH
12654: LD_INT 1
12656: PPUSH
12657: CALL_OW 1
12661: ST_TO_ADDR
// if side = Your_Side then
12662: LD_VAR 0 1
12666: PUSH
12667: LD_OWVAR 2
12671: EQUAL
12672: IFFALSE 12745
// ToLua ( LUA_UpdateReinforceCost( & side_reinforcement_amount [ side ] & * & cost_per_human [ reinforce_cost ] & , & 0 & , & 0 & , & side_reinforcement_amount [ side ] & ); ) ;
12674: LD_STRING LUA_UpdateReinforceCost(
12676: PUSH
12677: LD_EXP 57
12681: PUSH
12682: LD_VAR 0 1
12686: ARRAY
12687: STR
12688: PUSH
12689: LD_STRING *
12691: STR
12692: PUSH
12693: LD_EXP 55
12697: PUSH
12698: LD_EXP 28
12702: ARRAY
12703: STR
12704: PUSH
12705: LD_STRING ,
12707: STR
12708: PUSH
12709: LD_INT 0
12711: STR
12712: PUSH
12713: LD_STRING ,
12715: STR
12716: PUSH
12717: LD_INT 0
12719: STR
12720: PUSH
12721: LD_STRING ,
12723: STR
12724: PUSH
12725: LD_EXP 57
12729: PUSH
12730: LD_VAR 0 1
12734: ARRAY
12735: STR
12736: PUSH
12737: LD_STRING );
12739: STR
12740: PPUSH
12741: CALL_OW 559
// end ; 2020 :
12745: GO 15948
12747: LD_INT 2020
12749: DOUBLE
12750: EQUAL
12751: IFTRUE 12755
12753: GO 12892
12755: POP
// begin if side_reinforcement_amount [ side ] > 1 then
12756: LD_EXP 57
12760: PUSH
12761: LD_VAR 0 1
12765: ARRAY
12766: PUSH
12767: LD_INT 1
12769: GREATER
12770: IFFALSE 12807
// side_reinforcement_amount := Replace ( side_reinforcement_amount , side , side_reinforcement_amount [ side ] - 1 ) ;
12772: LD_ADDR_EXP 57
12776: PUSH
12777: LD_EXP 57
12781: PPUSH
12782: LD_VAR 0 1
12786: PPUSH
12787: LD_EXP 57
12791: PUSH
12792: LD_VAR 0 1
12796: ARRAY
12797: PUSH
12798: LD_INT 1
12800: MINUS
12801: PPUSH
12802: CALL_OW 1
12806: ST_TO_ADDR
// if side = Your_Side then
12807: LD_VAR 0 1
12811: PUSH
12812: LD_OWVAR 2
12816: EQUAL
12817: IFFALSE 12890
// ToLua ( LUA_UpdateReinforceCost( & side_reinforcement_amount [ side ] & * & cost_per_human [ reinforce_cost ] & , & 0 & , & 0 & , & side_reinforcement_amount [ side ] & ); ) ;
12819: LD_STRING LUA_UpdateReinforceCost(
12821: PUSH
12822: LD_EXP 57
12826: PUSH
12827: LD_VAR 0 1
12831: ARRAY
12832: STR
12833: PUSH
12834: LD_STRING *
12836: STR
12837: PUSH
12838: LD_EXP 55
12842: PUSH
12843: LD_EXP 28
12847: ARRAY
12848: STR
12849: PUSH
12850: LD_STRING ,
12852: STR
12853: PUSH
12854: LD_INT 0
12856: STR
12857: PUSH
12858: LD_STRING ,
12860: STR
12861: PUSH
12862: LD_INT 0
12864: STR
12865: PUSH
12866: LD_STRING ,
12868: STR
12869: PUSH
12870: LD_EXP 57
12874: PUSH
12875: LD_VAR 0 1
12879: ARRAY
12880: STR
12881: PUSH
12882: LD_STRING );
12884: STR
12885: PPUSH
12886: CALL_OW 559
// end ; 2021 :
12890: GO 15948
12892: LD_INT 2021
12894: DOUBLE
12895: EQUAL
12896: IFTRUE 12900
12898: GO 13045
12900: POP
// begin if side_reinforcement_amount [ side ] < side_reinforcement_cap [ side ] then
12901: LD_EXP 57
12905: PUSH
12906: LD_VAR 0 1
12910: ARRAY
12911: PUSH
12912: LD_EXP 58
12916: PUSH
12917: LD_VAR 0 1
12921: ARRAY
12922: LESS
12923: IFFALSE 12960
// side_reinforcement_amount := Replace ( side_reinforcement_amount , side , side_reinforcement_amount [ side ] + 1 ) ;
12925: LD_ADDR_EXP 57
12929: PUSH
12930: LD_EXP 57
12934: PPUSH
12935: LD_VAR 0 1
12939: PPUSH
12940: LD_EXP 57
12944: PUSH
12945: LD_VAR 0 1
12949: ARRAY
12950: PUSH
12951: LD_INT 1
12953: PLUS
12954: PPUSH
12955: CALL_OW 1
12959: ST_TO_ADDR
// if side = Your_Side then
12960: LD_VAR 0 1
12964: PUSH
12965: LD_OWVAR 2
12969: EQUAL
12970: IFFALSE 13043
// ToLua ( LUA_UpdateReinforceCost( & side_reinforcement_amount [ side ] & * & cost_per_human [ reinforce_cost ] & , & 0 & , & 0 & , & side_reinforcement_amount [ side ] & ); ) ;
12972: LD_STRING LUA_UpdateReinforceCost(
12974: PUSH
12975: LD_EXP 57
12979: PUSH
12980: LD_VAR 0 1
12984: ARRAY
12985: STR
12986: PUSH
12987: LD_STRING *
12989: STR
12990: PUSH
12991: LD_EXP 55
12995: PUSH
12996: LD_EXP 28
13000: ARRAY
13001: STR
13002: PUSH
13003: LD_STRING ,
13005: STR
13006: PUSH
13007: LD_INT 0
13009: STR
13010: PUSH
13011: LD_STRING ,
13013: STR
13014: PUSH
13015: LD_INT 0
13017: STR
13018: PUSH
13019: LD_STRING ,
13021: STR
13022: PUSH
13023: LD_EXP 57
13027: PUSH
13028: LD_VAR 0 1
13032: ARRAY
13033: STR
13034: PUSH
13035: LD_STRING );
13037: STR
13038: PPUSH
13039: CALL_OW 559
// end ; 203 :
13043: GO 15948
13045: LD_INT 203
13047: DOUBLE
13048: EQUAL
13049: IFTRUE 13053
13051: GO 13107
13053: POP
// begin if side = Your_Side then
13054: LD_VAR 0 1
13058: PUSH
13059: LD_OWVAR 2
13063: EQUAL
13064: IFFALSE 13105
// ToLua ( LUA_UpdateSiberiteSent( & team_siberite_stocked [ Side_Teams [ side ] ] & , & victory_cond & ); ) ;
13066: LD_STRING LUA_UpdateSiberiteSent(
13068: PUSH
13069: LD_EXP 61
13073: PUSH
13074: LD_EXP 5
13078: PUSH
13079: LD_VAR 0 1
13083: ARRAY
13084: ARRAY
13085: STR
13086: PUSH
13087: LD_STRING ,
13089: STR
13090: PUSH
13091: LD_EXP 27
13095: STR
13096: PUSH
13097: LD_STRING );
13099: STR
13100: PPUSH
13101: CALL_OW 559
// end ; 204 :
13105: GO 15948
13107: LD_INT 204
13109: DOUBLE
13110: EQUAL
13111: IFTRUE 13115
13113: GO 14144
13115: POP
// begin case order of 1 :
13116: LD_VAR 0 3
13120: PUSH
13121: LD_INT 1
13123: DOUBLE
13124: EQUAL
13125: IFTRUE 13129
13127: GO 13429
13129: POP
// begin side_pending_order := Replace ( side_pending_order , side , Replace ( side_pending_order [ side ] , 1 , side_reinforcement_amount [ side ] * cost_per_human [ reinforce_cost ] ) ) ;
13130: LD_ADDR_EXP 59
13134: PUSH
13135: LD_EXP 59
13139: PPUSH
13140: LD_VAR 0 1
13144: PPUSH
13145: LD_EXP 59
13149: PUSH
13150: LD_VAR 0 1
13154: ARRAY
13155: PPUSH
13156: LD_INT 1
13158: PPUSH
13159: LD_EXP 57
13163: PUSH
13164: LD_VAR 0 1
13168: ARRAY
13169: PUSH
13170: LD_EXP 55
13174: PUSH
13175: LD_EXP 28
13179: ARRAY
13180: MUL
13181: PPUSH
13182: CALL_OW 1
13186: PPUSH
13187: CALL_OW 1
13191: ST_TO_ADDR
// side_pending_order := Replace ( side_pending_order , side , Replace ( side_pending_order [ side ] , 2 , 0 ) ) ;
13192: LD_ADDR_EXP 59
13196: PUSH
13197: LD_EXP 59
13201: PPUSH
13202: LD_VAR 0 1
13206: PPUSH
13207: LD_EXP 59
13211: PUSH
13212: LD_VAR 0 1
13216: ARRAY
13217: PPUSH
13218: LD_INT 2
13220: PPUSH
13221: LD_INT 0
13223: PPUSH
13224: CALL_OW 1
13228: PPUSH
13229: CALL_OW 1
13233: ST_TO_ADDR
// side_pending_order := Replace ( side_pending_order , side , Replace ( side_pending_order [ side ] , 3 , 0 ) ) ;
13234: LD_ADDR_EXP 59
13238: PUSH
13239: LD_EXP 59
13243: PPUSH
13244: LD_VAR 0 1
13248: PPUSH
13249: LD_EXP 59
13253: PUSH
13254: LD_VAR 0 1
13258: ARRAY
13259: PPUSH
13260: LD_INT 3
13262: PPUSH
13263: LD_INT 0
13265: PPUSH
13266: CALL_OW 1
13270: PPUSH
13271: CALL_OW 1
13275: ST_TO_ADDR
// if side = Your_Side then
13276: LD_VAR 0 1
13280: PUSH
13281: LD_OWVAR 2
13285: EQUAL
13286: IFFALSE 13427
// begin ToLua ( LUA_UpdateTransferResources( & side_pending_order [ side ] [ 1 ] & , & side_pending_order [ side ] [ 2 ] & , & side_pending_order [ side ] [ 3 ] & , & 0 & , & 0 & ); ) ;
13288: LD_STRING LUA_UpdateTransferResources(
13290: PUSH
13291: LD_EXP 59
13295: PUSH
13296: LD_VAR 0 1
13300: ARRAY
13301: PUSH
13302: LD_INT 1
13304: ARRAY
13305: STR
13306: PUSH
13307: LD_STRING ,
13309: STR
13310: PUSH
13311: LD_EXP 59
13315: PUSH
13316: LD_VAR 0 1
13320: ARRAY
13321: PUSH
13322: LD_INT 2
13324: ARRAY
13325: STR
13326: PUSH
13327: LD_STRING ,
13329: STR
13330: PUSH
13331: LD_EXP 59
13335: PUSH
13336: LD_VAR 0 1
13340: ARRAY
13341: PUSH
13342: LD_INT 3
13344: ARRAY
13345: STR
13346: PUSH
13347: LD_STRING ,
13349: STR
13350: PUSH
13351: LD_INT 0
13353: STR
13354: PUSH
13355: LD_STRING ,
13357: STR
13358: PUSH
13359: LD_INT 0
13361: STR
13362: PUSH
13363: LD_STRING );
13365: STR
13366: PPUSH
13367: CALL_OW 559
// ToLua ( LUA_OrderIssued(); ) ;
13371: LD_STRING LUA_OrderIssued();
13373: PPUSH
13374: CALL_OW 559
// ToLua ( LUA_UpdateTransferResources( & 0 & , & 0 & , & 0 & , & 0 & , & order & ); ) ;
13378: LD_STRING LUA_UpdateTransferResources(
13380: PUSH
13381: LD_INT 0
13383: STR
13384: PUSH
13385: LD_STRING ,
13387: STR
13388: PUSH
13389: LD_INT 0
13391: STR
13392: PUSH
13393: LD_STRING ,
13395: STR
13396: PUSH
13397: LD_INT 0
13399: STR
13400: PUSH
13401: LD_STRING ,
13403: STR
13404: PUSH
13405: LD_INT 0
13407: STR
13408: PUSH
13409: LD_STRING ,
13411: STR
13412: PUSH
13413: LD_VAR 0 3
13417: STR
13418: PUSH
13419: LD_STRING );
13421: STR
13422: PPUSH
13423: CALL_OW 559
// end ; end ; 2 :
13427: GO 14021
13429: LD_INT 2
13431: DOUBLE
13432: EQUAL
13433: IFTRUE 13437
13435: GO 13801
13437: POP
// begin side_pending_order := Replace ( side_pending_order , side , Replace ( side_pending_order [ side ] , 1 , cost_per_upgrade [ side_tech_lvl [ side ] + 1 ] [ reinforce_cost ] [ 1 ] ) ) ;
13438: LD_ADDR_EXP 59
13442: PUSH
13443: LD_EXP 59
13447: PPUSH
13448: LD_VAR 0 1
13452: PPUSH
13453: LD_EXP 59
13457: PUSH
13458: LD_VAR 0 1
13462: ARRAY
13463: PPUSH
13464: LD_INT 1
13466: PPUSH
13467: LD_EXP 56
13471: PUSH
13472: LD_EXP 31
13476: PUSH
13477: LD_VAR 0 1
13481: ARRAY
13482: PUSH
13483: LD_INT 1
13485: PLUS
13486: ARRAY
13487: PUSH
13488: LD_EXP 28
13492: ARRAY
13493: PUSH
13494: LD_INT 1
13496: ARRAY
13497: PPUSH
13498: CALL_OW 1
13502: PPUSH
13503: CALL_OW 1
13507: ST_TO_ADDR
// side_pending_order := Replace ( side_pending_order , side , Replace ( side_pending_order [ side ] , 2 , cost_per_upgrade [ side_tech_lvl [ side ] + 1 ] [ reinforce_cost ] [ 2 ] ) ) ;
13508: LD_ADDR_EXP 59
13512: PUSH
13513: LD_EXP 59
13517: PPUSH
13518: LD_VAR 0 1
13522: PPUSH
13523: LD_EXP 59
13527: PUSH
13528: LD_VAR 0 1
13532: ARRAY
13533: PPUSH
13534: LD_INT 2
13536: PPUSH
13537: LD_EXP 56
13541: PUSH
13542: LD_EXP 31
13546: PUSH
13547: LD_VAR 0 1
13551: ARRAY
13552: PUSH
13553: LD_INT 1
13555: PLUS
13556: ARRAY
13557: PUSH
13558: LD_EXP 28
13562: ARRAY
13563: PUSH
13564: LD_INT 2
13566: ARRAY
13567: PPUSH
13568: CALL_OW 1
13572: PPUSH
13573: CALL_OW 1
13577: ST_TO_ADDR
// side_pending_order := Replace ( side_pending_order , side , Replace ( side_pending_order [ side ] , 3 , cost_per_upgrade [ side_tech_lvl [ side ] + 1 ] [ reinforce_cost ] [ 3 ] ) ) ;
13578: LD_ADDR_EXP 59
13582: PUSH
13583: LD_EXP 59
13587: PPUSH
13588: LD_VAR 0 1
13592: PPUSH
13593: LD_EXP 59
13597: PUSH
13598: LD_VAR 0 1
13602: ARRAY
13603: PPUSH
13604: LD_INT 3
13606: PPUSH
13607: LD_EXP 56
13611: PUSH
13612: LD_EXP 31
13616: PUSH
13617: LD_VAR 0 1
13621: ARRAY
13622: PUSH
13623: LD_INT 1
13625: PLUS
13626: ARRAY
13627: PUSH
13628: LD_EXP 28
13632: ARRAY
13633: PUSH
13634: LD_INT 3
13636: ARRAY
13637: PPUSH
13638: CALL_OW 1
13642: PPUSH
13643: CALL_OW 1
13647: ST_TO_ADDR
// if side = Your_Side then
13648: LD_VAR 0 1
13652: PUSH
13653: LD_OWVAR 2
13657: EQUAL
13658: IFFALSE 13799
// begin ToLua ( LUA_UpdateTransferResources( & side_pending_order [ side ] [ 1 ] & , & side_pending_order [ side ] [ 2 ] & , & side_pending_order [ side ] [ 3 ] & , & 0 & , & 0 & ); ) ;
13660: LD_STRING LUA_UpdateTransferResources(
13662: PUSH
13663: LD_EXP 59
13667: PUSH
13668: LD_VAR 0 1
13672: ARRAY
13673: PUSH
13674: LD_INT 1
13676: ARRAY
13677: STR
13678: PUSH
13679: LD_STRING ,
13681: STR
13682: PUSH
13683: LD_EXP 59
13687: PUSH
13688: LD_VAR 0 1
13692: ARRAY
13693: PUSH
13694: LD_INT 2
13696: ARRAY
13697: STR
13698: PUSH
13699: LD_STRING ,
13701: STR
13702: PUSH
13703: LD_EXP 59
13707: PUSH
13708: LD_VAR 0 1
13712: ARRAY
13713: PUSH
13714: LD_INT 3
13716: ARRAY
13717: STR
13718: PUSH
13719: LD_STRING ,
13721: STR
13722: PUSH
13723: LD_INT 0
13725: STR
13726: PUSH
13727: LD_STRING ,
13729: STR
13730: PUSH
13731: LD_INT 0
13733: STR
13734: PUSH
13735: LD_STRING );
13737: STR
13738: PPUSH
13739: CALL_OW 559
// ToLua ( LUA_OrderIssued(); ) ;
13743: LD_STRING LUA_OrderIssued();
13745: PPUSH
13746: CALL_OW 559
// ToLua ( LUA_UpdateTransferResources( & 0 & , & 0 & , & 0 & , & 0 & , & order & ); ) ;
13750: LD_STRING LUA_UpdateTransferResources(
13752: PUSH
13753: LD_INT 0
13755: STR
13756: PUSH
13757: LD_STRING ,
13759: STR
13760: PUSH
13761: LD_INT 0
13763: STR
13764: PUSH
13765: LD_STRING ,
13767: STR
13768: PUSH
13769: LD_INT 0
13771: STR
13772: PUSH
13773: LD_STRING ,
13775: STR
13776: PUSH
13777: LD_INT 0
13779: STR
13780: PUSH
13781: LD_STRING ,
13783: STR
13784: PUSH
13785: LD_VAR 0 3
13789: STR
13790: PUSH
13791: LD_STRING );
13793: STR
13794: PPUSH
13795: CALL_OW 559
// end ; end ; 3 :
13799: GO 14021
13801: LD_INT 3
13803: DOUBLE
13804: EQUAL
13805: IFTRUE 13809
13807: GO 14020
13809: POP
// begin side_pending_order := Replace ( side_pending_order , side , Replace ( side_pending_order [ side ] , 1 , 0 ) ) ;
13810: LD_ADDR_EXP 59
13814: PUSH
13815: LD_EXP 59
13819: PPUSH
13820: LD_VAR 0 1
13824: PPUSH
13825: LD_EXP 59
13829: PUSH
13830: LD_VAR 0 1
13834: ARRAY
13835: PPUSH
13836: LD_INT 1
13838: PPUSH
13839: LD_INT 0
13841: PPUSH
13842: CALL_OW 1
13846: PPUSH
13847: CALL_OW 1
13851: ST_TO_ADDR
// side_pending_order := Replace ( side_pending_order , side , Replace ( side_pending_order [ side ] , 2 , 0 ) ) ;
13852: LD_ADDR_EXP 59
13856: PUSH
13857: LD_EXP 59
13861: PPUSH
13862: LD_VAR 0 1
13866: PPUSH
13867: LD_EXP 59
13871: PUSH
13872: LD_VAR 0 1
13876: ARRAY
13877: PPUSH
13878: LD_INT 2
13880: PPUSH
13881: LD_INT 0
13883: PPUSH
13884: CALL_OW 1
13888: PPUSH
13889: CALL_OW 1
13893: ST_TO_ADDR
// side_pending_order := Replace ( side_pending_order , side , Replace ( side_pending_order [ side ] , 3 , 10 ) ) ;
13894: LD_ADDR_EXP 59
13898: PUSH
13899: LD_EXP 59
13903: PPUSH
13904: LD_VAR 0 1
13908: PPUSH
13909: LD_EXP 59
13913: PUSH
13914: LD_VAR 0 1
13918: ARRAY
13919: PPUSH
13920: LD_INT 3
13922: PPUSH
13923: LD_INT 10
13925: PPUSH
13926: CALL_OW 1
13930: PPUSH
13931: CALL_OW 1
13935: ST_TO_ADDR
// if side = Your_Side then
13936: LD_VAR 0 1
13940: PUSH
13941: LD_OWVAR 2
13945: EQUAL
13946: IFFALSE 14018
// begin ToLua ( LUA_UpdateTransferResources( & 0 & , & 0 & , & team_siberite_stocked [ Side_Teams [ side ] ] & , & victory_cond & , & 0 & ); ) ;
13948: LD_STRING LUA_UpdateTransferResources(
13950: PUSH
13951: LD_INT 0
13953: STR
13954: PUSH
13955: LD_STRING ,
13957: STR
13958: PUSH
13959: LD_INT 0
13961: STR
13962: PUSH
13963: LD_STRING ,
13965: STR
13966: PUSH
13967: LD_EXP 61
13971: PUSH
13972: LD_EXP 5
13976: PUSH
13977: LD_VAR 0 1
13981: ARRAY
13982: ARRAY
13983: STR
13984: PUSH
13985: LD_STRING ,
13987: STR
13988: PUSH
13989: LD_EXP 27
13993: STR
13994: PUSH
13995: LD_STRING ,
13997: STR
13998: PUSH
13999: LD_INT 0
14001: STR
14002: PUSH
14003: LD_STRING );
14005: STR
14006: PPUSH
14007: CALL_OW 559
// ToLua ( LUA_OrderIssued(); ) ;
14011: LD_STRING LUA_OrderIssued();
14013: PPUSH
14014: CALL_OW 559
// end ; end ; end ;
14018: GO 14021
14020: POP
// if side = Your_Side then
14021: LD_VAR 0 1
14025: PUSH
14026: LD_OWVAR 2
14030: EQUAL
14031: IFFALSE 14117
// begin ToLua ( LUA_CannotSendShipment(); ) ;
14033: LD_STRING LUA_CannotSendShipment();
14035: PPUSH
14036: CALL_OW 559
// ToLua ( LUA_UpdateTransferZone( & team_transfer_zones [ Side_Teams [ side ] ] [ side_chosen_zone [ side ] ] & ) ) ;
14040: LD_STRING LUA_UpdateTransferZone(
14042: PUSH
14043: LD_EXP 62
14047: PUSH
14048: LD_EXP 5
14052: PUSH
14053: LD_VAR 0 1
14057: ARRAY
14058: ARRAY
14059: PUSH
14060: LD_EXP 64
14064: PUSH
14065: LD_VAR 0 1
14069: ARRAY
14070: ARRAY
14071: STR
14072: PUSH
14073: LD_STRING )
14075: STR
14076: PPUSH
14077: CALL_OW 559
// SetAreaMapShow ( team_transfer_zones [ Side_Teams [ side ] ] [ side_chosen_zone [ side ] ] , 1 ) ;
14081: LD_EXP 62
14085: PUSH
14086: LD_EXP 5
14090: PUSH
14091: LD_VAR 0 1
14095: ARRAY
14096: ARRAY
14097: PUSH
14098: LD_EXP 64
14102: PUSH
14103: LD_VAR 0 1
14107: ARRAY
14108: ARRAY
14109: PPUSH
14110: LD_INT 1
14112: PPUSH
14113: CALL_OW 424
// end ; side_order_type := Replace ( side_order_type , side , order ) ;
14117: LD_ADDR_EXP 68
14121: PUSH
14122: LD_EXP 68
14126: PPUSH
14127: LD_VAR 0 1
14131: PPUSH
14132: LD_VAR 0 3
14136: PPUSH
14137: CALL_OW 1
14141: ST_TO_ADDR
// end ; 2040 :
14142: GO 15948
14144: LD_INT 2040
14146: DOUBLE
14147: EQUAL
14148: IFTRUE 14152
14150: GO 14238
14152: POP
// begin side_zone_locked := Replace ( side_zone_locked , side , 1 ) ;
14153: LD_ADDR_EXP 65
14157: PUSH
14158: LD_EXP 65
14162: PPUSH
14163: LD_VAR 0 1
14167: PPUSH
14168: LD_INT 1
14170: PPUSH
14171: CALL_OW 1
14175: ST_TO_ADDR
// if side = Your_Side then
14176: LD_VAR 0 1
14180: PUSH
14181: LD_OWVAR 2
14185: EQUAL
14186: IFFALSE 14236
// begin ToLua ( LUA_ChosenTransferZone(); ) ;
14188: LD_STRING LUA_ChosenTransferZone();
14190: PPUSH
14191: CALL_OW 559
// ToLua ( LUA_UpdateTransferZone( & team_transfer_zones [ Side_Teams [ side ] ] [ side_chosen_zone [ side ] ] & ) ) ;
14195: LD_STRING LUA_UpdateTransferZone(
14197: PUSH
14198: LD_EXP 62
14202: PUSH
14203: LD_EXP 5
14207: PUSH
14208: LD_VAR 0 1
14212: ARRAY
14213: ARRAY
14214: PUSH
14215: LD_EXP 64
14219: PUSH
14220: LD_VAR 0 1
14224: ARRAY
14225: ARRAY
14226: STR
14227: PUSH
14228: LD_STRING )
14230: STR
14231: PPUSH
14232: CALL_OW 559
// end ; end ; 2041 :
14236: GO 15948
14238: LD_INT 2041
14240: DOUBLE
14241: EQUAL
14242: IFTRUE 14246
14244: GO 14478
14246: POP
// begin if side = Your_Side then
14247: LD_VAR 0 1
14251: PUSH
14252: LD_OWVAR 2
14256: EQUAL
14257: IFFALSE 14295
// SetAreaMapShow ( team_transfer_zones [ Side_Teams [ side ] ] [ side_chosen_zone [ side ] ] , 0 ) ;
14259: LD_EXP 62
14263: PUSH
14264: LD_EXP 5
14268: PUSH
14269: LD_VAR 0 1
14273: ARRAY
14274: ARRAY
14275: PUSH
14276: LD_EXP 64
14280: PUSH
14281: LD_VAR 0 1
14285: ARRAY
14286: ARRAY
14287: PPUSH
14288: LD_INT 0
14290: PPUSH
14291: CALL_OW 424
// side_chosen_zone := Replace ( side_chosen_zone , side , side_chosen_zone [ side ] - 1 ) ;
14295: LD_ADDR_EXP 64
14299: PUSH
14300: LD_EXP 64
14304: PPUSH
14305: LD_VAR 0 1
14309: PPUSH
14310: LD_EXP 64
14314: PUSH
14315: LD_VAR 0 1
14319: ARRAY
14320: PUSH
14321: LD_INT 1
14323: MINUS
14324: PPUSH
14325: CALL_OW 1
14329: ST_TO_ADDR
// if side_chosen_zone [ side ] < 1 then
14330: LD_EXP 64
14334: PUSH
14335: LD_VAR 0 1
14339: ARRAY
14340: PUSH
14341: LD_INT 1
14343: LESS
14344: IFFALSE 14387
// side_chosen_zone := Replace ( side_chosen_zone , side , team_transfer_zones [ Side_Teams [ side ] ] + 0 ) ;
14346: LD_ADDR_EXP 64
14350: PUSH
14351: LD_EXP 64
14355: PPUSH
14356: LD_VAR 0 1
14360: PPUSH
14361: LD_EXP 62
14365: PUSH
14366: LD_EXP 5
14370: PUSH
14371: LD_VAR 0 1
14375: ARRAY
14376: ARRAY
14377: PUSH
14378: LD_INT 0
14380: PLUS
14381: PPUSH
14382: CALL_OW 1
14386: ST_TO_ADDR
// if side = Your_Side then
14387: LD_VAR 0 1
14391: PUSH
14392: LD_OWVAR 2
14396: EQUAL
14397: IFFALSE 14476
// begin ToLua ( LUA_UpdateTransferZone( & team_transfer_zones [ Side_Teams [ side ] ] [ side_chosen_zone [ side ] ] & ) ) ;
14399: LD_STRING LUA_UpdateTransferZone(
14401: PUSH
14402: LD_EXP 62
14406: PUSH
14407: LD_EXP 5
14411: PUSH
14412: LD_VAR 0 1
14416: ARRAY
14417: ARRAY
14418: PUSH
14419: LD_EXP 64
14423: PUSH
14424: LD_VAR 0 1
14428: ARRAY
14429: ARRAY
14430: STR
14431: PUSH
14432: LD_STRING )
14434: STR
14435: PPUSH
14436: CALL_OW 559
// SetAreaMapShow ( team_transfer_zones [ Side_Teams [ side ] ] [ side_chosen_zone [ side ] ] , 1 ) ;
14440: LD_EXP 62
14444: PUSH
14445: LD_EXP 5
14449: PUSH
14450: LD_VAR 0 1
14454: ARRAY
14455: ARRAY
14456: PUSH
14457: LD_EXP 64
14461: PUSH
14462: LD_VAR 0 1
14466: ARRAY
14467: ARRAY
14468: PPUSH
14469: LD_INT 1
14471: PPUSH
14472: CALL_OW 424
// end ; end ; 2042 :
14476: GO 15948
14478: LD_INT 2042
14480: DOUBLE
14481: EQUAL
14482: IFTRUE 14486
14484: GO 14718
14486: POP
// begin if side = Your_Side then
14487: LD_VAR 0 1
14491: PUSH
14492: LD_OWVAR 2
14496: EQUAL
14497: IFFALSE 14535
// SetAreaMapShow ( team_transfer_zones [ Side_Teams [ side ] ] [ side_chosen_zone [ side ] ] , 0 ) ;
14499: LD_EXP 62
14503: PUSH
14504: LD_EXP 5
14508: PUSH
14509: LD_VAR 0 1
14513: ARRAY
14514: ARRAY
14515: PUSH
14516: LD_EXP 64
14520: PUSH
14521: LD_VAR 0 1
14525: ARRAY
14526: ARRAY
14527: PPUSH
14528: LD_INT 0
14530: PPUSH
14531: CALL_OW 424
// side_chosen_zone := Replace ( side_chosen_zone , side , side_chosen_zone [ side ] + 1 ) ;
14535: LD_ADDR_EXP 64
14539: PUSH
14540: LD_EXP 64
14544: PPUSH
14545: LD_VAR 0 1
14549: PPUSH
14550: LD_EXP 64
14554: PUSH
14555: LD_VAR 0 1
14559: ARRAY
14560: PUSH
14561: LD_INT 1
14563: PLUS
14564: PPUSH
14565: CALL_OW 1
14569: ST_TO_ADDR
// if side_chosen_zone [ side ] > team_transfer_zones [ Side_Teams [ side ] ] + 0 then
14570: LD_EXP 64
14574: PUSH
14575: LD_VAR 0 1
14579: ARRAY
14580: PUSH
14581: LD_EXP 62
14585: PUSH
14586: LD_EXP 5
14590: PUSH
14591: LD_VAR 0 1
14595: ARRAY
14596: ARRAY
14597: PUSH
14598: LD_INT 0
14600: PLUS
14601: GREATER
14602: IFFALSE 14627
// side_chosen_zone := Replace ( side_chosen_zone , side , 1 ) ;
14604: LD_ADDR_EXP 64
14608: PUSH
14609: LD_EXP 64
14613: PPUSH
14614: LD_VAR 0 1
14618: PPUSH
14619: LD_INT 1
14621: PPUSH
14622: CALL_OW 1
14626: ST_TO_ADDR
// if side = Your_Side then
14627: LD_VAR 0 1
14631: PUSH
14632: LD_OWVAR 2
14636: EQUAL
14637: IFFALSE 14716
// begin ToLua ( LUA_UpdateTransferZone( & team_transfer_zones [ Side_Teams [ side ] ] [ side_chosen_zone [ side ] ] & ) ) ;
14639: LD_STRING LUA_UpdateTransferZone(
14641: PUSH
14642: LD_EXP 62
14646: PUSH
14647: LD_EXP 5
14651: PUSH
14652: LD_VAR 0 1
14656: ARRAY
14657: ARRAY
14658: PUSH
14659: LD_EXP 64
14663: PUSH
14664: LD_VAR 0 1
14668: ARRAY
14669: ARRAY
14670: STR
14671: PUSH
14672: LD_STRING )
14674: STR
14675: PPUSH
14676: CALL_OW 559
// SetAreaMapShow ( team_transfer_zones [ Side_Teams [ side ] ] [ side_chosen_zone [ side ] ] , 1 ) ;
14680: LD_EXP 62
14684: PUSH
14685: LD_EXP 5
14689: PUSH
14690: LD_VAR 0 1
14694: ARRAY
14695: ARRAY
14696: PUSH
14697: LD_EXP 64
14701: PUSH
14702: LD_VAR 0 1
14706: ARRAY
14707: ARRAY
14708: PPUSH
14709: LD_INT 1
14711: PPUSH
14712: CALL_OW 424
// end ; end ; 205 :
14716: GO 15948
14718: LD_INT 205
14720: DOUBLE
14721: EQUAL
14722: IFTRUE 14726
14724: GO 15336
14726: POP
// begin side_units_outside := Replace ( side_units_outside , side , FilterUnitsInArea ( team_transfer_zones [ Side_Teams [ side ] ] [ side_chosen_zone [ side ] ] , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , 12 ] , [ f_weapon , 32 ] , [ f_weapon , 51 ] ] , [ f_or , [ f_and , [ f_control , 2 ] , [ f_linked ] ] , [ f_and , [ f_control , 1 ] , [ f_occupied ] ] , [ f_control , 3 ] ] ] ) ) ;
14727: LD_ADDR_EXP 67
14731: PUSH
14732: LD_EXP 67
14736: PPUSH
14737: LD_VAR 0 1
14741: PPUSH
14742: LD_EXP 62
14746: PUSH
14747: LD_EXP 5
14751: PUSH
14752: LD_VAR 0 1
14756: ARRAY
14757: ARRAY
14758: PUSH
14759: LD_EXP 64
14763: PUSH
14764: LD_VAR 0 1
14768: ARRAY
14769: ARRAY
14770: PPUSH
14771: LD_INT 22
14773: PUSH
14774: LD_VAR 0 1
14778: PUSH
14779: EMPTY
14780: LIST
14781: LIST
14782: PUSH
14783: LD_INT 21
14785: PUSH
14786: LD_INT 2
14788: PUSH
14789: EMPTY
14790: LIST
14791: LIST
14792: PUSH
14793: LD_INT 2
14795: PUSH
14796: LD_INT 34
14798: PUSH
14799: LD_INT 12
14801: PUSH
14802: EMPTY
14803: LIST
14804: LIST
14805: PUSH
14806: LD_INT 34
14808: PUSH
14809: LD_INT 32
14811: PUSH
14812: EMPTY
14813: LIST
14814: LIST
14815: PUSH
14816: LD_INT 34
14818: PUSH
14819: LD_INT 51
14821: PUSH
14822: EMPTY
14823: LIST
14824: LIST
14825: PUSH
14826: EMPTY
14827: LIST
14828: LIST
14829: LIST
14830: LIST
14831: PUSH
14832: LD_INT 2
14834: PUSH
14835: LD_INT 1
14837: PUSH
14838: LD_INT 33
14840: PUSH
14841: LD_INT 2
14843: PUSH
14844: EMPTY
14845: LIST
14846: LIST
14847: PUSH
14848: LD_INT 61
14850: PUSH
14851: EMPTY
14852: LIST
14853: PUSH
14854: EMPTY
14855: LIST
14856: LIST
14857: LIST
14858: PUSH
14859: LD_INT 1
14861: PUSH
14862: LD_INT 33
14864: PUSH
14865: LD_INT 1
14867: PUSH
14868: EMPTY
14869: LIST
14870: LIST
14871: PUSH
14872: LD_INT 59
14874: PUSH
14875: EMPTY
14876: LIST
14877: PUSH
14878: EMPTY
14879: LIST
14880: LIST
14881: LIST
14882: PUSH
14883: LD_INT 33
14885: PUSH
14886: LD_INT 3
14888: PUSH
14889: EMPTY
14890: LIST
14891: LIST
14892: PUSH
14893: EMPTY
14894: LIST
14895: LIST
14896: LIST
14897: LIST
14898: PUSH
14899: EMPTY
14900: LIST
14901: LIST
14902: LIST
14903: LIST
14904: PPUSH
14905: CALL_OW 70
14909: PPUSH
14910: CALL_OW 1
14914: ST_TO_ADDR
// for i in side_units_outside [ side ] do
14915: LD_ADDR_VAR 0 7
14919: PUSH
14920: LD_EXP 67
14924: PUSH
14925: LD_VAR 0 1
14929: ARRAY
14930: PUSH
14931: FOR_IN
14932: IFFALSE 14945
// RemoveUnit ( i ) ;
14934: LD_VAR 0 7
14938: PPUSH
14939: CALL_OW 64
14943: GO 14931
14945: POP
14946: POP
// side_resources_remaining := Replace ( side_resources_remaining , side , Replace ( side_resources_remaining [ side ] , 1 , side_resources_delivered [ side ] [ 1 ] - side_pending_order [ side ] [ 1 ] ) ) ;
14947: LD_ADDR_EXP 69
14951: PUSH
14952: LD_EXP 69
14956: PPUSH
14957: LD_VAR 0 1
14961: PPUSH
14962: LD_EXP 69
14966: PUSH
14967: LD_VAR 0 1
14971: ARRAY
14972: PPUSH
14973: LD_INT 1
14975: PPUSH
14976: LD_EXP 60
14980: PUSH
14981: LD_VAR 0 1
14985: ARRAY
14986: PUSH
14987: LD_INT 1
14989: ARRAY
14990: PUSH
14991: LD_EXP 59
14995: PUSH
14996: LD_VAR 0 1
15000: ARRAY
15001: PUSH
15002: LD_INT 1
15004: ARRAY
15005: MINUS
15006: PPUSH
15007: CALL_OW 1
15011: PPUSH
15012: CALL_OW 1
15016: ST_TO_ADDR
// side_resources_remaining := Replace ( side_resources_remaining , side , Replace ( side_resources_remaining [ side ] , 2 , side_resources_delivered [ side ] [ 2 ] - side_pending_order [ side ] [ 2 ] ) ) ;
15017: LD_ADDR_EXP 69
15021: PUSH
15022: LD_EXP 69
15026: PPUSH
15027: LD_VAR 0 1
15031: PPUSH
15032: LD_EXP 69
15036: PUSH
15037: LD_VAR 0 1
15041: ARRAY
15042: PPUSH
15043: LD_INT 2
15045: PPUSH
15046: LD_EXP 60
15050: PUSH
15051: LD_VAR 0 1
15055: ARRAY
15056: PUSH
15057: LD_INT 2
15059: ARRAY
15060: PUSH
15061: LD_EXP 59
15065: PUSH
15066: LD_VAR 0 1
15070: ARRAY
15071: PUSH
15072: LD_INT 2
15074: ARRAY
15075: MINUS
15076: PPUSH
15077: CALL_OW 1
15081: PPUSH
15082: CALL_OW 1
15086: ST_TO_ADDR
// side_resources_remaining := Replace ( side_resources_remaining , side , Replace ( side_resources_remaining [ side ] , 3 , side_resources_delivered [ side ] [ 3 ] - side_pending_order [ side ] [ 3 ] ) ) ;
15087: LD_ADDR_EXP 69
15091: PUSH
15092: LD_EXP 69
15096: PPUSH
15097: LD_VAR 0 1
15101: PPUSH
15102: LD_EXP 69
15106: PUSH
15107: LD_VAR 0 1
15111: ARRAY
15112: PPUSH
15113: LD_INT 3
15115: PPUSH
15116: LD_EXP 60
15120: PUSH
15121: LD_VAR 0 1
15125: ARRAY
15126: PUSH
15127: LD_INT 3
15129: ARRAY
15130: PUSH
15131: LD_EXP 59
15135: PUSH
15136: LD_VAR 0 1
15140: ARRAY
15141: PUSH
15142: LD_INT 3
15144: ARRAY
15145: MINUS
15146: PPUSH
15147: CALL_OW 1
15151: PPUSH
15152: CALL_OW 1
15156: ST_TO_ADDR
// if side_order_type [ side ] = 3 then
15157: LD_EXP 68
15161: PUSH
15162: LD_VAR 0 1
15166: ARRAY
15167: PUSH
15168: LD_INT 3
15170: EQUAL
15171: IFFALSE 15227
// side_resources_remaining := Replace ( side_resources_remaining , side , Replace ( side_resources_remaining [ side ] , 3 , side_resources_delivered [ side ] [ 3 ] ) ) ;
15173: LD_ADDR_EXP 69
15177: PUSH
15178: LD_EXP 69
15182: PPUSH
15183: LD_VAR 0 1
15187: PPUSH
15188: LD_EXP 69
15192: PUSH
15193: LD_VAR 0 1
15197: ARRAY
15198: PPUSH
15199: LD_INT 3
15201: PPUSH
15202: LD_EXP 60
15206: PUSH
15207: LD_VAR 0 1
15211: ARRAY
15212: PUSH
15213: LD_INT 3
15215: ARRAY
15216: PPUSH
15217: CALL_OW 1
15221: PPUSH
15222: CALL_OW 1
15226: ST_TO_ADDR
// side_transfer_clocks := Replace ( side_transfer_clocks , side , tick + 3 3$0 ) ;
15227: LD_ADDR_EXP 66
15231: PUSH
15232: LD_EXP 66
15236: PPUSH
15237: LD_VAR 0 1
15241: PPUSH
15242: LD_OWVAR 1
15246: PUSH
15247: LD_INT 6300
15249: PLUS
15250: PPUSH
15251: CALL_OW 1
15255: ST_TO_ADDR
// side_transfer_pending := Replace ( side_transfer_pending , side , 1 ) ;
15256: LD_ADDR_EXP 70
15260: PUSH
15261: LD_EXP 70
15265: PPUSH
15266: LD_VAR 0 1
15270: PPUSH
15271: LD_INT 1
15273: PPUSH
15274: CALL_OW 1
15278: ST_TO_ADDR
// if side = Your_Side then
15279: LD_VAR 0 1
15283: PUSH
15284: LD_OWVAR 2
15288: EQUAL
15289: IFFALSE 15334
// begin SetAreaMapShow ( team_transfer_zones [ Side_Teams [ side ] ] [ side_chosen_zone [ side ] ] , 0 ) ;
15291: LD_EXP 62
15295: PUSH
15296: LD_EXP 5
15300: PUSH
15301: LD_VAR 0 1
15305: ARRAY
15306: ARRAY
15307: PUSH
15308: LD_EXP 64
15312: PUSH
15313: LD_VAR 0 1
15317: ARRAY
15318: ARRAY
15319: PPUSH
15320: LD_INT 0
15322: PPUSH
15323: CALL_OW 424
// ToLua ( LUA_WaitingTransfer(); ) ;
15327: LD_STRING LUA_WaitingTransfer();
15329: PPUSH
15330: CALL_OW 559
// end ; end ; 300 :
15334: GO 15948
15336: LD_INT 300
15338: DOUBLE
15339: EQUAL
15340: IFTRUE 15344
15342: GO 15544
15344: POP
// begin side_pending_order := Replace ( side_pending_order , side , Replace ( side_pending_order [ side ] , 1 , 0 ) ) ;
15345: LD_ADDR_EXP 59
15349: PUSH
15350: LD_EXP 59
15354: PPUSH
15355: LD_VAR 0 1
15359: PPUSH
15360: LD_EXP 59
15364: PUSH
15365: LD_VAR 0 1
15369: ARRAY
15370: PPUSH
15371: LD_INT 1
15373: PPUSH
15374: LD_INT 0
15376: PPUSH
15377: CALL_OW 1
15381: PPUSH
15382: CALL_OW 1
15386: ST_TO_ADDR
// side_pending_order := Replace ( side_pending_order , side , Replace ( side_pending_order [ side ] , 2 , 0 ) ) ;
15387: LD_ADDR_EXP 59
15391: PUSH
15392: LD_EXP 59
15396: PPUSH
15397: LD_VAR 0 1
15401: PPUSH
15402: LD_EXP 59
15406: PUSH
15407: LD_VAR 0 1
15411: ARRAY
15412: PPUSH
15413: LD_INT 2
15415: PPUSH
15416: LD_INT 0
15418: PPUSH
15419: CALL_OW 1
15423: PPUSH
15424: CALL_OW 1
15428: ST_TO_ADDR
// side_pending_order := Replace ( side_pending_order , side , Replace ( side_pending_order [ side ] , 3 , 0 ) ) ;
15429: LD_ADDR_EXP 59
15433: PUSH
15434: LD_EXP 59
15438: PPUSH
15439: LD_VAR 0 1
15443: PPUSH
15444: LD_EXP 59
15448: PUSH
15449: LD_VAR 0 1
15453: ARRAY
15454: PPUSH
15455: LD_INT 3
15457: PPUSH
15458: LD_INT 0
15460: PPUSH
15461: CALL_OW 1
15465: PPUSH
15466: CALL_OW 1
15470: ST_TO_ADDR
// side_zone_locked := Replace ( side_zone_locked , side , 0 ) ;
15471: LD_ADDR_EXP 65
15475: PUSH
15476: LD_EXP 65
15480: PPUSH
15481: LD_VAR 0 1
15485: PPUSH
15486: LD_INT 0
15488: PPUSH
15489: CALL_OW 1
15493: ST_TO_ADDR
// if side = Your_Side then
15494: LD_VAR 0 1
15498: PUSH
15499: LD_OWVAR 2
15503: EQUAL
15504: IFFALSE 15542
// SetAreaMapShow ( team_transfer_zones [ Side_Teams [ side ] ] [ side_chosen_zone [ side ] ] , 0 ) ;
15506: LD_EXP 62
15510: PUSH
15511: LD_EXP 5
15515: PUSH
15516: LD_VAR 0 1
15520: ARRAY
15521: ARRAY
15522: PUSH
15523: LD_EXP 64
15527: PUSH
15528: LD_VAR 0 1
15532: ARRAY
15533: ARRAY
15534: PPUSH
15535: LD_INT 0
15537: PPUSH
15538: CALL_OW 424
// end ; 301 :
15542: GO 15948
15544: LD_INT 301
15546: DOUBLE
15547: EQUAL
15548: IFTRUE 15552
15550: GO 15947
15552: POP
// begin side_pending_order := Replace ( side_pending_order , side , Replace ( side_pending_order [ side ] , 1 , 0 ) ) ;
15553: LD_ADDR_EXP 59
15557: PUSH
15558: LD_EXP 59
15562: PPUSH
15563: LD_VAR 0 1
15567: PPUSH
15568: LD_EXP 59
15572: PUSH
15573: LD_VAR 0 1
15577: ARRAY
15578: PPUSH
15579: LD_INT 1
15581: PPUSH
15582: LD_INT 0
15584: PPUSH
15585: CALL_OW 1
15589: PPUSH
15590: CALL_OW 1
15594: ST_TO_ADDR
// side_pending_order := Replace ( side_pending_order , side , Replace ( side_pending_order [ side ] , 2 , 0 ) ) ;
15595: LD_ADDR_EXP 59
15599: PUSH
15600: LD_EXP 59
15604: PPUSH
15605: LD_VAR 0 1
15609: PPUSH
15610: LD_EXP 59
15614: PUSH
15615: LD_VAR 0 1
15619: ARRAY
15620: PPUSH
15621: LD_INT 2
15623: PPUSH
15624: LD_INT 0
15626: PPUSH
15627: CALL_OW 1
15631: PPUSH
15632: CALL_OW 1
15636: ST_TO_ADDR
// side_pending_order := Replace ( side_pending_order , side , Replace ( side_pending_order [ side ] , 3 , 0 ) ) ;
15637: LD_ADDR_EXP 59
15641: PUSH
15642: LD_EXP 59
15646: PPUSH
15647: LD_VAR 0 1
15651: PPUSH
15652: LD_EXP 59
15656: PUSH
15657: LD_VAR 0 1
15661: ARRAY
15662: PPUSH
15663: LD_INT 3
15665: PPUSH
15666: LD_INT 0
15668: PPUSH
15669: CALL_OW 1
15673: PPUSH
15674: CALL_OW 1
15678: ST_TO_ADDR
// side_zone_locked := Replace ( side_zone_locked , side , 0 ) ;
15679: LD_ADDR_EXP 65
15683: PUSH
15684: LD_EXP 65
15688: PPUSH
15689: LD_VAR 0 1
15693: PPUSH
15694: LD_INT 0
15696: PPUSH
15697: CALL_OW 1
15701: ST_TO_ADDR
// side_transfer_pending := Replace ( side_transfer_pending , side , 0 ) ;
15702: LD_ADDR_EXP 70
15706: PUSH
15707: LD_EXP 70
15711: PPUSH
15712: LD_VAR 0 1
15716: PPUSH
15717: LD_INT 0
15719: PPUSH
15720: CALL_OW 1
15724: ST_TO_ADDR
// side_transfer_clocks := Replace ( side_transfer_clocks , side , 0 0$0 ) ;
15725: LD_ADDR_EXP 66
15729: PUSH
15730: LD_EXP 66
15734: PPUSH
15735: LD_VAR 0 1
15739: PPUSH
15740: LD_INT 0
15742: PPUSH
15743: CALL_OW 1
15747: ST_TO_ADDR
// side_resources_remaining := Replace ( side_resources_remaining , side , Replace ( side_resources_remaining [ side ] , 1 , 0 ) ) ;
15748: LD_ADDR_EXP 69
15752: PUSH
15753: LD_EXP 69
15757: PPUSH
15758: LD_VAR 0 1
15762: PPUSH
15763: LD_EXP 69
15767: PUSH
15768: LD_VAR 0 1
15772: ARRAY
15773: PPUSH
15774: LD_INT 1
15776: PPUSH
15777: LD_INT 0
15779: PPUSH
15780: CALL_OW 1
15784: PPUSH
15785: CALL_OW 1
15789: ST_TO_ADDR
// side_resources_remaining := Replace ( side_resources_remaining , side , Replace ( side_resources_remaining [ side ] , 2 , 0 ) ) ;
15790: LD_ADDR_EXP 69
15794: PUSH
15795: LD_EXP 69
15799: PPUSH
15800: LD_VAR 0 1
15804: PPUSH
15805: LD_EXP 69
15809: PUSH
15810: LD_VAR 0 1
15814: ARRAY
15815: PPUSH
15816: LD_INT 2
15818: PPUSH
15819: LD_INT 0
15821: PPUSH
15822: CALL_OW 1
15826: PPUSH
15827: CALL_OW 1
15831: ST_TO_ADDR
// side_resources_remaining := Replace ( side_resources_remaining , side , Replace ( side_resources_remaining [ side ] , 3 , 0 ) ) ;
15832: LD_ADDR_EXP 69
15836: PUSH
15837: LD_EXP 69
15841: PPUSH
15842: LD_VAR 0 1
15846: PPUSH
15847: LD_EXP 69
15851: PUSH
15852: LD_VAR 0 1
15856: ARRAY
15857: PPUSH
15858: LD_INT 3
15860: PPUSH
15861: LD_INT 0
15863: PPUSH
15864: CALL_OW 1
15868: PPUSH
15869: CALL_OW 1
15873: ST_TO_ADDR
// side_units_outside := Replace ( side_units_outside , side , 0 ) ;
15874: LD_ADDR_EXP 67
15878: PUSH
15879: LD_EXP 67
15883: PPUSH
15884: LD_VAR 0 1
15888: PPUSH
15889: LD_INT 0
15891: PPUSH
15892: CALL_OW 1
15896: ST_TO_ADDR
// if side = Your_Side then
15897: LD_VAR 0 1
15901: PUSH
15902: LD_OWVAR 2
15906: EQUAL
15907: IFFALSE 15945
// SetAreaMapShow ( team_transfer_zones [ Side_Teams [ side ] ] [ side_chosen_zone [ side ] ] , 0 ) ;
15909: LD_EXP 62
15913: PUSH
15914: LD_EXP 5
15918: PUSH
15919: LD_VAR 0 1
15923: ARRAY
15924: ARRAY
15925: PUSH
15926: LD_EXP 64
15930: PUSH
15931: LD_VAR 0 1
15935: ARRAY
15936: ARRAY
15937: PPUSH
15938: LD_INT 0
15940: PPUSH
15941: CALL_OW 424
// end ; end ;
15945: GO 15948
15947: POP
// end ; end_of_file
15948: PPOPN 7
15950: END
// export function CYCLIC_CrateSpawn ; var i , j , k , amount ; begin
15951: LD_INT 0
15953: PPUSH
15954: PPUSH
15955: PPUSH
15956: PPUSH
15957: PPUSH
// for i = 1 to position_drop_zones do
15958: LD_ADDR_VAR 0 2
15962: PUSH
15963: DOUBLE
15964: LD_INT 1
15966: DEC
15967: ST_TO_ADDR
15968: LD_EXP 36
15972: PUSH
15973: FOR_TO
15974: IFFALSE 16124
// begin amount := Rand ( position_drop_zones [ i ] [ 1 ] , 5 ) ;
15976: LD_ADDR_VAR 0 5
15980: PUSH
15981: LD_EXP 36
15985: PUSH
15986: LD_VAR 0 2
15990: ARRAY
15991: PUSH
15992: LD_INT 1
15994: ARRAY
15995: PPUSH
15996: LD_INT 5
15998: PPUSH
15999: CALL_OW 12
16003: ST_TO_ADDR
// for j = 3 to position_drop_zones [ i ] do
16004: LD_ADDR_VAR 0 3
16008: PUSH
16009: DOUBLE
16010: LD_INT 3
16012: DEC
16013: ST_TO_ADDR
16014: LD_EXP 36
16018: PUSH
16019: LD_VAR 0 2
16023: ARRAY
16024: PUSH
16025: FOR_TO
16026: IFFALSE 16120
// if Prob ( position_drop_zones [ i ] [ 2 ] ) then
16028: LD_EXP 36
16032: PUSH
16033: LD_VAR 0 2
16037: ARRAY
16038: PUSH
16039: LD_INT 2
16041: ARRAY
16042: PPUSH
16043: CALL_OW 13
16047: IFFALSE 16118
// for k = 1 to position_drop_zones [ i ] [ j ] do
16049: LD_ADDR_VAR 0 4
16053: PUSH
16054: DOUBLE
16055: LD_INT 1
16057: DEC
16058: ST_TO_ADDR
16059: LD_EXP 36
16063: PUSH
16064: LD_VAR 0 2
16068: ARRAY
16069: PUSH
16070: LD_VAR 0 3
16074: ARRAY
16075: PUSH
16076: FOR_TO
16077: IFFALSE 16116
// CreateCratesArea ( amount , position_drop_zones [ i ] [ j ] [ k ] , true ) ;
16079: LD_VAR 0 5
16083: PPUSH
16084: LD_EXP 36
16088: PUSH
16089: LD_VAR 0 2
16093: ARRAY
16094: PUSH
16095: LD_VAR 0 3
16099: ARRAY
16100: PUSH
16101: LD_VAR 0 4
16105: ARRAY
16106: PPUSH
16107: LD_INT 1
16109: PPUSH
16110: CALL_OW 55
16114: GO 16076
16116: POP
16117: POP
16118: GO 16025
16120: POP
16121: POP
// end ;
16122: GO 15973
16124: POP
16125: POP
// end ;
16126: LD_VAR 0 1
16130: RET
// export function CYCLIC_HumanSpawn ; var i , j , entity , areas , outside , side , arguments , human ; begin
16131: LD_INT 0
16133: PPUSH
16134: PPUSH
16135: PPUSH
16136: PPUSH
16137: PPUSH
16138: PPUSH
16139: PPUSH
16140: PPUSH
16141: PPUSH
// side_soldier_count := [ [ 1 , 0 ] , [ 2 , 0 ] , [ 3 , 0 ] , [ 4 , 0 ] , [ 5 , 0 ] , [ 6 , 0 ] , [ 7 , 0 ] , [ 8 , 0 ] ] ;
16142: LD_ADDR_EXP 48
16146: PUSH
16147: LD_INT 1
16149: PUSH
16150: LD_INT 0
16152: PUSH
16153: EMPTY
16154: LIST
16155: LIST
16156: PUSH
16157: LD_INT 2
16159: PUSH
16160: LD_INT 0
16162: PUSH
16163: EMPTY
16164: LIST
16165: LIST
16166: PUSH
16167: LD_INT 3
16169: PUSH
16170: LD_INT 0
16172: PUSH
16173: EMPTY
16174: LIST
16175: LIST
16176: PUSH
16177: LD_INT 4
16179: PUSH
16180: LD_INT 0
16182: PUSH
16183: EMPTY
16184: LIST
16185: LIST
16186: PUSH
16187: LD_INT 5
16189: PUSH
16190: LD_INT 0
16192: PUSH
16193: EMPTY
16194: LIST
16195: LIST
16196: PUSH
16197: LD_INT 6
16199: PUSH
16200: LD_INT 0
16202: PUSH
16203: EMPTY
16204: LIST
16205: LIST
16206: PUSH
16207: LD_INT 7
16209: PUSH
16210: LD_INT 0
16212: PUSH
16213: EMPTY
16214: LIST
16215: LIST
16216: PUSH
16217: LD_INT 8
16219: PUSH
16220: LD_INT 0
16222: PUSH
16223: EMPTY
16224: LIST
16225: LIST
16226: PUSH
16227: EMPTY
16228: LIST
16229: LIST
16230: LIST
16231: LIST
16232: LIST
16233: LIST
16234: LIST
16235: LIST
16236: ST_TO_ADDR
// arguments := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
16237: LD_ADDR_VAR 0 8
16241: PUSH
16242: LD_INT 0
16244: PUSH
16245: LD_INT 0
16247: PUSH
16248: LD_INT 0
16250: PUSH
16251: LD_INT 0
16253: PUSH
16254: LD_INT 0
16256: PUSH
16257: LD_INT 0
16259: PUSH
16260: LD_INT 0
16262: PUSH
16263: LD_INT 0
16265: PUSH
16266: EMPTY
16267: LIST
16268: LIST
16269: LIST
16270: LIST
16271: LIST
16272: LIST
16273: LIST
16274: LIST
16275: ST_TO_ADDR
// new_character_EON := [ 0 , Rand ( 1 , 4 ) , [ Rand ( 8 , 12 ) , Rand ( 8 , 12 ) ] , [ 0 , 0 , 0 , 0 ] , [ Rand ( 0 , experience ) , Rand ( 0 , experience ) , Rand ( 0 , experience ) , Rand ( 0 , experience ) ] , 0 ] ;
16276: LD_ADDR_EXP 44
16280: PUSH
16281: LD_INT 0
16283: PUSH
16284: LD_INT 1
16286: PPUSH
16287: LD_INT 4
16289: PPUSH
16290: CALL_OW 12
16294: PUSH
16295: LD_INT 8
16297: PPUSH
16298: LD_INT 12
16300: PPUSH
16301: CALL_OW 12
16305: PUSH
16306: LD_INT 8
16308: PPUSH
16309: LD_INT 12
16311: PPUSH
16312: CALL_OW 12
16316: PUSH
16317: EMPTY
16318: LIST
16319: LIST
16320: PUSH
16321: LD_INT 0
16323: PUSH
16324: LD_INT 0
16326: PUSH
16327: LD_INT 0
16329: PUSH
16330: LD_INT 0
16332: PUSH
16333: EMPTY
16334: LIST
16335: LIST
16336: LIST
16337: LIST
16338: PUSH
16339: LD_INT 0
16341: PPUSH
16342: LD_EXP 20
16346: PPUSH
16347: CALL_OW 12
16351: PUSH
16352: LD_INT 0
16354: PPUSH
16355: LD_EXP 20
16359: PPUSH
16360: CALL_OW 12
16364: PUSH
16365: LD_INT 0
16367: PPUSH
16368: LD_EXP 20
16372: PPUSH
16373: CALL_OW 12
16377: PUSH
16378: LD_INT 0
16380: PPUSH
16381: LD_EXP 20
16385: PPUSH
16386: CALL_OW 12
16390: PUSH
16391: EMPTY
16392: LIST
16393: LIST
16394: LIST
16395: LIST
16396: PUSH
16397: LD_INT 0
16399: PUSH
16400: EMPTY
16401: LIST
16402: LIST
16403: LIST
16404: LIST
16405: LIST
16406: LIST
16407: ST_TO_ADDR
// for i = 8 downto 1 do
16408: LD_ADDR_VAR 0 2
16412: PUSH
16413: DOUBLE
16414: LD_INT 8
16416: INC
16417: ST_TO_ADDR
16418: LD_INT 1
16420: PUSH
16421: FOR_DOWNTO
16422: IFFALSE 16515
// begin side_soldier_count := Replace ( side_soldier_count , i , Replace ( side_soldier_count [ i ] , 2 , side_soldiers [ i ] + 0 ) ) ;
16424: LD_ADDR_EXP 48
16428: PUSH
16429: LD_EXP 48
16433: PPUSH
16434: LD_VAR 0 2
16438: PPUSH
16439: LD_EXP 48
16443: PUSH
16444: LD_VAR 0 2
16448: ARRAY
16449: PPUSH
16450: LD_INT 2
16452: PPUSH
16453: LD_EXP 46
16457: PUSH
16458: LD_VAR 0 2
16462: ARRAY
16463: PUSH
16464: LD_INT 0
16466: PLUS
16467: PPUSH
16468: CALL_OW 1
16472: PPUSH
16473: CALL_OW 1
16477: ST_TO_ADDR
// arguments := Replace ( arguments , i , side_soldiers [ i ] + 0 ) ;
16478: LD_ADDR_VAR 0 8
16482: PUSH
16483: LD_VAR 0 8
16487: PPUSH
16488: LD_VAR 0 2
16492: PPUSH
16493: LD_EXP 46
16497: PUSH
16498: LD_VAR 0 2
16502: ARRAY
16503: PUSH
16504: LD_INT 0
16506: PLUS
16507: PPUSH
16508: CALL_OW 1
16512: ST_TO_ADDR
// end ;
16513: GO 16421
16515: POP
16516: POP
// for i = 8 downto 1 do
16517: LD_ADDR_VAR 0 2
16521: PUSH
16522: DOUBLE
16523: LD_INT 8
16525: INC
16526: ST_TO_ADDR
16527: LD_INT 1
16529: PUSH
16530: FOR_DOWNTO
16531: IFFALSE 16588
// if not side_isalive [ i ] then
16533: LD_EXP 54
16537: PUSH
16538: LD_VAR 0 2
16542: ARRAY
16543: NOT
16544: IFFALSE 16586
// begin side_soldier_count := Delete ( side_soldier_count , i ) ;
16546: LD_ADDR_EXP 48
16550: PUSH
16551: LD_EXP 48
16555: PPUSH
16556: LD_VAR 0 2
16560: PPUSH
16561: CALL_OW 3
16565: ST_TO_ADDR
// arguments := Delete ( arguments , i ) ;
16566: LD_ADDR_VAR 0 8
16570: PUSH
16571: LD_VAR 0 8
16575: PPUSH
16576: LD_VAR 0 2
16580: PPUSH
16581: CALL_OW 3
16585: ST_TO_ADDR
// end ;
16586: GO 16530
16588: POP
16589: POP
// side_soldier_count := SortListByListAsc ( side_soldier_count , arguments ) ;
16590: LD_ADDR_EXP 48
16594: PUSH
16595: LD_EXP 48
16599: PPUSH
16600: LD_VAR 0 8
16604: PPUSH
16605: CALL_OW 76
16609: ST_TO_ADDR
// for i = side_soldier_count + 0 downto 1 do
16610: LD_ADDR_VAR 0 2
16614: PUSH
16615: DOUBLE
16616: LD_EXP 48
16620: PUSH
16621: LD_INT 0
16623: PLUS
16624: INC
16625: ST_TO_ADDR
16626: LD_INT 1
16628: PUSH
16629: FOR_DOWNTO
16630: IFFALSE 16684
// begin if side_soldier_count [ i ] [ 2 ] > side_soldier_count [ 1 ] [ 2 ] then
16632: LD_EXP 48
16636: PUSH
16637: LD_VAR 0 2
16641: ARRAY
16642: PUSH
16643: LD_INT 2
16645: ARRAY
16646: PUSH
16647: LD_EXP 48
16651: PUSH
16652: LD_INT 1
16654: ARRAY
16655: PUSH
16656: LD_INT 2
16658: ARRAY
16659: GREATER
16660: IFFALSE 16682
// side_soldier_count := Delete ( side_soldier_count , i ) ;
16662: LD_ADDR_EXP 48
16666: PUSH
16667: LD_EXP 48
16671: PPUSH
16672: LD_VAR 0 2
16676: PPUSH
16677: CALL_OW 3
16681: ST_TO_ADDR
// end ;
16682: GO 16629
16684: POP
16685: POP
// side := side_soldier_count [ Rand ( 1 , side_soldier_count ) ] [ 1 ] ;
16686: LD_ADDR_VAR 0 7
16690: PUSH
16691: LD_EXP 48
16695: PUSH
16696: LD_INT 1
16698: PPUSH
16699: LD_EXP 48
16703: PPUSH
16704: CALL_OW 12
16708: ARRAY
16709: PUSH
16710: LD_INT 1
16712: ARRAY
16713: ST_TO_ADDR
// if side_soldiers [ side ] > 0 then
16714: LD_EXP 46
16718: PUSH
16719: LD_VAR 0 7
16723: ARRAY
16724: PUSH
16725: LD_INT 0
16727: GREATER
16728: IFFALSE 16768
// entity := side_soldiers [ side ] [ Rand ( 1 , side_soldiers [ side ] ) ] else
16730: LD_ADDR_VAR 0 4
16734: PUSH
16735: LD_EXP 46
16739: PUSH
16740: LD_VAR 0 7
16744: ARRAY
16745: PUSH
16746: LD_INT 1
16748: PPUSH
16749: LD_EXP 46
16753: PUSH
16754: LD_VAR 0 7
16758: ARRAY
16759: PPUSH
16760: CALL_OW 12
16764: ARRAY
16765: ST_TO_ADDR
16766: GO 16857
// begin entity := FilterAllUnits ( [ [ f_side , side ] , [ f_type , 3 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) ;
16768: LD_ADDR_VAR 0 4
16772: PUSH
16773: LD_INT 22
16775: PUSH
16776: LD_VAR 0 7
16780: PUSH
16781: EMPTY
16782: LIST
16783: LIST
16784: PUSH
16785: LD_INT 21
16787: PUSH
16788: LD_INT 3
16790: PUSH
16791: EMPTY
16792: LIST
16793: LIST
16794: PUSH
16795: LD_INT 2
16797: PUSH
16798: LD_INT 30
16800: PUSH
16801: LD_INT 0
16803: PUSH
16804: EMPTY
16805: LIST
16806: LIST
16807: PUSH
16808: LD_INT 30
16810: PUSH
16811: LD_INT 1
16813: PUSH
16814: EMPTY
16815: LIST
16816: LIST
16817: PUSH
16818: EMPTY
16819: LIST
16820: LIST
16821: LIST
16822: PUSH
16823: EMPTY
16824: LIST
16825: LIST
16826: LIST
16827: PPUSH
16828: CALL_OW 69
16832: ST_TO_ADDR
// entity := entity [ Rand ( 1 , entity ) ] ;
16833: LD_ADDR_VAR 0 4
16837: PUSH
16838: LD_VAR 0 4
16842: PUSH
16843: LD_INT 1
16845: PPUSH
16846: LD_VAR 0 4
16850: PPUSH
16851: CALL_OW 12
16855: ARRAY
16856: ST_TO_ADDR
// end ; outside := 0 ;
16857: LD_ADDR_VAR 0 6
16861: PUSH
16862: LD_INT 0
16864: ST_TO_ADDR
// areas := 0 ;
16865: LD_ADDR_VAR 0 5
16869: PUSH
16870: LD_INT 0
16872: ST_TO_ADDR
// for i = 1 to position_drop_zones do
16873: LD_ADDR_VAR 0 2
16877: PUSH
16878: DOUBLE
16879: LD_INT 1
16881: DEC
16882: ST_TO_ADDR
16883: LD_EXP 36
16887: PUSH
16888: FOR_TO
16889: IFFALSE 17181
// for j = 1 to position_drop_zones [ i ] [ 3 ] do
16891: LD_ADDR_VAR 0 3
16895: PUSH
16896: DOUBLE
16897: LD_INT 1
16899: DEC
16900: ST_TO_ADDR
16901: LD_EXP 36
16905: PUSH
16906: LD_VAR 0 2
16910: ARRAY
16911: PUSH
16912: LD_INT 3
16914: ARRAY
16915: PUSH
16916: FOR_TO
16917: IFFALSE 17177
// begin areas := areas + 1 ;
16919: LD_ADDR_VAR 0 5
16923: PUSH
16924: LD_VAR 0 5
16928: PUSH
16929: LD_INT 1
16931: PLUS
16932: ST_TO_ADDR
// if IsInArea ( entity , position_drop_zones [ i ] [ 3 ] [ j ] ) then
16933: LD_VAR 0 4
16937: PPUSH
16938: LD_EXP 36
16942: PUSH
16943: LD_VAR 0 2
16947: ARRAY
16948: PUSH
16949: LD_INT 3
16951: ARRAY
16952: PUSH
16953: LD_VAR 0 3
16957: ARRAY
16958: PPUSH
16959: CALL_OW 308
16963: IFFALSE 17161
// begin human := PrepareCharacters ( side , [ Rand ( 0 , 5 ) , Rand ( 0 , 5 ) , Rand ( 0 , 5 ) , Rand ( 0 , 5 ) , Rand ( 0 , 5 ) , Rand ( 0 , 5 ) , Rand ( 0 , 5 ) , Rand ( 0 , 5 ) ] , new_character_EON ) ;
16965: LD_ADDR_VAR 0 9
16969: PUSH
16970: LD_VAR 0 7
16974: PPUSH
16975: LD_INT 0
16977: PPUSH
16978: LD_INT 5
16980: PPUSH
16981: CALL_OW 12
16985: PUSH
16986: LD_INT 0
16988: PPUSH
16989: LD_INT 5
16991: PPUSH
16992: CALL_OW 12
16996: PUSH
16997: LD_INT 0
16999: PPUSH
17000: LD_INT 5
17002: PPUSH
17003: CALL_OW 12
17007: PUSH
17008: LD_INT 0
17010: PPUSH
17011: LD_INT 5
17013: PPUSH
17014: CALL_OW 12
17018: PUSH
17019: LD_INT 0
17021: PPUSH
17022: LD_INT 5
17024: PPUSH
17025: CALL_OW 12
17029: PUSH
17030: LD_INT 0
17032: PPUSH
17033: LD_INT 5
17035: PPUSH
17036: CALL_OW 12
17040: PUSH
17041: LD_INT 0
17043: PPUSH
17044: LD_INT 5
17046: PPUSH
17047: CALL_OW 12
17051: PUSH
17052: LD_INT 0
17054: PPUSH
17055: LD_INT 5
17057: PPUSH
17058: CALL_OW 12
17062: PUSH
17063: EMPTY
17064: LIST
17065: LIST
17066: LIST
17067: LIST
17068: LIST
17069: LIST
17070: LIST
17071: LIST
17072: PPUSH
17073: LD_EXP 44
17077: PPUSH
17078: CALL 6499 0 3
17082: ST_TO_ADDR
// PlaceUnitArea ( human , position_drop_zones [ i ] [ 3 ] [ j ] , true ) ;
17083: LD_VAR 0 9
17087: PPUSH
17088: LD_EXP 36
17092: PUSH
17093: LD_VAR 0 2
17097: ARRAY
17098: PUSH
17099: LD_INT 3
17101: ARRAY
17102: PUSH
17103: LD_VAR 0 3
17107: ARRAY
17108: PPUSH
17109: LD_INT 1
17111: PPUSH
17112: CALL_OW 49
// side_soldiers := Replace ( side_soldiers , side , side_soldiers [ side ] ^ human ) ;
17116: LD_ADDR_EXP 46
17120: PUSH
17121: LD_EXP 46
17125: PPUSH
17126: LD_VAR 0 7
17130: PPUSH
17131: LD_EXP 46
17135: PUSH
17136: LD_VAR 0 7
17140: ARRAY
17141: PUSH
17142: LD_VAR 0 9
17146: ADD
17147: PPUSH
17148: CALL_OW 1
17152: ST_TO_ADDR
// exit ;
17153: POP
17154: POP
17155: POP
17156: POP
17157: GO 17429
// end else
17159: GO 17175
// begin outside := outside + 1 ;
17161: LD_ADDR_VAR 0 6
17165: PUSH
17166: LD_VAR 0 6
17170: PUSH
17171: LD_INT 1
17173: PLUS
17174: ST_TO_ADDR
// end ; end ;
17175: GO 16916
17177: POP
17178: POP
17179: GO 16888
17181: POP
17182: POP
// if areas = outside then
17183: LD_VAR 0 5
17187: PUSH
17188: LD_VAR 0 6
17192: EQUAL
17193: IFFALSE 17429
// begin i := Rand ( 1 , position_drop_zones ) ;
17195: LD_ADDR_VAR 0 2
17199: PUSH
17200: LD_INT 1
17202: PPUSH
17203: LD_EXP 36
17207: PPUSH
17208: CALL_OW 12
17212: ST_TO_ADDR
// j := Rand ( 1 , position_drop_zones [ i ] [ 3 ] ) ;
17213: LD_ADDR_VAR 0 3
17217: PUSH
17218: LD_INT 1
17220: PPUSH
17221: LD_EXP 36
17225: PUSH
17226: LD_VAR 0 2
17230: ARRAY
17231: PUSH
17232: LD_INT 3
17234: ARRAY
17235: PPUSH
17236: CALL_OW 12
17240: ST_TO_ADDR
// human := PrepareCharacters ( side , [ Rand ( 0 , 5 ) , Rand ( 0 , 5 ) , Rand ( 0 , 5 ) , Rand ( 0 , 5 ) , Rand ( 0 , 5 ) , Rand ( 0 , 5 ) , Rand ( 0 , 5 ) , Rand ( 0 , 5 ) ] , new_character_EON ) ;
17241: LD_ADDR_VAR 0 9
17245: PUSH
17246: LD_VAR 0 7
17250: PPUSH
17251: LD_INT 0
17253: PPUSH
17254: LD_INT 5
17256: PPUSH
17257: CALL_OW 12
17261: PUSH
17262: LD_INT 0
17264: PPUSH
17265: LD_INT 5
17267: PPUSH
17268: CALL_OW 12
17272: PUSH
17273: LD_INT 0
17275: PPUSH
17276: LD_INT 5
17278: PPUSH
17279: CALL_OW 12
17283: PUSH
17284: LD_INT 0
17286: PPUSH
17287: LD_INT 5
17289: PPUSH
17290: CALL_OW 12
17294: PUSH
17295: LD_INT 0
17297: PPUSH
17298: LD_INT 5
17300: PPUSH
17301: CALL_OW 12
17305: PUSH
17306: LD_INT 0
17308: PPUSH
17309: LD_INT 5
17311: PPUSH
17312: CALL_OW 12
17316: PUSH
17317: LD_INT 0
17319: PPUSH
17320: LD_INT 5
17322: PPUSH
17323: CALL_OW 12
17327: PUSH
17328: LD_INT 0
17330: PPUSH
17331: LD_INT 5
17333: PPUSH
17334: CALL_OW 12
17338: PUSH
17339: EMPTY
17340: LIST
17341: LIST
17342: LIST
17343: LIST
17344: LIST
17345: LIST
17346: LIST
17347: LIST
17348: PPUSH
17349: LD_EXP 44
17353: PPUSH
17354: CALL 6499 0 3
17358: ST_TO_ADDR
// PlaceUnitArea ( human , position_drop_zones [ i ] [ 3 ] [ j ] , true ) ;
17359: LD_VAR 0 9
17363: PPUSH
17364: LD_EXP 36
17368: PUSH
17369: LD_VAR 0 2
17373: ARRAY
17374: PUSH
17375: LD_INT 3
17377: ARRAY
17378: PUSH
17379: LD_VAR 0 3
17383: ARRAY
17384: PPUSH
17385: LD_INT 1
17387: PPUSH
17388: CALL_OW 49
// side_soldiers := Replace ( side_soldiers , side , side_soldiers [ side ] ^ human ) ;
17392: LD_ADDR_EXP 46
17396: PUSH
17397: LD_EXP 46
17401: PPUSH
17402: LD_VAR 0 7
17406: PPUSH
17407: LD_EXP 46
17411: PUSH
17412: LD_VAR 0 7
17416: ARRAY
17417: PUSH
17418: LD_VAR 0 9
17422: ADD
17423: PPUSH
17424: CALL_OW 1
17428: ST_TO_ADDR
// end ; end ;
17429: LD_VAR 0 1
17433: RET
// export function CYCLIC_Fluctuation ; var change ; begin
17434: LD_INT 0
17436: PPUSH
17437: PPUSH
// current_spawn_rate := Rand ( - 5 , 5 ) ;
17438: LD_ADDR_EXP 41
17442: PUSH
17443: LD_INT 5
17445: NEG
17446: PPUSH
17447: LD_INT 5
17449: PPUSH
17450: CALL_OW 12
17454: ST_TO_ADDR
// fluctuation_modifier_crates := fluctuation_base_crates * current_spawn_rate ;
17455: LD_ADDR_EXP 39
17459: PUSH
17460: LD_EXP 37
17464: PUSH
17465: LD_EXP 41
17469: MUL
17470: ST_TO_ADDR
// fluctuation_modifier_humans := fluctuation_base_humans * current_spawn_rate ;
17471: LD_ADDR_EXP 40
17475: PUSH
17476: LD_EXP 38
17480: PUSH
17481: LD_EXP 41
17485: MUL
17486: ST_TO_ADDR
// change := current_spawn_rate - past_spawn_rate ;
17487: LD_ADDR_VAR 0 2
17491: PUSH
17492: LD_EXP 41
17496: PUSH
17497: LD_EXP 42
17501: MINUS
17502: ST_TO_ADDR
// case change of - 10 .. - 6 :
17503: LD_VAR 0 2
17507: PUSH
17508: LD_INT 10
17510: NEG
17511: DOUBLE
17512: GREATEREQUAL
17513: IFFALSE 17522
17515: LD_INT 6
17517: NEG
17518: DOUBLE
17519: LESSEQUAL
17520: IFTRUE 17524
17522: GO 17527
17524: POP
// begin end ; - 5 .. - 1 :
17525: GO 17592
17527: LD_INT 5
17529: NEG
17530: DOUBLE
17531: GREATEREQUAL
17532: IFFALSE 17541
17534: LD_INT 1
17536: NEG
17537: DOUBLE
17538: LESSEQUAL
17539: IFTRUE 17543
17541: GO 17546
17543: POP
// begin end ; 0 :
17544: GO 17592
17546: LD_INT 0
17548: DOUBLE
17549: EQUAL
17550: IFTRUE 17554
17552: GO 17557
17554: POP
// begin end ; 1 .. 5 :
17555: GO 17592
17557: LD_INT 1
17559: DOUBLE
17560: GREATEREQUAL
17561: IFFALSE 17569
17563: LD_INT 5
17565: DOUBLE
17566: LESSEQUAL
17567: IFTRUE 17571
17569: GO 17574
17571: POP
// begin end ; 6 .. 10 :
17572: GO 17592
17574: LD_INT 6
17576: DOUBLE
17577: GREATEREQUAL
17578: IFFALSE 17586
17580: LD_INT 10
17582: DOUBLE
17583: LESSEQUAL
17584: IFTRUE 17588
17586: GO 17591
17588: POP
// begin end ; end ;
17589: GO 17592
17591: POP
// past_spawn_rate := current_spawn_rate ;
17592: LD_ADDR_EXP 42
17596: PUSH
17597: LD_EXP 41
17601: ST_TO_ADDR
// end ;
17602: LD_VAR 0 1
17606: RET
// export function CYCLIC_CheckTransportsInZones ; var i , cargo_bays ; begin
17607: LD_INT 0
17609: PPUSH
17610: PPUSH
17611: PPUSH
// for i = 1 to 8 do
17612: LD_ADDR_VAR 0 2
17616: PUSH
17617: DOUBLE
17618: LD_INT 1
17620: DEC
17621: ST_TO_ADDR
17622: LD_INT 8
17624: PUSH
17625: FOR_TO
17626: IFFALSE 18435
// begin side_resources_delivered := Replace ( side_resources_delivered , i , [ 0 , 0 , 0 ] ) ;
17628: LD_ADDR_EXP 60
17632: PUSH
17633: LD_EXP 60
17637: PPUSH
17638: LD_VAR 0 2
17642: PPUSH
17643: LD_INT 0
17645: PUSH
17646: LD_INT 0
17648: PUSH
17649: LD_INT 0
17651: PUSH
17652: EMPTY
17653: LIST
17654: LIST
17655: LIST
17656: PPUSH
17657: CALL_OW 1
17661: ST_TO_ADDR
// if not side_zone_locked [ i ] = 0 then
17662: LD_EXP 65
17666: PUSH
17667: LD_VAR 0 2
17671: ARRAY
17672: PUSH
17673: LD_INT 0
17675: EQUAL
17676: NOT
17677: IFFALSE 18433
// begin cargo_bays := FilterUnitsInArea ( team_transfer_zones [ Side_Teams [ i ] ] [ side_chosen_zone [ i ] ] , [ [ f_side , i ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , 12 ] , [ f_weapon , 32 ] , [ f_weapon , 51 ] ] , [ f_or , [ f_and , [ f_control , 2 ] , [ f_linked ] ] , [ f_and , [ f_control , 1 ] , [ f_occupied ] ] , [ f_control , 3 ] ] ] ) ;
17679: LD_ADDR_VAR 0 3
17683: PUSH
17684: LD_EXP 62
17688: PUSH
17689: LD_EXP 5
17693: PUSH
17694: LD_VAR 0 2
17698: ARRAY
17699: ARRAY
17700: PUSH
17701: LD_EXP 64
17705: PUSH
17706: LD_VAR 0 2
17710: ARRAY
17711: ARRAY
17712: PPUSH
17713: LD_INT 22
17715: PUSH
17716: LD_VAR 0 2
17720: PUSH
17721: EMPTY
17722: LIST
17723: LIST
17724: PUSH
17725: LD_INT 21
17727: PUSH
17728: LD_INT 2
17730: PUSH
17731: EMPTY
17732: LIST
17733: LIST
17734: PUSH
17735: LD_INT 2
17737: PUSH
17738: LD_INT 34
17740: PUSH
17741: LD_INT 12
17743: PUSH
17744: EMPTY
17745: LIST
17746: LIST
17747: PUSH
17748: LD_INT 34
17750: PUSH
17751: LD_INT 32
17753: PUSH
17754: EMPTY
17755: LIST
17756: LIST
17757: PUSH
17758: LD_INT 34
17760: PUSH
17761: LD_INT 51
17763: PUSH
17764: EMPTY
17765: LIST
17766: LIST
17767: PUSH
17768: EMPTY
17769: LIST
17770: LIST
17771: LIST
17772: LIST
17773: PUSH
17774: LD_INT 2
17776: PUSH
17777: LD_INT 1
17779: PUSH
17780: LD_INT 33
17782: PUSH
17783: LD_INT 2
17785: PUSH
17786: EMPTY
17787: LIST
17788: LIST
17789: PUSH
17790: LD_INT 61
17792: PUSH
17793: EMPTY
17794: LIST
17795: PUSH
17796: EMPTY
17797: LIST
17798: LIST
17799: LIST
17800: PUSH
17801: LD_INT 1
17803: PUSH
17804: LD_INT 33
17806: PUSH
17807: LD_INT 1
17809: PUSH
17810: EMPTY
17811: LIST
17812: LIST
17813: PUSH
17814: LD_INT 59
17816: PUSH
17817: EMPTY
17818: LIST
17819: PUSH
17820: EMPTY
17821: LIST
17822: LIST
17823: LIST
17824: PUSH
17825: LD_INT 33
17827: PUSH
17828: LD_INT 3
17830: PUSH
17831: EMPTY
17832: LIST
17833: LIST
17834: PUSH
17835: EMPTY
17836: LIST
17837: LIST
17838: LIST
17839: LIST
17840: PUSH
17841: EMPTY
17842: LIST
17843: LIST
17844: LIST
17845: LIST
17846: PPUSH
17847: CALL_OW 70
17851: ST_TO_ADDR
// if not cargo_bays = [ ] then
17852: LD_VAR 0 3
17856: PUSH
17857: EMPTY
17858: EQUAL
17859: NOT
17860: IFFALSE 18018
// begin side_resources_delivered := Replace ( side_resources_delivered , i , Replace ( side_resources_delivered [ i ] , 1 , GetCargo ( cargo_bays , mat_cans ) ) ) ;
17862: LD_ADDR_EXP 60
17866: PUSH
17867: LD_EXP 60
17871: PPUSH
17872: LD_VAR 0 2
17876: PPUSH
17877: LD_EXP 60
17881: PUSH
17882: LD_VAR 0 2
17886: ARRAY
17887: PPUSH
17888: LD_INT 1
17890: PPUSH
17891: LD_VAR 0 3
17895: PPUSH
17896: LD_INT 1
17898: PPUSH
17899: CALL_OW 289
17903: PPUSH
17904: CALL_OW 1
17908: PPUSH
17909: CALL_OW 1
17913: ST_TO_ADDR
// side_resources_delivered := Replace ( side_resources_delivered , i , Replace ( side_resources_delivered [ i ] , 2 , GetCargo ( cargo_bays , mat_oil ) ) ) ;
17914: LD_ADDR_EXP 60
17918: PUSH
17919: LD_EXP 60
17923: PPUSH
17924: LD_VAR 0 2
17928: PPUSH
17929: LD_EXP 60
17933: PUSH
17934: LD_VAR 0 2
17938: ARRAY
17939: PPUSH
17940: LD_INT 2
17942: PPUSH
17943: LD_VAR 0 3
17947: PPUSH
17948: LD_INT 2
17950: PPUSH
17951: CALL_OW 289
17955: PPUSH
17956: CALL_OW 1
17960: PPUSH
17961: CALL_OW 1
17965: ST_TO_ADDR
// side_resources_delivered := Replace ( side_resources_delivered , i , Replace ( side_resources_delivered [ i ] , 3 , GetCargo ( cargo_bays , mat_siberit ) ) ) ;
17966: LD_ADDR_EXP 60
17970: PUSH
17971: LD_EXP 60
17975: PPUSH
17976: LD_VAR 0 2
17980: PPUSH
17981: LD_EXP 60
17985: PUSH
17986: LD_VAR 0 2
17990: ARRAY
17991: PPUSH
17992: LD_INT 3
17994: PPUSH
17995: LD_VAR 0 3
17999: PPUSH
18000: LD_INT 3
18002: PPUSH
18003: CALL_OW 289
18007: PPUSH
18008: CALL_OW 1
18012: PPUSH
18013: CALL_OW 1
18017: ST_TO_ADDR
// end ; if i = Your_Side and ( side_order_type [ i ] = 1 or side_order_type [ i ] = 2 ) then
18018: LD_VAR 0 2
18022: PUSH
18023: LD_OWVAR 2
18027: EQUAL
18028: PUSH
18029: LD_EXP 68
18033: PUSH
18034: LD_VAR 0 2
18038: ARRAY
18039: PUSH
18040: LD_INT 1
18042: EQUAL
18043: PUSH
18044: LD_EXP 68
18048: PUSH
18049: LD_VAR 0 2
18053: ARRAY
18054: PUSH
18055: LD_INT 2
18057: EQUAL
18058: OR
18059: AND
18060: IFFALSE 18153
// ToLua ( LUA_UpdateTransferResources( & side_resources_delivered [ i ] [ 1 ] & , & side_resources_delivered [ i ] [ 2 ] & , & side_resources_delivered [ i ] [ 3 ] & , & 0 & , & side_order_type [ i ] & ); ) ;
18062: LD_STRING LUA_UpdateTransferResources(
18064: PUSH
18065: LD_EXP 60
18069: PUSH
18070: LD_VAR 0 2
18074: ARRAY
18075: PUSH
18076: LD_INT 1
18078: ARRAY
18079: STR
18080: PUSH
18081: LD_STRING ,
18083: STR
18084: PUSH
18085: LD_EXP 60
18089: PUSH
18090: LD_VAR 0 2
18094: ARRAY
18095: PUSH
18096: LD_INT 2
18098: ARRAY
18099: STR
18100: PUSH
18101: LD_STRING ,
18103: STR
18104: PUSH
18105: LD_EXP 60
18109: PUSH
18110: LD_VAR 0 2
18114: ARRAY
18115: PUSH
18116: LD_INT 3
18118: ARRAY
18119: STR
18120: PUSH
18121: LD_STRING ,
18123: STR
18124: PUSH
18125: LD_INT 0
18127: STR
18128: PUSH
18129: LD_STRING ,
18131: STR
18132: PUSH
18133: LD_EXP 68
18137: PUSH
18138: LD_VAR 0 2
18142: ARRAY
18143: STR
18144: PUSH
18145: LD_STRING );
18147: STR
18148: PPUSH
18149: CALL_OW 559
// if i = Your_Side and side_order_type [ i ] = 3 then
18153: LD_VAR 0 2
18157: PUSH
18158: LD_OWVAR 2
18162: EQUAL
18163: PUSH
18164: LD_EXP 68
18168: PUSH
18169: LD_VAR 0 2
18173: ARRAY
18174: PUSH
18175: LD_INT 3
18177: EQUAL
18178: AND
18179: IFFALSE 18272
// ToLua ( LUA_UpdateTransferResources( & 0 & , & 0 & , & side_resources_delivered [ i ] [ 3 ] & + & team_siberite_stocked [ Side_Teams [ i ] ] & , & victory_cond & , & side_order_type [ i ] & ); ) ;
18181: LD_STRING LUA_UpdateTransferResources(
18183: PUSH
18184: LD_INT 0
18186: STR
18187: PUSH
18188: LD_STRING ,
18190: STR
18191: PUSH
18192: LD_INT 0
18194: STR
18195: PUSH
18196: LD_STRING ,
18198: STR
18199: PUSH
18200: LD_EXP 60
18204: PUSH
18205: LD_VAR 0 2
18209: ARRAY
18210: PUSH
18211: LD_INT 3
18213: ARRAY
18214: STR
18215: PUSH
18216: LD_STRING +
18218: STR
18219: PUSH
18220: LD_EXP 61
18224: PUSH
18225: LD_EXP 5
18229: PUSH
18230: LD_VAR 0 2
18234: ARRAY
18235: ARRAY
18236: STR
18237: PUSH
18238: LD_STRING ,
18240: STR
18241: PUSH
18242: LD_EXP 27
18246: STR
18247: PUSH
18248: LD_STRING ,
18250: STR
18251: PUSH
18252: LD_EXP 68
18256: PUSH
18257: LD_VAR 0 2
18261: ARRAY
18262: STR
18263: PUSH
18264: LD_STRING );
18266: STR
18267: PPUSH
18268: CALL_OW 559
// if side_resources_delivered [ i ] [ 1 ] >= side_pending_order [ i ] [ 1 ] and side_resources_delivered [ i ] [ 2 ] >= side_pending_order [ i ] [ 2 ] and side_resources_delivered [ i ] [ 3 ] >= side_pending_order [ i ] [ 3 ] and i = Your_Side then
18272: LD_EXP 60
18276: PUSH
18277: LD_VAR 0 2
18281: ARRAY
18282: PUSH
18283: LD_INT 1
18285: ARRAY
18286: PUSH
18287: LD_EXP 59
18291: PUSH
18292: LD_VAR 0 2
18296: ARRAY
18297: PUSH
18298: LD_INT 1
18300: ARRAY
18301: GREATEREQUAL
18302: PUSH
18303: LD_EXP 60
18307: PUSH
18308: LD_VAR 0 2
18312: ARRAY
18313: PUSH
18314: LD_INT 2
18316: ARRAY
18317: PUSH
18318: LD_EXP 59
18322: PUSH
18323: LD_VAR 0 2
18327: ARRAY
18328: PUSH
18329: LD_INT 2
18331: ARRAY
18332: GREATEREQUAL
18333: AND
18334: PUSH
18335: LD_EXP 60
18339: PUSH
18340: LD_VAR 0 2
18344: ARRAY
18345: PUSH
18346: LD_INT 3
18348: ARRAY
18349: PUSH
18350: LD_EXP 59
18354: PUSH
18355: LD_VAR 0 2
18359: ARRAY
18360: PUSH
18361: LD_INT 3
18363: ARRAY
18364: GREATEREQUAL
18365: AND
18366: PUSH
18367: LD_VAR 0 2
18371: PUSH
18372: LD_OWVAR 2
18376: EQUAL
18377: AND
18378: IFFALSE 18414
// begin if side_order_type [ i ] = 3 then
18380: LD_EXP 68
18384: PUSH
18385: LD_VAR 0 2
18389: ARRAY
18390: PUSH
18391: LD_INT 3
18393: EQUAL
18394: IFFALSE 18405
// ToLua ( LUA_CanSendShipment(); ) else
18396: LD_STRING LUA_CanSendShipment();
18398: PPUSH
18399: CALL_OW 559
18403: GO 18412
// ToLua ( LUA_AutomaticSend(); ) ;
18405: LD_STRING LUA_AutomaticSend();
18407: PPUSH
18408: CALL_OW 559
// end else
18412: GO 18433
// if i = Your_Side then
18414: LD_VAR 0 2
18418: PUSH
18419: LD_OWVAR 2
18423: EQUAL
18424: IFFALSE 18433
// ToLua ( LUA_CannotSendShipment(); ) ;
18426: LD_STRING LUA_CannotSendShipment();
18428: PPUSH
18429: CALL_OW 559
// end ; end ;
18433: GO 17625
18435: POP
18436: POP
// end ;
18437: LD_VAR 0 1
18441: RET
// export function CYCLIC_FinalizeTransfer ( side , in1 , in2 , in3 ) ; var human , i , bulk , crates , oil , siberite ; begin
18442: LD_INT 0
18444: PPUSH
18445: PPUSH
18446: PPUSH
18447: PPUSH
18448: PPUSH
18449: PPUSH
18450: PPUSH
// SetCargo ( side_units_outside [ side ] , mat_cans , 0 ) ;
18451: LD_EXP 67
18455: PUSH
18456: LD_VAR 0 1
18460: ARRAY
18461: PPUSH
18462: LD_INT 1
18464: PPUSH
18465: LD_INT 0
18467: PPUSH
18468: CALL_OW 290
// crates := in1 ;
18472: LD_ADDR_VAR 0 9
18476: PUSH
18477: LD_VAR 0 2
18481: ST_TO_ADDR
// oil := in2 ;
18482: LD_ADDR_VAR 0 10
18486: PUSH
18487: LD_VAR 0 3
18491: ST_TO_ADDR
// siberite := in3 ;
18492: LD_ADDR_VAR 0 11
18496: PUSH
18497: LD_VAR 0 4
18501: ST_TO_ADDR
// case side_order_type [ side ] of 1 :
18502: LD_EXP 68
18506: PUSH
18507: LD_VAR 0 1
18511: ARRAY
18512: PUSH
18513: LD_INT 1
18515: DOUBLE
18516: EQUAL
18517: IFTRUE 18521
18519: GO 19039
18521: POP
// begin for i = 1 to side_reinforcement_amount [ side ] do
18522: LD_ADDR_VAR 0 7
18526: PUSH
18527: DOUBLE
18528: LD_INT 1
18530: DEC
18531: ST_TO_ADDR
18532: LD_EXP 57
18536: PUSH
18537: LD_VAR 0 1
18541: ARRAY
18542: PUSH
18543: FOR_TO
18544: IFFALSE 18868
// begin new_character_reinforcements := [ 0 , 1 , [ Rand ( 8 , 12 ) , Rand ( 8 , 12 ) ] , [ 0 , 0 , 0 , 0 ] , [ Rand ( 0 , experience ) , Rand ( 0 , experience ) , Rand ( 0 , experience ) , Rand ( 0 , experience ) ] , 0 ] ;
18546: LD_ADDR_EXP 45
18550: PUSH
18551: LD_INT 0
18553: PUSH
18554: LD_INT 1
18556: PUSH
18557: LD_INT 8
18559: PPUSH
18560: LD_INT 12
18562: PPUSH
18563: CALL_OW 12
18567: PUSH
18568: LD_INT 8
18570: PPUSH
18571: LD_INT 12
18573: PPUSH
18574: CALL_OW 12
18578: PUSH
18579: EMPTY
18580: LIST
18581: LIST
18582: PUSH
18583: LD_INT 0
18585: PUSH
18586: LD_INT 0
18588: PUSH
18589: LD_INT 0
18591: PUSH
18592: LD_INT 0
18594: PUSH
18595: EMPTY
18596: LIST
18597: LIST
18598: LIST
18599: LIST
18600: PUSH
18601: LD_INT 0
18603: PPUSH
18604: LD_EXP 20
18608: PPUSH
18609: CALL_OW 12
18613: PUSH
18614: LD_INT 0
18616: PPUSH
18617: LD_EXP 20
18621: PPUSH
18622: CALL_OW 12
18626: PUSH
18627: LD_INT 0
18629: PPUSH
18630: LD_EXP 20
18634: PPUSH
18635: CALL_OW 12
18639: PUSH
18640: LD_INT 0
18642: PPUSH
18643: LD_EXP 20
18647: PPUSH
18648: CALL_OW 12
18652: PUSH
18653: EMPTY
18654: LIST
18655: LIST
18656: LIST
18657: LIST
18658: PUSH
18659: LD_INT 0
18661: PUSH
18662: EMPTY
18663: LIST
18664: LIST
18665: LIST
18666: LIST
18667: LIST
18668: LIST
18669: ST_TO_ADDR
// human := PrepareCharacters ( side , [ Rand ( 0 , 5 ) , Rand ( 0 , 5 ) , Rand ( 0 , 5 ) , Rand ( 0 , 5 ) , Rand ( 0 , 5 ) , Rand ( 0 , 5 ) , Rand ( 0 , 5 ) , Rand ( 0 , 5 ) ] , new_character_reinforcements ) ;
18670: LD_ADDR_VAR 0 6
18674: PUSH
18675: LD_VAR 0 1
18679: PPUSH
18680: LD_INT 0
18682: PPUSH
18683: LD_INT 5
18685: PPUSH
18686: CALL_OW 12
18690: PUSH
18691: LD_INT 0
18693: PPUSH
18694: LD_INT 5
18696: PPUSH
18697: CALL_OW 12
18701: PUSH
18702: LD_INT 0
18704: PPUSH
18705: LD_INT 5
18707: PPUSH
18708: CALL_OW 12
18712: PUSH
18713: LD_INT 0
18715: PPUSH
18716: LD_INT 5
18718: PPUSH
18719: CALL_OW 12
18723: PUSH
18724: LD_INT 0
18726: PPUSH
18727: LD_INT 5
18729: PPUSH
18730: CALL_OW 12
18734: PUSH
18735: LD_INT 0
18737: PPUSH
18738: LD_INT 5
18740: PPUSH
18741: CALL_OW 12
18745: PUSH
18746: LD_INT 0
18748: PPUSH
18749: LD_INT 5
18751: PPUSH
18752: CALL_OW 12
18756: PUSH
18757: LD_INT 0
18759: PPUSH
18760: LD_INT 5
18762: PPUSH
18763: CALL_OW 12
18767: PUSH
18768: EMPTY
18769: LIST
18770: LIST
18771: LIST
18772: LIST
18773: LIST
18774: LIST
18775: LIST
18776: LIST
18777: PPUSH
18778: LD_EXP 45
18782: PPUSH
18783: CALL 6499 0 3
18787: ST_TO_ADDR
// side_soldiers := Replace ( side_soldiers , side , side_soldiers [ side ] ^ human ) ;
18788: LD_ADDR_EXP 46
18792: PUSH
18793: LD_EXP 46
18797: PPUSH
18798: LD_VAR 0 1
18802: PPUSH
18803: LD_EXP 46
18807: PUSH
18808: LD_VAR 0 1
18812: ARRAY
18813: PUSH
18814: LD_VAR 0 6
18818: ADD
18819: PPUSH
18820: CALL_OW 1
18824: ST_TO_ADDR
// PlaceUnitArea ( human , team_transfer_zones [ Side_Teams [ side ] ] [ side_chosen_zone [ side ] ] , false ) ;
18825: LD_VAR 0 6
18829: PPUSH
18830: LD_EXP 62
18834: PUSH
18835: LD_EXP 5
18839: PUSH
18840: LD_VAR 0 1
18844: ARRAY
18845: ARRAY
18846: PUSH
18847: LD_EXP 64
18851: PUSH
18852: LD_VAR 0 1
18856: ARRAY
18857: ARRAY
18858: PPUSH
18859: LD_INT 0
18861: PPUSH
18862: CALL_OW 49
// end ;
18866: GO 18543
18868: POP
18869: POP
// for i in side_units_outside [ side ] do
18870: LD_ADDR_VAR 0 7
18874: PUSH
18875: LD_EXP 67
18879: PUSH
18880: LD_VAR 0 1
18884: ARRAY
18885: PUSH
18886: FOR_IN
18887: IFFALSE 19035
// begin bulk := FillUpVehicles ( i , crates , oil , siberite ) ;
18889: LD_ADDR_VAR 0 8
18893: PUSH
18894: LD_VAR 0 7
18898: PPUSH
18899: LD_VAR 0 9
18903: PPUSH
18904: LD_VAR 0 10
18908: PPUSH
18909: LD_VAR 0 11
18913: PPUSH
18914: CALL 11154 0 4
18918: ST_TO_ADDR
// crates := bulk [ 2 ] ;
18919: LD_ADDR_VAR 0 9
18923: PUSH
18924: LD_VAR 0 8
18928: PUSH
18929: LD_INT 2
18931: ARRAY
18932: ST_TO_ADDR
// oil := bulk [ 3 ] ;
18933: LD_ADDR_VAR 0 10
18937: PUSH
18938: LD_VAR 0 8
18942: PUSH
18943: LD_INT 3
18945: ARRAY
18946: ST_TO_ADDR
// siberite := bulk [ 4 ] ;
18947: LD_ADDR_VAR 0 11
18951: PUSH
18952: LD_VAR 0 8
18956: PUSH
18957: LD_INT 4
18959: ARRAY
18960: ST_TO_ADDR
// SetDir ( i , RotateUnit ( GetDir ( i ) , 3 ) ) ;
18961: LD_VAR 0 7
18965: PPUSH
18966: LD_VAR 0 7
18970: PPUSH
18971: CALL_OW 254
18975: PPUSH
18976: LD_INT 3
18978: PPUSH
18979: CALL 11436 0 2
18983: PPUSH
18984: CALL_OW 233
// PlaceUnitArea ( bulk [ 1 ] , team_transfer_zones [ Side_Teams [ side ] ] [ side_chosen_zone [ side ] ] , false ) ;
18988: LD_VAR 0 8
18992: PUSH
18993: LD_INT 1
18995: ARRAY
18996: PPUSH
18997: LD_EXP 62
19001: PUSH
19002: LD_EXP 5
19006: PUSH
19007: LD_VAR 0 1
19011: ARRAY
19012: ARRAY
19013: PUSH
19014: LD_EXP 64
19018: PUSH
19019: LD_VAR 0 1
19023: ARRAY
19024: ARRAY
19025: PPUSH
19026: LD_INT 0
19028: PPUSH
19029: CALL_OW 49
// end ;
19033: GO 18886
19035: POP
19036: POP
// end ; 2 :
19037: GO 19708
19039: LD_INT 2
19041: DOUBLE
19042: EQUAL
19043: IFTRUE 19047
19045: GO 19371
19047: POP
// begin side_tech_lvl := Replace ( side_tech_lvl , side , side_tech_lvl [ side ] + 1 ) ;
19048: LD_ADDR_EXP 31
19052: PUSH
19053: LD_EXP 31
19057: PPUSH
19058: LD_VAR 0 1
19062: PPUSH
19063: LD_EXP 31
19067: PUSH
19068: LD_VAR 0 1
19072: ARRAY
19073: PUSH
19074: LD_INT 1
19076: PLUS
19077: PPUSH
19078: CALL_OW 1
19082: ST_TO_ADDR
// TechUpgrade ( side_tech_lvl [ side ] , Side_Nations [ side ] , side ) ;
19083: LD_EXP 31
19087: PUSH
19088: LD_VAR 0 1
19092: ARRAY
19093: PPUSH
19094: LD_EXP 3
19098: PUSH
19099: LD_VAR 0 1
19103: ARRAY
19104: PPUSH
19105: LD_VAR 0 1
19109: PPUSH
19110: CALL 7860 0 3
// if side = Your_Side then
19114: LD_VAR 0 1
19118: PUSH
19119: LD_OWVAR 2
19123: EQUAL
19124: IFFALSE 19159
// ToLua ( LUA_UpdateSideInterface( & side & , & side_tech_lvl [ side ] & ); ) ;
19126: LD_STRING LUA_UpdateSideInterface(
19128: PUSH
19129: LD_VAR 0 1
19133: STR
19134: PUSH
19135: LD_STRING ,
19137: STR
19138: PUSH
19139: LD_EXP 31
19143: PUSH
19144: LD_VAR 0 1
19148: ARRAY
19149: STR
19150: PUSH
19151: LD_STRING );
19153: STR
19154: PPUSH
19155: CALL_OW 559
// ToLua ( LUA_UpdateSpecInterface( & side & , & side & , & side_tech_lvl [ side ] & ); ) ;
19159: LD_STRING LUA_UpdateSpecInterface(
19161: PUSH
19162: LD_VAR 0 1
19166: STR
19167: PUSH
19168: LD_STRING ,
19170: STR
19171: PUSH
19172: LD_VAR 0 1
19176: STR
19177: PUSH
19178: LD_STRING ,
19180: STR
19181: PUSH
19182: LD_EXP 31
19186: PUSH
19187: LD_VAR 0 1
19191: ARRAY
19192: STR
19193: PUSH
19194: LD_STRING );
19196: STR
19197: PPUSH
19198: CALL_OW 559
// for i in side_units_outside [ side ] do
19202: LD_ADDR_VAR 0 7
19206: PUSH
19207: LD_EXP 67
19211: PUSH
19212: LD_VAR 0 1
19216: ARRAY
19217: PUSH
19218: FOR_IN
19219: IFFALSE 19367
// begin bulk := FillUpVehicles ( i , crates , oil , siberite ) ;
19221: LD_ADDR_VAR 0 8
19225: PUSH
19226: LD_VAR 0 7
19230: PPUSH
19231: LD_VAR 0 9
19235: PPUSH
19236: LD_VAR 0 10
19240: PPUSH
19241: LD_VAR 0 11
19245: PPUSH
19246: CALL 11154 0 4
19250: ST_TO_ADDR
// crates := bulk [ 2 ] ;
19251: LD_ADDR_VAR 0 9
19255: PUSH
19256: LD_VAR 0 8
19260: PUSH
19261: LD_INT 2
19263: ARRAY
19264: ST_TO_ADDR
// oil := bulk [ 3 ] ;
19265: LD_ADDR_VAR 0 10
19269: PUSH
19270: LD_VAR 0 8
19274: PUSH
19275: LD_INT 3
19277: ARRAY
19278: ST_TO_ADDR
// siberite := bulk [ 4 ] ;
19279: LD_ADDR_VAR 0 11
19283: PUSH
19284: LD_VAR 0 8
19288: PUSH
19289: LD_INT 4
19291: ARRAY
19292: ST_TO_ADDR
// SetDir ( i , RotateUnit ( GetDir ( i ) , 3 ) ) ;
19293: LD_VAR 0 7
19297: PPUSH
19298: LD_VAR 0 7
19302: PPUSH
19303: CALL_OW 254
19307: PPUSH
19308: LD_INT 3
19310: PPUSH
19311: CALL 11436 0 2
19315: PPUSH
19316: CALL_OW 233
// PlaceUnitArea ( bulk [ 1 ] , team_transfer_zones [ Side_Teams [ side ] ] [ side_chosen_zone [ side ] ] , false ) ;
19320: LD_VAR 0 8
19324: PUSH
19325: LD_INT 1
19327: ARRAY
19328: PPUSH
19329: LD_EXP 62
19333: PUSH
19334: LD_EXP 5
19338: PUSH
19339: LD_VAR 0 1
19343: ARRAY
19344: ARRAY
19345: PUSH
19346: LD_EXP 64
19350: PUSH
19351: LD_VAR 0 1
19355: ARRAY
19356: ARRAY
19357: PPUSH
19358: LD_INT 0
19360: PPUSH
19361: CALL_OW 49
// end ;
19365: GO 19218
19367: POP
19368: POP
// end ; 3 :
19369: GO 19708
19371: LD_INT 3
19373: DOUBLE
19374: EQUAL
19375: IFTRUE 19379
19377: GO 19707
19379: POP
// begin team_siberite_stocked := Replace ( team_siberite_stocked , Side_Teams [ side ] , team_siberite_stocked [ Side_Teams [ side ] ] + siberite ) ;
19380: LD_ADDR_EXP 61
19384: PUSH
19385: LD_EXP 61
19389: PPUSH
19390: LD_EXP 5
19394: PUSH
19395: LD_VAR 0 1
19399: ARRAY
19400: PPUSH
19401: LD_EXP 61
19405: PUSH
19406: LD_EXP 5
19410: PUSH
19411: LD_VAR 0 1
19415: ARRAY
19416: ARRAY
19417: PUSH
19418: LD_VAR 0 11
19422: PLUS
19423: PPUSH
19424: CALL_OW 1
19428: ST_TO_ADDR
// siberite := 0 ;
19429: LD_ADDR_VAR 0 11
19433: PUSH
19434: LD_INT 0
19436: ST_TO_ADDR
// for i in side_units_outside [ side ] do
19437: LD_ADDR_VAR 0 7
19441: PUSH
19442: LD_EXP 67
19446: PUSH
19447: LD_VAR 0 1
19451: ARRAY
19452: PUSH
19453: FOR_IN
19454: IFFALSE 19602
// begin bulk := FillUpVehicles ( i , crates , oil , siberite ) ;
19456: LD_ADDR_VAR 0 8
19460: PUSH
19461: LD_VAR 0 7
19465: PPUSH
19466: LD_VAR 0 9
19470: PPUSH
19471: LD_VAR 0 10
19475: PPUSH
19476: LD_VAR 0 11
19480: PPUSH
19481: CALL 11154 0 4
19485: ST_TO_ADDR
// crates := bulk [ 2 ] ;
19486: LD_ADDR_VAR 0 9
19490: PUSH
19491: LD_VAR 0 8
19495: PUSH
19496: LD_INT 2
19498: ARRAY
19499: ST_TO_ADDR
// oil := bulk [ 3 ] ;
19500: LD_ADDR_VAR 0 10
19504: PUSH
19505: LD_VAR 0 8
19509: PUSH
19510: LD_INT 3
19512: ARRAY
19513: ST_TO_ADDR
// siberite := bulk [ 4 ] ;
19514: LD_ADDR_VAR 0 11
19518: PUSH
19519: LD_VAR 0 8
19523: PUSH
19524: LD_INT 4
19526: ARRAY
19527: ST_TO_ADDR
// SetDir ( i , RotateUnit ( GetDir ( i ) , 3 ) ) ;
19528: LD_VAR 0 7
19532: PPUSH
19533: LD_VAR 0 7
19537: PPUSH
19538: CALL_OW 254
19542: PPUSH
19543: LD_INT 3
19545: PPUSH
19546: CALL 11436 0 2
19550: PPUSH
19551: CALL_OW 233
// PlaceUnitArea ( bulk [ 1 ] , team_transfer_zones [ Side_Teams [ side ] ] [ side_chosen_zone [ side ] ] , false ) ;
19555: LD_VAR 0 8
19559: PUSH
19560: LD_INT 1
19562: ARRAY
19563: PPUSH
19564: LD_EXP 62
19568: PUSH
19569: LD_EXP 5
19573: PUSH
19574: LD_VAR 0 1
19578: ARRAY
19579: ARRAY
19580: PUSH
19581: LD_EXP 64
19585: PUSH
19586: LD_VAR 0 1
19590: ARRAY
19591: ARRAY
19592: PPUSH
19593: LD_INT 0
19595: PPUSH
19596: CALL_OW 49
// end ;
19600: GO 19453
19602: POP
19603: POP
// if side = Your_Side then
19604: LD_VAR 0 1
19608: PUSH
19609: LD_OWVAR 2
19613: EQUAL
19614: IFFALSE 19655
// ToLua ( LUA_UpdateSiberiteSent( & team_siberite_stocked [ Side_Teams [ side ] ] & , & victory_cond & ); ) ;
19616: LD_STRING LUA_UpdateSiberiteSent(
19618: PUSH
19619: LD_EXP 61
19623: PUSH
19624: LD_EXP 5
19628: PUSH
19629: LD_VAR 0 1
19633: ARRAY
19634: ARRAY
19635: STR
19636: PUSH
19637: LD_STRING ,
19639: STR
19640: PUSH
19641: LD_EXP 27
19645: STR
19646: PUSH
19647: LD_STRING );
19649: STR
19650: PPUSH
19651: CALL_OW 559
// ToLua ( LUA_UpdateSiberiteSpec( & team_siberite_stocked [ i ] & , & victory_cond & , & i & ); ) ;
19655: LD_STRING LUA_UpdateSiberiteSpec(
19657: PUSH
19658: LD_EXP 61
19662: PUSH
19663: LD_VAR 0 7
19667: ARRAY
19668: STR
19669: PUSH
19670: LD_STRING ,
19672: STR
19673: PUSH
19674: LD_EXP 27
19678: STR
19679: PUSH
19680: LD_STRING ,
19682: STR
19683: PUSH
19684: LD_VAR 0 7
19688: STR
19689: PUSH
19690: LD_STRING );
19692: STR
19693: PPUSH
19694: CALL_OW 559
// RaiseSailEvent ( 67 ) ;
19698: LD_INT 67
19700: PPUSH
19701: CALL_OW 427
// end ; end ;
19705: GO 19708
19707: POP
// if side = Your_Side then
19708: LD_VAR 0 1
19712: PUSH
19713: LD_OWVAR 2
19717: EQUAL
19718: IFFALSE 19727
// ToLua ( LUA_TransferFinished(); ) ;
19720: LD_STRING LUA_TransferFinished();
19722: PPUSH
19723: CALL_OW 559
// end ; end_of_file
19727: LD_VAR 0 5
19731: RET
// export ExtraStrings ; export WaitServerStrings ; export function ShowTimer ; var AllStrings ; begin
19732: LD_INT 0
19734: PPUSH
19735: PPUSH
// AllStrings := [ #Multi1x1-Time , tick ] ;
19736: LD_ADDR_VAR 0 2
19740: PUSH
19741: LD_STRING #Multi1x1-Time
19743: PUSH
19744: LD_OWVAR 1
19748: PUSH
19749: EMPTY
19750: LIST
19751: LIST
19752: ST_TO_ADDR
// if WaitServerStrings then
19753: LD_EXP 72
19757: IFFALSE 19775
// AllStrings = AllStrings ^ WaitServerStrings ;
19759: LD_ADDR_VAR 0 2
19763: PUSH
19764: LD_VAR 0 2
19768: PUSH
19769: LD_EXP 72
19773: ADD
19774: ST_TO_ADDR
// ExtraStrings :=  ;
19775: LD_ADDR_EXP 71
19779: PUSH
19780: LD_STRING 
19782: ST_TO_ADDR
// if ( ExtraStrings ) then
19783: LD_EXP 71
19787: IFFALSE 19809
// AllStrings := AllStrings ^  ^ ExtraStrings ;
19789: LD_ADDR_VAR 0 2
19793: PUSH
19794: LD_VAR 0 2
19798: PUSH
19799: LD_STRING 
19801: ADD
19802: PUSH
19803: LD_EXP 71
19807: ADD
19808: ST_TO_ADDR
// Display_Strings := AllStrings ;
19809: LD_ADDR_OWVAR 47
19813: PUSH
19814: LD_VAR 0 2
19818: ST_TO_ADDR
// end ; end_of_file
19819: LD_VAR 0 1
19823: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
19824: LD_INT 0
19826: PPUSH
19827: PPUSH
19828: PPUSH
19829: PPUSH
19830: PPUSH
19831: PPUSH
19832: PPUSH
19833: PPUSH
19834: PPUSH
// for i := 1 to 8 do
19835: LD_ADDR_VAR 0 2
19839: PUSH
19840: DOUBLE
19841: LD_INT 1
19843: DEC
19844: ST_TO_ADDR
19845: LD_INT 8
19847: PUSH
19848: FOR_TO
19849: IFFALSE 20233
// begin if Side_Positions [ i ] then
19851: LD_EXP 2
19855: PUSH
19856: LD_VAR 0 2
19860: ARRAY
19861: IFFALSE 20231
// begin people := FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) + 0 ;
19863: LD_ADDR_VAR 0 7
19867: PUSH
19868: LD_INT 22
19870: PUSH
19871: LD_VAR 0 2
19875: PUSH
19876: EMPTY
19877: LIST
19878: LIST
19879: PUSH
19880: LD_INT 21
19882: PUSH
19883: LD_INT 1
19885: PUSH
19886: EMPTY
19887: LIST
19888: LIST
19889: PUSH
19890: EMPTY
19891: LIST
19892: LIST
19893: PPUSH
19894: CALL_OW 69
19898: PUSH
19899: LD_INT 0
19901: PLUS
19902: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19903: LD_ADDR_VAR 0 9
19907: PUSH
19908: LD_INT 22
19910: PUSH
19911: LD_VAR 0 2
19915: PUSH
19916: EMPTY
19917: LIST
19918: LIST
19919: PUSH
19920: LD_INT 2
19922: PUSH
19923: LD_INT 30
19925: PUSH
19926: LD_INT 0
19928: PUSH
19929: EMPTY
19930: LIST
19931: LIST
19932: PUSH
19933: LD_INT 30
19935: PUSH
19936: LD_INT 1
19938: PUSH
19939: EMPTY
19940: LIST
19941: LIST
19942: PUSH
19943: EMPTY
19944: LIST
19945: LIST
19946: LIST
19947: PUSH
19948: EMPTY
19949: LIST
19950: LIST
19951: PPUSH
19952: CALL_OW 69
19956: ST_TO_ADDR
// crates := 0 ;
19957: LD_ADDR_VAR 0 4
19961: PUSH
19962: LD_INT 0
19964: ST_TO_ADDR
// oil := 0 ;
19965: LD_ADDR_VAR 0 5
19969: PUSH
19970: LD_INT 0
19972: ST_TO_ADDR
// sib := 0 ;
19973: LD_ADDR_VAR 0 6
19977: PUSH
19978: LD_INT 0
19980: ST_TO_ADDR
// if bases then
19981: LD_VAR 0 9
19985: IFFALSE 20091
// begin for j in bases do
19987: LD_ADDR_VAR 0 3
19991: PUSH
19992: LD_VAR 0 9
19996: PUSH
19997: FOR_IN
19998: IFFALSE 20089
// begin base := GetBase ( j ) ;
20000: LD_ADDR_VAR 0 8
20004: PUSH
20005: LD_VAR 0 3
20009: PPUSH
20010: CALL_OW 274
20014: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
20015: LD_ADDR_VAR 0 4
20019: PUSH
20020: LD_VAR 0 4
20024: PUSH
20025: LD_VAR 0 8
20029: PPUSH
20030: LD_INT 1
20032: PPUSH
20033: CALL_OW 275
20037: PLUS
20038: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
20039: LD_ADDR_VAR 0 5
20043: PUSH
20044: LD_VAR 0 5
20048: PUSH
20049: LD_VAR 0 8
20053: PPUSH
20054: LD_INT 2
20056: PPUSH
20057: CALL_OW 275
20061: PLUS
20062: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
20063: LD_ADDR_VAR 0 6
20067: PUSH
20068: LD_VAR 0 6
20072: PUSH
20073: LD_VAR 0 8
20077: PPUSH
20078: LD_INT 3
20080: PPUSH
20081: CALL_OW 275
20085: PLUS
20086: ST_TO_ADDR
// end ;
20087: GO 19997
20089: POP
20090: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
20091: LD_STRING setSpecText(
20093: PUSH
20094: LD_VAR 0 2
20098: STR
20099: PUSH
20100: LD_STRING ,
20102: STR
20103: PUSH
20104: LD_INT 2
20106: STR
20107: PUSH
20108: LD_STRING ,
20110: STR
20111: PUSH
20112: LD_VAR 0 4
20116: STR
20117: PUSH
20118: LD_STRING )
20120: STR
20121: PPUSH
20122: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
20126: LD_STRING setSpecText(
20128: PUSH
20129: LD_VAR 0 2
20133: STR
20134: PUSH
20135: LD_STRING ,
20137: STR
20138: PUSH
20139: LD_INT 3
20141: STR
20142: PUSH
20143: LD_STRING ,
20145: STR
20146: PUSH
20147: LD_VAR 0 5
20151: STR
20152: PUSH
20153: LD_STRING )
20155: STR
20156: PPUSH
20157: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
20161: LD_STRING setSpecText(
20163: PUSH
20164: LD_VAR 0 2
20168: STR
20169: PUSH
20170: LD_STRING ,
20172: STR
20173: PUSH
20174: LD_INT 4
20176: STR
20177: PUSH
20178: LD_STRING ,
20180: STR
20181: PUSH
20182: LD_VAR 0 6
20186: STR
20187: PUSH
20188: LD_STRING )
20190: STR
20191: PPUSH
20192: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
20196: LD_STRING setSpecText(
20198: PUSH
20199: LD_VAR 0 2
20203: STR
20204: PUSH
20205: LD_STRING ,
20207: STR
20208: PUSH
20209: LD_INT 5
20211: STR
20212: PUSH
20213: LD_STRING ,
20215: STR
20216: PUSH
20217: LD_VAR 0 7
20221: STR
20222: PUSH
20223: LD_STRING )
20225: STR
20226: PPUSH
20227: CALL_OW 559
// end ; end ;
20231: GO 19848
20233: POP
20234: POP
// end ;
20235: LD_VAR 0 1
20239: RET
// every 0 0$1 do
20240: GO 20242
20242: DISABLE
// begin ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
20243: LD_STRING setSpecLogoNumber(
20245: PUSH
20246: LD_INT 2
20248: STR
20249: PUSH
20250: LD_STRING ,
20252: STR
20253: PUSH
20254: LD_INT 1
20256: STR
20257: PUSH
20258: LD_STRING )
20260: STR
20261: PPUSH
20262: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
20266: LD_STRING setSpecLogoNumber(
20268: PUSH
20269: LD_INT 3
20271: STR
20272: PUSH
20273: LD_STRING ,
20275: STR
20276: PUSH
20277: LD_INT 2
20279: STR
20280: PUSH
20281: LD_STRING )
20283: STR
20284: PPUSH
20285: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
20289: LD_STRING setSpecLogoNumber(
20291: PUSH
20292: LD_INT 4
20294: STR
20295: PUSH
20296: LD_STRING ,
20298: STR
20299: PUSH
20300: LD_INT 3
20302: STR
20303: PUSH
20304: LD_STRING )
20306: STR
20307: PPUSH
20308: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
20312: LD_STRING setSpecLogoNumber(
20314: PUSH
20315: LD_INT 5
20317: STR
20318: PUSH
20319: LD_STRING ,
20321: STR
20322: PUSH
20323: LD_INT 4
20325: STR
20326: PUSH
20327: LD_STRING )
20329: STR
20330: PPUSH
20331: CALL_OW 559
// end ;
20335: END
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
20336: LD_INT 2
20338: PUSH
20339: LD_INT 30
20341: PUSH
20342: LD_INT 0
20344: PUSH
20345: EMPTY
20346: LIST
20347: LIST
20348: PUSH
20349: LD_INT 30
20351: PUSH
20352: LD_INT 1
20354: PUSH
20355: EMPTY
20356: LIST
20357: LIST
20358: PUSH
20359: EMPTY
20360: LIST
20361: LIST
20362: LIST
20363: PPUSH
20364: CALL_OW 69
20368: IFFALSE 20378
20370: GO 20372
20372: DISABLE
// begin enable ;
20373: ENABLE
// UpdateSpectatorBar ;
20374: CALL 19824 0 0
// end ; end_of_file
20378: END
// export function SA_OnSiberiteRocketExploded ( siberite_rocket_vehicle , target_x , target_y , requestSide ) ; begin
20379: LD_INT 0
20381: PPUSH
// if GetSide ( siberite_rocket_vehicle ) = requestSide then
20382: LD_VAR 0 1
20386: PPUSH
20387: CALL_OW 255
20391: PUSH
20392: LD_VAR 0 4
20396: EQUAL
20397: IFFALSE 20416
// begin SetAchievement ( ACH_RAD ) ;
20399: LD_STRING ACH_RAD
20401: PPUSH
20402: CALL_OW 543
// SetAchievementEx ( ACH_NL , 1 ) ;
20406: LD_STRING ACH_NL
20408: PPUSH
20409: LD_INT 1
20411: PPUSH
20412: CALL_OW 564
// end end ;
20416: LD_VAR 0 5
20420: RET
// export function SA_Win ( side ) ; begin
20421: LD_INT 0
20423: PPUSH
// case side of 1 :
20424: LD_VAR 0 1
20428: PUSH
20429: LD_INT 1
20431: DOUBLE
20432: EQUAL
20433: IFTRUE 20437
20435: GO 20450
20437: POP
// SetAchievementEx ( ACH_AH , 1 ) ; 2 :
20438: LD_STRING ACH_AH
20440: PPUSH
20441: LD_INT 1
20443: PPUSH
20444: CALL_OW 564
20448: GO 20613
20450: LD_INT 2
20452: DOUBLE
20453: EQUAL
20454: IFTRUE 20458
20456: GO 20471
20458: POP
// SetAchievementEx ( ACH_E , 1 ) ; 3 :
20459: LD_STRING ACH_E
20461: PPUSH
20462: LD_INT 1
20464: PPUSH
20465: CALL_OW 564
20469: GO 20613
20471: LD_INT 3
20473: DOUBLE
20474: EQUAL
20475: IFTRUE 20479
20477: GO 20492
20479: POP
// SetAchievementEx ( ACH_OOL , 1 ) ; [ 1 , 2 ] :
20480: LD_STRING ACH_OOL
20482: PPUSH
20483: LD_INT 1
20485: PPUSH
20486: CALL_OW 564
20490: GO 20613
20492: LD_INT 1
20494: PUSH
20495: LD_INT 2
20497: PUSH
20498: EMPTY
20499: LIST
20500: LIST
20501: DOUBLE
20502: EQUAL
20503: IFTRUE 20507
20505: GO 20532
20507: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
20508: LD_STRING ACH_AH
20510: PPUSH
20511: LD_REAL  5.00000000000000E-0001
20514: PPUSH
20515: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
20519: LD_STRING ACH_E
20521: PPUSH
20522: LD_REAL  5.00000000000000E-0001
20525: PPUSH
20526: CALL_OW 564
// end ; [ 2 , 3 ] :
20530: GO 20613
20532: LD_INT 2
20534: PUSH
20535: LD_INT 3
20537: PUSH
20538: EMPTY
20539: LIST
20540: LIST
20541: DOUBLE
20542: EQUAL
20543: IFTRUE 20547
20545: GO 20572
20547: POP
// begin SetAchievementEx ( ACH_OOL , 0.5 ) ;
20548: LD_STRING ACH_OOL
20550: PPUSH
20551: LD_REAL  5.00000000000000E-0001
20554: PPUSH
20555: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
20559: LD_STRING ACH_E
20561: PPUSH
20562: LD_REAL  5.00000000000000E-0001
20565: PPUSH
20566: CALL_OW 564
// end ; [ 3 , 1 ] :
20570: GO 20613
20572: LD_INT 3
20574: PUSH
20575: LD_INT 1
20577: PUSH
20578: EMPTY
20579: LIST
20580: LIST
20581: DOUBLE
20582: EQUAL
20583: IFTRUE 20587
20585: GO 20612
20587: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
20588: LD_STRING ACH_AH
20590: PPUSH
20591: LD_REAL  5.00000000000000E-0001
20594: PPUSH
20595: CALL_OW 564
// SetAchievementEx ( ACH_OOL , 0.5 ) ;
20599: LD_STRING ACH_OOL
20601: PPUSH
20602: LD_REAL  5.00000000000000E-0001
20605: PPUSH
20606: CALL_OW 564
// end ; end ;
20610: GO 20613
20612: POP
// end ;
20613: LD_VAR 0 2
20617: RET
