// starting begin mp_selectmsg := true ;
   0: LD_ADDR_OWVAR 13
   4: PUSH
   5: LD_INT 1
   7: ST_TO_ADDR
// INIT_LoadMapParams ;
   8: CALL 4292 0 0
// INIT_LoadGameParams ;
  12: CALL 451 0 0
// INIT_ApplyGameParams ;
  16: CALL 1010 0 0
// INIT_GenerateDeposits ;
  20: CALL 1483 0 0
// INIT_SetUpAllies ;
  24: CALL 2049 0 0
// INIT_SetUpTechs ;
  28: CALL 2251 0 0
// INIT_PrepareSquad ;
  32: CALL 2850 0 0
// INIT_SpawnStartingUnits ;
  36: CALL 3462 0 0
// INIT_CameraFocus ;
  40: CALL 4230 0 0
// INIT_ActivateLUAInterface ;
  44: CALL 2339 0 0
// if Your_Side >= 1 and Your_Side <= 8 then
  48: LD_OWVAR 2
  52: PUSH
  53: LD_INT 1
  55: GREATEREQUAL
  56: PUSH
  57: LD_OWVAR 2
  61: PUSH
  62: LD_INT 8
  64: LESSEQUAL
  65: AND
  66: IFFALSE 84
// music_nat := Side_Nations [ Your_Side ] ;
  68: LD_ADDR_OWVAR 71
  72: PUSH
  73: LD_EXP 3
  77: PUSH
  78: LD_OWVAR 2
  82: ARRAY
  83: ST_TO_ADDR
// end ;
  84: END
// every 0 0$1 do
  85: GO 87
  87: DISABLE
// begin ShowTimer ;
  88: CALL 19738 0 0
// enable ;
  92: ENABLE
// end ;
  93: END
// every 0 0$3 trigger Multiplayer do
  94: LD_OWVAR 4
  98: IFFALSE 108
 100: GO 102
 102: DISABLE
// begin CheckPlayerPresence ;
 103: CALL 7038 0 0
// enable ;
 107: ENABLE
// end ;
 108: END
// every 0 0$1 trigger tick >= CLOCK_fluctuation and spawn_fluctuation <> 0 do
 109: LD_OWVAR 1
 113: PUSH
 114: LD_EXP 53
 118: GREATEREQUAL
 119: PUSH
 120: LD_EXP 24
 124: PUSH
 125: LD_INT 0
 127: NONEQUAL
 128: AND
 129: IFFALSE 155
 131: GO 133
 133: DISABLE
// begin enable ;
 134: ENABLE
// CLOCK_fluctuation := CLOCK_fluctuation + spawn_fluctuation ;
 135: LD_ADDR_EXP 53
 139: PUSH
 140: LD_EXP 53
 144: PUSH
 145: LD_EXP 24
 149: PLUS
 150: ST_TO_ADDR
// CYCLIC_Fluctuation ;
 151: CALL 17398 0 0
// end ;
 155: END
// every 0 0$1 trigger tick >= CLOCK_crate_spawn do
 156: LD_OWVAR 1
 160: PUSH
 161: LD_EXP 51
 165: GREATEREQUAL
 166: IFFALSE 198
 168: GO 170
 170: DISABLE
// begin enable ;
 171: ENABLE
// CLOCK_crate_spawn := CLOCK_crate_spawn + crate_spawn_rate + fluctuation_modifier_crates ;
 172: LD_ADDR_EXP 51
 176: PUSH
 177: LD_EXP 51
 181: PUSH
 182: LD_EXP 22
 186: PLUS
 187: PUSH
 188: LD_EXP 39
 192: PLUS
 193: ST_TO_ADDR
// CYCLIC_CrateSpawn ;
 194: CALL 15915 0 0
// end ;
 198: END
// every 0 0$1 trigger tick >= CLOCK_human_spawn and people_spawn_rate <> 0 do
 199: LD_OWVAR 1
 203: PUSH
 204: LD_EXP 52
 208: GREATEREQUAL
 209: PUSH
 210: LD_EXP 23
 214: PUSH
 215: LD_INT 0
 217: NONEQUAL
 218: AND
 219: IFFALSE 251
 221: GO 223
 223: DISABLE
// begin enable ;
 224: ENABLE
// CLOCK_human_spawn := CLOCK_human_spawn + people_spawn_rate + fluctuation_modifier_humans ;
 225: LD_ADDR_EXP 52
 229: PUSH
 230: LD_EXP 52
 234: PUSH
 235: LD_EXP 23
 239: PLUS
 240: PUSH
 241: LD_EXP 40
 245: PLUS
 246: ST_TO_ADDR
// CYCLIC_HumanSpawn ;
 247: CALL 16095 0 0
// end ;
 251: END
// every 0 0$1 trigger 1 in side_zone_locked do
 252: LD_INT 1
 254: PUSH
 255: LD_EXP 65
 259: IN
 260: IFFALSE 270
 262: GO 264
 264: DISABLE
// begin CYCLIC_CheckTransportsInZones ;
 265: CALL 17571 0 0
// enable ;
 269: ENABLE
// end ;
 270: END
// every 0 0$1 trigger 1 in side_transfer_pending do var i , remaining ;
 271: LD_INT 1
 273: PUSH
 274: LD_EXP 70
 278: IN
 279: IFFALSE 448
 281: GO 283
 283: DISABLE
 284: LD_INT 0
 286: PPUSH
 287: PPUSH
// begin for i = 1 to 8 do
 288: LD_ADDR_VAR 0 1
 292: PUSH
 293: DOUBLE
 294: LD_INT 1
 296: DEC
 297: ST_TO_ADDR
 298: LD_INT 8
 300: PUSH
 301: FOR_TO
 302: IFFALSE 445
// begin if side_transfer_pending [ i ] = 1 then
 304: LD_EXP 70
 308: PUSH
 309: LD_VAR 0 1
 313: ARRAY
 314: PUSH
 315: LD_INT 1
 317: EQUAL
 318: IFFALSE 443
// begin remaining := side_transfer_clocks [ i ] - tick ;
 320: LD_ADDR_VAR 0 2
 324: PUSH
 325: LD_EXP 66
 329: PUSH
 330: LD_VAR 0 1
 334: ARRAY
 335: PUSH
 336: LD_OWVAR 1
 340: MINUS
 341: ST_TO_ADDR
// if tick >= side_transfer_clocks [ i ] then
 342: LD_OWVAR 1
 346: PUSH
 347: LD_EXP 66
 351: PUSH
 352: LD_VAR 0 1
 356: ARRAY
 357: GREATEREQUAL
 358: IFFALSE 414
// CYCLIC_FinalizeTransfer ( i , side_resources_remaining [ i ] [ 1 ] , side_resources_remaining [ i ] [ 2 ] , side_resources_remaining [ i ] [ 3 ] ) ;
 360: LD_VAR 0 1
 364: PPUSH
 365: LD_EXP 69
 369: PUSH
 370: LD_VAR 0 1
 374: ARRAY
 375: PUSH
 376: LD_INT 1
 378: ARRAY
 379: PPUSH
 380: LD_EXP 69
 384: PUSH
 385: LD_VAR 0 1
 389: ARRAY
 390: PUSH
 391: LD_INT 2
 393: ARRAY
 394: PPUSH
 395: LD_EXP 69
 399: PUSH
 400: LD_VAR 0 1
 404: ARRAY
 405: PUSH
 406: LD_INT 3
 408: ARRAY
 409: PPUSH
 410: CALL 18406 0 4
// if i = Your_Side then
 414: LD_VAR 0 1
 418: PUSH
 419: LD_OWVAR 2
 423: EQUAL
 424: IFFALSE 443
// ToLua ( LUA_UpdateClock( & remaining & ); ) ;
 426: LD_STRING LUA_UpdateClock(
 428: PUSH
 429: LD_VAR 0 2
 433: STR
 434: PUSH
 435: LD_STRING );
 437: STR
 438: PPUSH
 439: CALL_OW 559
// end ; end ;
 443: GO 301
 445: POP
 446: POP
// enable ;
 447: ENABLE
// end ; end_of_file
 448: PPOPN 2
 450: END
// export function INIT_LoadGameParams ; begin
 451: LD_INT 0
 453: PPUSH
// if Multiplayer then
 454: LD_OWVAR 4
 458: IFFALSE 688
// begin Game_Type := mp_game_type ;
 460: LD_ADDR_EXP 1
 464: PUSH
 465: LD_OWVAR 6
 469: ST_TO_ADDR
// Your_Side := mp_player_side ;
 470: LD_ADDR_OWVAR 2
 474: PUSH
 475: LD_OWVAR 7
 479: ST_TO_ADDR
// Side_Positions := mp_sides_positions ;
 480: LD_ADDR_EXP 2
 484: PUSH
 485: LD_OWVAR 17
 489: ST_TO_ADDR
// Side_Nations := mp_sides_nations ;
 490: LD_ADDR_EXP 3
 494: PUSH
 495: LD_OWVAR 16
 499: ST_TO_ADDR
// Side_Comps := mp_sides_comps ;
 500: LD_ADDR_EXP 4
 504: PUSH
 505: CALL 6354 0 0
 509: ST_TO_ADDR
// Side_Teams := mp_sides_teams ;
 510: LD_ADDR_EXP 5
 514: PUSH
 515: LD_OWVAR 15
 519: ST_TO_ADDR
// Teams := mp_teams ;
 520: LD_ADDR_EXP 6
 524: PUSH
 525: LD_OWVAR 12
 529: ST_TO_ADDR
// Choice_people_num := GetMultiplayerSetting ( 0 ) ;
 530: LD_ADDR_EXP 7
 534: PUSH
 535: LD_INT 0
 537: PPUSH
 538: CALL_OW 426
 542: ST_TO_ADDR
// Choice_experience := GetMultiplayerSetting ( 1 ) ;
 543: LD_ADDR_EXP 8
 547: PUSH
 548: LD_INT 1
 550: PPUSH
 551: CALL_OW 426
 555: ST_TO_ADDR
// Choice_starting_resources := GetMultiplayerSetting ( 2 ) ;
 556: LD_ADDR_EXP 9
 560: PUSH
 561: LD_INT 2
 563: PPUSH
 564: CALL_OW 426
 568: ST_TO_ADDR
// Choice_crate_spawn_rate := GetMultiplayerSetting ( 3 ) ;
 569: LD_ADDR_EXP 10
 573: PUSH
 574: LD_INT 3
 576: PPUSH
 577: CALL_OW 426
 581: ST_TO_ADDR
// Choice_people_spawn_rate := GetMultiplayerSetting ( 4 ) ;
 582: LD_ADDR_EXP 11
 586: PUSH
 587: LD_INT 4
 589: PPUSH
 590: CALL_OW 426
 594: ST_TO_ADDR
// Choice_spawn_fluctuation := GetMultiplayerSetting ( 5 ) ;
 595: LD_ADDR_EXP 12
 599: PUSH
 600: LD_INT 5
 602: PPUSH
 603: CALL_OW 426
 607: ST_TO_ADDR
// Choice_oil_abundance := GetMultiplayerSetting ( 6 ) ;
 608: LD_ADDR_EXP 13
 612: PUSH
 613: LD_INT 6
 615: PPUSH
 616: CALL_OW 426
 620: ST_TO_ADDR
// Choice_sib_abundance := GetMultiplayerSetting ( 7 ) ;
 621: LD_ADDR_EXP 14
 625: PUSH
 626: LD_INT 7
 628: PPUSH
 629: CALL_OW 426
 633: ST_TO_ADDR
// Choice_victory_cond := GetMultiplayerSetting ( 8 ) ;
 634: LD_ADDR_EXP 15
 638: PUSH
 639: LD_INT 8
 641: PPUSH
 642: CALL_OW 426
 646: ST_TO_ADDR
// Choice_reinforce_cost := GetMultiplayerSetting ( 9 ) ;
 647: LD_ADDR_EXP 16
 651: PUSH
 652: LD_INT 9
 654: PPUSH
 655: CALL_OW 426
 659: ST_TO_ADDR
// Choice_black_FoW := GetMultiplayerSetting ( 10 ) ;
 660: LD_ADDR_EXP 17
 664: PUSH
 665: LD_INT 10
 667: PPUSH
 668: CALL_OW 426
 672: ST_TO_ADDR
// Choice_starting_tech_lvl := GetMultiplayerSetting ( 11 ) ;
 673: LD_ADDR_EXP 18
 677: PUSH
 678: LD_INT 11
 680: PPUSH
 681: CALL_OW 426
 685: ST_TO_ADDR
// end else
 686: GO 1005
// begin RandomizeAll ;
 688: CALL_OW 11
// Game_Type := 1 ;
 692: LD_ADDR_EXP 1
 696: PUSH
 697: LD_INT 1
 699: ST_TO_ADDR
// Your_Side := 9 ;
 700: LD_ADDR_OWVAR 2
 704: PUSH
 705: LD_INT 9
 707: ST_TO_ADDR
// Side_Positions := [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] ;
 708: LD_ADDR_EXP 2
 712: PUSH
 713: LD_INT 1
 715: PUSH
 716: LD_INT 2
 718: PUSH
 719: LD_INT 3
 721: PUSH
 722: LD_INT 4
 724: PUSH
 725: LD_INT 5
 727: PUSH
 728: LD_INT 6
 730: PUSH
 731: LD_INT 7
 733: PUSH
 734: LD_INT 8
 736: PUSH
 737: EMPTY
 738: LIST
 739: LIST
 740: LIST
 741: LIST
 742: LIST
 743: LIST
 744: LIST
 745: LIST
 746: ST_TO_ADDR
// Side_Nations := [ 1 , 2 , 3 , 1 , 2 , 3 , 1 , 2 ] ;
 747: LD_ADDR_EXP 3
 751: PUSH
 752: LD_INT 1
 754: PUSH
 755: LD_INT 2
 757: PUSH
 758: LD_INT 3
 760: PUSH
 761: LD_INT 1
 763: PUSH
 764: LD_INT 2
 766: PUSH
 767: LD_INT 3
 769: PUSH
 770: LD_INT 1
 772: PUSH
 773: LD_INT 2
 775: PUSH
 776: EMPTY
 777: LIST
 778: LIST
 779: LIST
 780: LIST
 781: LIST
 782: LIST
 783: LIST
 784: LIST
 785: ST_TO_ADDR
// Side_Comps := [ 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 ] ;
 786: LD_ADDR_EXP 4
 790: PUSH
 791: LD_INT 1
 793: PUSH
 794: LD_INT 1
 796: PUSH
 797: LD_INT 1
 799: PUSH
 800: LD_INT 1
 802: PUSH
 803: LD_INT 1
 805: PUSH
 806: LD_INT 1
 808: PUSH
 809: LD_INT 1
 811: PUSH
 812: LD_INT 1
 814: PUSH
 815: EMPTY
 816: LIST
 817: LIST
 818: LIST
 819: LIST
 820: LIST
 821: LIST
 822: LIST
 823: LIST
 824: ST_TO_ADDR
// Side_Teams := [ 1 , 1 , 1 , 1 , 2 , 2 , 2 , 2 ] ;
 825: LD_ADDR_EXP 5
 829: PUSH
 830: LD_INT 1
 832: PUSH
 833: LD_INT 1
 835: PUSH
 836: LD_INT 1
 838: PUSH
 839: LD_INT 1
 841: PUSH
 842: LD_INT 2
 844: PUSH
 845: LD_INT 2
 847: PUSH
 848: LD_INT 2
 850: PUSH
 851: LD_INT 2
 853: PUSH
 854: EMPTY
 855: LIST
 856: LIST
 857: LIST
 858: LIST
 859: LIST
 860: LIST
 861: LIST
 862: LIST
 863: ST_TO_ADDR
// Teams := [ [ 1 , 2 , 3 , 4 ] , [ 5 , 6 , 7 , 8 ] ] ;
 864: LD_ADDR_EXP 6
 868: PUSH
 869: LD_INT 1
 871: PUSH
 872: LD_INT 2
 874: PUSH
 875: LD_INT 3
 877: PUSH
 878: LD_INT 4
 880: PUSH
 881: EMPTY
 882: LIST
 883: LIST
 884: LIST
 885: LIST
 886: PUSH
 887: LD_INT 5
 889: PUSH
 890: LD_INT 6
 892: PUSH
 893: LD_INT 7
 895: PUSH
 896: LD_INT 8
 898: PUSH
 899: EMPTY
 900: LIST
 901: LIST
 902: LIST
 903: LIST
 904: PUSH
 905: EMPTY
 906: LIST
 907: LIST
 908: ST_TO_ADDR
// Choice_people_num := 2 ;
 909: LD_ADDR_EXP 7
 913: PUSH
 914: LD_INT 2
 916: ST_TO_ADDR
// Choice_experience := 3 ;
 917: LD_ADDR_EXP 8
 921: PUSH
 922: LD_INT 3
 924: ST_TO_ADDR
// Choice_starting_resources := 3 ;
 925: LD_ADDR_EXP 9
 929: PUSH
 930: LD_INT 3
 932: ST_TO_ADDR
// Choice_crate_spawn_rate := 3 ;
 933: LD_ADDR_EXP 10
 937: PUSH
 938: LD_INT 3
 940: ST_TO_ADDR
// Choice_people_spawn_rate := 3 ;
 941: LD_ADDR_EXP 11
 945: PUSH
 946: LD_INT 3
 948: ST_TO_ADDR
// Choice_spawn_fluctuation := 0 ;
 949: LD_ADDR_EXP 12
 953: PUSH
 954: LD_INT 0
 956: ST_TO_ADDR
// Choice_oil_abundance := 2 ;
 957: LD_ADDR_EXP 13
 961: PUSH
 962: LD_INT 2
 964: ST_TO_ADDR
// Choice_sib_abundance := 2 ;
 965: LD_ADDR_EXP 14
 969: PUSH
 970: LD_INT 2
 972: ST_TO_ADDR
// Choice_victory_cond := 2 ;
 973: LD_ADDR_EXP 15
 977: PUSH
 978: LD_INT 2
 980: ST_TO_ADDR
// Choice_reinforce_cost := 1 ;
 981: LD_ADDR_EXP 16
 985: PUSH
 986: LD_INT 1
 988: ST_TO_ADDR
// Choice_black_FoW := 0 ;
 989: LD_ADDR_EXP 17
 993: PUSH
 994: LD_INT 0
 996: ST_TO_ADDR
// Choice_starting_tech_lvl := 0 ;
 997: LD_ADDR_EXP 18
1001: PUSH
1002: LD_INT 0
1004: ST_TO_ADDR
// end ; end ;
1005: LD_VAR 0 1
1009: RET
// export function INIT_ApplyGameParams ; var i ; begin
1010: LD_INT 0
1012: PPUSH
1013: PPUSH
// people_num := people_num [ Choice_people_num + 1 ] ;
1014: LD_ADDR_EXP 19
1018: PUSH
1019: LD_EXP 19
1023: PUSH
1024: LD_EXP 7
1028: PUSH
1029: LD_INT 1
1031: PLUS
1032: ARRAY
1033: ST_TO_ADDR
// experience := experience [ Choice_experience + 1 ] ;
1034: LD_ADDR_EXP 20
1038: PUSH
1039: LD_EXP 20
1043: PUSH
1044: LD_EXP 8
1048: PUSH
1049: LD_INT 1
1051: PLUS
1052: ARRAY
1053: ST_TO_ADDR
// starting_resources := starting_resources [ Choice_starting_resources + 1 ] ;
1054: LD_ADDR_EXP 21
1058: PUSH
1059: LD_EXP 21
1063: PUSH
1064: LD_EXP 9
1068: PUSH
1069: LD_INT 1
1071: PLUS
1072: ARRAY
1073: ST_TO_ADDR
// crate_spawn_rate := crate_spawn_rate [ Choice_crate_spawn_rate + 1 ] ;
1074: LD_ADDR_EXP 22
1078: PUSH
1079: LD_EXP 22
1083: PUSH
1084: LD_EXP 10
1088: PUSH
1089: LD_INT 1
1091: PLUS
1092: ARRAY
1093: ST_TO_ADDR
// people_spawn_rate := people_spawn_rate [ Choice_people_spawn_rate + 1 ] ;
1094: LD_ADDR_EXP 23
1098: PUSH
1099: LD_EXP 23
1103: PUSH
1104: LD_EXP 11
1108: PUSH
1109: LD_INT 1
1111: PLUS
1112: ARRAY
1113: ST_TO_ADDR
// spawn_fluctuation := spawn_fluctuation [ Choice_spawn_fluctuation + 1 ] ;
1114: LD_ADDR_EXP 24
1118: PUSH
1119: LD_EXP 24
1123: PUSH
1124: LD_EXP 12
1128: PUSH
1129: LD_INT 1
1131: PLUS
1132: ARRAY
1133: ST_TO_ADDR
// fluctuation_base_crates := fluctuation_base_crates [ Choice_crate_spawn_rate + 1 ] ;
1134: LD_ADDR_EXP 37
1138: PUSH
1139: LD_EXP 37
1143: PUSH
1144: LD_EXP 10
1148: PUSH
1149: LD_INT 1
1151: PLUS
1152: ARRAY
1153: ST_TO_ADDR
// fluctuation_base_humans := fluctuation_base_humans [ Choice_people_spawn_rate + 1 ] ;
1154: LD_ADDR_EXP 38
1158: PUSH
1159: LD_EXP 38
1163: PUSH
1164: LD_EXP 11
1168: PUSH
1169: LD_INT 1
1171: PLUS
1172: ARRAY
1173: ST_TO_ADDR
// oil_abundance := oil_abundance [ Choice_oil_abundance + 1 ] ;
1174: LD_ADDR_EXP 25
1178: PUSH
1179: LD_EXP 25
1183: PUSH
1184: LD_EXP 13
1188: PUSH
1189: LD_INT 1
1191: PLUS
1192: ARRAY
1193: ST_TO_ADDR
// sib_abundance := sib_abundance [ Choice_sib_abundance + 1 ] ;
1194: LD_ADDR_EXP 26
1198: PUSH
1199: LD_EXP 26
1203: PUSH
1204: LD_EXP 14
1208: PUSH
1209: LD_INT 1
1211: PLUS
1212: ARRAY
1213: ST_TO_ADDR
// victory_cond := victory_cond [ Choice_victory_cond + 1 ] ;
1214: LD_ADDR_EXP 27
1218: PUSH
1219: LD_EXP 27
1223: PUSH
1224: LD_EXP 15
1228: PUSH
1229: LD_INT 1
1231: PLUS
1232: ARRAY
1233: ST_TO_ADDR
// reinforce_cost := reinforce_cost [ Choice_reinforce_cost + 1 ] ;
1234: LD_ADDR_EXP 28
1238: PUSH
1239: LD_EXP 28
1243: PUSH
1244: LD_EXP 16
1248: PUSH
1249: LD_INT 1
1251: PLUS
1252: ARRAY
1253: ST_TO_ADDR
// soldier_limit := people_num [ Choice_people_num + 1 ] ;
1254: LD_ADDR_EXP 49
1258: PUSH
1259: LD_EXP 19
1263: PUSH
1264: LD_EXP 7
1268: PUSH
1269: LD_INT 1
1271: PLUS
1272: ARRAY
1273: ST_TO_ADDR
// black_fow := Choice_black_FoW ;
1274: LD_ADDR_EXP 29
1278: PUSH
1279: LD_EXP 17
1283: ST_TO_ADDR
// starting_tech_lvl := Choice_starting_tech_lvl ;
1284: LD_ADDR_EXP 30
1288: PUSH
1289: LD_EXP 18
1293: ST_TO_ADDR
// CLOCK_crate_spawn := crate_spawn_rate ;
1294: LD_ADDR_EXP 51
1298: PUSH
1299: LD_EXP 22
1303: ST_TO_ADDR
// CLOCK_human_spawn := people_spawn_rate ;
1304: LD_ADDR_EXP 52
1308: PUSH
1309: LD_EXP 23
1313: ST_TO_ADDR
// CLOCK_fluctuation := spawn_fluctuation ;
1314: LD_ADDR_EXP 53
1318: PUSH
1319: LD_EXP 24
1323: ST_TO_ADDR
// for i = 1 to Side_Positions do
1324: LD_ADDR_VAR 0 2
1328: PUSH
1329: DOUBLE
1330: LD_INT 1
1332: DEC
1333: ST_TO_ADDR
1334: LD_EXP 2
1338: PUSH
1339: FOR_TO
1340: IFFALSE 1405
// begin if not Side_Positions [ i ] then
1342: LD_EXP 2
1346: PUSH
1347: LD_VAR 0 2
1351: ARRAY
1352: NOT
1353: IFFALSE 1380
// side_isalive := Replace ( side_isalive , i , 0 ) else
1355: LD_ADDR_EXP 54
1359: PUSH
1360: LD_EXP 54
1364: PPUSH
1365: LD_VAR 0 2
1369: PPUSH
1370: LD_INT 0
1372: PPUSH
1373: CALL_OW 1
1377: ST_TO_ADDR
1378: GO 1403
// side_isalive := Replace ( side_isalive , i , 1 ) ;
1380: LD_ADDR_EXP 54
1384: PUSH
1385: LD_EXP 54
1389: PPUSH
1390: LD_VAR 0 2
1394: PPUSH
1395: LD_INT 1
1397: PPUSH
1398: CALL_OW 1
1402: ST_TO_ADDR
// end ;
1403: GO 1339
1405: POP
1406: POP
// for i = 1 to Teams do
1407: LD_ADDR_VAR 0 2
1411: PUSH
1412: DOUBLE
1413: LD_INT 1
1415: DEC
1416: ST_TO_ADDR
1417: LD_EXP 6
1421: PUSH
1422: FOR_TO
1423: IFFALSE 1450
// team_siberite_stocked := Replace ( team_siberite_stocked , i , 0 ) ;
1425: LD_ADDR_EXP 61
1429: PUSH
1430: LD_EXP 61
1434: PPUSH
1435: LD_VAR 0 2
1439: PPUSH
1440: LD_INT 0
1442: PPUSH
1443: CALL_OW 1
1447: ST_TO_ADDR
1448: GO 1422
1450: POP
1451: POP
// if victory_cond = 0 then
1452: LD_EXP 27
1456: PUSH
1457: LD_INT 0
1459: EQUAL
1460: IFFALSE 1471
// ToLua ( Deathmatch = 1; ) else
1462: LD_STRING Deathmatch = 1;
1464: PPUSH
1465: CALL_OW 559
1469: GO 1478
// ToLua ( Deathmatch = 0; ) ;
1471: LD_STRING Deathmatch = 0;
1473: PPUSH
1474: CALL_OW 559
// end ;
1478: LD_VAR 0 1
1482: RET
// export function INIT_GenerateDeposits ; var x , y , i , j , pool_oil_deposits , pool_siberite_deposits ; begin
1483: LD_INT 0
1485: PPUSH
1486: PPUSH
1487: PPUSH
1488: PPUSH
1489: PPUSH
1490: PPUSH
1491: PPUSH
// pool_oil_deposits := available_oil_deposits ;
1492: LD_ADDR_VAR 0 6
1496: PUSH
1497: LD_EXP 32
1501: ST_TO_ADDR
// pool_siberite_deposits := available_siberite_deposits ;
1502: LD_ADDR_VAR 0 7
1506: PUSH
1507: LD_EXP 33
1511: ST_TO_ADDR
// i := 0 ;
1512: LD_ADDR_VAR 0 4
1516: PUSH
1517: LD_INT 0
1519: ST_TO_ADDR
// while i < oil_abundance do
1520: LD_VAR 0 4
1524: PUSH
1525: LD_EXP 25
1529: LESS
1530: IFFALSE 1778
// begin for j = 1 to pool_oil_deposits do
1532: LD_ADDR_VAR 0 5
1536: PUSH
1537: DOUBLE
1538: LD_INT 1
1540: DEC
1541: ST_TO_ADDR
1542: LD_VAR 0 6
1546: PUSH
1547: FOR_TO
1548: IFFALSE 1774
// begin i := i + 1 ;
1550: LD_ADDR_VAR 0 4
1554: PUSH
1555: LD_VAR 0 4
1559: PUSH
1560: LD_INT 1
1562: PLUS
1563: ST_TO_ADDR
// x := length ( pool_oil_deposits [ j ] ) ;
1564: LD_ADDR_VAR 0 2
1568: PUSH
1569: LD_VAR 0 6
1573: PUSH
1574: LD_VAR 0 5
1578: ARRAY
1579: PPUSH
1580: CALL 6306 0 1
1584: ST_TO_ADDR
// y := Rand ( 1 , x ) ;
1585: LD_ADDR_VAR 0 3
1589: PUSH
1590: LD_INT 1
1592: PPUSH
1593: LD_VAR 0 2
1597: PPUSH
1598: CALL_OW 12
1602: ST_TO_ADDR
// CreateDepositXY ( pool_oil_deposits [ j ] [ y ] [ 1 ] [ 1 ] , pool_oil_deposits [ j ] [ y ] [ 1 ] [ 2 ] , mat_oil ) ;
1603: LD_VAR 0 6
1607: PUSH
1608: LD_VAR 0 5
1612: ARRAY
1613: PUSH
1614: LD_VAR 0 3
1618: ARRAY
1619: PUSH
1620: LD_INT 1
1622: ARRAY
1623: PUSH
1624: LD_INT 1
1626: ARRAY
1627: PPUSH
1628: LD_VAR 0 6
1632: PUSH
1633: LD_VAR 0 5
1637: ARRAY
1638: PUSH
1639: LD_VAR 0 3
1643: ARRAY
1644: PUSH
1645: LD_INT 1
1647: ARRAY
1648: PUSH
1649: LD_INT 2
1651: ARRAY
1652: PPUSH
1653: LD_INT 2
1655: PPUSH
1656: CALL_OW 62
// CreateDepositXY ( pool_oil_deposits [ j ] [ y ] [ 2 ] [ 1 ] , pool_oil_deposits [ j ] [ y ] [ 2 ] [ 2 ] , mat_oil ) ;
1660: LD_VAR 0 6
1664: PUSH
1665: LD_VAR 0 5
1669: ARRAY
1670: PUSH
1671: LD_VAR 0 3
1675: ARRAY
1676: PUSH
1677: LD_INT 2
1679: ARRAY
1680: PUSH
1681: LD_INT 1
1683: ARRAY
1684: PPUSH
1685: LD_VAR 0 6
1689: PUSH
1690: LD_VAR 0 5
1694: ARRAY
1695: PUSH
1696: LD_VAR 0 3
1700: ARRAY
1701: PUSH
1702: LD_INT 2
1704: ARRAY
1705: PUSH
1706: LD_INT 2
1708: ARRAY
1709: PPUSH
1710: LD_INT 2
1712: PPUSH
1713: CALL_OW 62
// pool_oil_deposits := Replace ( pool_oil_deposits , j , Delete ( pool_oil_deposits [ j ] , y ) ) ;
1717: LD_ADDR_VAR 0 6
1721: PUSH
1722: LD_VAR 0 6
1726: PPUSH
1727: LD_VAR 0 5
1731: PPUSH
1732: LD_VAR 0 6
1736: PUSH
1737: LD_VAR 0 5
1741: ARRAY
1742: PPUSH
1743: LD_VAR 0 3
1747: PPUSH
1748: CALL_OW 3
1752: PPUSH
1753: CALL_OW 1
1757: ST_TO_ADDR
// if i >= oil_abundance then
1758: LD_VAR 0 4
1762: PUSH
1763: LD_EXP 25
1767: GREATEREQUAL
1768: IFFALSE 1772
// break ;
1770: GO 1774
// end ;
1772: GO 1547
1774: POP
1775: POP
// end ;
1776: GO 1520
// i := 0 ;
1778: LD_ADDR_VAR 0 4
1782: PUSH
1783: LD_INT 0
1785: ST_TO_ADDR
// while i < sib_abundance do
1786: LD_VAR 0 4
1790: PUSH
1791: LD_EXP 26
1795: LESS
1796: IFFALSE 2044
// begin for j = 1 to pool_siberite_deposits do
1798: LD_ADDR_VAR 0 5
1802: PUSH
1803: DOUBLE
1804: LD_INT 1
1806: DEC
1807: ST_TO_ADDR
1808: LD_VAR 0 7
1812: PUSH
1813: FOR_TO
1814: IFFALSE 2040
// begin i := i + 1 ;
1816: LD_ADDR_VAR 0 4
1820: PUSH
1821: LD_VAR 0 4
1825: PUSH
1826: LD_INT 1
1828: PLUS
1829: ST_TO_ADDR
// x := length ( pool_siberite_deposits [ j ] ) ;
1830: LD_ADDR_VAR 0 2
1834: PUSH
1835: LD_VAR 0 7
1839: PUSH
1840: LD_VAR 0 5
1844: ARRAY
1845: PPUSH
1846: CALL 6306 0 1
1850: ST_TO_ADDR
// y := Rand ( 1 , x ) ;
1851: LD_ADDR_VAR 0 3
1855: PUSH
1856: LD_INT 1
1858: PPUSH
1859: LD_VAR 0 2
1863: PPUSH
1864: CALL_OW 12
1868: ST_TO_ADDR
// CreateDepositXY ( pool_siberite_deposits [ j ] [ y ] [ 1 ] [ 1 ] , pool_siberite_deposits [ j ] [ y ] [ 1 ] [ 2 ] , mat_siberit ) ;
1869: LD_VAR 0 7
1873: PUSH
1874: LD_VAR 0 5
1878: ARRAY
1879: PUSH
1880: LD_VAR 0 3
1884: ARRAY
1885: PUSH
1886: LD_INT 1
1888: ARRAY
1889: PUSH
1890: LD_INT 1
1892: ARRAY
1893: PPUSH
1894: LD_VAR 0 7
1898: PUSH
1899: LD_VAR 0 5
1903: ARRAY
1904: PUSH
1905: LD_VAR 0 3
1909: ARRAY
1910: PUSH
1911: LD_INT 1
1913: ARRAY
1914: PUSH
1915: LD_INT 2
1917: ARRAY
1918: PPUSH
1919: LD_INT 3
1921: PPUSH
1922: CALL_OW 62
// CreateDepositXY ( pool_siberite_deposits [ j ] [ y ] [ 2 ] [ 1 ] , pool_siberite_deposits [ j ] [ y ] [ 2 ] [ 2 ] , mat_siberit ) ;
1926: LD_VAR 0 7
1930: PUSH
1931: LD_VAR 0 5
1935: ARRAY
1936: PUSH
1937: LD_VAR 0 3
1941: ARRAY
1942: PUSH
1943: LD_INT 2
1945: ARRAY
1946: PUSH
1947: LD_INT 1
1949: ARRAY
1950: PPUSH
1951: LD_VAR 0 7
1955: PUSH
1956: LD_VAR 0 5
1960: ARRAY
1961: PUSH
1962: LD_VAR 0 3
1966: ARRAY
1967: PUSH
1968: LD_INT 2
1970: ARRAY
1971: PUSH
1972: LD_INT 2
1974: ARRAY
1975: PPUSH
1976: LD_INT 3
1978: PPUSH
1979: CALL_OW 62
// pool_siberite_deposits := Replace ( pool_siberite_deposits , j , Delete ( pool_siberite_deposits [ j ] , y ) ) ;
1983: LD_ADDR_VAR 0 7
1987: PUSH
1988: LD_VAR 0 7
1992: PPUSH
1993: LD_VAR 0 5
1997: PPUSH
1998: LD_VAR 0 7
2002: PUSH
2003: LD_VAR 0 5
2007: ARRAY
2008: PPUSH
2009: LD_VAR 0 3
2013: PPUSH
2014: CALL_OW 3
2018: PPUSH
2019: CALL_OW 1
2023: ST_TO_ADDR
// if i >= sib_abundance then
2024: LD_VAR 0 4
2028: PUSH
2029: LD_EXP 26
2033: GREATEREQUAL
2034: IFFALSE 2038
// break ;
2036: GO 2040
// end ;
2038: GO 1813
2040: POP
2041: POP
// end ;
2042: GO 1786
// end ;
2044: LD_VAR 0 1
2048: RET
// export function INIT_SetUpAllies ; var i , j ; begin
2049: LD_INT 0
2051: PPUSH
2052: PPUSH
2053: PPUSH
// for i = 1 to 8 do
2054: LD_ADDR_VAR 0 2
2058: PUSH
2059: DOUBLE
2060: LD_INT 1
2062: DEC
2063: ST_TO_ADDR
2064: LD_INT 8
2066: PUSH
2067: FOR_TO
2068: IFFALSE 2158
// for j = 1 to 8 do
2070: LD_ADDR_VAR 0 3
2074: PUSH
2075: DOUBLE
2076: LD_INT 1
2078: DEC
2079: ST_TO_ADDR
2080: LD_INT 8
2082: PUSH
2083: FOR_TO
2084: IFFALSE 2154
// begin if Side_Teams [ i ] = Side_Teams [ j ] then
2086: LD_EXP 5
2090: PUSH
2091: LD_VAR 0 2
2095: ARRAY
2096: PUSH
2097: LD_EXP 5
2101: PUSH
2102: LD_VAR 0 3
2106: ARRAY
2107: EQUAL
2108: IFFALSE 2132
// SetAttitude ( i , j , att_friend , true ) else
2110: LD_VAR 0 2
2114: PPUSH
2115: LD_VAR 0 3
2119: PPUSH
2120: LD_INT 1
2122: PPUSH
2123: LD_INT 1
2125: PPUSH
2126: CALL_OW 80
2130: GO 2152
// SetAttitude ( i , j , att_enemy , true ) ;
2132: LD_VAR 0 2
2136: PPUSH
2137: LD_VAR 0 3
2141: PPUSH
2142: LD_INT 2
2144: PPUSH
2145: LD_INT 1
2147: PPUSH
2148: CALL_OW 80
// end ;
2152: GO 2083
2154: POP
2155: POP
2156: GO 2067
2158: POP
2159: POP
// for i = 1 to 8 do
2160: LD_ADDR_VAR 0 2
2164: PUSH
2165: DOUBLE
2166: LD_INT 1
2168: DEC
2169: ST_TO_ADDR
2170: LD_INT 8
2172: PUSH
2173: FOR_TO
2174: IFFALSE 2198
// ChangeSideFog ( i , Side_Teams [ i ] ) ;
2176: LD_VAR 0 2
2180: PPUSH
2181: LD_EXP 5
2185: PUSH
2186: LD_VAR 0 2
2190: ARRAY
2191: PPUSH
2192: CALL_OW 343
2196: GO 2173
2198: POP
2199: POP
// FogOff ( 0 ) ;
2200: LD_INT 0
2202: PPUSH
2203: CALL_OW 344
// ResetFog ;
2207: CALL_OW 335
// if black_fow then
2211: LD_EXP 29
2215: IFFALSE 2246
// for i = 1 to 8 do
2217: LD_ADDR_VAR 0 2
2221: PUSH
2222: DOUBLE
2223: LD_INT 1
2225: DEC
2226: ST_TO_ADDR
2227: LD_INT 8
2229: PUSH
2230: FOR_TO
2231: IFFALSE 2244
// ClearAllFogForSide ( i ) ;
2233: LD_VAR 0 2
2237: PPUSH
2238: CALL_OW 520
2242: GO 2230
2244: POP
2245: POP
// end ;
2246: LD_VAR 0 1
2250: RET
// export function INIT_SetUpTechs ; var i ; begin
2251: LD_INT 0
2253: PPUSH
2254: PPUSH
// for i = 1 to 8 do
2255: LD_ADDR_VAR 0 2
2259: PUSH
2260: DOUBLE
2261: LD_INT 1
2263: DEC
2264: ST_TO_ADDR
2265: LD_INT 8
2267: PUSH
2268: FOR_TO
2269: IFFALSE 2332
// begin DisableAllTechs ( i ) ;
2271: LD_VAR 0 2
2275: PPUSH
2276: CALL 7293 0 1
// side_tech_lvl := Replace ( side_tech_lvl , i , starting_tech_lvl ) ;
2280: LD_ADDR_EXP 31
2284: PUSH
2285: LD_EXP 31
2289: PPUSH
2290: LD_VAR 0 2
2294: PPUSH
2295: LD_EXP 30
2299: PPUSH
2300: CALL_OW 1
2304: ST_TO_ADDR
// TechUpgrade ( starting_tech_lvl , Side_Nations [ i ] , i ) ;
2305: LD_EXP 30
2309: PPUSH
2310: LD_EXP 3
2314: PUSH
2315: LD_VAR 0 2
2319: ARRAY
2320: PPUSH
2321: LD_VAR 0 2
2325: PPUSH
2326: CALL 7795 0 3
// end ;
2330: GO 2268
2332: POP
2333: POP
// end ;
2334: LD_VAR 0 1
2338: RET
// export function INIT_ActivateLUAInterface ; var colour , tech , i , team , count ; begin
2339: LD_INT 0
2341: PPUSH
2342: PPUSH
2343: PPUSH
2344: PPUSH
2345: PPUSH
2346: PPUSH
// if victory_cond = 0 then
2347: LD_EXP 27
2351: PUSH
2352: LD_INT 0
2354: EQUAL
2355: IFFALSE 2366
// ToLua ( Deathmatch = 1; ) else
2357: LD_STRING Deathmatch = 1;
2359: PPUSH
2360: CALL_OW 559
2364: GO 2373
// ToLua ( Deathmatch = 0; ) ;
2366: LD_STRING Deathmatch = 0;
2368: PPUSH
2369: CALL_OW 559
// if Your_Side in [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] then
2373: LD_OWVAR 2
2377: PUSH
2378: LD_INT 1
2380: PUSH
2381: LD_INT 2
2383: PUSH
2384: LD_INT 3
2386: PUSH
2387: LD_INT 4
2389: PUSH
2390: LD_INT 5
2392: PUSH
2393: LD_INT 6
2395: PUSH
2396: LD_INT 7
2398: PUSH
2399: LD_INT 8
2401: PUSH
2402: EMPTY
2403: LIST
2404: LIST
2405: LIST
2406: LIST
2407: LIST
2408: LIST
2409: LIST
2410: LIST
2411: IN
2412: IFFALSE 2463
// begin ToLua ( LUA_UpdateSideInterface( & Your_Side & , & side_tech_lvl [ Your_Side ] & ); ) ;
2414: LD_STRING LUA_UpdateSideInterface(
2416: PUSH
2417: LD_OWVAR 2
2421: STR
2422: PUSH
2423: LD_STRING ,
2425: STR
2426: PUSH
2427: LD_EXP 31
2431: PUSH
2432: LD_OWVAR 2
2436: ARRAY
2437: STR
2438: PUSH
2439: LD_STRING );
2441: STR
2442: PPUSH
2443: CALL_OW 559
// ToLua ( StartSideInterface(); ) ;
2447: LD_STRING StartSideInterface();
2449: PPUSH
2450: CALL_OW 559
// ToLua ( LUA_NoDepot(); ) ;
2454: LD_STRING LUA_NoDepot();
2456: PPUSH
2457: CALL_OW 559
// end else
2461: GO 2690
// begin count = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
2463: LD_ADDR_VAR 0 6
2467: PUSH
2468: LD_INT 0
2470: PUSH
2471: LD_INT 0
2473: PUSH
2474: LD_INT 0
2476: PUSH
2477: LD_INT 0
2479: PUSH
2480: LD_INT 0
2482: PUSH
2483: LD_INT 0
2485: PUSH
2486: LD_INT 0
2488: PUSH
2489: LD_INT 0
2491: PUSH
2492: EMPTY
2493: LIST
2494: LIST
2495: LIST
2496: LIST
2497: LIST
2498: LIST
2499: LIST
2500: LIST
2501: ST_TO_ADDR
// for i = 1 to 8 do
2502: LD_ADDR_VAR 0 4
2506: PUSH
2507: DOUBLE
2508: LD_INT 1
2510: DEC
2511: ST_TO_ADDR
2512: LD_INT 8
2514: PUSH
2515: FOR_TO
2516: IFFALSE 2681
// begin colour := i ;
2518: LD_ADDR_VAR 0 2
2522: PUSH
2523: LD_VAR 0 4
2527: ST_TO_ADDR
// tech := side_tech_lvl [ i ] ;
2528: LD_ADDR_VAR 0 3
2532: PUSH
2533: LD_EXP 31
2537: PUSH
2538: LD_VAR 0 4
2542: ARRAY
2543: ST_TO_ADDR
// team := Side_Teams [ i ] ;
2544: LD_ADDR_VAR 0 5
2548: PUSH
2549: LD_EXP 5
2553: PUSH
2554: LD_VAR 0 4
2558: ARRAY
2559: ST_TO_ADDR
// if not Side_Positions [ i ] then
2560: LD_EXP 2
2564: PUSH
2565: LD_VAR 0 4
2569: ARRAY
2570: NOT
2571: IFFALSE 2581
// team := 0 ;
2573: LD_ADDR_VAR 0 5
2577: PUSH
2578: LD_INT 0
2580: ST_TO_ADDR
// count := Replace ( count , team , count [ team ] + 1 ) ;
2581: LD_ADDR_VAR 0 6
2585: PUSH
2586: LD_VAR 0 6
2590: PPUSH
2591: LD_VAR 0 5
2595: PPUSH
2596: LD_VAR 0 6
2600: PUSH
2601: LD_VAR 0 5
2605: ARRAY
2606: PUSH
2607: LD_INT 1
2609: PLUS
2610: PPUSH
2611: CALL_OW 1
2615: ST_TO_ADDR
// ToLua ( LUA_RenderSpecLabels( & i & , & team & , & count [ team ] & , & colour & , & tech & ); ) ;
2616: LD_STRING LUA_RenderSpecLabels(
2618: PUSH
2619: LD_VAR 0 4
2623: STR
2624: PUSH
2625: LD_STRING ,
2627: STR
2628: PUSH
2629: LD_VAR 0 5
2633: STR
2634: PUSH
2635: LD_STRING ,
2637: STR
2638: PUSH
2639: LD_VAR 0 6
2643: PUSH
2644: LD_VAR 0 5
2648: ARRAY
2649: STR
2650: PUSH
2651: LD_STRING ,
2653: STR
2654: PUSH
2655: LD_VAR 0 2
2659: STR
2660: PUSH
2661: LD_STRING ,
2663: STR
2664: PUSH
2665: LD_VAR 0 3
2669: STR
2670: PUSH
2671: LD_STRING );
2673: STR
2674: PPUSH
2675: CALL_OW 559
// end ;
2679: GO 2515
2681: POP
2682: POP
// ToLua ( StartSpecInterface(); ) ;
2683: LD_STRING StartSpecInterface();
2685: PPUSH
2686: CALL_OW 559
// end ; if Your_Side in [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] then
2690: LD_OWVAR 2
2694: PUSH
2695: LD_INT 1
2697: PUSH
2698: LD_INT 2
2700: PUSH
2701: LD_INT 3
2703: PUSH
2704: LD_INT 4
2706: PUSH
2707: LD_INT 5
2709: PUSH
2710: LD_INT 6
2712: PUSH
2713: LD_INT 7
2715: PUSH
2716: LD_INT 8
2718: PUSH
2719: EMPTY
2720: LIST
2721: LIST
2722: LIST
2723: LIST
2724: LIST
2725: LIST
2726: LIST
2727: LIST
2728: IN
2729: IFFALSE 2770
// ToLua ( LUA_UpdateSiberiteSent( & team_siberite_stocked [ Side_Teams [ Your_Side ] ] & , & victory_cond & ); ) ;
2731: LD_STRING LUA_UpdateSiberiteSent(
2733: PUSH
2734: LD_EXP 61
2738: PUSH
2739: LD_EXP 5
2743: PUSH
2744: LD_OWVAR 2
2748: ARRAY
2749: ARRAY
2750: STR
2751: PUSH
2752: LD_STRING ,
2754: STR
2755: PUSH
2756: LD_EXP 27
2760: STR
2761: PUSH
2762: LD_STRING );
2764: STR
2765: PPUSH
2766: CALL_OW 559
// if Your_Side = 9 then
2770: LD_OWVAR 2
2774: PUSH
2775: LD_INT 9
2777: EQUAL
2778: IFFALSE 2845
// for i = 1 to Teams do
2780: LD_ADDR_VAR 0 4
2784: PUSH
2785: DOUBLE
2786: LD_INT 1
2788: DEC
2789: ST_TO_ADDR
2790: LD_EXP 6
2794: PUSH
2795: FOR_TO
2796: IFFALSE 2843
// ToLua ( LUA_UpdateSiberiteSpec( & team_siberite_stocked [ i ] & , & victory_cond & , & i & ); ) ;
2798: LD_STRING LUA_UpdateSiberiteSpec(
2800: PUSH
2801: LD_EXP 61
2805: PUSH
2806: LD_VAR 0 4
2810: ARRAY
2811: STR
2812: PUSH
2813: LD_STRING ,
2815: STR
2816: PUSH
2817: LD_EXP 27
2821: STR
2822: PUSH
2823: LD_STRING ,
2825: STR
2826: PUSH
2827: LD_VAR 0 4
2831: STR
2832: PUSH
2833: LD_STRING );
2835: STR
2836: PPUSH
2837: CALL_OW 559
2841: GO 2795
2843: POP
2844: POP
// end ;
2845: LD_VAR 0 1
2849: RET
// export function INIT_PrepareSquad ; var i , j , commander , profession , attributes , basic_skills , skill_levels , importance , stat_array ; begin
2850: LD_INT 0
2852: PPUSH
2853: PPUSH
2854: PPUSH
2855: PPUSH
2856: PPUSH
2857: PPUSH
2858: PPUSH
2859: PPUSH
2860: PPUSH
2861: PPUSH
// stat_array := [ ] ;
2862: LD_ADDR_VAR 0 10
2866: PUSH
2867: EMPTY
2868: ST_TO_ADDR
// for i = 1 to people_num [ 1 ] do
2869: LD_ADDR_VAR 0 2
2873: PUSH
2874: DOUBLE
2875: LD_INT 1
2877: DEC
2878: ST_TO_ADDR
2879: LD_EXP 19
2883: PUSH
2884: LD_INT 1
2886: ARRAY
2887: PUSH
2888: FOR_TO
2889: IFFALSE 3106
// begin commander := 1 ;
2891: LD_ADDR_VAR 0 4
2895: PUSH
2896: LD_INT 1
2898: ST_TO_ADDR
// profession := 1 ;
2899: LD_ADDR_VAR 0 5
2903: PUSH
2904: LD_INT 1
2906: ST_TO_ADDR
// attributes := [ Rand ( 10 , 15 ) , Rand ( 9 , 11 ) ] ;
2907: LD_ADDR_VAR 0 6
2911: PUSH
2912: LD_INT 10
2914: PPUSH
2915: LD_INT 15
2917: PPUSH
2918: CALL_OW 12
2922: PUSH
2923: LD_INT 9
2925: PPUSH
2926: LD_INT 11
2928: PPUSH
2929: CALL_OW 12
2933: PUSH
2934: EMPTY
2935: LIST
2936: LIST
2937: ST_TO_ADDR
// basic_skills := [ Rand ( 1 , 3 ) , 0 , 0 , 0 ] ;
2938: LD_ADDR_VAR 0 7
2942: PUSH
2943: LD_INT 1
2945: PPUSH
2946: LD_INT 3
2948: PPUSH
2949: CALL_OW 12
2953: PUSH
2954: LD_INT 0
2956: PUSH
2957: LD_INT 0
2959: PUSH
2960: LD_INT 0
2962: PUSH
2963: EMPTY
2964: LIST
2965: LIST
2966: LIST
2967: LIST
2968: ST_TO_ADDR
// skill_levels := [ basic_skills [ 1 ] + experience , Rand ( 0 , experience ) , Rand ( 0 , experience ) , Rand ( 0 , experience ) ] ;
2969: LD_ADDR_VAR 0 8
2973: PUSH
2974: LD_VAR 0 7
2978: PUSH
2979: LD_INT 1
2981: ARRAY
2982: PUSH
2983: LD_EXP 20
2987: PLUS
2988: PUSH
2989: LD_INT 0
2991: PPUSH
2992: LD_EXP 20
2996: PPUSH
2997: CALL_OW 12
3001: PUSH
3002: LD_INT 0
3004: PPUSH
3005: LD_EXP 20
3009: PPUSH
3010: CALL_OW 12
3014: PUSH
3015: LD_INT 0
3017: PPUSH
3018: LD_EXP 20
3022: PPUSH
3023: CALL_OW 12
3027: PUSH
3028: EMPTY
3029: LIST
3030: LIST
3031: LIST
3032: LIST
3033: ST_TO_ADDR
// importance := 105 ;
3034: LD_ADDR_VAR 0 9
3038: PUSH
3039: LD_INT 105
3041: ST_TO_ADDR
// stat_array := Replace ( stat_array , stat_array + 1 , [ commander , profession , attributes , basic_skills , skill_levels , importance ] ) ;
3042: LD_ADDR_VAR 0 10
3046: PUSH
3047: LD_VAR 0 10
3051: PPUSH
3052: LD_VAR 0 10
3056: PUSH
3057: LD_INT 1
3059: PLUS
3060: PPUSH
3061: LD_VAR 0 4
3065: PUSH
3066: LD_VAR 0 5
3070: PUSH
3071: LD_VAR 0 6
3075: PUSH
3076: LD_VAR 0 7
3080: PUSH
3081: LD_VAR 0 8
3085: PUSH
3086: LD_VAR 0 9
3090: PUSH
3091: EMPTY
3092: LIST
3093: LIST
3094: LIST
3095: LIST
3096: LIST
3097: LIST
3098: PPUSH
3099: CALL_OW 1
3103: ST_TO_ADDR
// end ;
3104: GO 2888
3106: POP
3107: POP
// for j = 2 to people_num do
3108: LD_ADDR_VAR 0 3
3112: PUSH
3113: DOUBLE
3114: LD_INT 2
3116: DEC
3117: ST_TO_ADDR
3118: LD_EXP 19
3122: PUSH
3123: FOR_TO
3124: IFFALSE 3445
// begin commander := 0 ;
3126: LD_ADDR_VAR 0 4
3130: PUSH
3131: LD_INT 0
3133: ST_TO_ADDR
// attributes := [ Rand ( 8 , 12 ) , Rand ( 8 , 12 ) ] ;
3134: LD_ADDR_VAR 0 6
3138: PUSH
3139: LD_INT 8
3141: PPUSH
3142: LD_INT 12
3144: PPUSH
3145: CALL_OW 12
3149: PUSH
3150: LD_INT 8
3152: PPUSH
3153: LD_INT 12
3155: PPUSH
3156: CALL_OW 12
3160: PUSH
3161: EMPTY
3162: LIST
3163: LIST
3164: ST_TO_ADDR
// importance := 0 ;
3165: LD_ADDR_VAR 0 9
3169: PUSH
3170: LD_INT 0
3172: ST_TO_ADDR
// profession := j - 1 ;
3173: LD_ADDR_VAR 0 5
3177: PUSH
3178: LD_VAR 0 3
3182: PUSH
3183: LD_INT 1
3185: MINUS
3186: ST_TO_ADDR
// for i = 1 to people_num [ j ] do
3187: LD_ADDR_VAR 0 2
3191: PUSH
3192: DOUBLE
3193: LD_INT 1
3195: DEC
3196: ST_TO_ADDR
3197: LD_EXP 19
3201: PUSH
3202: LD_VAR 0 3
3206: ARRAY
3207: PUSH
3208: FOR_TO
3209: IFFALSE 3441
// begin basic_skills := [ 0 , 0 , 0 , 0 ] ;
3211: LD_ADDR_VAR 0 7
3215: PUSH
3216: LD_INT 0
3218: PUSH
3219: LD_INT 0
3221: PUSH
3222: LD_INT 0
3224: PUSH
3225: LD_INT 0
3227: PUSH
3228: EMPTY
3229: LIST
3230: LIST
3231: LIST
3232: LIST
3233: ST_TO_ADDR
// skill_levels := [ Rand ( 0 , experience ) , Rand ( 0 , experience ) , Rand ( 0 , experience ) , Rand ( 0 , experience ) ] ;
3234: LD_ADDR_VAR 0 8
3238: PUSH
3239: LD_INT 0
3241: PPUSH
3242: LD_EXP 20
3246: PPUSH
3247: CALL_OW 12
3251: PUSH
3252: LD_INT 0
3254: PPUSH
3255: LD_EXP 20
3259: PPUSH
3260: CALL_OW 12
3264: PUSH
3265: LD_INT 0
3267: PPUSH
3268: LD_EXP 20
3272: PPUSH
3273: CALL_OW 12
3277: PUSH
3278: LD_INT 0
3280: PPUSH
3281: LD_EXP 20
3285: PPUSH
3286: CALL_OW 12
3290: PUSH
3291: EMPTY
3292: LIST
3293: LIST
3294: LIST
3295: LIST
3296: ST_TO_ADDR
// basic_skills := Replace ( basic_skills , j - 1 , Rand ( 0 , 2 ) ) ;
3297: LD_ADDR_VAR 0 7
3301: PUSH
3302: LD_VAR 0 7
3306: PPUSH
3307: LD_VAR 0 3
3311: PUSH
3312: LD_INT 1
3314: MINUS
3315: PPUSH
3316: LD_INT 0
3318: PPUSH
3319: LD_INT 2
3321: PPUSH
3322: CALL_OW 12
3326: PPUSH
3327: CALL_OW 1
3331: ST_TO_ADDR
// skill_levels := Replace ( skill_levels , j - 1 , basic_skills [ j - 1 ] + experience ) ;
3332: LD_ADDR_VAR 0 8
3336: PUSH
3337: LD_VAR 0 8
3341: PPUSH
3342: LD_VAR 0 3
3346: PUSH
3347: LD_INT 1
3349: MINUS
3350: PPUSH
3351: LD_VAR 0 7
3355: PUSH
3356: LD_VAR 0 3
3360: PUSH
3361: LD_INT 1
3363: MINUS
3364: ARRAY
3365: PUSH
3366: LD_EXP 20
3370: PLUS
3371: PPUSH
3372: CALL_OW 1
3376: ST_TO_ADDR
// stat_array := Replace ( stat_array , stat_array + 1 , [ commander , profession , attributes , basic_skills , skill_levels , importance ] ) ;
3377: LD_ADDR_VAR 0 10
3381: PUSH
3382: LD_VAR 0 10
3386: PPUSH
3387: LD_VAR 0 10
3391: PUSH
3392: LD_INT 1
3394: PLUS
3395: PPUSH
3396: LD_VAR 0 4
3400: PUSH
3401: LD_VAR 0 5
3405: PUSH
3406: LD_VAR 0 6
3410: PUSH
3411: LD_VAR 0 7
3415: PUSH
3416: LD_VAR 0 8
3420: PUSH
3421: LD_VAR 0 9
3425: PUSH
3426: EMPTY
3427: LIST
3428: LIST
3429: LIST
3430: LIST
3431: LIST
3432: LIST
3433: PPUSH
3434: CALL_OW 1
3438: ST_TO_ADDR
// end ;
3439: GO 3208
3441: POP
3442: POP
// end ;
3443: GO 3123
3445: POP
3446: POP
// composition := stat_array ;
3447: LD_ADDR_EXP 43
3451: PUSH
3452: LD_VAR 0 10
3456: ST_TO_ADDR
// end ;
3457: LD_VAR 0 1
3461: RET
// export function INIT_SpawnStartingUnits ; var i , j , human , vehicle , crates , oil , siberite , cargo_capacity , vehicle_amount , bulk ; begin
3462: LD_INT 0
3464: PPUSH
3465: PPUSH
3466: PPUSH
3467: PPUSH
3468: PPUSH
3469: PPUSH
3470: PPUSH
3471: PPUSH
3472: PPUSH
3473: PPUSH
3474: PPUSH
// side_soldiers := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
3475: LD_ADDR_EXP 46
3479: PUSH
3480: EMPTY
3481: PUSH
3482: EMPTY
3483: PUSH
3484: EMPTY
3485: PUSH
3486: EMPTY
3487: PUSH
3488: EMPTY
3489: PUSH
3490: EMPTY
3491: PUSH
3492: EMPTY
3493: PUSH
3494: EMPTY
3495: PUSH
3496: EMPTY
3497: LIST
3498: LIST
3499: LIST
3500: LIST
3501: LIST
3502: LIST
3503: LIST
3504: LIST
3505: ST_TO_ADDR
// side_vehicles := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
3506: LD_ADDR_EXP 50
3510: PUSH
3511: EMPTY
3512: PUSH
3513: EMPTY
3514: PUSH
3515: EMPTY
3516: PUSH
3517: EMPTY
3518: PUSH
3519: EMPTY
3520: PUSH
3521: EMPTY
3522: PUSH
3523: EMPTY
3524: PUSH
3525: EMPTY
3526: PUSH
3527: EMPTY
3528: LIST
3529: LIST
3530: LIST
3531: LIST
3532: LIST
3533: LIST
3534: LIST
3535: LIST
3536: ST_TO_ADDR
// vehicle_amount := 0 ;
3537: LD_ADDR_VAR 0 10
3541: PUSH
3542: LD_INT 0
3544: ST_TO_ADDR
// crates := starting_resources [ 1 ] ;
3545: LD_ADDR_VAR 0 6
3549: PUSH
3550: LD_EXP 21
3554: PUSH
3555: LD_INT 1
3557: ARRAY
3558: ST_TO_ADDR
// oil := starting_resources [ 2 ] ;
3559: LD_ADDR_VAR 0 7
3563: PUSH
3564: LD_EXP 21
3568: PUSH
3569: LD_INT 2
3571: ARRAY
3572: ST_TO_ADDR
// siberite := starting_resources [ 3 ] ;
3573: LD_ADDR_VAR 0 8
3577: PUSH
3578: LD_EXP 21
3582: PUSH
3583: LD_INT 3
3585: ARRAY
3586: ST_TO_ADDR
// cargo_capacity := crates + oil + siberite ;
3587: LD_ADDR_VAR 0 9
3591: PUSH
3592: LD_VAR 0 6
3596: PUSH
3597: LD_VAR 0 7
3601: PLUS
3602: PUSH
3603: LD_VAR 0 8
3607: PLUS
3608: ST_TO_ADDR
// if cargo_capacity > 0 then
3609: LD_VAR 0 9
3613: PUSH
3614: LD_INT 0
3616: GREATER
3617: IFFALSE 3659
// begin while cargo_capacity > 0 do
3619: LD_VAR 0 9
3623: PUSH
3624: LD_INT 0
3626: GREATER
3627: IFFALSE 3659
// begin vehicle_amount := vehicle_amount + 1 ;
3629: LD_ADDR_VAR 0 10
3633: PUSH
3634: LD_VAR 0 10
3638: PUSH
3639: LD_INT 1
3641: PLUS
3642: ST_TO_ADDR
// cargo_capacity := cargo_capacity - 100 ;
3643: LD_ADDR_VAR 0 9
3647: PUSH
3648: LD_VAR 0 9
3652: PUSH
3653: LD_INT 100
3655: MINUS
3656: ST_TO_ADDR
// end ;
3657: GO 3619
// end ; for i = 1 to 8 do
3659: LD_ADDR_VAR 0 2
3663: PUSH
3664: DOUBLE
3665: LD_INT 1
3667: DEC
3668: ST_TO_ADDR
3669: LD_INT 8
3671: PUSH
3672: FOR_TO
3673: IFFALSE 4223
// begin if not side_isalive [ i ] then
3675: LD_EXP 54
3679: PUSH
3680: LD_VAR 0 2
3684: ARRAY
3685: NOT
3686: IFFALSE 3690
// continue ;
3688: GO 3672
// for j = 1 to composition do
3690: LD_ADDR_VAR 0 3
3694: PUSH
3695: DOUBLE
3696: LD_INT 1
3698: DEC
3699: ST_TO_ADDR
3700: LD_EXP 43
3704: PUSH
3705: FOR_TO
3706: IFFALSE 3778
// begin human := PrepareCharacters ( i , position_spawn_direction , composition [ j ] ) ;
3708: LD_ADDR_VAR 0 4
3712: PUSH
3713: LD_VAR 0 2
3717: PPUSH
3718: LD_EXP 34
3722: PPUSH
3723: LD_EXP 43
3727: PUSH
3728: LD_VAR 0 3
3732: ARRAY
3733: PPUSH
3734: CALL 6422 0 3
3738: ST_TO_ADDR
// side_soldiers := Replace ( side_soldiers , i , side_soldiers [ i ] ^ human ) ;
3739: LD_ADDR_EXP 46
3743: PUSH
3744: LD_EXP 46
3748: PPUSH
3749: LD_VAR 0 2
3753: PPUSH
3754: LD_EXP 46
3758: PUSH
3759: LD_VAR 0 2
3763: ARRAY
3764: PUSH
3765: LD_VAR 0 4
3769: ADD
3770: PPUSH
3771: CALL_OW 1
3775: ST_TO_ADDR
// end ;
3776: GO 3705
3778: POP
3779: POP
// crates := starting_resources [ 1 ] ;
3780: LD_ADDR_VAR 0 6
3784: PUSH
3785: LD_EXP 21
3789: PUSH
3790: LD_INT 1
3792: ARRAY
3793: ST_TO_ADDR
// oil := starting_resources [ 2 ] ;
3794: LD_ADDR_VAR 0 7
3798: PUSH
3799: LD_EXP 21
3803: PUSH
3804: LD_INT 2
3806: ARRAY
3807: ST_TO_ADDR
// siberite := starting_resources [ 3 ] ;
3808: LD_ADDR_VAR 0 8
3812: PUSH
3813: LD_EXP 21
3817: PUSH
3818: LD_INT 3
3820: ARRAY
3821: ST_TO_ADDR
// for j = 1 to vehicle_amount do
3822: LD_ADDR_VAR 0 3
3826: PUSH
3827: DOUBLE
3828: LD_INT 1
3830: DEC
3831: ST_TO_ADDR
3832: LD_VAR 0 10
3836: PUSH
3837: FOR_TO
3838: IFFALSE 3975
// begin vehicle := PrepareVehicles ( i , position_spawn_direction ) ;
3840: LD_ADDR_VAR 0 5
3844: PUSH
3845: LD_VAR 0 2
3849: PPUSH
3850: LD_EXP 34
3854: PPUSH
3855: CALL 6636 0 2
3859: ST_TO_ADDR
// bulk := FillUpVehicles ( vehicle , crates , oil , siberite ) ;
3860: LD_ADDR_VAR 0 11
3864: PUSH
3865: LD_VAR 0 5
3869: PPUSH
3870: LD_VAR 0 6
3874: PPUSH
3875: LD_VAR 0 7
3879: PPUSH
3880: LD_VAR 0 8
3884: PPUSH
3885: CALL 11093 0 4
3889: ST_TO_ADDR
// crates := bulk [ 2 ] ;
3890: LD_ADDR_VAR 0 6
3894: PUSH
3895: LD_VAR 0 11
3899: PUSH
3900: LD_INT 2
3902: ARRAY
3903: ST_TO_ADDR
// oil := bulk [ 3 ] ;
3904: LD_ADDR_VAR 0 7
3908: PUSH
3909: LD_VAR 0 11
3913: PUSH
3914: LD_INT 3
3916: ARRAY
3917: ST_TO_ADDR
// siberite := bulk [ 4 ] ;
3918: LD_ADDR_VAR 0 8
3922: PUSH
3923: LD_VAR 0 11
3927: PUSH
3928: LD_INT 4
3930: ARRAY
3931: ST_TO_ADDR
// side_vehicles := Replace ( side_vehicles , i , side_vehicles [ i ] ^ bulk [ 1 ] ) ;
3932: LD_ADDR_EXP 50
3936: PUSH
3937: LD_EXP 50
3941: PPUSH
3942: LD_VAR 0 2
3946: PPUSH
3947: LD_EXP 50
3951: PUSH
3952: LD_VAR 0 2
3956: ARRAY
3957: PUSH
3958: LD_VAR 0 11
3962: PUSH
3963: LD_INT 1
3965: ARRAY
3966: ADD
3967: PPUSH
3968: CALL_OW 1
3972: ST_TO_ADDR
// end ;
3973: GO 3837
3975: POP
3976: POP
// for j = 1 to side_vehicles [ i ] do
3977: LD_ADDR_VAR 0 3
3981: PUSH
3982: DOUBLE
3983: LD_INT 1
3985: DEC
3986: ST_TO_ADDR
3987: LD_EXP 50
3991: PUSH
3992: LD_VAR 0 2
3996: ARRAY
3997: PUSH
3998: FOR_TO
3999: IFFALSE 4081
// PlaceHumanInUnit ( side_soldiers [ i ] [ people_num [ 1 ] + people_num [ 2 ] + people_num [ 3 ] + people_num [ 4 ] - j ] , side_vehicles [ i ] [ j ] ) ;
4001: LD_EXP 46
4005: PUSH
4006: LD_VAR 0 2
4010: ARRAY
4011: PUSH
4012: LD_EXP 19
4016: PUSH
4017: LD_INT 1
4019: ARRAY
4020: PUSH
4021: LD_EXP 19
4025: PUSH
4026: LD_INT 2
4028: ARRAY
4029: PLUS
4030: PUSH
4031: LD_EXP 19
4035: PUSH
4036: LD_INT 3
4038: ARRAY
4039: PLUS
4040: PUSH
4041: LD_EXP 19
4045: PUSH
4046: LD_INT 4
4048: ARRAY
4049: PLUS
4050: PUSH
4051: LD_VAR 0 3
4055: MINUS
4056: ARRAY
4057: PPUSH
4058: LD_EXP 50
4062: PUSH
4063: LD_VAR 0 2
4067: ARRAY
4068: PUSH
4069: LD_VAR 0 3
4073: ARRAY
4074: PPUSH
4075: CALL_OW 52
4079: GO 3998
4081: POP
4082: POP
// for j = 1 to side_soldiers [ i ] do
4083: LD_ADDR_VAR 0 3
4087: PUSH
4088: DOUBLE
4089: LD_INT 1
4091: DEC
4092: ST_TO_ADDR
4093: LD_EXP 46
4097: PUSH
4098: LD_VAR 0 2
4102: ARRAY
4103: PUSH
4104: FOR_TO
4105: IFFALSE 4150
// PlaceUnitArea ( side_soldiers [ i ] [ j ] , position_spawn_area [ Side_Positions [ i ] ] , false ) ;
4107: LD_EXP 46
4111: PUSH
4112: LD_VAR 0 2
4116: ARRAY
4117: PUSH
4118: LD_VAR 0 3
4122: ARRAY
4123: PPUSH
4124: LD_EXP 35
4128: PUSH
4129: LD_EXP 2
4133: PUSH
4134: LD_VAR 0 2
4138: ARRAY
4139: ARRAY
4140: PPUSH
4141: LD_INT 0
4143: PPUSH
4144: CALL_OW 49
4148: GO 4104
4150: POP
4151: POP
// for j = 1 to side_vehicles [ i ] do
4152: LD_ADDR_VAR 0 3
4156: PUSH
4157: DOUBLE
4158: LD_INT 1
4160: DEC
4161: ST_TO_ADDR
4162: LD_EXP 50
4166: PUSH
4167: LD_VAR 0 2
4171: ARRAY
4172: PUSH
4173: FOR_TO
4174: IFFALSE 4219
// PlaceUnitArea ( side_vehicles [ i ] [ j ] , position_spawn_area [ Side_Positions [ i ] ] , false ) ;
4176: LD_EXP 50
4180: PUSH
4181: LD_VAR 0 2
4185: ARRAY
4186: PUSH
4187: LD_VAR 0 3
4191: ARRAY
4192: PPUSH
4193: LD_EXP 35
4197: PUSH
4198: LD_EXP 2
4202: PUSH
4203: LD_VAR 0 2
4207: ARRAY
4208: ARRAY
4209: PPUSH
4210: LD_INT 0
4212: PPUSH
4213: CALL_OW 49
4217: GO 4173
4219: POP
4220: POP
// end ;
4221: GO 3672
4223: POP
4224: POP
// end ;
4225: LD_VAR 0 1
4229: RET
// export function INIT_CameraFocus ; begin
4230: LD_INT 0
4232: PPUSH
// if Your_Side >= 1 and Your_Side <= 8 then
4233: LD_OWVAR 2
4237: PUSH
4238: LD_INT 1
4240: GREATEREQUAL
4241: PUSH
4242: LD_OWVAR 2
4246: PUSH
4247: LD_INT 8
4249: LESSEQUAL
4250: AND
4251: IFFALSE 4270
// CenterNowOnUnits ( side_soldiers [ Your_Side ] ) else
4253: LD_EXP 46
4257: PUSH
4258: LD_OWVAR 2
4262: ARRAY
4263: PPUSH
4264: CALL_OW 87
4268: GO 4287
// begin CenterNowOnXY ( 164 , 129 ) ;
4270: LD_INT 164
4272: PPUSH
4273: LD_INT 129
4275: PPUSH
4276: CALL_OW 86
// FogOff ( 1 ) ;
4280: LD_INT 1
4282: PPUSH
4283: CALL_OW 344
// end ; end ; end_of_file
4287: LD_VAR 0 1
4291: RET
// export Game_Type , Side_Positions , Side_Nations , Side_Comps , Side_Teams , Teams , Choice_people_num , Choice_experience , Choice_starting_resources , Choice_crate_spawn_rate , Choice_people_spawn_rate , Choice_spawn_fluctuation , Choice_oil_abundance , Choice_sib_abundance , Choice_victory_cond , Choice_reinforce_cost , Choice_black_FoW , Choice_starting_tech_lvl , people_num , experience , starting_resources , crate_spawn_rate , people_spawn_rate , spawn_fluctuation , oil_abundance , sib_abundance , victory_cond , reinforce_cost , black_fow , starting_tech_lvl , side_tech_lvl , available_oil_deposits , available_siberite_deposits , position_spawn_direction , position_spawn_area , position_drop_zones , fluctuation_base_crates , fluctuation_base_humans , fluctuation_modifier_crates , fluctuation_modifier_humans , current_spawn_rate , past_spawn_rate , composition , new_character_EON , new_character_reinforcements , side_soldiers , side_depots , side_soldier_count , soldier_limit , side_vehicles , CLOCK_crate_spawn , CLOCK_human_spawn , CLOCK_fluctuation , side_isalive , cost_per_human , cost_per_upgrade , side_reinforcement_amount , side_reinforcement_cap , side_pending_order , side_resources_delivered , team_siberite_stocked , team_transfer_zones , transfer_zone_direction , side_chosen_zone , side_zone_locked , side_transfer_clocks , side_units_outside , side_order_type , side_resources_remaining , side_transfer_pending ; export function INIT_LoadMapParams ; var i ; begin
4292: LD_INT 0
4294: PPUSH
4295: PPUSH
// people_num := [ [ 1 , 1 , 1 , 1 , 1 ] , [ 1 , 2 , 2 , 2 , 2 ] , [ 1 , 3 , 3 , 3 , 3 ] , [ 1 , 4 , 4 , 4 , 4 ] ] ;
4296: LD_ADDR_EXP 19
4300: PUSH
4301: LD_INT 1
4303: PUSH
4304: LD_INT 1
4306: PUSH
4307: LD_INT 1
4309: PUSH
4310: LD_INT 1
4312: PUSH
4313: LD_INT 1
4315: PUSH
4316: EMPTY
4317: LIST
4318: LIST
4319: LIST
4320: LIST
4321: LIST
4322: PUSH
4323: LD_INT 1
4325: PUSH
4326: LD_INT 2
4328: PUSH
4329: LD_INT 2
4331: PUSH
4332: LD_INT 2
4334: PUSH
4335: LD_INT 2
4337: PUSH
4338: EMPTY
4339: LIST
4340: LIST
4341: LIST
4342: LIST
4343: LIST
4344: PUSH
4345: LD_INT 1
4347: PUSH
4348: LD_INT 3
4350: PUSH
4351: LD_INT 3
4353: PUSH
4354: LD_INT 3
4356: PUSH
4357: LD_INT 3
4359: PUSH
4360: EMPTY
4361: LIST
4362: LIST
4363: LIST
4364: LIST
4365: LIST
4366: PUSH
4367: LD_INT 1
4369: PUSH
4370: LD_INT 4
4372: PUSH
4373: LD_INT 4
4375: PUSH
4376: LD_INT 4
4378: PUSH
4379: LD_INT 4
4381: PUSH
4382: EMPTY
4383: LIST
4384: LIST
4385: LIST
4386: LIST
4387: LIST
4388: PUSH
4389: EMPTY
4390: LIST
4391: LIST
4392: LIST
4393: LIST
4394: ST_TO_ADDR
// experience := [ 1 , 2 , 4 , 5 ] ;
4395: LD_ADDR_EXP 20
4399: PUSH
4400: LD_INT 1
4402: PUSH
4403: LD_INT 2
4405: PUSH
4406: LD_INT 4
4408: PUSH
4409: LD_INT 5
4411: PUSH
4412: EMPTY
4413: LIST
4414: LIST
4415: LIST
4416: LIST
4417: ST_TO_ADDR
// starting_resources := [ [ 0 , 0 , 0 ] , [ 50 , 30 , 0 ] , [ 100 , 30 , 0 ] , [ 150 , 50 , 0 ] ] ;
4418: LD_ADDR_EXP 21
4422: PUSH
4423: LD_INT 0
4425: PUSH
4426: LD_INT 0
4428: PUSH
4429: LD_INT 0
4431: PUSH
4432: EMPTY
4433: LIST
4434: LIST
4435: LIST
4436: PUSH
4437: LD_INT 50
4439: PUSH
4440: LD_INT 30
4442: PUSH
4443: LD_INT 0
4445: PUSH
4446: EMPTY
4447: LIST
4448: LIST
4449: LIST
4450: PUSH
4451: LD_INT 100
4453: PUSH
4454: LD_INT 30
4456: PUSH
4457: LD_INT 0
4459: PUSH
4460: EMPTY
4461: LIST
4462: LIST
4463: LIST
4464: PUSH
4465: LD_INT 150
4467: PUSH
4468: LD_INT 50
4470: PUSH
4471: LD_INT 0
4473: PUSH
4474: EMPTY
4475: LIST
4476: LIST
4477: LIST
4478: PUSH
4479: EMPTY
4480: LIST
4481: LIST
4482: LIST
4483: LIST
4484: ST_TO_ADDR
// crate_spawn_rate := [ 2 2$00 , 1 1$30 , 1 1$00 , 0 0$30 ] ;
4485: LD_ADDR_EXP 22
4489: PUSH
4490: LD_INT 4200
4492: PUSH
4493: LD_INT 3150
4495: PUSH
4496: LD_INT 2100
4498: PUSH
4499: LD_INT 1050
4501: PUSH
4502: EMPTY
4503: LIST
4504: LIST
4505: LIST
4506: LIST
4507: ST_TO_ADDR
// people_spawn_rate := [ 0 , 15 15$0 , 10 10$0 , 5 5$0 ] ;
4508: LD_ADDR_EXP 23
4512: PUSH
4513: LD_INT 0
4515: PUSH
4516: LD_INT 31500
4518: PUSH
4519: LD_INT 21000
4521: PUSH
4522: LD_INT 10500
4524: PUSH
4525: EMPTY
4526: LIST
4527: LIST
4528: LIST
4529: LIST
4530: ST_TO_ADDR
// spawn_fluctuation := [ 0 , 5 5$0 , 2 2$30 ] ;
4531: LD_ADDR_EXP 24
4535: PUSH
4536: LD_INT 0
4538: PUSH
4539: LD_INT 10500
4541: PUSH
4542: LD_INT 5250
4544: PUSH
4545: EMPTY
4546: LIST
4547: LIST
4548: LIST
4549: ST_TO_ADDR
// oil_abundance := [ 4 , 6 , 8 ] ;
4550: LD_ADDR_EXP 25
4554: PUSH
4555: LD_INT 4
4557: PUSH
4558: LD_INT 6
4560: PUSH
4561: LD_INT 8
4563: PUSH
4564: EMPTY
4565: LIST
4566: LIST
4567: LIST
4568: ST_TO_ADDR
// sib_abundance := [ 2 , 3 , 4 ] ;
4569: LD_ADDR_EXP 26
4573: PUSH
4574: LD_INT 2
4576: PUSH
4577: LD_INT 3
4579: PUSH
4580: LD_INT 4
4582: PUSH
4583: EMPTY
4584: LIST
4585: LIST
4586: LIST
4587: ST_TO_ADDR
// victory_cond := [ 0 , 400 , 800 , 1200 ] ;
4588: LD_ADDR_EXP 27
4592: PUSH
4593: LD_INT 0
4595: PUSH
4596: LD_INT 400
4598: PUSH
4599: LD_INT 800
4601: PUSH
4602: LD_INT 1200
4604: PUSH
4605: EMPTY
4606: LIST
4607: LIST
4608: LIST
4609: LIST
4610: ST_TO_ADDR
// reinforce_cost := [ 1 , 2 , 3 , 4 ] ;
4611: LD_ADDR_EXP 28
4615: PUSH
4616: LD_INT 1
4618: PUSH
4619: LD_INT 2
4621: PUSH
4622: LD_INT 3
4624: PUSH
4625: LD_INT 4
4627: PUSH
4628: EMPTY
4629: LIST
4630: LIST
4631: LIST
4632: LIST
4633: ST_TO_ADDR
// cost_per_human := [ 50 , 70 , 100 , 150 ] ;
4634: LD_ADDR_EXP 55
4638: PUSH
4639: LD_INT 50
4641: PUSH
4642: LD_INT 70
4644: PUSH
4645: LD_INT 100
4647: PUSH
4648: LD_INT 150
4650: PUSH
4651: EMPTY
4652: LIST
4653: LIST
4654: LIST
4655: LIST
4656: ST_TO_ADDR
// cost_per_upgrade := [ [ [ 70 , 30 , 0 ] , [ 100 , 50 , 0 ] , [ 150 , 50 , 0 ] , [ 200 , 100 , 0 ] ] , [ [ 100 , 30 , 0 ] , [ 150 , 50 , 0 ] , [ 200 , 50 , 0 ] , [ 250 , 100 , 0 ] ] , [ [ 130 , 30 , 10 ] , [ 200 , 50 , 20 ] , [ 250 , 50 , 20 ] , [ 300 , 100 , 50 ] ] , [ [ 150 , 0 , 30 ] , [ 250 , 0 , 50 ] , [ 300 , 0 , 70 ] , [ 350 , 0 , 100 ] ] ] ;
4657: LD_ADDR_EXP 56
4661: PUSH
4662: LD_INT 70
4664: PUSH
4665: LD_INT 30
4667: PUSH
4668: LD_INT 0
4670: PUSH
4671: EMPTY
4672: LIST
4673: LIST
4674: LIST
4675: PUSH
4676: LD_INT 100
4678: PUSH
4679: LD_INT 50
4681: PUSH
4682: LD_INT 0
4684: PUSH
4685: EMPTY
4686: LIST
4687: LIST
4688: LIST
4689: PUSH
4690: LD_INT 150
4692: PUSH
4693: LD_INT 50
4695: PUSH
4696: LD_INT 0
4698: PUSH
4699: EMPTY
4700: LIST
4701: LIST
4702: LIST
4703: PUSH
4704: LD_INT 200
4706: PUSH
4707: LD_INT 100
4709: PUSH
4710: LD_INT 0
4712: PUSH
4713: EMPTY
4714: LIST
4715: LIST
4716: LIST
4717: PUSH
4718: EMPTY
4719: LIST
4720: LIST
4721: LIST
4722: LIST
4723: PUSH
4724: LD_INT 100
4726: PUSH
4727: LD_INT 30
4729: PUSH
4730: LD_INT 0
4732: PUSH
4733: EMPTY
4734: LIST
4735: LIST
4736: LIST
4737: PUSH
4738: LD_INT 150
4740: PUSH
4741: LD_INT 50
4743: PUSH
4744: LD_INT 0
4746: PUSH
4747: EMPTY
4748: LIST
4749: LIST
4750: LIST
4751: PUSH
4752: LD_INT 200
4754: PUSH
4755: LD_INT 50
4757: PUSH
4758: LD_INT 0
4760: PUSH
4761: EMPTY
4762: LIST
4763: LIST
4764: LIST
4765: PUSH
4766: LD_INT 250
4768: PUSH
4769: LD_INT 100
4771: PUSH
4772: LD_INT 0
4774: PUSH
4775: EMPTY
4776: LIST
4777: LIST
4778: LIST
4779: PUSH
4780: EMPTY
4781: LIST
4782: LIST
4783: LIST
4784: LIST
4785: PUSH
4786: LD_INT 130
4788: PUSH
4789: LD_INT 30
4791: PUSH
4792: LD_INT 10
4794: PUSH
4795: EMPTY
4796: LIST
4797: LIST
4798: LIST
4799: PUSH
4800: LD_INT 200
4802: PUSH
4803: LD_INT 50
4805: PUSH
4806: LD_INT 20
4808: PUSH
4809: EMPTY
4810: LIST
4811: LIST
4812: LIST
4813: PUSH
4814: LD_INT 250
4816: PUSH
4817: LD_INT 50
4819: PUSH
4820: LD_INT 20
4822: PUSH
4823: EMPTY
4824: LIST
4825: LIST
4826: LIST
4827: PUSH
4828: LD_INT 300
4830: PUSH
4831: LD_INT 100
4833: PUSH
4834: LD_INT 50
4836: PUSH
4837: EMPTY
4838: LIST
4839: LIST
4840: LIST
4841: PUSH
4842: EMPTY
4843: LIST
4844: LIST
4845: LIST
4846: LIST
4847: PUSH
4848: LD_INT 150
4850: PUSH
4851: LD_INT 0
4853: PUSH
4854: LD_INT 30
4856: PUSH
4857: EMPTY
4858: LIST
4859: LIST
4860: LIST
4861: PUSH
4862: LD_INT 250
4864: PUSH
4865: LD_INT 0
4867: PUSH
4868: LD_INT 50
4870: PUSH
4871: EMPTY
4872: LIST
4873: LIST
4874: LIST
4875: PUSH
4876: LD_INT 300
4878: PUSH
4879: LD_INT 0
4881: PUSH
4882: LD_INT 70
4884: PUSH
4885: EMPTY
4886: LIST
4887: LIST
4888: LIST
4889: PUSH
4890: LD_INT 350
4892: PUSH
4893: LD_INT 0
4895: PUSH
4896: LD_INT 100
4898: PUSH
4899: EMPTY
4900: LIST
4901: LIST
4902: LIST
4903: PUSH
4904: EMPTY
4905: LIST
4906: LIST
4907: LIST
4908: LIST
4909: PUSH
4910: EMPTY
4911: LIST
4912: LIST
4913: LIST
4914: LIST
4915: ST_TO_ADDR
// available_oil_deposits := [ [ [ [ 12 , 17 ] , [ 317 , 242 ] ] , [ [ 46 , 47 ] , [ 283 , 211 ] ] , [ [ 34 , 12 ] , [ 295 , 247 ] ] , [ [ 72 , 48 ] , [ 257 , 211 ] ] , [ [ 95 , 78 ] , [ 235 , 182 ] ] ] , [ [ [ 89 , 28 ] , [ 241 , 232 ] ] , [ [ 118 , 41 ] , [ 211 , 218 ] ] , [ [ 125 , 7 ] , [ 203 , 252 ] ] , [ [ 166 , 80 ] , [ 163 , 179 ] ] ] , [ [ [ 192 , 57 ] , [ 137 , 202 ] ] , [ [ 197 , 6 ] , [ 150 , 253 ] ] , [ [ 214 , 66 ] , [ 115 , 192 ] ] , [ [ 208 , 25 ] , [ 121 , 234 ] ] , [ [ 242 , 89 ] , [ 87 , 170 ] ] ] ] ;
4916: LD_ADDR_EXP 32
4920: PUSH
4921: LD_INT 12
4923: PUSH
4924: LD_INT 17
4926: PUSH
4927: EMPTY
4928: LIST
4929: LIST
4930: PUSH
4931: LD_INT 317
4933: PUSH
4934: LD_INT 242
4936: PUSH
4937: EMPTY
4938: LIST
4939: LIST
4940: PUSH
4941: EMPTY
4942: LIST
4943: LIST
4944: PUSH
4945: LD_INT 46
4947: PUSH
4948: LD_INT 47
4950: PUSH
4951: EMPTY
4952: LIST
4953: LIST
4954: PUSH
4955: LD_INT 283
4957: PUSH
4958: LD_INT 211
4960: PUSH
4961: EMPTY
4962: LIST
4963: LIST
4964: PUSH
4965: EMPTY
4966: LIST
4967: LIST
4968: PUSH
4969: LD_INT 34
4971: PUSH
4972: LD_INT 12
4974: PUSH
4975: EMPTY
4976: LIST
4977: LIST
4978: PUSH
4979: LD_INT 295
4981: PUSH
4982: LD_INT 247
4984: PUSH
4985: EMPTY
4986: LIST
4987: LIST
4988: PUSH
4989: EMPTY
4990: LIST
4991: LIST
4992: PUSH
4993: LD_INT 72
4995: PUSH
4996: LD_INT 48
4998: PUSH
4999: EMPTY
5000: LIST
5001: LIST
5002: PUSH
5003: LD_INT 257
5005: PUSH
5006: LD_INT 211
5008: PUSH
5009: EMPTY
5010: LIST
5011: LIST
5012: PUSH
5013: EMPTY
5014: LIST
5015: LIST
5016: PUSH
5017: LD_INT 95
5019: PUSH
5020: LD_INT 78
5022: PUSH
5023: EMPTY
5024: LIST
5025: LIST
5026: PUSH
5027: LD_INT 235
5029: PUSH
5030: LD_INT 182
5032: PUSH
5033: EMPTY
5034: LIST
5035: LIST
5036: PUSH
5037: EMPTY
5038: LIST
5039: LIST
5040: PUSH
5041: EMPTY
5042: LIST
5043: LIST
5044: LIST
5045: LIST
5046: LIST
5047: PUSH
5048: LD_INT 89
5050: PUSH
5051: LD_INT 28
5053: PUSH
5054: EMPTY
5055: LIST
5056: LIST
5057: PUSH
5058: LD_INT 241
5060: PUSH
5061: LD_INT 232
5063: PUSH
5064: EMPTY
5065: LIST
5066: LIST
5067: PUSH
5068: EMPTY
5069: LIST
5070: LIST
5071: PUSH
5072: LD_INT 118
5074: PUSH
5075: LD_INT 41
5077: PUSH
5078: EMPTY
5079: LIST
5080: LIST
5081: PUSH
5082: LD_INT 211
5084: PUSH
5085: LD_INT 218
5087: PUSH
5088: EMPTY
5089: LIST
5090: LIST
5091: PUSH
5092: EMPTY
5093: LIST
5094: LIST
5095: PUSH
5096: LD_INT 125
5098: PUSH
5099: LD_INT 7
5101: PUSH
5102: EMPTY
5103: LIST
5104: LIST
5105: PUSH
5106: LD_INT 203
5108: PUSH
5109: LD_INT 252
5111: PUSH
5112: EMPTY
5113: LIST
5114: LIST
5115: PUSH
5116: EMPTY
5117: LIST
5118: LIST
5119: PUSH
5120: LD_INT 166
5122: PUSH
5123: LD_INT 80
5125: PUSH
5126: EMPTY
5127: LIST
5128: LIST
5129: PUSH
5130: LD_INT 163
5132: PUSH
5133: LD_INT 179
5135: PUSH
5136: EMPTY
5137: LIST
5138: LIST
5139: PUSH
5140: EMPTY
5141: LIST
5142: LIST
5143: PUSH
5144: EMPTY
5145: LIST
5146: LIST
5147: LIST
5148: LIST
5149: PUSH
5150: LD_INT 192
5152: PUSH
5153: LD_INT 57
5155: PUSH
5156: EMPTY
5157: LIST
5158: LIST
5159: PUSH
5160: LD_INT 137
5162: PUSH
5163: LD_INT 202
5165: PUSH
5166: EMPTY
5167: LIST
5168: LIST
5169: PUSH
5170: EMPTY
5171: LIST
5172: LIST
5173: PUSH
5174: LD_INT 197
5176: PUSH
5177: LD_INT 6
5179: PUSH
5180: EMPTY
5181: LIST
5182: LIST
5183: PUSH
5184: LD_INT 150
5186: PUSH
5187: LD_INT 253
5189: PUSH
5190: EMPTY
5191: LIST
5192: LIST
5193: PUSH
5194: EMPTY
5195: LIST
5196: LIST
5197: PUSH
5198: LD_INT 214
5200: PUSH
5201: LD_INT 66
5203: PUSH
5204: EMPTY
5205: LIST
5206: LIST
5207: PUSH
5208: LD_INT 115
5210: PUSH
5211: LD_INT 192
5213: PUSH
5214: EMPTY
5215: LIST
5216: LIST
5217: PUSH
5218: EMPTY
5219: LIST
5220: LIST
5221: PUSH
5222: LD_INT 208
5224: PUSH
5225: LD_INT 25
5227: PUSH
5228: EMPTY
5229: LIST
5230: LIST
5231: PUSH
5232: LD_INT 121
5234: PUSH
5235: LD_INT 234
5237: PUSH
5238: EMPTY
5239: LIST
5240: LIST
5241: PUSH
5242: EMPTY
5243: LIST
5244: LIST
5245: PUSH
5246: LD_INT 242
5248: PUSH
5249: LD_INT 89
5251: PUSH
5252: EMPTY
5253: LIST
5254: LIST
5255: PUSH
5256: LD_INT 87
5258: PUSH
5259: LD_INT 170
5261: PUSH
5262: EMPTY
5263: LIST
5264: LIST
5265: PUSH
5266: EMPTY
5267: LIST
5268: LIST
5269: PUSH
5270: EMPTY
5271: LIST
5272: LIST
5273: LIST
5274: LIST
5275: LIST
5276: PUSH
5277: EMPTY
5278: LIST
5279: LIST
5280: LIST
5281: ST_TO_ADDR
// available_siberite_deposits := [ [ [ [ 61 , 103 ] , [ 268 , 156 ] ] , [ [ 100 , 115 ] , [ 229 , 144 ] ] , [ [ 128 , 105 ] , [ 201 , 154 ] ] , [ [ 113 , 75 ] , [ 216 , 184 ] ] ] , [ [ [ 167 , 143 ] , [ 162 , 116 ] ] , [ [ 129 , 157 ] , [ 200 , 102 ] ] ] ] ;
5282: LD_ADDR_EXP 33
5286: PUSH
5287: LD_INT 61
5289: PUSH
5290: LD_INT 103
5292: PUSH
5293: EMPTY
5294: LIST
5295: LIST
5296: PUSH
5297: LD_INT 268
5299: PUSH
5300: LD_INT 156
5302: PUSH
5303: EMPTY
5304: LIST
5305: LIST
5306: PUSH
5307: EMPTY
5308: LIST
5309: LIST
5310: PUSH
5311: LD_INT 100
5313: PUSH
5314: LD_INT 115
5316: PUSH
5317: EMPTY
5318: LIST
5319: LIST
5320: PUSH
5321: LD_INT 229
5323: PUSH
5324: LD_INT 144
5326: PUSH
5327: EMPTY
5328: LIST
5329: LIST
5330: PUSH
5331: EMPTY
5332: LIST
5333: LIST
5334: PUSH
5335: LD_INT 128
5337: PUSH
5338: LD_INT 105
5340: PUSH
5341: EMPTY
5342: LIST
5343: LIST
5344: PUSH
5345: LD_INT 201
5347: PUSH
5348: LD_INT 154
5350: PUSH
5351: EMPTY
5352: LIST
5353: LIST
5354: PUSH
5355: EMPTY
5356: LIST
5357: LIST
5358: PUSH
5359: LD_INT 113
5361: PUSH
5362: LD_INT 75
5364: PUSH
5365: EMPTY
5366: LIST
5367: LIST
5368: PUSH
5369: LD_INT 216
5371: PUSH
5372: LD_INT 184
5374: PUSH
5375: EMPTY
5376: LIST
5377: LIST
5378: PUSH
5379: EMPTY
5380: LIST
5381: LIST
5382: PUSH
5383: EMPTY
5384: LIST
5385: LIST
5386: LIST
5387: LIST
5388: PUSH
5389: LD_INT 167
5391: PUSH
5392: LD_INT 143
5394: PUSH
5395: EMPTY
5396: LIST
5397: LIST
5398: PUSH
5399: LD_INT 162
5401: PUSH
5402: LD_INT 116
5404: PUSH
5405: EMPTY
5406: LIST
5407: LIST
5408: PUSH
5409: EMPTY
5410: LIST
5411: LIST
5412: PUSH
5413: LD_INT 129
5415: PUSH
5416: LD_INT 157
5418: PUSH
5419: EMPTY
5420: LIST
5421: LIST
5422: PUSH
5423: LD_INT 200
5425: PUSH
5426: LD_INT 102
5428: PUSH
5429: EMPTY
5430: LIST
5431: LIST
5432: PUSH
5433: EMPTY
5434: LIST
5435: LIST
5436: PUSH
5437: EMPTY
5438: LIST
5439: LIST
5440: PUSH
5441: EMPTY
5442: LIST
5443: LIST
5444: ST_TO_ADDR
// position_spawn_direction := [ 2 , 2 , 3 , 3 , 0 , 0 , 5 , 5 ] ;
5445: LD_ADDR_EXP 34
5449: PUSH
5450: LD_INT 2
5452: PUSH
5453: LD_INT 2
5455: PUSH
5456: LD_INT 3
5458: PUSH
5459: LD_INT 3
5461: PUSH
5462: LD_INT 0
5464: PUSH
5465: LD_INT 0
5467: PUSH
5468: LD_INT 5
5470: PUSH
5471: LD_INT 5
5473: PUSH
5474: EMPTY
5475: LIST
5476: LIST
5477: LIST
5478: LIST
5479: LIST
5480: LIST
5481: LIST
5482: LIST
5483: ST_TO_ADDR
// position_spawn_area := [ INIT_SpawnNW , INIT_SpawnNW , INIT_SpawnNE , INIT_SpawnNE , INIT_SpawnSW , INIT_SpawnSW , INIT_SpawnSE , INIT_SpawnSE ] ;
5484: LD_ADDR_EXP 35
5488: PUSH
5489: LD_INT 1
5491: PUSH
5492: LD_INT 1
5494: PUSH
5495: LD_INT 2
5497: PUSH
5498: LD_INT 2
5500: PUSH
5501: LD_INT 4
5503: PUSH
5504: LD_INT 4
5506: PUSH
5507: LD_INT 3
5509: PUSH
5510: LD_INT 3
5512: PUSH
5513: EMPTY
5514: LIST
5515: LIST
5516: LIST
5517: LIST
5518: LIST
5519: LIST
5520: LIST
5521: LIST
5522: ST_TO_ADDR
// position_drop_zones := [ [ 1 , 65 , [ CrateDropSW , CrateDropSE , CrateDropNW , CrateDropNE ] ] , [ 2 , 60 , [ CrateDropMidSW , CrateDropMidNE ] , [ CrateDropMidNW , CrateDropMidSE ] ] , [ 3 , 50 , [ CrateDropMidN , CrateDropMidS ] ] ] ;
5523: LD_ADDR_EXP 36
5527: PUSH
5528: LD_INT 1
5530: PUSH
5531: LD_INT 65
5533: PUSH
5534: LD_INT 5
5536: PUSH
5537: LD_INT 6
5539: PUSH
5540: LD_INT 7
5542: PUSH
5543: LD_INT 8
5545: PUSH
5546: EMPTY
5547: LIST
5548: LIST
5549: LIST
5550: LIST
5551: PUSH
5552: EMPTY
5553: LIST
5554: LIST
5555: LIST
5556: PUSH
5557: LD_INT 2
5559: PUSH
5560: LD_INT 60
5562: PUSH
5563: LD_INT 9
5565: PUSH
5566: LD_INT 13
5568: PUSH
5569: EMPTY
5570: LIST
5571: LIST
5572: PUSH
5573: LD_INT 10
5575: PUSH
5576: LD_INT 14
5578: PUSH
5579: EMPTY
5580: LIST
5581: LIST
5582: PUSH
5583: EMPTY
5584: LIST
5585: LIST
5586: LIST
5587: LIST
5588: PUSH
5589: LD_INT 3
5591: PUSH
5592: LD_INT 50
5594: PUSH
5595: LD_INT 11
5597: PUSH
5598: LD_INT 12
5600: PUSH
5601: EMPTY
5602: LIST
5603: LIST
5604: PUSH
5605: EMPTY
5606: LIST
5607: LIST
5608: LIST
5609: PUSH
5610: EMPTY
5611: LIST
5612: LIST
5613: LIST
5614: ST_TO_ADDR
// fluctuation_base_crates := [ 0 0$12 , 0 0$9 , 0 0$6 , 0 0$2 ] ;
5615: LD_ADDR_EXP 37
5619: PUSH
5620: LD_INT 420
5622: PUSH
5623: LD_INT 315
5625: PUSH
5626: LD_INT 210
5628: PUSH
5629: LD_INT 70
5631: PUSH
5632: EMPTY
5633: LIST
5634: LIST
5635: LIST
5636: LIST
5637: ST_TO_ADDR
// fluctuation_base_humans := [ 0 , 1 1$30 , 1 1$00 , 0 0$30 ] ;
5638: LD_ADDR_EXP 38
5642: PUSH
5643: LD_INT 0
5645: PUSH
5646: LD_INT 3150
5648: PUSH
5649: LD_INT 2100
5651: PUSH
5652: LD_INT 1050
5654: PUSH
5655: EMPTY
5656: LIST
5657: LIST
5658: LIST
5659: LIST
5660: ST_TO_ADDR
// fluctuation_modifier_crates := 0 ;
5661: LD_ADDR_EXP 39
5665: PUSH
5666: LD_INT 0
5668: ST_TO_ADDR
// fluctuation_modifier_humans := 0 ;
5669: LD_ADDR_EXP 40
5673: PUSH
5674: LD_INT 0
5676: ST_TO_ADDR
// current_spawn_rate := 0 ;
5677: LD_ADDR_EXP 41
5681: PUSH
5682: LD_INT 0
5684: ST_TO_ADDR
// past_spawn_rate := 0 ;
5685: LD_ADDR_EXP 42
5689: PUSH
5690: LD_INT 0
5692: ST_TO_ADDR
// side_depots := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
5693: LD_ADDR_EXP 47
5697: PUSH
5698: EMPTY
5699: PUSH
5700: EMPTY
5701: PUSH
5702: EMPTY
5703: PUSH
5704: EMPTY
5705: PUSH
5706: EMPTY
5707: PUSH
5708: EMPTY
5709: PUSH
5710: EMPTY
5711: PUSH
5712: EMPTY
5713: PUSH
5714: EMPTY
5715: LIST
5716: LIST
5717: LIST
5718: LIST
5719: LIST
5720: LIST
5721: LIST
5722: LIST
5723: ST_TO_ADDR
// side_reinforcement_amount := [ 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 ] ;
5724: LD_ADDR_EXP 57
5728: PUSH
5729: LD_INT 1
5731: PUSH
5732: LD_INT 1
5734: PUSH
5735: LD_INT 1
5737: PUSH
5738: LD_INT 1
5740: PUSH
5741: LD_INT 1
5743: PUSH
5744: LD_INT 1
5746: PUSH
5747: LD_INT 1
5749: PUSH
5750: LD_INT 1
5752: PUSH
5753: EMPTY
5754: LIST
5755: LIST
5756: LIST
5757: LIST
5758: LIST
5759: LIST
5760: LIST
5761: LIST
5762: ST_TO_ADDR
// side_reinforcement_cap := [ 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 ] ;
5763: LD_ADDR_EXP 58
5767: PUSH
5768: LD_INT 3
5770: PUSH
5771: LD_INT 3
5773: PUSH
5774: LD_INT 3
5776: PUSH
5777: LD_INT 3
5779: PUSH
5780: LD_INT 3
5782: PUSH
5783: LD_INT 3
5785: PUSH
5786: LD_INT 3
5788: PUSH
5789: LD_INT 3
5791: PUSH
5792: EMPTY
5793: LIST
5794: LIST
5795: LIST
5796: LIST
5797: LIST
5798: LIST
5799: LIST
5800: LIST
5801: ST_TO_ADDR
// team_transfer_zones := [ [ TransferNW , TransferNE ] , [ TransferSW , TransferSE ] ] ;
5802: LD_ADDR_EXP 62
5806: PUSH
5807: LD_INT 15
5809: PUSH
5810: LD_INT 16
5812: PUSH
5813: EMPTY
5814: LIST
5815: LIST
5816: PUSH
5817: LD_INT 18
5819: PUSH
5820: LD_INT 17
5822: PUSH
5823: EMPTY
5824: LIST
5825: LIST
5826: PUSH
5827: EMPTY
5828: LIST
5829: LIST
5830: ST_TO_ADDR
// transfer_zone_direction := [ [ 3 , 4 ] , [ 1 , 5 ] ] ;
5831: LD_ADDR_EXP 63
5835: PUSH
5836: LD_INT 3
5838: PUSH
5839: LD_INT 4
5841: PUSH
5842: EMPTY
5843: LIST
5844: LIST
5845: PUSH
5846: LD_INT 1
5848: PUSH
5849: LD_INT 5
5851: PUSH
5852: EMPTY
5853: LIST
5854: LIST
5855: PUSH
5856: EMPTY
5857: LIST
5858: LIST
5859: ST_TO_ADDR
// side_chosen_zone := [ 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 ] ;
5860: LD_ADDR_EXP 64
5864: PUSH
5865: LD_INT 1
5867: PUSH
5868: LD_INT 1
5870: PUSH
5871: LD_INT 1
5873: PUSH
5874: LD_INT 1
5876: PUSH
5877: LD_INT 1
5879: PUSH
5880: LD_INT 1
5882: PUSH
5883: LD_INT 1
5885: PUSH
5886: LD_INT 1
5888: PUSH
5889: EMPTY
5890: LIST
5891: LIST
5892: LIST
5893: LIST
5894: LIST
5895: LIST
5896: LIST
5897: LIST
5898: ST_TO_ADDR
// side_zone_locked := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5899: LD_ADDR_EXP 65
5903: PUSH
5904: LD_INT 0
5906: PUSH
5907: LD_INT 0
5909: PUSH
5910: LD_INT 0
5912: PUSH
5913: LD_INT 0
5915: PUSH
5916: LD_INT 0
5918: PUSH
5919: LD_INT 0
5921: PUSH
5922: LD_INT 0
5924: PUSH
5925: LD_INT 0
5927: PUSH
5928: EMPTY
5929: LIST
5930: LIST
5931: LIST
5932: LIST
5933: LIST
5934: LIST
5935: LIST
5936: LIST
5937: ST_TO_ADDR
// side_pending_order := [ [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] ] ;
5938: LD_ADDR_EXP 59
5942: PUSH
5943: LD_INT 0
5945: PUSH
5946: LD_INT 0
5948: PUSH
5949: LD_INT 0
5951: PUSH
5952: EMPTY
5953: LIST
5954: LIST
5955: LIST
5956: PUSH
5957: LD_INT 0
5959: PUSH
5960: LD_INT 0
5962: PUSH
5963: LD_INT 0
5965: PUSH
5966: EMPTY
5967: LIST
5968: LIST
5969: LIST
5970: PUSH
5971: LD_INT 0
5973: PUSH
5974: LD_INT 0
5976: PUSH
5977: LD_INT 0
5979: PUSH
5980: EMPTY
5981: LIST
5982: LIST
5983: LIST
5984: PUSH
5985: LD_INT 0
5987: PUSH
5988: LD_INT 0
5990: PUSH
5991: LD_INT 0
5993: PUSH
5994: EMPTY
5995: LIST
5996: LIST
5997: LIST
5998: PUSH
5999: LD_INT 0
6001: PUSH
6002: LD_INT 0
6004: PUSH
6005: LD_INT 0
6007: PUSH
6008: EMPTY
6009: LIST
6010: LIST
6011: LIST
6012: PUSH
6013: LD_INT 0
6015: PUSH
6016: LD_INT 0
6018: PUSH
6019: LD_INT 0
6021: PUSH
6022: EMPTY
6023: LIST
6024: LIST
6025: LIST
6026: PUSH
6027: LD_INT 0
6029: PUSH
6030: LD_INT 0
6032: PUSH
6033: LD_INT 0
6035: PUSH
6036: EMPTY
6037: LIST
6038: LIST
6039: LIST
6040: PUSH
6041: LD_INT 0
6043: PUSH
6044: LD_INT 0
6046: PUSH
6047: LD_INT 0
6049: PUSH
6050: EMPTY
6051: LIST
6052: LIST
6053: LIST
6054: PUSH
6055: EMPTY
6056: LIST
6057: LIST
6058: LIST
6059: LIST
6060: LIST
6061: LIST
6062: LIST
6063: LIST
6064: ST_TO_ADDR
// side_order_type := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6065: LD_ADDR_EXP 68
6069: PUSH
6070: LD_INT 0
6072: PUSH
6073: LD_INT 0
6075: PUSH
6076: LD_INT 0
6078: PUSH
6079: LD_INT 0
6081: PUSH
6082: LD_INT 0
6084: PUSH
6085: LD_INT 0
6087: PUSH
6088: LD_INT 0
6090: PUSH
6091: LD_INT 0
6093: PUSH
6094: EMPTY
6095: LIST
6096: LIST
6097: LIST
6098: LIST
6099: LIST
6100: LIST
6101: LIST
6102: LIST
6103: ST_TO_ADDR
// side_units_outside := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
6104: LD_ADDR_EXP 67
6108: PUSH
6109: EMPTY
6110: PUSH
6111: EMPTY
6112: PUSH
6113: EMPTY
6114: PUSH
6115: EMPTY
6116: PUSH
6117: EMPTY
6118: PUSH
6119: EMPTY
6120: PUSH
6121: EMPTY
6122: PUSH
6123: EMPTY
6124: PUSH
6125: EMPTY
6126: LIST
6127: LIST
6128: LIST
6129: LIST
6130: LIST
6131: LIST
6132: LIST
6133: LIST
6134: ST_TO_ADDR
// side_transfer_pending := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6135: LD_ADDR_EXP 70
6139: PUSH
6140: LD_INT 0
6142: PUSH
6143: LD_INT 0
6145: PUSH
6146: LD_INT 0
6148: PUSH
6149: LD_INT 0
6151: PUSH
6152: LD_INT 0
6154: PUSH
6155: LD_INT 0
6157: PUSH
6158: LD_INT 0
6160: PUSH
6161: LD_INT 0
6163: PUSH
6164: EMPTY
6165: LIST
6166: LIST
6167: LIST
6168: LIST
6169: LIST
6170: LIST
6171: LIST
6172: LIST
6173: ST_TO_ADDR
// side_resources_remaining := [ [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] ] ;
6174: LD_ADDR_EXP 69
6178: PUSH
6179: LD_INT 0
6181: PUSH
6182: LD_INT 0
6184: PUSH
6185: LD_INT 0
6187: PUSH
6188: EMPTY
6189: LIST
6190: LIST
6191: LIST
6192: PUSH
6193: LD_INT 0
6195: PUSH
6196: LD_INT 0
6198: PUSH
6199: LD_INT 0
6201: PUSH
6202: EMPTY
6203: LIST
6204: LIST
6205: LIST
6206: PUSH
6207: LD_INT 0
6209: PUSH
6210: LD_INT 0
6212: PUSH
6213: LD_INT 0
6215: PUSH
6216: EMPTY
6217: LIST
6218: LIST
6219: LIST
6220: PUSH
6221: LD_INT 0
6223: PUSH
6224: LD_INT 0
6226: PUSH
6227: LD_INT 0
6229: PUSH
6230: EMPTY
6231: LIST
6232: LIST
6233: LIST
6234: PUSH
6235: LD_INT 0
6237: PUSH
6238: LD_INT 0
6240: PUSH
6241: LD_INT 0
6243: PUSH
6244: EMPTY
6245: LIST
6246: LIST
6247: LIST
6248: PUSH
6249: LD_INT 0
6251: PUSH
6252: LD_INT 0
6254: PUSH
6255: LD_INT 0
6257: PUSH
6258: EMPTY
6259: LIST
6260: LIST
6261: LIST
6262: PUSH
6263: LD_INT 0
6265: PUSH
6266: LD_INT 0
6268: PUSH
6269: LD_INT 0
6271: PUSH
6272: EMPTY
6273: LIST
6274: LIST
6275: LIST
6276: PUSH
6277: LD_INT 0
6279: PUSH
6280: LD_INT 0
6282: PUSH
6283: LD_INT 0
6285: PUSH
6286: EMPTY
6287: LIST
6288: LIST
6289: LIST
6290: PUSH
6291: EMPTY
6292: LIST
6293: LIST
6294: LIST
6295: LIST
6296: LIST
6297: LIST
6298: LIST
6299: LIST
6300: ST_TO_ADDR
// end ; end_of_file
6301: LD_VAR 0 1
6305: RET
// export function length ( _array ) ; var _x ; begin
6306: LD_INT 0
6308: PPUSH
6309: PPUSH
// Result := 0 ;
6310: LD_ADDR_VAR 0 2
6314: PUSH
6315: LD_INT 0
6317: ST_TO_ADDR
// for _x in _array do
6318: LD_ADDR_VAR 0 3
6322: PUSH
6323: LD_VAR 0 1
6327: PUSH
6328: FOR_IN
6329: IFFALSE 6347
// begin Result := Result + 1 ;
6331: LD_ADDR_VAR 0 2
6335: PUSH
6336: LD_VAR 0 2
6340: PUSH
6341: LD_INT 1
6343: PLUS
6344: ST_TO_ADDR
// end ;
6345: GO 6328
6347: POP
6348: POP
// end ;
6349: LD_VAR 0 2
6353: RET
// export function mp_sides_comps ; var c , i ; begin
6354: LD_INT 0
6356: PPUSH
6357: PPUSH
6358: PPUSH
// c = [ ] ;
6359: LD_ADDR_VAR 0 2
6363: PUSH
6364: EMPTY
6365: ST_TO_ADDR
// for i = 1 to 8 do
6366: LD_ADDR_VAR 0 3
6370: PUSH
6371: DOUBLE
6372: LD_INT 1
6374: DEC
6375: ST_TO_ADDR
6376: LD_INT 8
6378: PUSH
6379: FOR_TO
6380: IFFALSE 6405
// c = c ^ Multiplayer_GetPlayerIsComp ( i ) ;
6382: LD_ADDR_VAR 0 2
6386: PUSH
6387: LD_VAR 0 2
6391: PUSH
6392: LD_VAR 0 3
6396: PPUSH
6397: CALL_OW 532
6401: ADD
6402: ST_TO_ADDR
6403: GO 6379
6405: POP
6406: POP
// result = c ;
6407: LD_ADDR_VAR 0 1
6411: PUSH
6412: LD_VAR 0 2
6416: ST_TO_ADDR
// end ;
6417: LD_VAR 0 1
6421: RET
// export function PrepareCharacters ( side , direction , loadout ) ; begin
6422: LD_INT 0
6424: PPUSH
// InitHc ( ) ;
6425: CALL_OW 19
// InitUc ( ) ;
6429: CALL_OW 18
// if loadout [ 1 ] and Multiplayer then
6433: LD_VAR 0 3
6437: PUSH
6438: LD_INT 1
6440: ARRAY
6441: PUSH
6442: LD_OWVAR 4
6446: AND
6447: IFFALSE 6503
// begin hc_name := mp_sides_players_names [ side ] ;
6449: LD_ADDR_OWVAR 26
6453: PUSH
6454: LD_OWVAR 19
6458: PUSH
6459: LD_VAR 0 1
6463: ARRAY
6464: ST_TO_ADDR
// hc_gallery := MULTIAVATARS ;
6465: LD_ADDR_OWVAR 33
6469: PUSH
6470: LD_STRING MULTIAVATARS
6472: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( side ) ;
6473: LD_ADDR_OWVAR 34
6477: PUSH
6478: LD_VAR 0 1
6482: PPUSH
6483: CALL_OW 525
6487: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( side ) ;
6488: LD_ADDR_OWVAR 27
6492: PUSH
6493: LD_VAR 0 1
6497: PPUSH
6498: CALL_OW 526
6502: ST_TO_ADDR
// end ; uc_side := side ;
6503: LD_ADDR_OWVAR 20
6507: PUSH
6508: LD_VAR 0 1
6512: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
6513: LD_ADDR_OWVAR 21
6517: PUSH
6518: LD_EXP 3
6522: PUSH
6523: LD_VAR 0 1
6527: ARRAY
6528: ST_TO_ADDR
// uc_direction := direction [ Side_Positions [ side ] ] ;
6529: LD_ADDR_OWVAR 24
6533: PUSH
6534: LD_VAR 0 2
6538: PUSH
6539: LD_EXP 2
6543: PUSH
6544: LD_VAR 0 1
6548: ARRAY
6549: ARRAY
6550: ST_TO_ADDR
// hc_class := loadout [ 2 ] ;
6551: LD_ADDR_OWVAR 28
6555: PUSH
6556: LD_VAR 0 3
6560: PUSH
6561: LD_INT 2
6563: ARRAY
6564: ST_TO_ADDR
// hc_attr := loadout [ 3 ] ;
6565: LD_ADDR_OWVAR 29
6569: PUSH
6570: LD_VAR 0 3
6574: PUSH
6575: LD_INT 3
6577: ARRAY
6578: ST_TO_ADDR
// hc_basic_skills := loadout [ 4 ] ;
6579: LD_ADDR_OWVAR 30
6583: PUSH
6584: LD_VAR 0 3
6588: PUSH
6589: LD_INT 4
6591: ARRAY
6592: ST_TO_ADDR
// hc_skills := loadout [ 5 ] ;
6593: LD_ADDR_OWVAR 31
6597: PUSH
6598: LD_VAR 0 3
6602: PUSH
6603: LD_INT 5
6605: ARRAY
6606: ST_TO_ADDR
// hc_importance := loadout [ 6 ] ;
6607: LD_ADDR_OWVAR 32
6611: PUSH
6612: LD_VAR 0 3
6616: PUSH
6617: LD_INT 6
6619: ARRAY
6620: ST_TO_ADDR
// Result := CreateHuman ;
6621: LD_ADDR_VAR 0 4
6625: PUSH
6626: CALL_OW 44
6630: ST_TO_ADDR
// end ;
6631: LD_VAR 0 4
6635: RET
// export function PrepareVehicles ( side , direction ) ; begin
6636: LD_INT 0
6638: PPUSH
// InitUc ( ) ;
6639: CALL_OW 18
// InitVc ( ) ;
6643: CALL_OW 20
// uc_direction := direction [ Side_Positions [ side ] ] ;
6647: LD_ADDR_OWVAR 24
6651: PUSH
6652: LD_VAR 0 2
6656: PUSH
6657: LD_EXP 2
6661: PUSH
6662: LD_VAR 0 1
6666: ARRAY
6667: ARRAY
6668: ST_TO_ADDR
// uc_side := side ;
6669: LD_ADDR_OWVAR 20
6673: PUSH
6674: LD_VAR 0 1
6678: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
6679: LD_ADDR_OWVAR 21
6683: PUSH
6684: LD_EXP 3
6688: PUSH
6689: LD_VAR 0 1
6693: ARRAY
6694: ST_TO_ADDR
// vc_control := 1 ;
6695: LD_ADDR_OWVAR 38
6699: PUSH
6700: LD_INT 1
6702: ST_TO_ADDR
// vc_engine := 1 ;
6703: LD_ADDR_OWVAR 39
6707: PUSH
6708: LD_INT 1
6710: ST_TO_ADDR
// vc_fuel_battery := 85 ;
6711: LD_ADDR_OWVAR 41
6715: PUSH
6716: LD_INT 85
6718: ST_TO_ADDR
// case Side_Nations [ side ] of 1 :
6719: LD_EXP 3
6723: PUSH
6724: LD_VAR 0 1
6728: ARRAY
6729: PUSH
6730: LD_INT 1
6732: DOUBLE
6733: EQUAL
6734: IFTRUE 6738
6736: GO 6757
6738: POP
// begin vc_chassis := 2 ;
6739: LD_ADDR_OWVAR 37
6743: PUSH
6744: LD_INT 2
6746: ST_TO_ADDR
// vc_weapon := 12 ;
6747: LD_ADDR_OWVAR 40
6751: PUSH
6752: LD_INT 12
6754: ST_TO_ADDR
// end ; 2 :
6755: GO 6812
6757: LD_INT 2
6759: DOUBLE
6760: EQUAL
6761: IFTRUE 6765
6763: GO 6784
6765: POP
// begin vc_chassis := 13 ;
6766: LD_ADDR_OWVAR 37
6770: PUSH
6771: LD_INT 13
6773: ST_TO_ADDR
// vc_weapon := 32 ;
6774: LD_ADDR_OWVAR 40
6778: PUSH
6779: LD_INT 32
6781: ST_TO_ADDR
// end ; 3 :
6782: GO 6812
6784: LD_INT 3
6786: DOUBLE
6787: EQUAL
6788: IFTRUE 6792
6790: GO 6811
6792: POP
// begin vc_chassis := 21 ;
6793: LD_ADDR_OWVAR 37
6797: PUSH
6798: LD_INT 21
6800: ST_TO_ADDR
// vc_weapon := 51 ;
6801: LD_ADDR_OWVAR 40
6805: PUSH
6806: LD_INT 51
6808: ST_TO_ADDR
// end ; end ;
6809: GO 6812
6811: POP
// Result := CreateVehicle ;
6812: LD_ADDR_VAR 0 3
6816: PUSH
6817: CALL_OW 45
6821: ST_TO_ADDR
// end ;
6822: LD_VAR 0 3
6826: RET
// export function DidPlayerLose ( side ) ; var depots , colour ; begin
6827: LD_INT 0
6829: PPUSH
6830: PPUSH
6831: PPUSH
// if side_soldiers [ side ] = 0 then
6832: LD_EXP 46
6836: PUSH
6837: LD_VAR 0 1
6841: ARRAY
6842: PUSH
6843: LD_INT 0
6845: EQUAL
6846: IFFALSE 7033
// begin depots := FilterAllUnits ( [ [ f_side , side ] , [ f_type , 3 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) ;
6848: LD_ADDR_VAR 0 3
6852: PUSH
6853: LD_INT 22
6855: PUSH
6856: LD_VAR 0 1
6860: PUSH
6861: EMPTY
6862: LIST
6863: LIST
6864: PUSH
6865: LD_INT 21
6867: PUSH
6868: LD_INT 3
6870: PUSH
6871: EMPTY
6872: LIST
6873: LIST
6874: PUSH
6875: LD_INT 2
6877: PUSH
6878: LD_INT 30
6880: PUSH
6881: LD_INT 0
6883: PUSH
6884: EMPTY
6885: LIST
6886: LIST
6887: PUSH
6888: LD_INT 30
6890: PUSH
6891: LD_INT 1
6893: PUSH
6894: EMPTY
6895: LIST
6896: LIST
6897: PUSH
6898: EMPTY
6899: LIST
6900: LIST
6901: LIST
6902: PUSH
6903: EMPTY
6904: LIST
6905: LIST
6906: LIST
6907: PPUSH
6908: CALL_OW 69
6912: ST_TO_ADDR
// if depots + 0 = 0 then
6913: LD_VAR 0 3
6917: PUSH
6918: LD_INT 0
6920: PLUS
6921: PUSH
6922: LD_INT 0
6924: EQUAL
6925: IFFALSE 7033
// begin side_isalive := Replace ( side_isalive , side , 0 ) ;
6927: LD_ADDR_EXP 54
6931: PUSH
6932: LD_EXP 54
6936: PPUSH
6937: LD_VAR 0 1
6941: PPUSH
6942: LD_INT 0
6944: PPUSH
6945: CALL_OW 1
6949: ST_TO_ADDR
// if side = Your_Side then
6950: LD_VAR 0 1
6954: PUSH
6955: LD_OWVAR 2
6959: EQUAL
6960: IFFALSE 6975
// begin ToLua ( LUA_Lost(); ) ;
6962: LD_STRING LUA_Lost();
6964: PPUSH
6965: CALL_OW 559
// Multiplayer_Loose_Message ( ) ;
6969: CALL_OW 521
// end else
6973: GO 6983
// colour := 0 ;
6975: LD_ADDR_VAR 0 4
6979: PUSH
6980: LD_INT 0
6982: ST_TO_ADDR
// ToLua ( LUA_UpdateSpecInterface( & side & , & colour & , & side_tech_lvl [ side ] & ); ) ;
6983: LD_STRING LUA_UpdateSpecInterface(
6985: PUSH
6986: LD_VAR 0 1
6990: STR
6991: PUSH
6992: LD_STRING ,
6994: STR
6995: PUSH
6996: LD_VAR 0 4
7000: STR
7001: PUSH
7002: LD_STRING ,
7004: STR
7005: PUSH
7006: LD_EXP 31
7010: PUSH
7011: LD_VAR 0 1
7015: ARRAY
7016: STR
7017: PUSH
7018: LD_STRING );
7020: STR
7021: PPUSH
7022: CALL_OW 559
// RaiseSailEvent ( 66 ) ;
7026: LD_INT 66
7028: PPUSH
7029: CALL_OW 427
// end ; end ; end ;
7033: LD_VAR 0 2
7037: RET
// export function CheckPlayerPresence ; var i , colour ; begin
7038: LD_INT 0
7040: PPUSH
7041: PPUSH
7042: PPUSH
// for i = 1 to 8 do
7043: LD_ADDR_VAR 0 2
7047: PUSH
7048: DOUBLE
7049: LD_INT 1
7051: DEC
7052: ST_TO_ADDR
7053: LD_INT 8
7055: PUSH
7056: FOR_TO
7057: IFFALSE 7176
// begin if not MultiplayerSideAlive ( i ) and side_isalive [ i ] then
7059: LD_VAR 0 2
7063: PPUSH
7064: CALL_OW 108
7068: NOT
7069: PUSH
7070: LD_EXP 54
7074: PUSH
7075: LD_VAR 0 2
7079: ARRAY
7080: AND
7081: IFFALSE 7174
// begin side_isalive := Replace ( side_isalive , i , 0 ) ;
7083: LD_ADDR_EXP 54
7087: PUSH
7088: LD_EXP 54
7092: PPUSH
7093: LD_VAR 0 2
7097: PPUSH
7098: LD_INT 0
7100: PPUSH
7101: CALL_OW 1
7105: ST_TO_ADDR
// if Your_Side = 9 then
7106: LD_OWVAR 2
7110: PUSH
7111: LD_INT 9
7113: EQUAL
7114: IFFALSE 7167
// begin colour := 0 ;
7116: LD_ADDR_VAR 0 3
7120: PUSH
7121: LD_INT 0
7123: ST_TO_ADDR
// ToLua ( LUA_UpdateSpecInterface( & i & , & colour & , & side_tech_lvl [ i ] & ); ) ;
7124: LD_STRING LUA_UpdateSpecInterface(
7126: PUSH
7127: LD_VAR 0 2
7131: STR
7132: PUSH
7133: LD_STRING ,
7135: STR
7136: PUSH
7137: LD_VAR 0 3
7141: STR
7142: PUSH
7143: LD_STRING ,
7145: STR
7146: PUSH
7147: LD_EXP 31
7151: PUSH
7152: LD_VAR 0 2
7156: ARRAY
7157: STR
7158: PUSH
7159: LD_STRING );
7161: STR
7162: PPUSH
7163: CALL_OW 559
// end ; RaiseSailEvent ( 66 ) ;
7167: LD_INT 66
7169: PPUSH
7170: CALL_OW 427
// end ; end ;
7174: GO 7056
7176: POP
7177: POP
// end ;
7178: LD_VAR 0 1
7182: RET
// function TechUnlock ( techs , side , state ) ; var i ; begin
7183: LD_INT 0
7185: PPUSH
7186: PPUSH
// for i in techs do
7187: LD_ADDR_VAR 0 5
7191: PUSH
7192: LD_VAR 0 1
7196: PUSH
7197: FOR_IN
7198: IFFALSE 7241
// if Researched ( side , i ) = 0 then
7200: LD_VAR 0 2
7204: PPUSH
7205: LD_VAR 0 5
7209: PPUSH
7210: CALL_OW 325
7214: PUSH
7215: LD_INT 0
7217: EQUAL
7218: IFFALSE 7239
// SetTech ( i , side , state ) ;
7220: LD_VAR 0 5
7224: PPUSH
7225: LD_VAR 0 2
7229: PPUSH
7230: LD_VAR 0 3
7234: PPUSH
7235: CALL_OW 322
7239: GO 7197
7241: POP
7242: POP
// end ;
7243: LD_VAR 0 4
7247: RET
// function BuildingUnlock ( buildings , side , state ) ; var i ; begin
7248: LD_INT 0
7250: PPUSH
7251: PPUSH
// for i in buildings do
7252: LD_ADDR_VAR 0 5
7256: PUSH
7257: LD_VAR 0 1
7261: PUSH
7262: FOR_IN
7263: IFFALSE 7286
// SetRestrict ( i , side , state ) ;
7265: LD_VAR 0 5
7269: PPUSH
7270: LD_VAR 0 2
7274: PPUSH
7275: LD_VAR 0 3
7279: PPUSH
7280: CALL_OW 324
7284: GO 7262
7286: POP
7287: POP
// end ;
7288: LD_VAR 0 4
7292: RET
// export function DisableAllTechs ( side ) ; var techs , buildings ; begin
7293: LD_INT 0
7295: PPUSH
7296: PPUSH
7297: PPUSH
// techs := [ 35 , 45 , 46 , 47 , 1 , 2 , 11 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 12 , 13 , 10 , 14 , 15 , 18 , 16 , 17 , 20 , 19 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 36 , 70 , 69 , 39 , 34 , 40 , 71 , 41 , 42 , 43 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 63 , 64 , 65 , 66 , 67 , 68 ] ;
7298: LD_ADDR_VAR 0 3
7302: PUSH
7303: LD_INT 35
7305: PUSH
7306: LD_INT 45
7308: PUSH
7309: LD_INT 46
7311: PUSH
7312: LD_INT 47
7314: PUSH
7315: LD_INT 1
7317: PUSH
7318: LD_INT 2
7320: PUSH
7321: LD_INT 11
7323: PUSH
7324: LD_INT 3
7326: PUSH
7327: LD_INT 4
7329: PUSH
7330: LD_INT 5
7332: PUSH
7333: LD_INT 6
7335: PUSH
7336: LD_INT 7
7338: PUSH
7339: LD_INT 8
7341: PUSH
7342: LD_INT 9
7344: PUSH
7345: LD_INT 12
7347: PUSH
7348: LD_INT 13
7350: PUSH
7351: LD_INT 10
7353: PUSH
7354: LD_INT 14
7356: PUSH
7357: LD_INT 15
7359: PUSH
7360: LD_INT 18
7362: PUSH
7363: LD_INT 16
7365: PUSH
7366: LD_INT 17
7368: PUSH
7369: LD_INT 20
7371: PUSH
7372: LD_INT 19
7374: PUSH
7375: LD_INT 21
7377: PUSH
7378: LD_INT 22
7380: PUSH
7381: LD_INT 23
7383: PUSH
7384: LD_INT 24
7386: PUSH
7387: LD_INT 25
7389: PUSH
7390: LD_INT 26
7392: PUSH
7393: LD_INT 28
7395: PUSH
7396: LD_INT 29
7398: PUSH
7399: LD_INT 30
7401: PUSH
7402: LD_INT 31
7404: PUSH
7405: LD_INT 37
7407: PUSH
7408: LD_INT 38
7410: PUSH
7411: LD_INT 32
7413: PUSH
7414: LD_INT 27
7416: PUSH
7417: LD_INT 33
7419: PUSH
7420: LD_INT 36
7422: PUSH
7423: LD_INT 70
7425: PUSH
7426: LD_INT 69
7428: PUSH
7429: LD_INT 39
7431: PUSH
7432: LD_INT 34
7434: PUSH
7435: LD_INT 40
7437: PUSH
7438: LD_INT 71
7440: PUSH
7441: LD_INT 41
7443: PUSH
7444: LD_INT 42
7446: PUSH
7447: LD_INT 43
7449: PUSH
7450: LD_INT 44
7452: PUSH
7453: LD_INT 48
7455: PUSH
7456: LD_INT 49
7458: PUSH
7459: LD_INT 50
7461: PUSH
7462: LD_INT 51
7464: PUSH
7465: LD_INT 52
7467: PUSH
7468: LD_INT 53
7470: PUSH
7471: LD_INT 54
7473: PUSH
7474: LD_INT 55
7476: PUSH
7477: LD_INT 56
7479: PUSH
7480: LD_INT 57
7482: PUSH
7483: LD_INT 58
7485: PUSH
7486: LD_INT 59
7488: PUSH
7489: LD_INT 60
7491: PUSH
7492: LD_INT 61
7494: PUSH
7495: LD_INT 62
7497: PUSH
7498: LD_INT 63
7500: PUSH
7501: LD_INT 64
7503: PUSH
7504: LD_INT 65
7506: PUSH
7507: LD_INT 66
7509: PUSH
7510: LD_INT 67
7512: PUSH
7513: LD_INT 68
7515: PUSH
7516: EMPTY
7517: LIST
7518: LIST
7519: LIST
7520: LIST
7521: LIST
7522: LIST
7523: LIST
7524: LIST
7525: LIST
7526: LIST
7527: LIST
7528: LIST
7529: LIST
7530: LIST
7531: LIST
7532: LIST
7533: LIST
7534: LIST
7535: LIST
7536: LIST
7537: LIST
7538: LIST
7539: LIST
7540: LIST
7541: LIST
7542: LIST
7543: LIST
7544: LIST
7545: LIST
7546: LIST
7547: LIST
7548: LIST
7549: LIST
7550: LIST
7551: LIST
7552: LIST
7553: LIST
7554: LIST
7555: LIST
7556: LIST
7557: LIST
7558: LIST
7559: LIST
7560: LIST
7561: LIST
7562: LIST
7563: LIST
7564: LIST
7565: LIST
7566: LIST
7567: LIST
7568: LIST
7569: LIST
7570: LIST
7571: LIST
7572: LIST
7573: LIST
7574: LIST
7575: LIST
7576: LIST
7577: LIST
7578: LIST
7579: LIST
7580: LIST
7581: LIST
7582: LIST
7583: LIST
7584: LIST
7585: LIST
7586: LIST
7587: LIST
7588: ST_TO_ADDR
// buildings := [ 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 , 37 , 38 , 39 ] ;
7589: LD_ADDR_VAR 0 4
7593: PUSH
7594: LD_INT 0
7596: PUSH
7597: LD_INT 1
7599: PUSH
7600: LD_INT 2
7602: PUSH
7603: LD_INT 3
7605: PUSH
7606: LD_INT 4
7608: PUSH
7609: LD_INT 5
7611: PUSH
7612: LD_INT 6
7614: PUSH
7615: LD_INT 7
7617: PUSH
7618: LD_INT 8
7620: PUSH
7621: LD_INT 9
7623: PUSH
7624: LD_INT 10
7626: PUSH
7627: LD_INT 11
7629: PUSH
7630: LD_INT 12
7632: PUSH
7633: LD_INT 13
7635: PUSH
7636: LD_INT 14
7638: PUSH
7639: LD_INT 15
7641: PUSH
7642: LD_INT 16
7644: PUSH
7645: LD_INT 17
7647: PUSH
7648: LD_INT 18
7650: PUSH
7651: LD_INT 19
7653: PUSH
7654: LD_INT 20
7656: PUSH
7657: LD_INT 21
7659: PUSH
7660: LD_INT 22
7662: PUSH
7663: LD_INT 23
7665: PUSH
7666: LD_INT 24
7668: PUSH
7669: LD_INT 25
7671: PUSH
7672: LD_INT 26
7674: PUSH
7675: LD_INT 27
7677: PUSH
7678: LD_INT 28
7680: PUSH
7681: LD_INT 29
7683: PUSH
7684: LD_INT 30
7686: PUSH
7687: LD_INT 31
7689: PUSH
7690: LD_INT 32
7692: PUSH
7693: LD_INT 33
7695: PUSH
7696: LD_INT 34
7698: PUSH
7699: LD_INT 35
7701: PUSH
7702: LD_INT 36
7704: PUSH
7705: LD_INT 37
7707: PUSH
7708: LD_INT 38
7710: PUSH
7711: LD_INT 39
7713: PUSH
7714: EMPTY
7715: LIST
7716: LIST
7717: LIST
7718: LIST
7719: LIST
7720: LIST
7721: LIST
7722: LIST
7723: LIST
7724: LIST
7725: LIST
7726: LIST
7727: LIST
7728: LIST
7729: LIST
7730: LIST
7731: LIST
7732: LIST
7733: LIST
7734: LIST
7735: LIST
7736: LIST
7737: LIST
7738: LIST
7739: LIST
7740: LIST
7741: LIST
7742: LIST
7743: LIST
7744: LIST
7745: LIST
7746: LIST
7747: LIST
7748: LIST
7749: LIST
7750: LIST
7751: LIST
7752: LIST
7753: LIST
7754: LIST
7755: ST_TO_ADDR
// TechUnlock ( techs , side , 0 ) ;
7756: LD_VAR 0 3
7760: PPUSH
7761: LD_VAR 0 1
7765: PPUSH
7766: LD_INT 0
7768: PPUSH
7769: CALL 7183 0 3
// BuildingUnlock ( buildings , side , 0 ) ;
7773: LD_VAR 0 4
7777: PPUSH
7778: LD_VAR 0 1
7782: PPUSH
7783: LD_INT 0
7785: PPUSH
7786: CALL 7248 0 3
// end ;
7790: LD_VAR 0 2
7794: RET
// export function TechUpgrade ( tier , nation , side ) ; var techs , buildings , reinforcement , i ; begin
7795: LD_INT 0
7797: PPUSH
7798: PPUSH
7799: PPUSH
7800: PPUSH
7801: PPUSH
// techs := [ ] ;
7802: LD_ADDR_VAR 0 5
7806: PUSH
7807: EMPTY
7808: ST_TO_ADDR
// buildings := [ ] ;
7809: LD_ADDR_VAR 0 6
7813: PUSH
7814: EMPTY
7815: ST_TO_ADDR
// case tier of 0 :
7816: LD_VAR 0 1
7820: PUSH
7821: LD_INT 0
7823: DOUBLE
7824: EQUAL
7825: IFTRUE 7829
7827: GO 8173
7829: POP
// begin case nation of 1 :
7830: LD_VAR 0 2
7834: PUSH
7835: LD_INT 1
7837: DOUBLE
7838: EQUAL
7839: IFTRUE 7843
7841: GO 7948
7843: POP
// begin techs := [ 35 , 45 , 46 , 47 , 69 , 48 , 51 ] ;
7844: LD_ADDR_VAR 0 5
7848: PUSH
7849: LD_INT 35
7851: PUSH
7852: LD_INT 45
7854: PUSH
7855: LD_INT 46
7857: PUSH
7858: LD_INT 47
7860: PUSH
7861: LD_INT 69
7863: PUSH
7864: LD_INT 48
7866: PUSH
7867: LD_INT 51
7869: PUSH
7870: EMPTY
7871: LIST
7872: LIST
7873: LIST
7874: LIST
7875: LIST
7876: LIST
7877: LIST
7878: ST_TO_ADDR
// buildings := [ 0 , 2 , 3 , 4 , 6 , 7 , 8 , 10 , 16 , 19 , 26 , 27 , 29 , 31 , 32 ] ;
7879: LD_ADDR_VAR 0 6
7883: PUSH
7884: LD_INT 0
7886: PUSH
7887: LD_INT 2
7889: PUSH
7890: LD_INT 3
7892: PUSH
7893: LD_INT 4
7895: PUSH
7896: LD_INT 6
7898: PUSH
7899: LD_INT 7
7901: PUSH
7902: LD_INT 8
7904: PUSH
7905: LD_INT 10
7907: PUSH
7908: LD_INT 16
7910: PUSH
7911: LD_INT 19
7913: PUSH
7914: LD_INT 26
7916: PUSH
7917: LD_INT 27
7919: PUSH
7920: LD_INT 29
7922: PUSH
7923: LD_INT 31
7925: PUSH
7926: LD_INT 32
7928: PUSH
7929: EMPTY
7930: LIST
7931: LIST
7932: LIST
7933: LIST
7934: LIST
7935: LIST
7936: LIST
7937: LIST
7938: LIST
7939: LIST
7940: LIST
7941: LIST
7942: LIST
7943: LIST
7944: LIST
7945: ST_TO_ADDR
// end ; 2 :
7946: GO 8163
7948: LD_INT 2
7950: DOUBLE
7951: EQUAL
7952: IFTRUE 7956
7954: GO 8061
7956: POP
// begin techs := [ 35 , 45 , 46 , 47 , 69 , 48 , 51 ] ;
7957: LD_ADDR_VAR 0 5
7961: PUSH
7962: LD_INT 35
7964: PUSH
7965: LD_INT 45
7967: PUSH
7968: LD_INT 46
7970: PUSH
7971: LD_INT 47
7973: PUSH
7974: LD_INT 69
7976: PUSH
7977: LD_INT 48
7979: PUSH
7980: LD_INT 51
7982: PUSH
7983: EMPTY
7984: LIST
7985: LIST
7986: LIST
7987: LIST
7988: LIST
7989: LIST
7990: LIST
7991: ST_TO_ADDR
// buildings := [ 0 , 2 , 3 , 4 , 6 , 7 , 8 , 10 , 16 , 23 , 26 , 27 , 29 , 31 , 32 ] ;
7992: LD_ADDR_VAR 0 6
7996: PUSH
7997: LD_INT 0
7999: PUSH
8000: LD_INT 2
8002: PUSH
8003: LD_INT 3
8005: PUSH
8006: LD_INT 4
8008: PUSH
8009: LD_INT 6
8011: PUSH
8012: LD_INT 7
8014: PUSH
8015: LD_INT 8
8017: PUSH
8018: LD_INT 10
8020: PUSH
8021: LD_INT 16
8023: PUSH
8024: LD_INT 23
8026: PUSH
8027: LD_INT 26
8029: PUSH
8030: LD_INT 27
8032: PUSH
8033: LD_INT 29
8035: PUSH
8036: LD_INT 31
8038: PUSH
8039: LD_INT 32
8041: PUSH
8042: EMPTY
8043: LIST
8044: LIST
8045: LIST
8046: LIST
8047: LIST
8048: LIST
8049: LIST
8050: LIST
8051: LIST
8052: LIST
8053: LIST
8054: LIST
8055: LIST
8056: LIST
8057: LIST
8058: ST_TO_ADDR
// end ; 3 :
8059: GO 8163
8061: LD_INT 3
8063: DOUBLE
8064: EQUAL
8065: IFTRUE 8069
8067: GO 8162
8069: POP
// begin techs := [ 46 , 47 , 69 , 48 , 51 ] ;
8070: LD_ADDR_VAR 0 5
8074: PUSH
8075: LD_INT 46
8077: PUSH
8078: LD_INT 47
8080: PUSH
8081: LD_INT 69
8083: PUSH
8084: LD_INT 48
8086: PUSH
8087: LD_INT 51
8089: PUSH
8090: EMPTY
8091: LIST
8092: LIST
8093: LIST
8094: LIST
8095: LIST
8096: ST_TO_ADDR
// buildings := [ 0 , 2 , 3 , 4 , 6 , 7 , 8 , 10 , 16 , 19 , 26 , 29 , 31 , 32 ] ;
8097: LD_ADDR_VAR 0 6
8101: PUSH
8102: LD_INT 0
8104: PUSH
8105: LD_INT 2
8107: PUSH
8108: LD_INT 3
8110: PUSH
8111: LD_INT 4
8113: PUSH
8114: LD_INT 6
8116: PUSH
8117: LD_INT 7
8119: PUSH
8120: LD_INT 8
8122: PUSH
8123: LD_INT 10
8125: PUSH
8126: LD_INT 16
8128: PUSH
8129: LD_INT 19
8131: PUSH
8132: LD_INT 26
8134: PUSH
8135: LD_INT 29
8137: PUSH
8138: LD_INT 31
8140: PUSH
8141: LD_INT 32
8143: PUSH
8144: EMPTY
8145: LIST
8146: LIST
8147: LIST
8148: LIST
8149: LIST
8150: LIST
8151: LIST
8152: LIST
8153: LIST
8154: LIST
8155: LIST
8156: LIST
8157: LIST
8158: LIST
8159: ST_TO_ADDR
// end ; end ;
8160: GO 8163
8162: POP
// reinforcement := 3 ;
8163: LD_ADDR_VAR 0 7
8167: PUSH
8168: LD_INT 3
8170: ST_TO_ADDR
// end ; 1 :
8171: GO 11029
8173: LD_INT 1
8175: DOUBLE
8176: EQUAL
8177: IFTRUE 8181
8179: GO 8657
8181: POP
// begin case nation of 1 :
8182: LD_VAR 0 2
8186: PUSH
8187: LD_INT 1
8189: DOUBLE
8190: EQUAL
8191: IFTRUE 8195
8193: GO 8344
8195: POP
// begin techs := [ 35 , 45 , 46 , 47 , 6 , 7 , 20 , 69 , 39 , 48 , 49 , 51 , 52 , 60 ] ;
8196: LD_ADDR_VAR 0 5
8200: PUSH
8201: LD_INT 35
8203: PUSH
8204: LD_INT 45
8206: PUSH
8207: LD_INT 46
8209: PUSH
8210: LD_INT 47
8212: PUSH
8213: LD_INT 6
8215: PUSH
8216: LD_INT 7
8218: PUSH
8219: LD_INT 20
8221: PUSH
8222: LD_INT 69
8224: PUSH
8225: LD_INT 39
8227: PUSH
8228: LD_INT 48
8230: PUSH
8231: LD_INT 49
8233: PUSH
8234: LD_INT 51
8236: PUSH
8237: LD_INT 52
8239: PUSH
8240: LD_INT 60
8242: PUSH
8243: EMPTY
8244: LIST
8245: LIST
8246: LIST
8247: LIST
8248: LIST
8249: LIST
8250: LIST
8251: LIST
8252: LIST
8253: LIST
8254: LIST
8255: LIST
8256: LIST
8257: LIST
8258: ST_TO_ADDR
// buildings := [ 0 , 2 , 3 , 4 , 6 , 7 , 8 , 10 , 15 , 16 , 17 , 19 , 20 , 26 , 27 , 29 , 30 , 31 , 32 ] ;
8259: LD_ADDR_VAR 0 6
8263: PUSH
8264: LD_INT 0
8266: PUSH
8267: LD_INT 2
8269: PUSH
8270: LD_INT 3
8272: PUSH
8273: LD_INT 4
8275: PUSH
8276: LD_INT 6
8278: PUSH
8279: LD_INT 7
8281: PUSH
8282: LD_INT 8
8284: PUSH
8285: LD_INT 10
8287: PUSH
8288: LD_INT 15
8290: PUSH
8291: LD_INT 16
8293: PUSH
8294: LD_INT 17
8296: PUSH
8297: LD_INT 19
8299: PUSH
8300: LD_INT 20
8302: PUSH
8303: LD_INT 26
8305: PUSH
8306: LD_INT 27
8308: PUSH
8309: LD_INT 29
8311: PUSH
8312: LD_INT 30
8314: PUSH
8315: LD_INT 31
8317: PUSH
8318: LD_INT 32
8320: PUSH
8321: EMPTY
8322: LIST
8323: LIST
8324: LIST
8325: LIST
8326: LIST
8327: LIST
8328: LIST
8329: LIST
8330: LIST
8331: LIST
8332: LIST
8333: LIST
8334: LIST
8335: LIST
8336: LIST
8337: LIST
8338: LIST
8339: LIST
8340: LIST
8341: ST_TO_ADDR
// end ; 2 :
8342: GO 8647
8344: LD_INT 2
8346: DOUBLE
8347: EQUAL
8348: IFTRUE 8352
8350: GO 8509
8352: POP
// begin techs := [ 35 , 45 , 46 , 47 , 6 , 7 , 20 , 70 , 69 , 39 , 48 , 49 , 51 , 52 , 60 ] ;
8353: LD_ADDR_VAR 0 5
8357: PUSH
8358: LD_INT 35
8360: PUSH
8361: LD_INT 45
8363: PUSH
8364: LD_INT 46
8366: PUSH
8367: LD_INT 47
8369: PUSH
8370: LD_INT 6
8372: PUSH
8373: LD_INT 7
8375: PUSH
8376: LD_INT 20
8378: PUSH
8379: LD_INT 70
8381: PUSH
8382: LD_INT 69
8384: PUSH
8385: LD_INT 39
8387: PUSH
8388: LD_INT 48
8390: PUSH
8391: LD_INT 49
8393: PUSH
8394: LD_INT 51
8396: PUSH
8397: LD_INT 52
8399: PUSH
8400: LD_INT 60
8402: PUSH
8403: EMPTY
8404: LIST
8405: LIST
8406: LIST
8407: LIST
8408: LIST
8409: LIST
8410: LIST
8411: LIST
8412: LIST
8413: LIST
8414: LIST
8415: LIST
8416: LIST
8417: LIST
8418: LIST
8419: ST_TO_ADDR
// buildings := [ 0 , 2 , 3 , 4 , 6 , 7 , 8 , 10 , 15 , 16 , 17 , 20 , 23 , 26 , 27 , 29 , 30 , 31 , 32 , 42 ] ;
8420: LD_ADDR_VAR 0 6
8424: PUSH
8425: LD_INT 0
8427: PUSH
8428: LD_INT 2
8430: PUSH
8431: LD_INT 3
8433: PUSH
8434: LD_INT 4
8436: PUSH
8437: LD_INT 6
8439: PUSH
8440: LD_INT 7
8442: PUSH
8443: LD_INT 8
8445: PUSH
8446: LD_INT 10
8448: PUSH
8449: LD_INT 15
8451: PUSH
8452: LD_INT 16
8454: PUSH
8455: LD_INT 17
8457: PUSH
8458: LD_INT 20
8460: PUSH
8461: LD_INT 23
8463: PUSH
8464: LD_INT 26
8466: PUSH
8467: LD_INT 27
8469: PUSH
8470: LD_INT 29
8472: PUSH
8473: LD_INT 30
8475: PUSH
8476: LD_INT 31
8478: PUSH
8479: LD_INT 32
8481: PUSH
8482: LD_INT 42
8484: PUSH
8485: EMPTY
8486: LIST
8487: LIST
8488: LIST
8489: LIST
8490: LIST
8491: LIST
8492: LIST
8493: LIST
8494: LIST
8495: LIST
8496: LIST
8497: LIST
8498: LIST
8499: LIST
8500: LIST
8501: LIST
8502: LIST
8503: LIST
8504: LIST
8505: LIST
8506: ST_TO_ADDR
// end ; 3 :
8507: GO 8647
8509: LD_INT 3
8511: DOUBLE
8512: EQUAL
8513: IFTRUE 8517
8515: GO 8646
8517: POP
// begin techs := [ 46 , 47 , 9 , 20 , 69 , 39 , 48 , 49 , 51 , 52 , 57 ] ;
8518: LD_ADDR_VAR 0 5
8522: PUSH
8523: LD_INT 46
8525: PUSH
8526: LD_INT 47
8528: PUSH
8529: LD_INT 9
8531: PUSH
8532: LD_INT 20
8534: PUSH
8535: LD_INT 69
8537: PUSH
8538: LD_INT 39
8540: PUSH
8541: LD_INT 48
8543: PUSH
8544: LD_INT 49
8546: PUSH
8547: LD_INT 51
8549: PUSH
8550: LD_INT 52
8552: PUSH
8553: LD_INT 57
8555: PUSH
8556: EMPTY
8557: LIST
8558: LIST
8559: LIST
8560: LIST
8561: LIST
8562: LIST
8563: LIST
8564: LIST
8565: LIST
8566: LIST
8567: LIST
8568: ST_TO_ADDR
// buildings := [ 0 , 2 , 3 , 4 , 6 , 7 , 8 , 10 , 12 , 16 , 17 , 19 , 26 , 29 , 30 , 31 , 32 ] ;
8569: LD_ADDR_VAR 0 6
8573: PUSH
8574: LD_INT 0
8576: PUSH
8577: LD_INT 2
8579: PUSH
8580: LD_INT 3
8582: PUSH
8583: LD_INT 4
8585: PUSH
8586: LD_INT 6
8588: PUSH
8589: LD_INT 7
8591: PUSH
8592: LD_INT 8
8594: PUSH
8595: LD_INT 10
8597: PUSH
8598: LD_INT 12
8600: PUSH
8601: LD_INT 16
8603: PUSH
8604: LD_INT 17
8606: PUSH
8607: LD_INT 19
8609: PUSH
8610: LD_INT 26
8612: PUSH
8613: LD_INT 29
8615: PUSH
8616: LD_INT 30
8618: PUSH
8619: LD_INT 31
8621: PUSH
8622: LD_INT 32
8624: PUSH
8625: EMPTY
8626: LIST
8627: LIST
8628: LIST
8629: LIST
8630: LIST
8631: LIST
8632: LIST
8633: LIST
8634: LIST
8635: LIST
8636: LIST
8637: LIST
8638: LIST
8639: LIST
8640: LIST
8641: LIST
8642: LIST
8643: ST_TO_ADDR
// end ; end ;
8644: GO 8647
8646: POP
// reinforcement := 3 ;
8647: LD_ADDR_VAR 0 7
8651: PUSH
8652: LD_INT 3
8654: ST_TO_ADDR
// end ; 2 :
8655: GO 11029
8657: LD_INT 2
8659: DOUBLE
8660: EQUAL
8661: IFTRUE 8665
8663: GO 9281
8665: POP
// begin case nation of 1 :
8666: LD_VAR 0 2
8670: PUSH
8671: LD_INT 1
8673: DOUBLE
8674: EQUAL
8675: IFTRUE 8679
8677: GO 8856
8679: POP
// begin techs := [ 35 , 45 , 46 , 47 , 6 , 7 , 12 , 15 , 20 , 69 , 39 , 48 , 49 , 50 , 51 , 52 , 60 , 61 ] ;
8680: LD_ADDR_VAR 0 5
8684: PUSH
8685: LD_INT 35
8687: PUSH
8688: LD_INT 45
8690: PUSH
8691: LD_INT 46
8693: PUSH
8694: LD_INT 47
8696: PUSH
8697: LD_INT 6
8699: PUSH
8700: LD_INT 7
8702: PUSH
8703: LD_INT 12
8705: PUSH
8706: LD_INT 15
8708: PUSH
8709: LD_INT 20
8711: PUSH
8712: LD_INT 69
8714: PUSH
8715: LD_INT 39
8717: PUSH
8718: LD_INT 48
8720: PUSH
8721: LD_INT 49
8723: PUSH
8724: LD_INT 50
8726: PUSH
8727: LD_INT 51
8729: PUSH
8730: LD_INT 52
8732: PUSH
8733: LD_INT 60
8735: PUSH
8736: LD_INT 61
8738: PUSH
8739: EMPTY
8740: LIST
8741: LIST
8742: LIST
8743: LIST
8744: LIST
8745: LIST
8746: LIST
8747: LIST
8748: LIST
8749: LIST
8750: LIST
8751: LIST
8752: LIST
8753: LIST
8754: LIST
8755: LIST
8756: LIST
8757: LIST
8758: ST_TO_ADDR
// buildings := [ 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 10 , 15 , 16 , 17 , 19 , 20 , 26 , 27 , 29 , 30 , 31 , 32 , 36 ] ;
8759: LD_ADDR_VAR 0 6
8763: PUSH
8764: LD_INT 0
8766: PUSH
8767: LD_INT 1
8769: PUSH
8770: LD_INT 2
8772: PUSH
8773: LD_INT 3
8775: PUSH
8776: LD_INT 4
8778: PUSH
8779: LD_INT 5
8781: PUSH
8782: LD_INT 6
8784: PUSH
8785: LD_INT 7
8787: PUSH
8788: LD_INT 8
8790: PUSH
8791: LD_INT 10
8793: PUSH
8794: LD_INT 15
8796: PUSH
8797: LD_INT 16
8799: PUSH
8800: LD_INT 17
8802: PUSH
8803: LD_INT 19
8805: PUSH
8806: LD_INT 20
8808: PUSH
8809: LD_INT 26
8811: PUSH
8812: LD_INT 27
8814: PUSH
8815: LD_INT 29
8817: PUSH
8818: LD_INT 30
8820: PUSH
8821: LD_INT 31
8823: PUSH
8824: LD_INT 32
8826: PUSH
8827: LD_INT 36
8829: PUSH
8830: EMPTY
8831: LIST
8832: LIST
8833: LIST
8834: LIST
8835: LIST
8836: LIST
8837: LIST
8838: LIST
8839: LIST
8840: LIST
8841: LIST
8842: LIST
8843: LIST
8844: LIST
8845: LIST
8846: LIST
8847: LIST
8848: LIST
8849: LIST
8850: LIST
8851: LIST
8852: LIST
8853: ST_TO_ADDR
// end ; 2 :
8854: GO 9271
8856: LD_INT 2
8858: DOUBLE
8859: EQUAL
8860: IFTRUE 8864
8862: GO 9061
8864: POP
// begin techs := [ 35 , 45 , 46 , 47 , 5 , 6 , 7 , 15 , 17 , 20 , 70 , 69 , 39 , 41 , 42 , 48 , 49 , 50 , 51 , 52 , 60 , 61 , 66 ] ;
8865: LD_ADDR_VAR 0 5
8869: PUSH
8870: LD_INT 35
8872: PUSH
8873: LD_INT 45
8875: PUSH
8876: LD_INT 46
8878: PUSH
8879: LD_INT 47
8881: PUSH
8882: LD_INT 5
8884: PUSH
8885: LD_INT 6
8887: PUSH
8888: LD_INT 7
8890: PUSH
8891: LD_INT 15
8893: PUSH
8894: LD_INT 17
8896: PUSH
8897: LD_INT 20
8899: PUSH
8900: LD_INT 70
8902: PUSH
8903: LD_INT 69
8905: PUSH
8906: LD_INT 39
8908: PUSH
8909: LD_INT 41
8911: PUSH
8912: LD_INT 42
8914: PUSH
8915: LD_INT 48
8917: PUSH
8918: LD_INT 49
8920: PUSH
8921: LD_INT 50
8923: PUSH
8924: LD_INT 51
8926: PUSH
8927: LD_INT 52
8929: PUSH
8930: LD_INT 60
8932: PUSH
8933: LD_INT 61
8935: PUSH
8936: LD_INT 66
8938: PUSH
8939: EMPTY
8940: LIST
8941: LIST
8942: LIST
8943: LIST
8944: LIST
8945: LIST
8946: LIST
8947: LIST
8948: LIST
8949: LIST
8950: LIST
8951: LIST
8952: LIST
8953: LIST
8954: LIST
8955: LIST
8956: LIST
8957: LIST
8958: LIST
8959: LIST
8960: LIST
8961: LIST
8962: LIST
8963: ST_TO_ADDR
// buildings := [ 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 10 , 13 , 15 , 16 , 17 , 20 , 23 , 26 , 27 , 29 , 30 , 31 , 32 ] ;
8964: LD_ADDR_VAR 0 6
8968: PUSH
8969: LD_INT 0
8971: PUSH
8972: LD_INT 1
8974: PUSH
8975: LD_INT 2
8977: PUSH
8978: LD_INT 3
8980: PUSH
8981: LD_INT 4
8983: PUSH
8984: LD_INT 5
8986: PUSH
8987: LD_INT 6
8989: PUSH
8990: LD_INT 7
8992: PUSH
8993: LD_INT 8
8995: PUSH
8996: LD_INT 10
8998: PUSH
8999: LD_INT 13
9001: PUSH
9002: LD_INT 15
9004: PUSH
9005: LD_INT 16
9007: PUSH
9008: LD_INT 17
9010: PUSH
9011: LD_INT 20
9013: PUSH
9014: LD_INT 23
9016: PUSH
9017: LD_INT 26
9019: PUSH
9020: LD_INT 27
9022: PUSH
9023: LD_INT 29
9025: PUSH
9026: LD_INT 30
9028: PUSH
9029: LD_INT 31
9031: PUSH
9032: LD_INT 32
9034: PUSH
9035: EMPTY
9036: LIST
9037: LIST
9038: LIST
9039: LIST
9040: LIST
9041: LIST
9042: LIST
9043: LIST
9044: LIST
9045: LIST
9046: LIST
9047: LIST
9048: LIST
9049: LIST
9050: LIST
9051: LIST
9052: LIST
9053: LIST
9054: LIST
9055: LIST
9056: LIST
9057: LIST
9058: ST_TO_ADDR
// end ; 3 :
9059: GO 9271
9061: LD_INT 3
9063: DOUBLE
9064: EQUAL
9065: IFTRUE 9069
9067: GO 9270
9069: POP
// begin techs := [ 46 , 47 , 9 , 20 , 21 , 22 , 30 , 32 , 27 , 69 , 39 , 44 , 48 , 49 , 50 , 51 , 52 , 54 , 57 , 58 , 63 ] ;
9070: LD_ADDR_VAR 0 5
9074: PUSH
9075: LD_INT 46
9077: PUSH
9078: LD_INT 47
9080: PUSH
9081: LD_INT 9
9083: PUSH
9084: LD_INT 20
9086: PUSH
9087: LD_INT 21
9089: PUSH
9090: LD_INT 22
9092: PUSH
9093: LD_INT 30
9095: PUSH
9096: LD_INT 32
9098: PUSH
9099: LD_INT 27
9101: PUSH
9102: LD_INT 69
9104: PUSH
9105: LD_INT 39
9107: PUSH
9108: LD_INT 44
9110: PUSH
9111: LD_INT 48
9113: PUSH
9114: LD_INT 49
9116: PUSH
9117: LD_INT 50
9119: PUSH
9120: LD_INT 51
9122: PUSH
9123: LD_INT 52
9125: PUSH
9126: LD_INT 54
9128: PUSH
9129: LD_INT 57
9131: PUSH
9132: LD_INT 58
9134: PUSH
9135: LD_INT 63
9137: PUSH
9138: EMPTY
9139: LIST
9140: LIST
9141: LIST
9142: LIST
9143: LIST
9144: LIST
9145: LIST
9146: LIST
9147: LIST
9148: LIST
9149: LIST
9150: LIST
9151: LIST
9152: LIST
9153: LIST
9154: LIST
9155: LIST
9156: LIST
9157: LIST
9158: LIST
9159: LIST
9160: ST_TO_ADDR
// buildings := [ 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 10 , 11 , 12 , 14 , 16 , 17 , 19 , 21 , 24 , 26 , 28 , 29 , 30 , 31 , 32 , 33 ] ;
9161: LD_ADDR_VAR 0 6
9165: PUSH
9166: LD_INT 0
9168: PUSH
9169: LD_INT 1
9171: PUSH
9172: LD_INT 2
9174: PUSH
9175: LD_INT 3
9177: PUSH
9178: LD_INT 4
9180: PUSH
9181: LD_INT 5
9183: PUSH
9184: LD_INT 6
9186: PUSH
9187: LD_INT 7
9189: PUSH
9190: LD_INT 8
9192: PUSH
9193: LD_INT 10
9195: PUSH
9196: LD_INT 11
9198: PUSH
9199: LD_INT 12
9201: PUSH
9202: LD_INT 14
9204: PUSH
9205: LD_INT 16
9207: PUSH
9208: LD_INT 17
9210: PUSH
9211: LD_INT 19
9213: PUSH
9214: LD_INT 21
9216: PUSH
9217: LD_INT 24
9219: PUSH
9220: LD_INT 26
9222: PUSH
9223: LD_INT 28
9225: PUSH
9226: LD_INT 29
9228: PUSH
9229: LD_INT 30
9231: PUSH
9232: LD_INT 31
9234: PUSH
9235: LD_INT 32
9237: PUSH
9238: LD_INT 33
9240: PUSH
9241: EMPTY
9242: LIST
9243: LIST
9244: LIST
9245: LIST
9246: LIST
9247: LIST
9248: LIST
9249: LIST
9250: LIST
9251: LIST
9252: LIST
9253: LIST
9254: LIST
9255: LIST
9256: LIST
9257: LIST
9258: LIST
9259: LIST
9260: LIST
9261: LIST
9262: LIST
9263: LIST
9264: LIST
9265: LIST
9266: LIST
9267: ST_TO_ADDR
// end ; end ;
9268: GO 9271
9270: POP
// reinforcement := 4 ;
9271: LD_ADDR_VAR 0 7
9275: PUSH
9276: LD_INT 4
9278: ST_TO_ADDR
// end ; 3 :
9279: GO 11029
9281: LD_INT 3
9283: DOUBLE
9284: EQUAL
9285: IFTRUE 9289
9287: GO 10113
9289: POP
// begin case nation of 1 :
9290: LD_VAR 0 2
9294: PUSH
9295: LD_INT 1
9297: DOUBLE
9298: EQUAL
9299: IFTRUE 9303
9301: GO 9572
9303: POP
// begin techs := [ 35 , 45 , 46 , 47 , 6 , 7 , 12 , 13 , 10 , 15 , 16 , 20 , 21 , 22 , 32 , 27 , 69 , 39 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 57 , 58 , 59 , 60 , 61 , 62 ] ;
9304: LD_ADDR_VAR 0 5
9308: PUSH
9309: LD_INT 35
9311: PUSH
9312: LD_INT 45
9314: PUSH
9315: LD_INT 46
9317: PUSH
9318: LD_INT 47
9320: PUSH
9321: LD_INT 6
9323: PUSH
9324: LD_INT 7
9326: PUSH
9327: LD_INT 12
9329: PUSH
9330: LD_INT 13
9332: PUSH
9333: LD_INT 10
9335: PUSH
9336: LD_INT 15
9338: PUSH
9339: LD_INT 16
9341: PUSH
9342: LD_INT 20
9344: PUSH
9345: LD_INT 21
9347: PUSH
9348: LD_INT 22
9350: PUSH
9351: LD_INT 32
9353: PUSH
9354: LD_INT 27
9356: PUSH
9357: LD_INT 69
9359: PUSH
9360: LD_INT 39
9362: PUSH
9363: LD_INT 40
9365: PUSH
9366: LD_INT 48
9368: PUSH
9369: LD_INT 49
9371: PUSH
9372: LD_INT 50
9374: PUSH
9375: LD_INT 51
9377: PUSH
9378: LD_INT 52
9380: PUSH
9381: LD_INT 53
9383: PUSH
9384: LD_INT 54
9386: PUSH
9387: LD_INT 55
9389: PUSH
9390: LD_INT 57
9392: PUSH
9393: LD_INT 58
9395: PUSH
9396: LD_INT 59
9398: PUSH
9399: LD_INT 60
9401: PUSH
9402: LD_INT 61
9404: PUSH
9405: LD_INT 62
9407: PUSH
9408: EMPTY
9409: LIST
9410: LIST
9411: LIST
9412: LIST
9413: LIST
9414: LIST
9415: LIST
9416: LIST
9417: LIST
9418: LIST
9419: LIST
9420: LIST
9421: LIST
9422: LIST
9423: LIST
9424: LIST
9425: LIST
9426: LIST
9427: LIST
9428: LIST
9429: LIST
9430: LIST
9431: LIST
9432: LIST
9433: LIST
9434: LIST
9435: LIST
9436: LIST
9437: LIST
9438: LIST
9439: LIST
9440: LIST
9441: LIST
9442: ST_TO_ADDR
// buildings := [ 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 10 , 11 , 12 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 36 ] ;
9443: LD_ADDR_VAR 0 6
9447: PUSH
9448: LD_INT 0
9450: PUSH
9451: LD_INT 1
9453: PUSH
9454: LD_INT 2
9456: PUSH
9457: LD_INT 3
9459: PUSH
9460: LD_INT 4
9462: PUSH
9463: LD_INT 5
9465: PUSH
9466: LD_INT 6
9468: PUSH
9469: LD_INT 7
9471: PUSH
9472: LD_INT 8
9474: PUSH
9475: LD_INT 10
9477: PUSH
9478: LD_INT 11
9480: PUSH
9481: LD_INT 12
9483: PUSH
9484: LD_INT 15
9486: PUSH
9487: LD_INT 16
9489: PUSH
9490: LD_INT 17
9492: PUSH
9493: LD_INT 18
9495: PUSH
9496: LD_INT 19
9498: PUSH
9499: LD_INT 20
9501: PUSH
9502: LD_INT 21
9504: PUSH
9505: LD_INT 24
9507: PUSH
9508: LD_INT 25
9510: PUSH
9511: LD_INT 26
9513: PUSH
9514: LD_INT 27
9516: PUSH
9517: LD_INT 28
9519: PUSH
9520: LD_INT 29
9522: PUSH
9523: LD_INT 30
9525: PUSH
9526: LD_INT 31
9528: PUSH
9529: LD_INT 32
9531: PUSH
9532: LD_INT 33
9534: PUSH
9535: LD_INT 36
9537: PUSH
9538: EMPTY
9539: LIST
9540: LIST
9541: LIST
9542: LIST
9543: LIST
9544: LIST
9545: LIST
9546: LIST
9547: LIST
9548: LIST
9549: LIST
9550: LIST
9551: LIST
9552: LIST
9553: LIST
9554: LIST
9555: LIST
9556: LIST
9557: LIST
9558: LIST
9559: LIST
9560: LIST
9561: LIST
9562: LIST
9563: LIST
9564: LIST
9565: LIST
9566: LIST
9567: LIST
9568: LIST
9569: ST_TO_ADDR
// end ; 2 :
9570: GO 10103
9572: LD_INT 2
9574: DOUBLE
9575: EQUAL
9576: IFTRUE 9580
9578: GO 9845
9580: POP
// begin techs := [ 35 , 45 , 46 , 47 , 5 , 6 , 7 , 8 , 15 , 18 , 17 , 20 , 21 , 22 , 26 , 70 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 60 , 61 , 62 , 66 , 67 , 68 ] ;
9581: LD_ADDR_VAR 0 5
9585: PUSH
9586: LD_INT 35
9588: PUSH
9589: LD_INT 45
9591: PUSH
9592: LD_INT 46
9594: PUSH
9595: LD_INT 47
9597: PUSH
9598: LD_INT 5
9600: PUSH
9601: LD_INT 6
9603: PUSH
9604: LD_INT 7
9606: PUSH
9607: LD_INT 8
9609: PUSH
9610: LD_INT 15
9612: PUSH
9613: LD_INT 18
9615: PUSH
9616: LD_INT 17
9618: PUSH
9619: LD_INT 20
9621: PUSH
9622: LD_INT 21
9624: PUSH
9625: LD_INT 22
9627: PUSH
9628: LD_INT 26
9630: PUSH
9631: LD_INT 70
9633: PUSH
9634: LD_INT 69
9636: PUSH
9637: LD_INT 39
9639: PUSH
9640: LD_INT 40
9642: PUSH
9643: LD_INT 41
9645: PUSH
9646: LD_INT 42
9648: PUSH
9649: LD_INT 43
9651: PUSH
9652: LD_INT 48
9654: PUSH
9655: LD_INT 49
9657: PUSH
9658: LD_INT 50
9660: PUSH
9661: LD_INT 51
9663: PUSH
9664: LD_INT 52
9666: PUSH
9667: LD_INT 53
9669: PUSH
9670: LD_INT 54
9672: PUSH
9673: LD_INT 55
9675: PUSH
9676: LD_INT 60
9678: PUSH
9679: LD_INT 61
9681: PUSH
9682: LD_INT 62
9684: PUSH
9685: LD_INT 66
9687: PUSH
9688: LD_INT 67
9690: PUSH
9691: LD_INT 68
9693: PUSH
9694: EMPTY
9695: LIST
9696: LIST
9697: LIST
9698: LIST
9699: LIST
9700: LIST
9701: LIST
9702: LIST
9703: LIST
9704: LIST
9705: LIST
9706: LIST
9707: LIST
9708: LIST
9709: LIST
9710: LIST
9711: LIST
9712: LIST
9713: LIST
9714: LIST
9715: LIST
9716: LIST
9717: LIST
9718: LIST
9719: LIST
9720: LIST
9721: LIST
9722: LIST
9723: LIST
9724: LIST
9725: LIST
9726: LIST
9727: LIST
9728: LIST
9729: LIST
9730: LIST
9731: ST_TO_ADDR
// buildings := [ 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 10 , 11 , 13 , 15 , 16 , 17 , 18 , 20 , 21 , 23 , 26 , 27 , 28 , 29 , 30 , 31 , 32 ] ;
9732: LD_ADDR_VAR 0 6
9736: PUSH
9737: LD_INT 0
9739: PUSH
9740: LD_INT 1
9742: PUSH
9743: LD_INT 2
9745: PUSH
9746: LD_INT 3
9748: PUSH
9749: LD_INT 4
9751: PUSH
9752: LD_INT 5
9754: PUSH
9755: LD_INT 6
9757: PUSH
9758: LD_INT 7
9760: PUSH
9761: LD_INT 8
9763: PUSH
9764: LD_INT 10
9766: PUSH
9767: LD_INT 11
9769: PUSH
9770: LD_INT 13
9772: PUSH
9773: LD_INT 15
9775: PUSH
9776: LD_INT 16
9778: PUSH
9779: LD_INT 17
9781: PUSH
9782: LD_INT 18
9784: PUSH
9785: LD_INT 20
9787: PUSH
9788: LD_INT 21
9790: PUSH
9791: LD_INT 23
9793: PUSH
9794: LD_INT 26
9796: PUSH
9797: LD_INT 27
9799: PUSH
9800: LD_INT 28
9802: PUSH
9803: LD_INT 29
9805: PUSH
9806: LD_INT 30
9808: PUSH
9809: LD_INT 31
9811: PUSH
9812: LD_INT 32
9814: PUSH
9815: EMPTY
9816: LIST
9817: LIST
9818: LIST
9819: LIST
9820: LIST
9821: LIST
9822: LIST
9823: LIST
9824: LIST
9825: LIST
9826: LIST
9827: LIST
9828: LIST
9829: LIST
9830: LIST
9831: LIST
9832: LIST
9833: LIST
9834: LIST
9835: LIST
9836: LIST
9837: LIST
9838: LIST
9839: LIST
9840: LIST
9841: LIST
9842: ST_TO_ADDR
// end ; 3 :
9843: GO 10103
9845: LD_INT 3
9847: DOUBLE
9848: EQUAL
9849: IFTRUE 9853
9851: GO 10102
9853: POP
// begin techs := [ 46 , 47 , 9 , 20 , 19 , 21 , 22 , 28 , 29 , 30 , 37 , 32 , 27 , 69 , 39 , 34 , 40 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 ] ;
9854: LD_ADDR_VAR 0 5
9858: PUSH
9859: LD_INT 46
9861: PUSH
9862: LD_INT 47
9864: PUSH
9865: LD_INT 9
9867: PUSH
9868: LD_INT 20
9870: PUSH
9871: LD_INT 19
9873: PUSH
9874: LD_INT 21
9876: PUSH
9877: LD_INT 22
9879: PUSH
9880: LD_INT 28
9882: PUSH
9883: LD_INT 29
9885: PUSH
9886: LD_INT 30
9888: PUSH
9889: LD_INT 37
9891: PUSH
9892: LD_INT 32
9894: PUSH
9895: LD_INT 27
9897: PUSH
9898: LD_INT 69
9900: PUSH
9901: LD_INT 39
9903: PUSH
9904: LD_INT 34
9906: PUSH
9907: LD_INT 40
9909: PUSH
9910: LD_INT 44
9912: PUSH
9913: LD_INT 48
9915: PUSH
9916: LD_INT 49
9918: PUSH
9919: LD_INT 50
9921: PUSH
9922: LD_INT 51
9924: PUSH
9925: LD_INT 52
9927: PUSH
9928: LD_INT 53
9930: PUSH
9931: LD_INT 54
9933: PUSH
9934: LD_INT 55
9936: PUSH
9937: LD_INT 56
9939: PUSH
9940: LD_INT 57
9942: PUSH
9943: LD_INT 58
9945: PUSH
9946: LD_INT 59
9948: PUSH
9949: LD_INT 63
9951: PUSH
9952: LD_INT 64
9954: PUSH
9955: EMPTY
9956: LIST
9957: LIST
9958: LIST
9959: LIST
9960: LIST
9961: LIST
9962: LIST
9963: LIST
9964: LIST
9965: LIST
9966: LIST
9967: LIST
9968: LIST
9969: LIST
9970: LIST
9971: LIST
9972: LIST
9973: LIST
9974: LIST
9975: LIST
9976: LIST
9977: LIST
9978: LIST
9979: LIST
9980: LIST
9981: LIST
9982: LIST
9983: LIST
9984: LIST
9985: LIST
9986: LIST
9987: LIST
9988: ST_TO_ADDR
// buildings := [ 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 10 , 11 , 12 , 14 , 16 , 17 , 18 , 19 , 21 , 24 , 26 , 28 , 29 , 30 , 31 , 32 , 33 ] ;
9989: LD_ADDR_VAR 0 6
9993: PUSH
9994: LD_INT 0
9996: PUSH
9997: LD_INT 1
9999: PUSH
10000: LD_INT 2
10002: PUSH
10003: LD_INT 3
10005: PUSH
10006: LD_INT 4
10008: PUSH
10009: LD_INT 5
10011: PUSH
10012: LD_INT 6
10014: PUSH
10015: LD_INT 7
10017: PUSH
10018: LD_INT 8
10020: PUSH
10021: LD_INT 10
10023: PUSH
10024: LD_INT 11
10026: PUSH
10027: LD_INT 12
10029: PUSH
10030: LD_INT 14
10032: PUSH
10033: LD_INT 16
10035: PUSH
10036: LD_INT 17
10038: PUSH
10039: LD_INT 18
10041: PUSH
10042: LD_INT 19
10044: PUSH
10045: LD_INT 21
10047: PUSH
10048: LD_INT 24
10050: PUSH
10051: LD_INT 26
10053: PUSH
10054: LD_INT 28
10056: PUSH
10057: LD_INT 29
10059: PUSH
10060: LD_INT 30
10062: PUSH
10063: LD_INT 31
10065: PUSH
10066: LD_INT 32
10068: PUSH
10069: LD_INT 33
10071: PUSH
10072: EMPTY
10073: LIST
10074: LIST
10075: LIST
10076: LIST
10077: LIST
10078: LIST
10079: LIST
10080: LIST
10081: LIST
10082: LIST
10083: LIST
10084: LIST
10085: LIST
10086: LIST
10087: LIST
10088: LIST
10089: LIST
10090: LIST
10091: LIST
10092: LIST
10093: LIST
10094: LIST
10095: LIST
10096: LIST
10097: LIST
10098: LIST
10099: ST_TO_ADDR
// end ; end ;
10100: GO 10103
10102: POP
// reinforcement := 4 ;
10103: LD_ADDR_VAR 0 7
10107: PUSH
10108: LD_INT 4
10110: ST_TO_ADDR
// end ; 4 :
10111: GO 11029
10113: LD_INT 4
10115: DOUBLE
10116: EQUAL
10117: IFTRUE 10121
10119: GO 11028
10121: POP
// begin case nation of 1 :
10122: LD_VAR 0 2
10126: PUSH
10127: LD_INT 1
10129: DOUBLE
10130: EQUAL
10131: IFTRUE 10135
10133: GO 10424
10135: POP
// begin techs := [ 35 , 45 , 46 , 47 , 6 , 7 , 12 , 13 , 10 , 14 , 15 , 16 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 ] ;
10136: LD_ADDR_VAR 0 5
10140: PUSH
10141: LD_INT 35
10143: PUSH
10144: LD_INT 45
10146: PUSH
10147: LD_INT 46
10149: PUSH
10150: LD_INT 47
10152: PUSH
10153: LD_INT 6
10155: PUSH
10156: LD_INT 7
10158: PUSH
10159: LD_INT 12
10161: PUSH
10162: LD_INT 13
10164: PUSH
10165: LD_INT 10
10167: PUSH
10168: LD_INT 14
10170: PUSH
10171: LD_INT 15
10173: PUSH
10174: LD_INT 16
10176: PUSH
10177: LD_INT 20
10179: PUSH
10180: LD_INT 21
10182: PUSH
10183: LD_INT 22
10185: PUSH
10186: LD_INT 25
10188: PUSH
10189: LD_INT 32
10191: PUSH
10192: LD_INT 27
10194: PUSH
10195: LD_INT 36
10197: PUSH
10198: LD_INT 69
10200: PUSH
10201: LD_INT 39
10203: PUSH
10204: LD_INT 34
10206: PUSH
10207: LD_INT 40
10209: PUSH
10210: LD_INT 48
10212: PUSH
10213: LD_INT 49
10215: PUSH
10216: LD_INT 50
10218: PUSH
10219: LD_INT 51
10221: PUSH
10222: LD_INT 52
10224: PUSH
10225: LD_INT 53
10227: PUSH
10228: LD_INT 54
10230: PUSH
10231: LD_INT 55
10233: PUSH
10234: LD_INT 56
10236: PUSH
10237: LD_INT 57
10239: PUSH
10240: LD_INT 58
10242: PUSH
10243: LD_INT 59
10245: PUSH
10246: LD_INT 60
10248: PUSH
10249: LD_INT 61
10251: PUSH
10252: LD_INT 62
10254: PUSH
10255: EMPTY
10256: LIST
10257: LIST
10258: LIST
10259: LIST
10260: LIST
10261: LIST
10262: LIST
10263: LIST
10264: LIST
10265: LIST
10266: LIST
10267: LIST
10268: LIST
10269: LIST
10270: LIST
10271: LIST
10272: LIST
10273: LIST
10274: LIST
10275: LIST
10276: LIST
10277: LIST
10278: LIST
10279: LIST
10280: LIST
10281: LIST
10282: LIST
10283: LIST
10284: LIST
10285: LIST
10286: LIST
10287: LIST
10288: LIST
10289: LIST
10290: LIST
10291: LIST
10292: LIST
10293: LIST
10294: ST_TO_ADDR
// buildings := [ 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 10 , 11 , 12 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 36 ] ;
10295: LD_ADDR_VAR 0 6
10299: PUSH
10300: LD_INT 0
10302: PUSH
10303: LD_INT 1
10305: PUSH
10306: LD_INT 2
10308: PUSH
10309: LD_INT 3
10311: PUSH
10312: LD_INT 4
10314: PUSH
10315: LD_INT 5
10317: PUSH
10318: LD_INT 6
10320: PUSH
10321: LD_INT 7
10323: PUSH
10324: LD_INT 8
10326: PUSH
10327: LD_INT 10
10329: PUSH
10330: LD_INT 11
10332: PUSH
10333: LD_INT 12
10335: PUSH
10336: LD_INT 15
10338: PUSH
10339: LD_INT 16
10341: PUSH
10342: LD_INT 17
10344: PUSH
10345: LD_INT 18
10347: PUSH
10348: LD_INT 19
10350: PUSH
10351: LD_INT 20
10353: PUSH
10354: LD_INT 21
10356: PUSH
10357: LD_INT 24
10359: PUSH
10360: LD_INT 25
10362: PUSH
10363: LD_INT 26
10365: PUSH
10366: LD_INT 27
10368: PUSH
10369: LD_INT 28
10371: PUSH
10372: LD_INT 29
10374: PUSH
10375: LD_INT 30
10377: PUSH
10378: LD_INT 31
10380: PUSH
10381: LD_INT 32
10383: PUSH
10384: LD_INT 33
10386: PUSH
10387: LD_INT 36
10389: PUSH
10390: EMPTY
10391: LIST
10392: LIST
10393: LIST
10394: LIST
10395: LIST
10396: LIST
10397: LIST
10398: LIST
10399: LIST
10400: LIST
10401: LIST
10402: LIST
10403: LIST
10404: LIST
10405: LIST
10406: LIST
10407: LIST
10408: LIST
10409: LIST
10410: LIST
10411: LIST
10412: LIST
10413: LIST
10414: LIST
10415: LIST
10416: LIST
10417: LIST
10418: LIST
10419: LIST
10420: LIST
10421: ST_TO_ADDR
// end ; 2 :
10422: GO 10999
10424: LD_INT 2
10426: DOUBLE
10427: EQUAL
10428: IFTRUE 10432
10430: GO 10705
10432: POP
// begin techs := [ 35 , 45 , 46 , 47 , 5 , 6 , 7 , 8 , 15 , 18 , 17 , 20 , 21 , 22 , 25 , 26 , 70 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 ] ;
10433: LD_ADDR_VAR 0 5
10437: PUSH
10438: LD_INT 35
10440: PUSH
10441: LD_INT 45
10443: PUSH
10444: LD_INT 46
10446: PUSH
10447: LD_INT 47
10449: PUSH
10450: LD_INT 5
10452: PUSH
10453: LD_INT 6
10455: PUSH
10456: LD_INT 7
10458: PUSH
10459: LD_INT 8
10461: PUSH
10462: LD_INT 15
10464: PUSH
10465: LD_INT 18
10467: PUSH
10468: LD_INT 17
10470: PUSH
10471: LD_INT 20
10473: PUSH
10474: LD_INT 21
10476: PUSH
10477: LD_INT 22
10479: PUSH
10480: LD_INT 25
10482: PUSH
10483: LD_INT 26
10485: PUSH
10486: LD_INT 70
10488: PUSH
10489: LD_INT 69
10491: PUSH
10492: LD_INT 39
10494: PUSH
10495: LD_INT 40
10497: PUSH
10498: LD_INT 41
10500: PUSH
10501: LD_INT 42
10503: PUSH
10504: LD_INT 43
10506: PUSH
10507: LD_INT 48
10509: PUSH
10510: LD_INT 49
10512: PUSH
10513: LD_INT 50
10515: PUSH
10516: LD_INT 51
10518: PUSH
10519: LD_INT 52
10521: PUSH
10522: LD_INT 53
10524: PUSH
10525: LD_INT 54
10527: PUSH
10528: LD_INT 55
10530: PUSH
10531: LD_INT 56
10533: PUSH
10534: LD_INT 60
10536: PUSH
10537: LD_INT 61
10539: PUSH
10540: LD_INT 62
10542: PUSH
10543: LD_INT 66
10545: PUSH
10546: LD_INT 67
10548: PUSH
10549: LD_INT 68
10551: PUSH
10552: EMPTY
10553: LIST
10554: LIST
10555: LIST
10556: LIST
10557: LIST
10558: LIST
10559: LIST
10560: LIST
10561: LIST
10562: LIST
10563: LIST
10564: LIST
10565: LIST
10566: LIST
10567: LIST
10568: LIST
10569: LIST
10570: LIST
10571: LIST
10572: LIST
10573: LIST
10574: LIST
10575: LIST
10576: LIST
10577: LIST
10578: LIST
10579: LIST
10580: LIST
10581: LIST
10582: LIST
10583: LIST
10584: LIST
10585: LIST
10586: LIST
10587: LIST
10588: LIST
10589: LIST
10590: LIST
10591: ST_TO_ADDR
// buildings := [ 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 10 , 11 , 13 , 15 , 16 , 17 , 18 , 20 , 21 , 23 , 26 , 27 , 28 , 29 , 30 , 31 , 32 ] ;
10592: LD_ADDR_VAR 0 6
10596: PUSH
10597: LD_INT 0
10599: PUSH
10600: LD_INT 1
10602: PUSH
10603: LD_INT 2
10605: PUSH
10606: LD_INT 3
10608: PUSH
10609: LD_INT 4
10611: PUSH
10612: LD_INT 5
10614: PUSH
10615: LD_INT 6
10617: PUSH
10618: LD_INT 7
10620: PUSH
10621: LD_INT 8
10623: PUSH
10624: LD_INT 10
10626: PUSH
10627: LD_INT 11
10629: PUSH
10630: LD_INT 13
10632: PUSH
10633: LD_INT 15
10635: PUSH
10636: LD_INT 16
10638: PUSH
10639: LD_INT 17
10641: PUSH
10642: LD_INT 18
10644: PUSH
10645: LD_INT 20
10647: PUSH
10648: LD_INT 21
10650: PUSH
10651: LD_INT 23
10653: PUSH
10654: LD_INT 26
10656: PUSH
10657: LD_INT 27
10659: PUSH
10660: LD_INT 28
10662: PUSH
10663: LD_INT 29
10665: PUSH
10666: LD_INT 30
10668: PUSH
10669: LD_INT 31
10671: PUSH
10672: LD_INT 32
10674: PUSH
10675: EMPTY
10676: LIST
10677: LIST
10678: LIST
10679: LIST
10680: LIST
10681: LIST
10682: LIST
10683: LIST
10684: LIST
10685: LIST
10686: LIST
10687: LIST
10688: LIST
10689: LIST
10690: LIST
10691: LIST
10692: LIST
10693: LIST
10694: LIST
10695: LIST
10696: LIST
10697: LIST
10698: LIST
10699: LIST
10700: LIST
10701: LIST
10702: ST_TO_ADDR
// end ; 3 :
10703: GO 10999
10705: LD_INT 3
10707: DOUBLE
10708: EQUAL
10709: IFTRUE 10713
10711: GO 10998
10713: POP
// begin techs := [ 46 , 47 , 9 , 20 , 19 , 21 , 22 , 23 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 ] ;
10714: LD_ADDR_VAR 0 5
10718: PUSH
10719: LD_INT 46
10721: PUSH
10722: LD_INT 47
10724: PUSH
10725: LD_INT 9
10727: PUSH
10728: LD_INT 20
10730: PUSH
10731: LD_INT 19
10733: PUSH
10734: LD_INT 21
10736: PUSH
10737: LD_INT 22
10739: PUSH
10740: LD_INT 23
10742: PUSH
10743: LD_INT 25
10745: PUSH
10746: LD_INT 28
10748: PUSH
10749: LD_INT 29
10751: PUSH
10752: LD_INT 30
10754: PUSH
10755: LD_INT 31
10757: PUSH
10758: LD_INT 37
10760: PUSH
10761: LD_INT 38
10763: PUSH
10764: LD_INT 32
10766: PUSH
10767: LD_INT 27
10769: PUSH
10770: LD_INT 33
10772: PUSH
10773: LD_INT 69
10775: PUSH
10776: LD_INT 39
10778: PUSH
10779: LD_INT 34
10781: PUSH
10782: LD_INT 40
10784: PUSH
10785: LD_INT 71
10787: PUSH
10788: LD_INT 44
10790: PUSH
10791: LD_INT 48
10793: PUSH
10794: LD_INT 49
10796: PUSH
10797: LD_INT 50
10799: PUSH
10800: LD_INT 51
10802: PUSH
10803: LD_INT 52
10805: PUSH
10806: LD_INT 53
10808: PUSH
10809: LD_INT 54
10811: PUSH
10812: LD_INT 55
10814: PUSH
10815: LD_INT 56
10817: PUSH
10818: LD_INT 57
10820: PUSH
10821: LD_INT 58
10823: PUSH
10824: LD_INT 59
10826: PUSH
10827: LD_INT 63
10829: PUSH
10830: LD_INT 64
10832: PUSH
10833: LD_INT 65
10835: PUSH
10836: EMPTY
10837: LIST
10838: LIST
10839: LIST
10840: LIST
10841: LIST
10842: LIST
10843: LIST
10844: LIST
10845: LIST
10846: LIST
10847: LIST
10848: LIST
10849: LIST
10850: LIST
10851: LIST
10852: LIST
10853: LIST
10854: LIST
10855: LIST
10856: LIST
10857: LIST
10858: LIST
10859: LIST
10860: LIST
10861: LIST
10862: LIST
10863: LIST
10864: LIST
10865: LIST
10866: LIST
10867: LIST
10868: LIST
10869: LIST
10870: LIST
10871: LIST
10872: LIST
10873: LIST
10874: LIST
10875: LIST
10876: ST_TO_ADDR
// buildings := [ 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 10 , 11 , 12 , 14 , 16 , 17 , 18 , 19 , 21 , 24 , 26 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 37 ] ;
10877: LD_ADDR_VAR 0 6
10881: PUSH
10882: LD_INT 0
10884: PUSH
10885: LD_INT 1
10887: PUSH
10888: LD_INT 2
10890: PUSH
10891: LD_INT 3
10893: PUSH
10894: LD_INT 4
10896: PUSH
10897: LD_INT 5
10899: PUSH
10900: LD_INT 6
10902: PUSH
10903: LD_INT 7
10905: PUSH
10906: LD_INT 8
10908: PUSH
10909: LD_INT 10
10911: PUSH
10912: LD_INT 11
10914: PUSH
10915: LD_INT 12
10917: PUSH
10918: LD_INT 14
10920: PUSH
10921: LD_INT 16
10923: PUSH
10924: LD_INT 17
10926: PUSH
10927: LD_INT 18
10929: PUSH
10930: LD_INT 19
10932: PUSH
10933: LD_INT 21
10935: PUSH
10936: LD_INT 24
10938: PUSH
10939: LD_INT 26
10941: PUSH
10942: LD_INT 28
10944: PUSH
10945: LD_INT 29
10947: PUSH
10948: LD_INT 30
10950: PUSH
10951: LD_INT 31
10953: PUSH
10954: LD_INT 32
10956: PUSH
10957: LD_INT 33
10959: PUSH
10960: LD_INT 34
10962: PUSH
10963: LD_INT 37
10965: PUSH
10966: EMPTY
10967: LIST
10968: LIST
10969: LIST
10970: LIST
10971: LIST
10972: LIST
10973: LIST
10974: LIST
10975: LIST
10976: LIST
10977: LIST
10978: LIST
10979: LIST
10980: LIST
10981: LIST
10982: LIST
10983: LIST
10984: LIST
10985: LIST
10986: LIST
10987: LIST
10988: LIST
10989: LIST
10990: LIST
10991: LIST
10992: LIST
10993: LIST
10994: LIST
10995: ST_TO_ADDR
// end ; end ;
10996: GO 10999
10998: POP
// reinforcement := 5 ;
10999: LD_ADDR_VAR 0 7
11003: PUSH
11004: LD_INT 5
11006: ST_TO_ADDR
// if side = Your_Side then
11007: LD_VAR 0 3
11011: PUSH
11012: LD_OWVAR 2
11016: EQUAL
11017: IFFALSE 11026
// ToLua ( LUA_SideTechMax(); ) ;
11019: LD_STRING LUA_SideTechMax();
11021: PPUSH
11022: CALL_OW 559
// end ; end ;
11026: GO 11029
11028: POP
// side_reinforcement_cap := Replace ( side_reinforcement_cap , side , reinforcement ) ;
11029: LD_ADDR_EXP 58
11033: PUSH
11034: LD_EXP 58
11038: PPUSH
11039: LD_VAR 0 3
11043: PPUSH
11044: LD_VAR 0 7
11048: PPUSH
11049: CALL_OW 1
11053: ST_TO_ADDR
// TechUnlock ( techs , side , 1 ) ;
11054: LD_VAR 0 5
11058: PPUSH
11059: LD_VAR 0 3
11063: PPUSH
11064: LD_INT 1
11066: PPUSH
11067: CALL 7183 0 3
// BuildingUnlock ( buildings , side , 1 ) ;
11071: LD_VAR 0 6
11075: PPUSH
11076: LD_VAR 0 3
11080: PPUSH
11081: LD_INT 1
11083: PPUSH
11084: CALL 7248 0 3
// end ;
11088: LD_VAR 0 4
11092: RET
// export function FillUpVehicles ( vehicle , crates , oil , siberite ) ; var occupied ; begin
11093: LD_INT 0
11095: PPUSH
11096: PPUSH
// if crates >= 100 then
11097: LD_VAR 0 2
11101: PUSH
11102: LD_INT 100
11104: GREATEREQUAL
11105: IFFALSE 11138
// begin AddCargo ( vehicle , mat_cans , 100 ) ;
11107: LD_VAR 0 1
11111: PPUSH
11112: LD_INT 1
11114: PPUSH
11115: LD_INT 100
11117: PPUSH
11118: CALL_OW 291
// crates := crates - 100 ;
11122: LD_ADDR_VAR 0 2
11126: PUSH
11127: LD_VAR 0 2
11131: PUSH
11132: LD_INT 100
11134: MINUS
11135: ST_TO_ADDR
// end else
11136: GO 11339
// begin AddCargo ( vehicle , mat_cans , crates ) ;
11138: LD_VAR 0 1
11142: PPUSH
11143: LD_INT 1
11145: PPUSH
11146: LD_VAR 0 2
11150: PPUSH
11151: CALL_OW 291
// occupied := crates ;
11155: LD_ADDR_VAR 0 6
11159: PUSH
11160: LD_VAR 0 2
11164: ST_TO_ADDR
// crates := 0 ;
11165: LD_ADDR_VAR 0 2
11169: PUSH
11170: LD_INT 0
11172: ST_TO_ADDR
// if oil >= 100 then
11173: LD_VAR 0 3
11177: PUSH
11178: LD_INT 100
11180: GREATEREQUAL
11181: IFFALSE 11226
// begin AddCargo ( vehicle , mat_oil , 100 - occupied ) ;
11183: LD_VAR 0 1
11187: PPUSH
11188: LD_INT 2
11190: PPUSH
11191: LD_INT 100
11193: PUSH
11194: LD_VAR 0 6
11198: MINUS
11199: PPUSH
11200: CALL_OW 291
// oil := oil - 100 + occupied ;
11204: LD_ADDR_VAR 0 3
11208: PUSH
11209: LD_VAR 0 3
11213: PUSH
11214: LD_INT 100
11216: MINUS
11217: PUSH
11218: LD_VAR 0 6
11222: PLUS
11223: ST_TO_ADDR
// end else
11224: GO 11339
// begin AddCargo ( vehicle , mat_oil , oil ) ;
11226: LD_VAR 0 1
11230: PPUSH
11231: LD_INT 2
11233: PPUSH
11234: LD_VAR 0 3
11238: PPUSH
11239: CALL_OW 291
// occupied := oil ;
11243: LD_ADDR_VAR 0 6
11247: PUSH
11248: LD_VAR 0 3
11252: ST_TO_ADDR
// oil := 0 ;
11253: LD_ADDR_VAR 0 3
11257: PUSH
11258: LD_INT 0
11260: ST_TO_ADDR
// if siberite >= 100 then
11261: LD_VAR 0 4
11265: PUSH
11266: LD_INT 100
11268: GREATEREQUAL
11269: IFFALSE 11314
// begin AddCargo ( vehicle , mat_siberit , 100 - occupied ) ;
11271: LD_VAR 0 1
11275: PPUSH
11276: LD_INT 3
11278: PPUSH
11279: LD_INT 100
11281: PUSH
11282: LD_VAR 0 6
11286: MINUS
11287: PPUSH
11288: CALL_OW 291
// siberite := siberite - 100 + occupied ;
11292: LD_ADDR_VAR 0 4
11296: PUSH
11297: LD_VAR 0 4
11301: PUSH
11302: LD_INT 100
11304: MINUS
11305: PUSH
11306: LD_VAR 0 6
11310: PLUS
11311: ST_TO_ADDR
// end else
11312: GO 11339
// begin AddCargo ( vehicle , mat_siberit , siberite ) ;
11314: LD_VAR 0 1
11318: PPUSH
11319: LD_INT 3
11321: PPUSH
11322: LD_VAR 0 4
11326: PPUSH
11327: CALL_OW 291
// siberite := 0 ;
11331: LD_ADDR_VAR 0 4
11335: PUSH
11336: LD_INT 0
11338: ST_TO_ADDR
// end ; end ; end ; result := [ vehicle , crates , oil , siberite ] ;
11339: LD_ADDR_VAR 0 5
11343: PUSH
11344: LD_VAR 0 1
11348: PUSH
11349: LD_VAR 0 2
11353: PUSH
11354: LD_VAR 0 3
11358: PUSH
11359: LD_VAR 0 4
11363: PUSH
11364: EMPTY
11365: LIST
11366: LIST
11367: LIST
11368: LIST
11369: ST_TO_ADDR
// end ;
11370: LD_VAR 0 5
11374: RET
// export function RotateUnit ( in_direction , rotation ) ; var r ; begin
11375: LD_INT 0
11377: PPUSH
11378: PPUSH
// rotation := rotation mod 6 ;
11379: LD_ADDR_VAR 0 2
11383: PUSH
11384: LD_VAR 0 2
11388: PUSH
11389: LD_INT 6
11391: MOD
11392: ST_TO_ADDR
// r := in_direction + rotation ;
11393: LD_ADDR_VAR 0 4
11397: PUSH
11398: LD_VAR 0 1
11402: PUSH
11403: LD_VAR 0 2
11407: PLUS
11408: ST_TO_ADDR
// if r >= 6 then
11409: LD_VAR 0 4
11413: PUSH
11414: LD_INT 6
11416: GREATEREQUAL
11417: IFFALSE 11433
// rotation := rotation - 6 ;
11419: LD_ADDR_VAR 0 2
11423: PUSH
11424: LD_VAR 0 2
11428: PUSH
11429: LD_INT 6
11431: MINUS
11432: ST_TO_ADDR
// if r <= 1 then
11433: LD_VAR 0 4
11437: PUSH
11438: LD_INT 1
11440: LESSEQUAL
11441: IFFALSE 11457
// rotation := rotation + 6 ;
11443: LD_ADDR_VAR 0 2
11447: PUSH
11448: LD_VAR 0 2
11452: PUSH
11453: LD_INT 6
11455: PLUS
11456: ST_TO_ADDR
// result := in_direction + rotation ;
11457: LD_ADDR_VAR 0 3
11461: PUSH
11462: LD_VAR 0 1
11466: PUSH
11467: LD_VAR 0 2
11471: PLUS
11472: ST_TO_ADDR
// end ; end_of_file
11473: LD_VAR 0 3
11477: RET
// on BuildingStarted ( b , u ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
11478: LD_VAR 0 1
11482: PPUSH
11483: CALL_OW 266
11487: PUSH
11488: LD_INT 0
11490: PUSH
11491: LD_INT 1
11493: PUSH
11494: EMPTY
11495: LIST
11496: LIST
11497: IN
11498: IFFALSE 11647
// begin SetBName ( b , @ & GetSide ( b ) ) ;
11500: LD_VAR 0 1
11504: PPUSH
11505: LD_STRING @
11507: PUSH
11508: LD_VAR 0 1
11512: PPUSH
11513: CALL_OW 255
11517: STR
11518: PPUSH
11519: CALL_OW 500
// if GetSide ( b ) = Your_Side then
11523: LD_VAR 0 1
11527: PPUSH
11528: CALL_OW 255
11532: PUSH
11533: LD_OWVAR 2
11537: EQUAL
11538: IFFALSE 11572
// if side_depots [ GetSide ( b ) ] + 0 = 0 then
11540: LD_EXP 47
11544: PUSH
11545: LD_VAR 0 1
11549: PPUSH
11550: CALL_OW 255
11554: ARRAY
11555: PUSH
11556: LD_INT 0
11558: PLUS
11559: PUSH
11560: LD_INT 0
11562: EQUAL
11563: IFFALSE 11572
// ToLua ( LUA_IsDepot(); ) ;
11565: LD_STRING LUA_IsDepot();
11567: PPUSH
11568: CALL_OW 559
// if side_tech_lvl [ GetSide ( b ) ] = 4 then
11572: LD_EXP 31
11576: PUSH
11577: LD_VAR 0 1
11581: PPUSH
11582: CALL_OW 255
11586: ARRAY
11587: PUSH
11588: LD_INT 4
11590: EQUAL
11591: IFFALSE 11600
// ToLua ( LUA_SideTechMax() ) ;
11593: LD_STRING LUA_SideTechMax()
11595: PPUSH
11596: CALL_OW 559
// side_depots := Replace ( side_depots , GetSide ( b ) , side_depots [ GetSide ( b ) ] ^ b ) ;
11600: LD_ADDR_EXP 47
11604: PUSH
11605: LD_EXP 47
11609: PPUSH
11610: LD_VAR 0 1
11614: PPUSH
11615: CALL_OW 255
11619: PPUSH
11620: LD_EXP 47
11624: PUSH
11625: LD_VAR 0 1
11629: PPUSH
11630: CALL_OW 255
11634: ARRAY
11635: PUSH
11636: LD_VAR 0 1
11640: ADD
11641: PPUSH
11642: CALL_OW 1
11646: ST_TO_ADDR
// end ; end ;
11647: PPOPN 2
11649: END
// on BuildingCaptured ( b , o , e ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
11650: LD_VAR 0 1
11654: PPUSH
11655: CALL_OW 266
11659: PUSH
11660: LD_INT 0
11662: PUSH
11663: LD_INT 1
11665: PUSH
11666: EMPTY
11667: LIST
11668: LIST
11669: IN
11670: IFFALSE 11915
// begin SetBName ( b , @ & GetSide ( b ) ) ;
11672: LD_VAR 0 1
11676: PPUSH
11677: LD_STRING @
11679: PUSH
11680: LD_VAR 0 1
11684: PPUSH
11685: CALL_OW 255
11689: STR
11690: PPUSH
11691: CALL_OW 500
// side_depots := Replace ( side_depots , GetSide ( o ) , side_depots [ GetSide ( o ) ] diff b ) ;
11695: LD_ADDR_EXP 47
11699: PUSH
11700: LD_EXP 47
11704: PPUSH
11705: LD_VAR 0 2
11709: PPUSH
11710: CALL_OW 255
11714: PPUSH
11715: LD_EXP 47
11719: PUSH
11720: LD_VAR 0 2
11724: PPUSH
11725: CALL_OW 255
11729: ARRAY
11730: PUSH
11731: LD_VAR 0 1
11735: DIFF
11736: PPUSH
11737: CALL_OW 1
11741: ST_TO_ADDR
// if GetSide ( b ) = Your_Side then
11742: LD_VAR 0 1
11746: PPUSH
11747: CALL_OW 255
11751: PUSH
11752: LD_OWVAR 2
11756: EQUAL
11757: IFFALSE 11819
// begin if side_depots [ GetSide ( b ) ] + 0 = 0 then
11759: LD_EXP 47
11763: PUSH
11764: LD_VAR 0 1
11768: PPUSH
11769: CALL_OW 255
11773: ARRAY
11774: PUSH
11775: LD_INT 0
11777: PLUS
11778: PUSH
11779: LD_INT 0
11781: EQUAL
11782: IFFALSE 11819
// begin ToLua ( LUA_IsDepot(); ) ;
11784: LD_STRING LUA_IsDepot();
11786: PPUSH
11787: CALL_OW 559
// if side_tech_lvl [ GetSide ( b ) ] = 4 then
11791: LD_EXP 31
11795: PUSH
11796: LD_VAR 0 1
11800: PPUSH
11801: CALL_OW 255
11805: ARRAY
11806: PUSH
11807: LD_INT 4
11809: EQUAL
11810: IFFALSE 11819
// ToLua ( LUA_SideTechMax() ) ;
11812: LD_STRING LUA_SideTechMax()
11814: PPUSH
11815: CALL_OW 559
// end ; end ; if GetSide ( o ) = Your_Side then
11819: LD_VAR 0 2
11823: PPUSH
11824: CALL_OW 255
11828: PUSH
11829: LD_OWVAR 2
11833: EQUAL
11834: IFFALSE 11868
// if side_depots [ GetSide ( o ) ] + 0 = 0 then
11836: LD_EXP 47
11840: PUSH
11841: LD_VAR 0 2
11845: PPUSH
11846: CALL_OW 255
11850: ARRAY
11851: PUSH
11852: LD_INT 0
11854: PLUS
11855: PUSH
11856: LD_INT 0
11858: EQUAL
11859: IFFALSE 11868
// ToLua ( LUA_NoDepot(); ) ;
11861: LD_STRING LUA_NoDepot();
11863: PPUSH
11864: CALL_OW 559
// side_depots := Replace ( side_depots , GetSide ( b ) , side_depots [ GetSide ( b ) ] ^ b ) ;
11868: LD_ADDR_EXP 47
11872: PUSH
11873: LD_EXP 47
11877: PPUSH
11878: LD_VAR 0 1
11882: PPUSH
11883: CALL_OW 255
11887: PPUSH
11888: LD_EXP 47
11892: PUSH
11893: LD_VAR 0 1
11897: PPUSH
11898: CALL_OW 255
11902: ARRAY
11903: PUSH
11904: LD_VAR 0 1
11908: ADD
11909: PPUSH
11910: CALL_OW 1
11914: ST_TO_ADDR
// end ; end ;
11915: PPOPN 3
11917: END
// on UnitDestroyed ( i ) do var side ;
11918: LD_INT 0
11920: PPUSH
// begin if GetType ( i ) = 1 then
11921: LD_VAR 0 1
11925: PPUSH
11926: CALL_OW 247
11930: PUSH
11931: LD_INT 1
11933: EQUAL
11934: IFFALSE 11997
// begin side := GetSide ( i ) ;
11936: LD_ADDR_VAR 0 2
11940: PUSH
11941: LD_VAR 0 1
11945: PPUSH
11946: CALL_OW 255
11950: ST_TO_ADDR
// side_soldiers := Replace ( side_soldiers , side , side_soldiers [ side ] diff i ) ;
11951: LD_ADDR_EXP 46
11955: PUSH
11956: LD_EXP 46
11960: PPUSH
11961: LD_VAR 0 2
11965: PPUSH
11966: LD_EXP 46
11970: PUSH
11971: LD_VAR 0 2
11975: ARRAY
11976: PUSH
11977: LD_VAR 0 1
11981: DIFF
11982: PPUSH
11983: CALL_OW 1
11987: ST_TO_ADDR
// DidPlayerLose ( side ) ;
11988: LD_VAR 0 2
11992: PPUSH
11993: CALL 6827 0 1
// end ; if GetBType ( i ) in [ b_depot , b_warehouse ] then
11997: LD_VAR 0 1
12001: PPUSH
12002: CALL_OW 266
12006: PUSH
12007: LD_INT 0
12009: PUSH
12010: LD_INT 1
12012: PUSH
12013: EMPTY
12014: LIST
12015: LIST
12016: IN
12017: IFFALSE 12066
// side_depots := Replace ( side_depots , GetSide ( i ) , side_depots [ GetSide ( i ) ] diff i ) ;
12019: LD_ADDR_EXP 47
12023: PUSH
12024: LD_EXP 47
12028: PPUSH
12029: LD_VAR 0 1
12033: PPUSH
12034: CALL_OW 255
12038: PPUSH
12039: LD_EXP 47
12043: PUSH
12044: LD_VAR 0 1
12048: PPUSH
12049: CALL_OW 255
12053: ARRAY
12054: PUSH
12055: LD_VAR 0 1
12059: DIFF
12060: PPUSH
12061: CALL_OW 1
12065: ST_TO_ADDR
// if GetSide ( i ) = Your_Side then
12066: LD_VAR 0 1
12070: PPUSH
12071: CALL_OW 255
12075: PUSH
12076: LD_OWVAR 2
12080: EQUAL
12081: IFFALSE 12115
// if side_depots [ GetSide ( i ) ] + 0 = 0 then
12083: LD_EXP 47
12087: PUSH
12088: LD_VAR 0 1
12092: PPUSH
12093: CALL_OW 255
12097: ARRAY
12098: PUSH
12099: LD_INT 0
12101: PLUS
12102: PUSH
12103: LD_INT 0
12105: EQUAL
12106: IFFALSE 12115
// ToLua ( LUA_NoDepot(); ) ;
12108: LD_STRING LUA_NoDepot();
12110: PPUSH
12111: CALL_OW 559
// end ;
12115: PPOPN 2
12117: END
// on SailEvent ( ID ) do var i , j , lost ;
12118: LD_INT 0
12120: PPUSH
12121: PPUSH
12122: PPUSH
// begin case ID of 66 :
12123: LD_VAR 0 1
12127: PUSH
12128: LD_INT 66
12130: DOUBLE
12131: EQUAL
12132: IFTRUE 12136
12134: GO 12300
12136: POP
// begin for i = 1 to Teams do
12137: LD_ADDR_VAR 0 2
12141: PUSH
12142: DOUBLE
12143: LD_INT 1
12145: DEC
12146: ST_TO_ADDR
12147: LD_EXP 6
12151: PUSH
12152: FOR_TO
12153: IFFALSE 12296
// begin lost := 0 ;
12155: LD_ADDR_VAR 0 4
12159: PUSH
12160: LD_INT 0
12162: ST_TO_ADDR
// for j in Teams [ i ] do
12163: LD_ADDR_VAR 0 3
12167: PUSH
12168: LD_EXP 6
12172: PUSH
12173: LD_VAR 0 2
12177: ARRAY
12178: PUSH
12179: FOR_IN
12180: IFFALSE 12214
// if side_isalive [ j ] = 0 then
12182: LD_EXP 54
12186: PUSH
12187: LD_VAR 0 3
12191: ARRAY
12192: PUSH
12193: LD_INT 0
12195: EQUAL
12196: IFFALSE 12212
// lost := lost + 1 ;
12198: LD_ADDR_VAR 0 4
12202: PUSH
12203: LD_VAR 0 4
12207: PUSH
12208: LD_INT 1
12210: PLUS
12211: ST_TO_ADDR
12212: GO 12179
12214: POP
12215: POP
// if lost = Teams [ i ] + 0 then
12216: LD_VAR 0 4
12220: PUSH
12221: LD_EXP 6
12225: PUSH
12226: LD_VAR 0 2
12230: ARRAY
12231: PUSH
12232: LD_INT 0
12234: PLUS
12235: EQUAL
12236: IFFALSE 12292
// if Your_Side = 9 or Your_Side in Teams [ i ] then
12238: LD_OWVAR 2
12242: PUSH
12243: LD_INT 9
12245: EQUAL
12246: PUSH
12247: LD_OWVAR 2
12251: PUSH
12252: LD_EXP 6
12256: PUSH
12257: LD_VAR 0 2
12261: ARRAY
12262: IN
12263: OR
12264: IFFALSE 12279
// begin YouLostInMultiplayer ;
12266: CALL_OW 107
// ToLua ( EndGame(); ) ;
12270: LD_STRING EndGame();
12272: PPUSH
12273: CALL_OW 559
// end else
12277: GO 12290
// begin YouWinInMultiplayer ;
12279: CALL_OW 106
// ToLua ( EndGame(); ) ;
12283: LD_STRING EndGame();
12285: PPUSH
12286: CALL_OW 559
// end else
12290: GO 12294
// continue end ;
12292: GO 12152
12294: GO 12152
12296: POP
12297: POP
// end ; 67 :
12298: GO 12405
12300: LD_INT 67
12302: DOUBLE
12303: EQUAL
12304: IFTRUE 12308
12306: GO 12404
12308: POP
// begin if not victory_cond = 0 then
12309: LD_EXP 27
12313: PUSH
12314: LD_INT 0
12316: EQUAL
12317: NOT
12318: IFFALSE 12402
// begin for i = 1 to Teams do
12320: LD_ADDR_VAR 0 2
12324: PUSH
12325: DOUBLE
12326: LD_INT 1
12328: DEC
12329: ST_TO_ADDR
12330: LD_EXP 6
12334: PUSH
12335: FOR_TO
12336: IFFALSE 12400
// begin if team_siberite_stocked [ i ] >= victory_cond then
12338: LD_EXP 61
12342: PUSH
12343: LD_VAR 0 2
12347: ARRAY
12348: PUSH
12349: LD_EXP 27
12353: GREATEREQUAL
12354: IFFALSE 12398
// if Your_Side in Teams [ i ] then
12356: LD_OWVAR 2
12360: PUSH
12361: LD_EXP 6
12365: PUSH
12366: LD_VAR 0 2
12370: ARRAY
12371: IN
12372: IFFALSE 12387
// begin YouWinInMultiplayer ;
12374: CALL_OW 106
// ToLua ( EndGame(); ) ;
12378: LD_STRING EndGame();
12380: PPUSH
12381: CALL_OW 559
// end else
12385: GO 12398
// begin YouLostInMultiplayer ;
12387: CALL_OW 107
// ToLua ( EndGame(); ) ;
12391: LD_STRING EndGame();
12393: PPUSH
12394: CALL_OW 559
// end ; end ;
12398: GO 12335
12400: POP
12401: POP
// end ; end ; end ;
12402: GO 12405
12404: POP
// end ;
12405: PPOPN 4
12407: END
// on CustomCommand ( side , ComID , order , reserved1 , reserved2 , reserved3 ) do var i ;
12408: LD_INT 0
12410: PPUSH
// begin case ComID of 201 :
12411: LD_VAR 0 2
12415: PUSH
12416: LD_INT 201
12418: DOUBLE
12419: EQUAL
12420: IFTRUE 12424
12422: GO 12554
12424: POP
// begin if side = Your_Side then
12425: LD_VAR 0 1
12429: PUSH
12430: LD_OWVAR 2
12434: EQUAL
12435: IFFALSE 12552
// ToLua ( LUA_UpdateUpgradeCost( & cost_per_upgrade [ side_tech_lvl [ side ] + 1 ] [ reinforce_cost ] [ 1 ] & , & cost_per_upgrade [ side_tech_lvl [ side ] + 1 ] [ reinforce_cost ] [ 2 ] & , & cost_per_upgrade [ side_tech_lvl [ side ] + 1 ] [ reinforce_cost ] [ 3 ] & ); ) ;
12437: LD_STRING LUA_UpdateUpgradeCost(
12439: PUSH
12440: LD_EXP 56
12444: PUSH
12445: LD_EXP 31
12449: PUSH
12450: LD_VAR 0 1
12454: ARRAY
12455: PUSH
12456: LD_INT 1
12458: PLUS
12459: ARRAY
12460: PUSH
12461: LD_EXP 28
12465: ARRAY
12466: PUSH
12467: LD_INT 1
12469: ARRAY
12470: STR
12471: PUSH
12472: LD_STRING ,
12474: STR
12475: PUSH
12476: LD_EXP 56
12480: PUSH
12481: LD_EXP 31
12485: PUSH
12486: LD_VAR 0 1
12490: ARRAY
12491: PUSH
12492: LD_INT 1
12494: PLUS
12495: ARRAY
12496: PUSH
12497: LD_EXP 28
12501: ARRAY
12502: PUSH
12503: LD_INT 2
12505: ARRAY
12506: STR
12507: PUSH
12508: LD_STRING ,
12510: STR
12511: PUSH
12512: LD_EXP 56
12516: PUSH
12517: LD_EXP 31
12521: PUSH
12522: LD_VAR 0 1
12526: ARRAY
12527: PUSH
12528: LD_INT 1
12530: PLUS
12531: ARRAY
12532: PUSH
12533: LD_EXP 28
12537: ARRAY
12538: PUSH
12539: LD_INT 3
12541: ARRAY
12542: STR
12543: PUSH
12544: LD_STRING );
12546: STR
12547: PPUSH
12548: CALL_OW 559
// end ; 202 :
12552: GO 15912
12554: LD_INT 202
12556: DOUBLE
12557: EQUAL
12558: IFTRUE 12562
12560: GO 12711
12562: POP
// begin if side_reinforcement_amount [ side ] < 0 or side_reinforcement_amount [ side ] > side_reinforcement_cap [ side ] then
12563: LD_EXP 57
12567: PUSH
12568: LD_VAR 0 1
12572: ARRAY
12573: PUSH
12574: LD_INT 0
12576: LESS
12577: PUSH
12578: LD_EXP 57
12582: PUSH
12583: LD_VAR 0 1
12587: ARRAY
12588: PUSH
12589: LD_EXP 58
12593: PUSH
12594: LD_VAR 0 1
12598: ARRAY
12599: GREATER
12600: OR
12601: IFFALSE 12626
// side_reinforcement_amount := Replace ( side_reinforcement_amount , side , 1 ) ;
12603: LD_ADDR_EXP 57
12607: PUSH
12608: LD_EXP 57
12612: PPUSH
12613: LD_VAR 0 1
12617: PPUSH
12618: LD_INT 1
12620: PPUSH
12621: CALL_OW 1
12625: ST_TO_ADDR
// if side = Your_Side then
12626: LD_VAR 0 1
12630: PUSH
12631: LD_OWVAR 2
12635: EQUAL
12636: IFFALSE 12709
// ToLua ( LUA_UpdateReinforceCost( & side_reinforcement_amount [ side ] & * & cost_per_human [ reinforce_cost ] & , & 0 & , & 0 & , & side_reinforcement_amount [ side ] & ); ) ;
12638: LD_STRING LUA_UpdateReinforceCost(
12640: PUSH
12641: LD_EXP 57
12645: PUSH
12646: LD_VAR 0 1
12650: ARRAY
12651: STR
12652: PUSH
12653: LD_STRING *
12655: STR
12656: PUSH
12657: LD_EXP 55
12661: PUSH
12662: LD_EXP 28
12666: ARRAY
12667: STR
12668: PUSH
12669: LD_STRING ,
12671: STR
12672: PUSH
12673: LD_INT 0
12675: STR
12676: PUSH
12677: LD_STRING ,
12679: STR
12680: PUSH
12681: LD_INT 0
12683: STR
12684: PUSH
12685: LD_STRING ,
12687: STR
12688: PUSH
12689: LD_EXP 57
12693: PUSH
12694: LD_VAR 0 1
12698: ARRAY
12699: STR
12700: PUSH
12701: LD_STRING );
12703: STR
12704: PPUSH
12705: CALL_OW 559
// end ; 2020 :
12709: GO 15912
12711: LD_INT 2020
12713: DOUBLE
12714: EQUAL
12715: IFTRUE 12719
12717: GO 12856
12719: POP
// begin if side_reinforcement_amount [ side ] > 1 then
12720: LD_EXP 57
12724: PUSH
12725: LD_VAR 0 1
12729: ARRAY
12730: PUSH
12731: LD_INT 1
12733: GREATER
12734: IFFALSE 12771
// side_reinforcement_amount := Replace ( side_reinforcement_amount , side , side_reinforcement_amount [ side ] - 1 ) ;
12736: LD_ADDR_EXP 57
12740: PUSH
12741: LD_EXP 57
12745: PPUSH
12746: LD_VAR 0 1
12750: PPUSH
12751: LD_EXP 57
12755: PUSH
12756: LD_VAR 0 1
12760: ARRAY
12761: PUSH
12762: LD_INT 1
12764: MINUS
12765: PPUSH
12766: CALL_OW 1
12770: ST_TO_ADDR
// if side = Your_Side then
12771: LD_VAR 0 1
12775: PUSH
12776: LD_OWVAR 2
12780: EQUAL
12781: IFFALSE 12854
// ToLua ( LUA_UpdateReinforceCost( & side_reinforcement_amount [ side ] & * & cost_per_human [ reinforce_cost ] & , & 0 & , & 0 & , & side_reinforcement_amount [ side ] & ); ) ;
12783: LD_STRING LUA_UpdateReinforceCost(
12785: PUSH
12786: LD_EXP 57
12790: PUSH
12791: LD_VAR 0 1
12795: ARRAY
12796: STR
12797: PUSH
12798: LD_STRING *
12800: STR
12801: PUSH
12802: LD_EXP 55
12806: PUSH
12807: LD_EXP 28
12811: ARRAY
12812: STR
12813: PUSH
12814: LD_STRING ,
12816: STR
12817: PUSH
12818: LD_INT 0
12820: STR
12821: PUSH
12822: LD_STRING ,
12824: STR
12825: PUSH
12826: LD_INT 0
12828: STR
12829: PUSH
12830: LD_STRING ,
12832: STR
12833: PUSH
12834: LD_EXP 57
12838: PUSH
12839: LD_VAR 0 1
12843: ARRAY
12844: STR
12845: PUSH
12846: LD_STRING );
12848: STR
12849: PPUSH
12850: CALL_OW 559
// end ; 2021 :
12854: GO 15912
12856: LD_INT 2021
12858: DOUBLE
12859: EQUAL
12860: IFTRUE 12864
12862: GO 13009
12864: POP
// begin if side_reinforcement_amount [ side ] < side_reinforcement_cap [ side ] then
12865: LD_EXP 57
12869: PUSH
12870: LD_VAR 0 1
12874: ARRAY
12875: PUSH
12876: LD_EXP 58
12880: PUSH
12881: LD_VAR 0 1
12885: ARRAY
12886: LESS
12887: IFFALSE 12924
// side_reinforcement_amount := Replace ( side_reinforcement_amount , side , side_reinforcement_amount [ side ] + 1 ) ;
12889: LD_ADDR_EXP 57
12893: PUSH
12894: LD_EXP 57
12898: PPUSH
12899: LD_VAR 0 1
12903: PPUSH
12904: LD_EXP 57
12908: PUSH
12909: LD_VAR 0 1
12913: ARRAY
12914: PUSH
12915: LD_INT 1
12917: PLUS
12918: PPUSH
12919: CALL_OW 1
12923: ST_TO_ADDR
// if side = Your_Side then
12924: LD_VAR 0 1
12928: PUSH
12929: LD_OWVAR 2
12933: EQUAL
12934: IFFALSE 13007
// ToLua ( LUA_UpdateReinforceCost( & side_reinforcement_amount [ side ] & * & cost_per_human [ reinforce_cost ] & , & 0 & , & 0 & , & side_reinforcement_amount [ side ] & ); ) ;
12936: LD_STRING LUA_UpdateReinforceCost(
12938: PUSH
12939: LD_EXP 57
12943: PUSH
12944: LD_VAR 0 1
12948: ARRAY
12949: STR
12950: PUSH
12951: LD_STRING *
12953: STR
12954: PUSH
12955: LD_EXP 55
12959: PUSH
12960: LD_EXP 28
12964: ARRAY
12965: STR
12966: PUSH
12967: LD_STRING ,
12969: STR
12970: PUSH
12971: LD_INT 0
12973: STR
12974: PUSH
12975: LD_STRING ,
12977: STR
12978: PUSH
12979: LD_INT 0
12981: STR
12982: PUSH
12983: LD_STRING ,
12985: STR
12986: PUSH
12987: LD_EXP 57
12991: PUSH
12992: LD_VAR 0 1
12996: ARRAY
12997: STR
12998: PUSH
12999: LD_STRING );
13001: STR
13002: PPUSH
13003: CALL_OW 559
// end ; 203 :
13007: GO 15912
13009: LD_INT 203
13011: DOUBLE
13012: EQUAL
13013: IFTRUE 13017
13015: GO 13071
13017: POP
// begin if side = Your_Side then
13018: LD_VAR 0 1
13022: PUSH
13023: LD_OWVAR 2
13027: EQUAL
13028: IFFALSE 13069
// ToLua ( LUA_UpdateSiberiteSent( & team_siberite_stocked [ Side_Teams [ side ] ] & , & victory_cond & ); ) ;
13030: LD_STRING LUA_UpdateSiberiteSent(
13032: PUSH
13033: LD_EXP 61
13037: PUSH
13038: LD_EXP 5
13042: PUSH
13043: LD_VAR 0 1
13047: ARRAY
13048: ARRAY
13049: STR
13050: PUSH
13051: LD_STRING ,
13053: STR
13054: PUSH
13055: LD_EXP 27
13059: STR
13060: PUSH
13061: LD_STRING );
13063: STR
13064: PPUSH
13065: CALL_OW 559
// end ; 204 :
13069: GO 15912
13071: LD_INT 204
13073: DOUBLE
13074: EQUAL
13075: IFTRUE 13079
13077: GO 14108
13079: POP
// begin case order of 1 :
13080: LD_VAR 0 3
13084: PUSH
13085: LD_INT 1
13087: DOUBLE
13088: EQUAL
13089: IFTRUE 13093
13091: GO 13393
13093: POP
// begin side_pending_order := Replace ( side_pending_order , side , Replace ( side_pending_order [ side ] , 1 , side_reinforcement_amount [ side ] * cost_per_human [ reinforce_cost ] ) ) ;
13094: LD_ADDR_EXP 59
13098: PUSH
13099: LD_EXP 59
13103: PPUSH
13104: LD_VAR 0 1
13108: PPUSH
13109: LD_EXP 59
13113: PUSH
13114: LD_VAR 0 1
13118: ARRAY
13119: PPUSH
13120: LD_INT 1
13122: PPUSH
13123: LD_EXP 57
13127: PUSH
13128: LD_VAR 0 1
13132: ARRAY
13133: PUSH
13134: LD_EXP 55
13138: PUSH
13139: LD_EXP 28
13143: ARRAY
13144: MUL
13145: PPUSH
13146: CALL_OW 1
13150: PPUSH
13151: CALL_OW 1
13155: ST_TO_ADDR
// side_pending_order := Replace ( side_pending_order , side , Replace ( side_pending_order [ side ] , 2 , 0 ) ) ;
13156: LD_ADDR_EXP 59
13160: PUSH
13161: LD_EXP 59
13165: PPUSH
13166: LD_VAR 0 1
13170: PPUSH
13171: LD_EXP 59
13175: PUSH
13176: LD_VAR 0 1
13180: ARRAY
13181: PPUSH
13182: LD_INT 2
13184: PPUSH
13185: LD_INT 0
13187: PPUSH
13188: CALL_OW 1
13192: PPUSH
13193: CALL_OW 1
13197: ST_TO_ADDR
// side_pending_order := Replace ( side_pending_order , side , Replace ( side_pending_order [ side ] , 3 , 0 ) ) ;
13198: LD_ADDR_EXP 59
13202: PUSH
13203: LD_EXP 59
13207: PPUSH
13208: LD_VAR 0 1
13212: PPUSH
13213: LD_EXP 59
13217: PUSH
13218: LD_VAR 0 1
13222: ARRAY
13223: PPUSH
13224: LD_INT 3
13226: PPUSH
13227: LD_INT 0
13229: PPUSH
13230: CALL_OW 1
13234: PPUSH
13235: CALL_OW 1
13239: ST_TO_ADDR
// if side = Your_Side then
13240: LD_VAR 0 1
13244: PUSH
13245: LD_OWVAR 2
13249: EQUAL
13250: IFFALSE 13391
// begin ToLua ( LUA_UpdateTransferResources( & side_pending_order [ side ] [ 1 ] & , & side_pending_order [ side ] [ 2 ] & , & side_pending_order [ side ] [ 3 ] & , & 0 & , & 0 & ); ) ;
13252: LD_STRING LUA_UpdateTransferResources(
13254: PUSH
13255: LD_EXP 59
13259: PUSH
13260: LD_VAR 0 1
13264: ARRAY
13265: PUSH
13266: LD_INT 1
13268: ARRAY
13269: STR
13270: PUSH
13271: LD_STRING ,
13273: STR
13274: PUSH
13275: LD_EXP 59
13279: PUSH
13280: LD_VAR 0 1
13284: ARRAY
13285: PUSH
13286: LD_INT 2
13288: ARRAY
13289: STR
13290: PUSH
13291: LD_STRING ,
13293: STR
13294: PUSH
13295: LD_EXP 59
13299: PUSH
13300: LD_VAR 0 1
13304: ARRAY
13305: PUSH
13306: LD_INT 3
13308: ARRAY
13309: STR
13310: PUSH
13311: LD_STRING ,
13313: STR
13314: PUSH
13315: LD_INT 0
13317: STR
13318: PUSH
13319: LD_STRING ,
13321: STR
13322: PUSH
13323: LD_INT 0
13325: STR
13326: PUSH
13327: LD_STRING );
13329: STR
13330: PPUSH
13331: CALL_OW 559
// ToLua ( LUA_OrderIssued(); ) ;
13335: LD_STRING LUA_OrderIssued();
13337: PPUSH
13338: CALL_OW 559
// ToLua ( LUA_UpdateTransferResources( & 0 & , & 0 & , & 0 & , & 0 & , & order & ); ) ;
13342: LD_STRING LUA_UpdateTransferResources(
13344: PUSH
13345: LD_INT 0
13347: STR
13348: PUSH
13349: LD_STRING ,
13351: STR
13352: PUSH
13353: LD_INT 0
13355: STR
13356: PUSH
13357: LD_STRING ,
13359: STR
13360: PUSH
13361: LD_INT 0
13363: STR
13364: PUSH
13365: LD_STRING ,
13367: STR
13368: PUSH
13369: LD_INT 0
13371: STR
13372: PUSH
13373: LD_STRING ,
13375: STR
13376: PUSH
13377: LD_VAR 0 3
13381: STR
13382: PUSH
13383: LD_STRING );
13385: STR
13386: PPUSH
13387: CALL_OW 559
// end ; end ; 2 :
13391: GO 13985
13393: LD_INT 2
13395: DOUBLE
13396: EQUAL
13397: IFTRUE 13401
13399: GO 13765
13401: POP
// begin side_pending_order := Replace ( side_pending_order , side , Replace ( side_pending_order [ side ] , 1 , cost_per_upgrade [ side_tech_lvl [ side ] + 1 ] [ reinforce_cost ] [ 1 ] ) ) ;
13402: LD_ADDR_EXP 59
13406: PUSH
13407: LD_EXP 59
13411: PPUSH
13412: LD_VAR 0 1
13416: PPUSH
13417: LD_EXP 59
13421: PUSH
13422: LD_VAR 0 1
13426: ARRAY
13427: PPUSH
13428: LD_INT 1
13430: PPUSH
13431: LD_EXP 56
13435: PUSH
13436: LD_EXP 31
13440: PUSH
13441: LD_VAR 0 1
13445: ARRAY
13446: PUSH
13447: LD_INT 1
13449: PLUS
13450: ARRAY
13451: PUSH
13452: LD_EXP 28
13456: ARRAY
13457: PUSH
13458: LD_INT 1
13460: ARRAY
13461: PPUSH
13462: CALL_OW 1
13466: PPUSH
13467: CALL_OW 1
13471: ST_TO_ADDR
// side_pending_order := Replace ( side_pending_order , side , Replace ( side_pending_order [ side ] , 2 , cost_per_upgrade [ side_tech_lvl [ side ] + 1 ] [ reinforce_cost ] [ 2 ] ) ) ;
13472: LD_ADDR_EXP 59
13476: PUSH
13477: LD_EXP 59
13481: PPUSH
13482: LD_VAR 0 1
13486: PPUSH
13487: LD_EXP 59
13491: PUSH
13492: LD_VAR 0 1
13496: ARRAY
13497: PPUSH
13498: LD_INT 2
13500: PPUSH
13501: LD_EXP 56
13505: PUSH
13506: LD_EXP 31
13510: PUSH
13511: LD_VAR 0 1
13515: ARRAY
13516: PUSH
13517: LD_INT 1
13519: PLUS
13520: ARRAY
13521: PUSH
13522: LD_EXP 28
13526: ARRAY
13527: PUSH
13528: LD_INT 2
13530: ARRAY
13531: PPUSH
13532: CALL_OW 1
13536: PPUSH
13537: CALL_OW 1
13541: ST_TO_ADDR
// side_pending_order := Replace ( side_pending_order , side , Replace ( side_pending_order [ side ] , 3 , cost_per_upgrade [ side_tech_lvl [ side ] + 1 ] [ reinforce_cost ] [ 3 ] ) ) ;
13542: LD_ADDR_EXP 59
13546: PUSH
13547: LD_EXP 59
13551: PPUSH
13552: LD_VAR 0 1
13556: PPUSH
13557: LD_EXP 59
13561: PUSH
13562: LD_VAR 0 1
13566: ARRAY
13567: PPUSH
13568: LD_INT 3
13570: PPUSH
13571: LD_EXP 56
13575: PUSH
13576: LD_EXP 31
13580: PUSH
13581: LD_VAR 0 1
13585: ARRAY
13586: PUSH
13587: LD_INT 1
13589: PLUS
13590: ARRAY
13591: PUSH
13592: LD_EXP 28
13596: ARRAY
13597: PUSH
13598: LD_INT 3
13600: ARRAY
13601: PPUSH
13602: CALL_OW 1
13606: PPUSH
13607: CALL_OW 1
13611: ST_TO_ADDR
// if side = Your_Side then
13612: LD_VAR 0 1
13616: PUSH
13617: LD_OWVAR 2
13621: EQUAL
13622: IFFALSE 13763
// begin ToLua ( LUA_UpdateTransferResources( & side_pending_order [ side ] [ 1 ] & , & side_pending_order [ side ] [ 2 ] & , & side_pending_order [ side ] [ 3 ] & , & 0 & , & 0 & ); ) ;
13624: LD_STRING LUA_UpdateTransferResources(
13626: PUSH
13627: LD_EXP 59
13631: PUSH
13632: LD_VAR 0 1
13636: ARRAY
13637: PUSH
13638: LD_INT 1
13640: ARRAY
13641: STR
13642: PUSH
13643: LD_STRING ,
13645: STR
13646: PUSH
13647: LD_EXP 59
13651: PUSH
13652: LD_VAR 0 1
13656: ARRAY
13657: PUSH
13658: LD_INT 2
13660: ARRAY
13661: STR
13662: PUSH
13663: LD_STRING ,
13665: STR
13666: PUSH
13667: LD_EXP 59
13671: PUSH
13672: LD_VAR 0 1
13676: ARRAY
13677: PUSH
13678: LD_INT 3
13680: ARRAY
13681: STR
13682: PUSH
13683: LD_STRING ,
13685: STR
13686: PUSH
13687: LD_INT 0
13689: STR
13690: PUSH
13691: LD_STRING ,
13693: STR
13694: PUSH
13695: LD_INT 0
13697: STR
13698: PUSH
13699: LD_STRING );
13701: STR
13702: PPUSH
13703: CALL_OW 559
// ToLua ( LUA_OrderIssued(); ) ;
13707: LD_STRING LUA_OrderIssued();
13709: PPUSH
13710: CALL_OW 559
// ToLua ( LUA_UpdateTransferResources( & 0 & , & 0 & , & 0 & , & 0 & , & order & ); ) ;
13714: LD_STRING LUA_UpdateTransferResources(
13716: PUSH
13717: LD_INT 0
13719: STR
13720: PUSH
13721: LD_STRING ,
13723: STR
13724: PUSH
13725: LD_INT 0
13727: STR
13728: PUSH
13729: LD_STRING ,
13731: STR
13732: PUSH
13733: LD_INT 0
13735: STR
13736: PUSH
13737: LD_STRING ,
13739: STR
13740: PUSH
13741: LD_INT 0
13743: STR
13744: PUSH
13745: LD_STRING ,
13747: STR
13748: PUSH
13749: LD_VAR 0 3
13753: STR
13754: PUSH
13755: LD_STRING );
13757: STR
13758: PPUSH
13759: CALL_OW 559
// end ; end ; 3 :
13763: GO 13985
13765: LD_INT 3
13767: DOUBLE
13768: EQUAL
13769: IFTRUE 13773
13771: GO 13984
13773: POP
// begin side_pending_order := Replace ( side_pending_order , side , Replace ( side_pending_order [ side ] , 1 , 0 ) ) ;
13774: LD_ADDR_EXP 59
13778: PUSH
13779: LD_EXP 59
13783: PPUSH
13784: LD_VAR 0 1
13788: PPUSH
13789: LD_EXP 59
13793: PUSH
13794: LD_VAR 0 1
13798: ARRAY
13799: PPUSH
13800: LD_INT 1
13802: PPUSH
13803: LD_INT 0
13805: PPUSH
13806: CALL_OW 1
13810: PPUSH
13811: CALL_OW 1
13815: ST_TO_ADDR
// side_pending_order := Replace ( side_pending_order , side , Replace ( side_pending_order [ side ] , 2 , 0 ) ) ;
13816: LD_ADDR_EXP 59
13820: PUSH
13821: LD_EXP 59
13825: PPUSH
13826: LD_VAR 0 1
13830: PPUSH
13831: LD_EXP 59
13835: PUSH
13836: LD_VAR 0 1
13840: ARRAY
13841: PPUSH
13842: LD_INT 2
13844: PPUSH
13845: LD_INT 0
13847: PPUSH
13848: CALL_OW 1
13852: PPUSH
13853: CALL_OW 1
13857: ST_TO_ADDR
// side_pending_order := Replace ( side_pending_order , side , Replace ( side_pending_order [ side ] , 3 , 10 ) ) ;
13858: LD_ADDR_EXP 59
13862: PUSH
13863: LD_EXP 59
13867: PPUSH
13868: LD_VAR 0 1
13872: PPUSH
13873: LD_EXP 59
13877: PUSH
13878: LD_VAR 0 1
13882: ARRAY
13883: PPUSH
13884: LD_INT 3
13886: PPUSH
13887: LD_INT 10
13889: PPUSH
13890: CALL_OW 1
13894: PPUSH
13895: CALL_OW 1
13899: ST_TO_ADDR
// if side = Your_Side then
13900: LD_VAR 0 1
13904: PUSH
13905: LD_OWVAR 2
13909: EQUAL
13910: IFFALSE 13982
// begin ToLua ( LUA_UpdateTransferResources( & 0 & , & 0 & , & team_siberite_stocked [ Side_Teams [ side ] ] & , & victory_cond & , & 0 & ); ) ;
13912: LD_STRING LUA_UpdateTransferResources(
13914: PUSH
13915: LD_INT 0
13917: STR
13918: PUSH
13919: LD_STRING ,
13921: STR
13922: PUSH
13923: LD_INT 0
13925: STR
13926: PUSH
13927: LD_STRING ,
13929: STR
13930: PUSH
13931: LD_EXP 61
13935: PUSH
13936: LD_EXP 5
13940: PUSH
13941: LD_VAR 0 1
13945: ARRAY
13946: ARRAY
13947: STR
13948: PUSH
13949: LD_STRING ,
13951: STR
13952: PUSH
13953: LD_EXP 27
13957: STR
13958: PUSH
13959: LD_STRING ,
13961: STR
13962: PUSH
13963: LD_INT 0
13965: STR
13966: PUSH
13967: LD_STRING );
13969: STR
13970: PPUSH
13971: CALL_OW 559
// ToLua ( LUA_OrderIssued(); ) ;
13975: LD_STRING LUA_OrderIssued();
13977: PPUSH
13978: CALL_OW 559
// end ; end ; end ;
13982: GO 13985
13984: POP
// if side = Your_Side then
13985: LD_VAR 0 1
13989: PUSH
13990: LD_OWVAR 2
13994: EQUAL
13995: IFFALSE 14081
// begin ToLua ( LUA_CannotSendShipment(); ) ;
13997: LD_STRING LUA_CannotSendShipment();
13999: PPUSH
14000: CALL_OW 559
// ToLua ( LUA_UpdateTransferZone( & team_transfer_zones [ Side_Teams [ side ] ] [ side_chosen_zone [ side ] ] & ) ) ;
14004: LD_STRING LUA_UpdateTransferZone(
14006: PUSH
14007: LD_EXP 62
14011: PUSH
14012: LD_EXP 5
14016: PUSH
14017: LD_VAR 0 1
14021: ARRAY
14022: ARRAY
14023: PUSH
14024: LD_EXP 64
14028: PUSH
14029: LD_VAR 0 1
14033: ARRAY
14034: ARRAY
14035: STR
14036: PUSH
14037: LD_STRING )
14039: STR
14040: PPUSH
14041: CALL_OW 559
// SetAreaMapShow ( team_transfer_zones [ Side_Teams [ side ] ] [ side_chosen_zone [ side ] ] , 1 ) ;
14045: LD_EXP 62
14049: PUSH
14050: LD_EXP 5
14054: PUSH
14055: LD_VAR 0 1
14059: ARRAY
14060: ARRAY
14061: PUSH
14062: LD_EXP 64
14066: PUSH
14067: LD_VAR 0 1
14071: ARRAY
14072: ARRAY
14073: PPUSH
14074: LD_INT 1
14076: PPUSH
14077: CALL_OW 424
// end ; side_order_type := Replace ( side_order_type , side , order ) ;
14081: LD_ADDR_EXP 68
14085: PUSH
14086: LD_EXP 68
14090: PPUSH
14091: LD_VAR 0 1
14095: PPUSH
14096: LD_VAR 0 3
14100: PPUSH
14101: CALL_OW 1
14105: ST_TO_ADDR
// end ; 2040 :
14106: GO 15912
14108: LD_INT 2040
14110: DOUBLE
14111: EQUAL
14112: IFTRUE 14116
14114: GO 14202
14116: POP
// begin side_zone_locked := Replace ( side_zone_locked , side , 1 ) ;
14117: LD_ADDR_EXP 65
14121: PUSH
14122: LD_EXP 65
14126: PPUSH
14127: LD_VAR 0 1
14131: PPUSH
14132: LD_INT 1
14134: PPUSH
14135: CALL_OW 1
14139: ST_TO_ADDR
// if side = Your_Side then
14140: LD_VAR 0 1
14144: PUSH
14145: LD_OWVAR 2
14149: EQUAL
14150: IFFALSE 14200
// begin ToLua ( LUA_ChosenTransferZone(); ) ;
14152: LD_STRING LUA_ChosenTransferZone();
14154: PPUSH
14155: CALL_OW 559
// ToLua ( LUA_UpdateTransferZone( & team_transfer_zones [ Side_Teams [ side ] ] [ side_chosen_zone [ side ] ] & ) ) ;
14159: LD_STRING LUA_UpdateTransferZone(
14161: PUSH
14162: LD_EXP 62
14166: PUSH
14167: LD_EXP 5
14171: PUSH
14172: LD_VAR 0 1
14176: ARRAY
14177: ARRAY
14178: PUSH
14179: LD_EXP 64
14183: PUSH
14184: LD_VAR 0 1
14188: ARRAY
14189: ARRAY
14190: STR
14191: PUSH
14192: LD_STRING )
14194: STR
14195: PPUSH
14196: CALL_OW 559
// end ; end ; 2041 :
14200: GO 15912
14202: LD_INT 2041
14204: DOUBLE
14205: EQUAL
14206: IFTRUE 14210
14208: GO 14442
14210: POP
// begin if side = Your_Side then
14211: LD_VAR 0 1
14215: PUSH
14216: LD_OWVAR 2
14220: EQUAL
14221: IFFALSE 14259
// SetAreaMapShow ( team_transfer_zones [ Side_Teams [ side ] ] [ side_chosen_zone [ side ] ] , 0 ) ;
14223: LD_EXP 62
14227: PUSH
14228: LD_EXP 5
14232: PUSH
14233: LD_VAR 0 1
14237: ARRAY
14238: ARRAY
14239: PUSH
14240: LD_EXP 64
14244: PUSH
14245: LD_VAR 0 1
14249: ARRAY
14250: ARRAY
14251: PPUSH
14252: LD_INT 0
14254: PPUSH
14255: CALL_OW 424
// side_chosen_zone := Replace ( side_chosen_zone , side , side_chosen_zone [ side ] - 1 ) ;
14259: LD_ADDR_EXP 64
14263: PUSH
14264: LD_EXP 64
14268: PPUSH
14269: LD_VAR 0 1
14273: PPUSH
14274: LD_EXP 64
14278: PUSH
14279: LD_VAR 0 1
14283: ARRAY
14284: PUSH
14285: LD_INT 1
14287: MINUS
14288: PPUSH
14289: CALL_OW 1
14293: ST_TO_ADDR
// if side_chosen_zone [ side ] < 1 then
14294: LD_EXP 64
14298: PUSH
14299: LD_VAR 0 1
14303: ARRAY
14304: PUSH
14305: LD_INT 1
14307: LESS
14308: IFFALSE 14351
// side_chosen_zone := Replace ( side_chosen_zone , side , team_transfer_zones [ Side_Teams [ side ] ] + 0 ) ;
14310: LD_ADDR_EXP 64
14314: PUSH
14315: LD_EXP 64
14319: PPUSH
14320: LD_VAR 0 1
14324: PPUSH
14325: LD_EXP 62
14329: PUSH
14330: LD_EXP 5
14334: PUSH
14335: LD_VAR 0 1
14339: ARRAY
14340: ARRAY
14341: PUSH
14342: LD_INT 0
14344: PLUS
14345: PPUSH
14346: CALL_OW 1
14350: ST_TO_ADDR
// if side = Your_Side then
14351: LD_VAR 0 1
14355: PUSH
14356: LD_OWVAR 2
14360: EQUAL
14361: IFFALSE 14440
// begin ToLua ( LUA_UpdateTransferZone( & team_transfer_zones [ Side_Teams [ side ] ] [ side_chosen_zone [ side ] ] & ) ) ;
14363: LD_STRING LUA_UpdateTransferZone(
14365: PUSH
14366: LD_EXP 62
14370: PUSH
14371: LD_EXP 5
14375: PUSH
14376: LD_VAR 0 1
14380: ARRAY
14381: ARRAY
14382: PUSH
14383: LD_EXP 64
14387: PUSH
14388: LD_VAR 0 1
14392: ARRAY
14393: ARRAY
14394: STR
14395: PUSH
14396: LD_STRING )
14398: STR
14399: PPUSH
14400: CALL_OW 559
// SetAreaMapShow ( team_transfer_zones [ Side_Teams [ side ] ] [ side_chosen_zone [ side ] ] , 1 ) ;
14404: LD_EXP 62
14408: PUSH
14409: LD_EXP 5
14413: PUSH
14414: LD_VAR 0 1
14418: ARRAY
14419: ARRAY
14420: PUSH
14421: LD_EXP 64
14425: PUSH
14426: LD_VAR 0 1
14430: ARRAY
14431: ARRAY
14432: PPUSH
14433: LD_INT 1
14435: PPUSH
14436: CALL_OW 424
// end ; end ; 2042 :
14440: GO 15912
14442: LD_INT 2042
14444: DOUBLE
14445: EQUAL
14446: IFTRUE 14450
14448: GO 14682
14450: POP
// begin if side = Your_Side then
14451: LD_VAR 0 1
14455: PUSH
14456: LD_OWVAR 2
14460: EQUAL
14461: IFFALSE 14499
// SetAreaMapShow ( team_transfer_zones [ Side_Teams [ side ] ] [ side_chosen_zone [ side ] ] , 0 ) ;
14463: LD_EXP 62
14467: PUSH
14468: LD_EXP 5
14472: PUSH
14473: LD_VAR 0 1
14477: ARRAY
14478: ARRAY
14479: PUSH
14480: LD_EXP 64
14484: PUSH
14485: LD_VAR 0 1
14489: ARRAY
14490: ARRAY
14491: PPUSH
14492: LD_INT 0
14494: PPUSH
14495: CALL_OW 424
// side_chosen_zone := Replace ( side_chosen_zone , side , side_chosen_zone [ side ] + 1 ) ;
14499: LD_ADDR_EXP 64
14503: PUSH
14504: LD_EXP 64
14508: PPUSH
14509: LD_VAR 0 1
14513: PPUSH
14514: LD_EXP 64
14518: PUSH
14519: LD_VAR 0 1
14523: ARRAY
14524: PUSH
14525: LD_INT 1
14527: PLUS
14528: PPUSH
14529: CALL_OW 1
14533: ST_TO_ADDR
// if side_chosen_zone [ side ] > team_transfer_zones [ Side_Teams [ side ] ] + 0 then
14534: LD_EXP 64
14538: PUSH
14539: LD_VAR 0 1
14543: ARRAY
14544: PUSH
14545: LD_EXP 62
14549: PUSH
14550: LD_EXP 5
14554: PUSH
14555: LD_VAR 0 1
14559: ARRAY
14560: ARRAY
14561: PUSH
14562: LD_INT 0
14564: PLUS
14565: GREATER
14566: IFFALSE 14591
// side_chosen_zone := Replace ( side_chosen_zone , side , 1 ) ;
14568: LD_ADDR_EXP 64
14572: PUSH
14573: LD_EXP 64
14577: PPUSH
14578: LD_VAR 0 1
14582: PPUSH
14583: LD_INT 1
14585: PPUSH
14586: CALL_OW 1
14590: ST_TO_ADDR
// if side = Your_Side then
14591: LD_VAR 0 1
14595: PUSH
14596: LD_OWVAR 2
14600: EQUAL
14601: IFFALSE 14680
// begin ToLua ( LUA_UpdateTransferZone( & team_transfer_zones [ Side_Teams [ side ] ] [ side_chosen_zone [ side ] ] & ) ) ;
14603: LD_STRING LUA_UpdateTransferZone(
14605: PUSH
14606: LD_EXP 62
14610: PUSH
14611: LD_EXP 5
14615: PUSH
14616: LD_VAR 0 1
14620: ARRAY
14621: ARRAY
14622: PUSH
14623: LD_EXP 64
14627: PUSH
14628: LD_VAR 0 1
14632: ARRAY
14633: ARRAY
14634: STR
14635: PUSH
14636: LD_STRING )
14638: STR
14639: PPUSH
14640: CALL_OW 559
// SetAreaMapShow ( team_transfer_zones [ Side_Teams [ side ] ] [ side_chosen_zone [ side ] ] , 1 ) ;
14644: LD_EXP 62
14648: PUSH
14649: LD_EXP 5
14653: PUSH
14654: LD_VAR 0 1
14658: ARRAY
14659: ARRAY
14660: PUSH
14661: LD_EXP 64
14665: PUSH
14666: LD_VAR 0 1
14670: ARRAY
14671: ARRAY
14672: PPUSH
14673: LD_INT 1
14675: PPUSH
14676: CALL_OW 424
// end ; end ; 205 :
14680: GO 15912
14682: LD_INT 205
14684: DOUBLE
14685: EQUAL
14686: IFTRUE 14690
14688: GO 15300
14690: POP
// begin side_units_outside := Replace ( side_units_outside , side , FilterUnitsInArea ( team_transfer_zones [ Side_Teams [ side ] ] [ side_chosen_zone [ side ] ] , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , 12 ] , [ f_weapon , 32 ] , [ f_weapon , 51 ] ] , [ f_or , [ f_and , [ f_control , 2 ] , [ f_linked ] ] , [ f_and , [ f_control , 1 ] , [ f_occupied ] ] , [ f_control , 3 ] ] ] ) ) ;
14691: LD_ADDR_EXP 67
14695: PUSH
14696: LD_EXP 67
14700: PPUSH
14701: LD_VAR 0 1
14705: PPUSH
14706: LD_EXP 62
14710: PUSH
14711: LD_EXP 5
14715: PUSH
14716: LD_VAR 0 1
14720: ARRAY
14721: ARRAY
14722: PUSH
14723: LD_EXP 64
14727: PUSH
14728: LD_VAR 0 1
14732: ARRAY
14733: ARRAY
14734: PPUSH
14735: LD_INT 22
14737: PUSH
14738: LD_VAR 0 1
14742: PUSH
14743: EMPTY
14744: LIST
14745: LIST
14746: PUSH
14747: LD_INT 21
14749: PUSH
14750: LD_INT 2
14752: PUSH
14753: EMPTY
14754: LIST
14755: LIST
14756: PUSH
14757: LD_INT 2
14759: PUSH
14760: LD_INT 34
14762: PUSH
14763: LD_INT 12
14765: PUSH
14766: EMPTY
14767: LIST
14768: LIST
14769: PUSH
14770: LD_INT 34
14772: PUSH
14773: LD_INT 32
14775: PUSH
14776: EMPTY
14777: LIST
14778: LIST
14779: PUSH
14780: LD_INT 34
14782: PUSH
14783: LD_INT 51
14785: PUSH
14786: EMPTY
14787: LIST
14788: LIST
14789: PUSH
14790: EMPTY
14791: LIST
14792: LIST
14793: LIST
14794: LIST
14795: PUSH
14796: LD_INT 2
14798: PUSH
14799: LD_INT 1
14801: PUSH
14802: LD_INT 33
14804: PUSH
14805: LD_INT 2
14807: PUSH
14808: EMPTY
14809: LIST
14810: LIST
14811: PUSH
14812: LD_INT 61
14814: PUSH
14815: EMPTY
14816: LIST
14817: PUSH
14818: EMPTY
14819: LIST
14820: LIST
14821: LIST
14822: PUSH
14823: LD_INT 1
14825: PUSH
14826: LD_INT 33
14828: PUSH
14829: LD_INT 1
14831: PUSH
14832: EMPTY
14833: LIST
14834: LIST
14835: PUSH
14836: LD_INT 59
14838: PUSH
14839: EMPTY
14840: LIST
14841: PUSH
14842: EMPTY
14843: LIST
14844: LIST
14845: LIST
14846: PUSH
14847: LD_INT 33
14849: PUSH
14850: LD_INT 3
14852: PUSH
14853: EMPTY
14854: LIST
14855: LIST
14856: PUSH
14857: EMPTY
14858: LIST
14859: LIST
14860: LIST
14861: LIST
14862: PUSH
14863: EMPTY
14864: LIST
14865: LIST
14866: LIST
14867: LIST
14868: PPUSH
14869: CALL_OW 70
14873: PPUSH
14874: CALL_OW 1
14878: ST_TO_ADDR
// for i in side_units_outside [ side ] do
14879: LD_ADDR_VAR 0 7
14883: PUSH
14884: LD_EXP 67
14888: PUSH
14889: LD_VAR 0 1
14893: ARRAY
14894: PUSH
14895: FOR_IN
14896: IFFALSE 14909
// RemoveUnit ( i ) ;
14898: LD_VAR 0 7
14902: PPUSH
14903: CALL_OW 64
14907: GO 14895
14909: POP
14910: POP
// side_resources_remaining := Replace ( side_resources_remaining , side , Replace ( side_resources_remaining [ side ] , 1 , side_resources_delivered [ side ] [ 1 ] - side_pending_order [ side ] [ 1 ] ) ) ;
14911: LD_ADDR_EXP 69
14915: PUSH
14916: LD_EXP 69
14920: PPUSH
14921: LD_VAR 0 1
14925: PPUSH
14926: LD_EXP 69
14930: PUSH
14931: LD_VAR 0 1
14935: ARRAY
14936: PPUSH
14937: LD_INT 1
14939: PPUSH
14940: LD_EXP 60
14944: PUSH
14945: LD_VAR 0 1
14949: ARRAY
14950: PUSH
14951: LD_INT 1
14953: ARRAY
14954: PUSH
14955: LD_EXP 59
14959: PUSH
14960: LD_VAR 0 1
14964: ARRAY
14965: PUSH
14966: LD_INT 1
14968: ARRAY
14969: MINUS
14970: PPUSH
14971: CALL_OW 1
14975: PPUSH
14976: CALL_OW 1
14980: ST_TO_ADDR
// side_resources_remaining := Replace ( side_resources_remaining , side , Replace ( side_resources_remaining [ side ] , 2 , side_resources_delivered [ side ] [ 2 ] - side_pending_order [ side ] [ 2 ] ) ) ;
14981: LD_ADDR_EXP 69
14985: PUSH
14986: LD_EXP 69
14990: PPUSH
14991: LD_VAR 0 1
14995: PPUSH
14996: LD_EXP 69
15000: PUSH
15001: LD_VAR 0 1
15005: ARRAY
15006: PPUSH
15007: LD_INT 2
15009: PPUSH
15010: LD_EXP 60
15014: PUSH
15015: LD_VAR 0 1
15019: ARRAY
15020: PUSH
15021: LD_INT 2
15023: ARRAY
15024: PUSH
15025: LD_EXP 59
15029: PUSH
15030: LD_VAR 0 1
15034: ARRAY
15035: PUSH
15036: LD_INT 2
15038: ARRAY
15039: MINUS
15040: PPUSH
15041: CALL_OW 1
15045: PPUSH
15046: CALL_OW 1
15050: ST_TO_ADDR
// side_resources_remaining := Replace ( side_resources_remaining , side , Replace ( side_resources_remaining [ side ] , 3 , side_resources_delivered [ side ] [ 3 ] - side_pending_order [ side ] [ 3 ] ) ) ;
15051: LD_ADDR_EXP 69
15055: PUSH
15056: LD_EXP 69
15060: PPUSH
15061: LD_VAR 0 1
15065: PPUSH
15066: LD_EXP 69
15070: PUSH
15071: LD_VAR 0 1
15075: ARRAY
15076: PPUSH
15077: LD_INT 3
15079: PPUSH
15080: LD_EXP 60
15084: PUSH
15085: LD_VAR 0 1
15089: ARRAY
15090: PUSH
15091: LD_INT 3
15093: ARRAY
15094: PUSH
15095: LD_EXP 59
15099: PUSH
15100: LD_VAR 0 1
15104: ARRAY
15105: PUSH
15106: LD_INT 3
15108: ARRAY
15109: MINUS
15110: PPUSH
15111: CALL_OW 1
15115: PPUSH
15116: CALL_OW 1
15120: ST_TO_ADDR
// if side_order_type [ side ] = 3 then
15121: LD_EXP 68
15125: PUSH
15126: LD_VAR 0 1
15130: ARRAY
15131: PUSH
15132: LD_INT 3
15134: EQUAL
15135: IFFALSE 15191
// side_resources_remaining := Replace ( side_resources_remaining , side , Replace ( side_resources_remaining [ side ] , 3 , side_resources_delivered [ side ] [ 3 ] ) ) ;
15137: LD_ADDR_EXP 69
15141: PUSH
15142: LD_EXP 69
15146: PPUSH
15147: LD_VAR 0 1
15151: PPUSH
15152: LD_EXP 69
15156: PUSH
15157: LD_VAR 0 1
15161: ARRAY
15162: PPUSH
15163: LD_INT 3
15165: PPUSH
15166: LD_EXP 60
15170: PUSH
15171: LD_VAR 0 1
15175: ARRAY
15176: PUSH
15177: LD_INT 3
15179: ARRAY
15180: PPUSH
15181: CALL_OW 1
15185: PPUSH
15186: CALL_OW 1
15190: ST_TO_ADDR
// side_transfer_clocks := Replace ( side_transfer_clocks , side , tick + 3 3$0 ) ;
15191: LD_ADDR_EXP 66
15195: PUSH
15196: LD_EXP 66
15200: PPUSH
15201: LD_VAR 0 1
15205: PPUSH
15206: LD_OWVAR 1
15210: PUSH
15211: LD_INT 6300
15213: PLUS
15214: PPUSH
15215: CALL_OW 1
15219: ST_TO_ADDR
// side_transfer_pending := Replace ( side_transfer_pending , side , 1 ) ;
15220: LD_ADDR_EXP 70
15224: PUSH
15225: LD_EXP 70
15229: PPUSH
15230: LD_VAR 0 1
15234: PPUSH
15235: LD_INT 1
15237: PPUSH
15238: CALL_OW 1
15242: ST_TO_ADDR
// if side = Your_Side then
15243: LD_VAR 0 1
15247: PUSH
15248: LD_OWVAR 2
15252: EQUAL
15253: IFFALSE 15298
// begin SetAreaMapShow ( team_transfer_zones [ Side_Teams [ side ] ] [ side_chosen_zone [ side ] ] , 0 ) ;
15255: LD_EXP 62
15259: PUSH
15260: LD_EXP 5
15264: PUSH
15265: LD_VAR 0 1
15269: ARRAY
15270: ARRAY
15271: PUSH
15272: LD_EXP 64
15276: PUSH
15277: LD_VAR 0 1
15281: ARRAY
15282: ARRAY
15283: PPUSH
15284: LD_INT 0
15286: PPUSH
15287: CALL_OW 424
// ToLua ( LUA_WaitingTransfer(); ) ;
15291: LD_STRING LUA_WaitingTransfer();
15293: PPUSH
15294: CALL_OW 559
// end ; end ; 300 :
15298: GO 15912
15300: LD_INT 300
15302: DOUBLE
15303: EQUAL
15304: IFTRUE 15308
15306: GO 15508
15308: POP
// begin side_pending_order := Replace ( side_pending_order , side , Replace ( side_pending_order [ side ] , 1 , 0 ) ) ;
15309: LD_ADDR_EXP 59
15313: PUSH
15314: LD_EXP 59
15318: PPUSH
15319: LD_VAR 0 1
15323: PPUSH
15324: LD_EXP 59
15328: PUSH
15329: LD_VAR 0 1
15333: ARRAY
15334: PPUSH
15335: LD_INT 1
15337: PPUSH
15338: LD_INT 0
15340: PPUSH
15341: CALL_OW 1
15345: PPUSH
15346: CALL_OW 1
15350: ST_TO_ADDR
// side_pending_order := Replace ( side_pending_order , side , Replace ( side_pending_order [ side ] , 2 , 0 ) ) ;
15351: LD_ADDR_EXP 59
15355: PUSH
15356: LD_EXP 59
15360: PPUSH
15361: LD_VAR 0 1
15365: PPUSH
15366: LD_EXP 59
15370: PUSH
15371: LD_VAR 0 1
15375: ARRAY
15376: PPUSH
15377: LD_INT 2
15379: PPUSH
15380: LD_INT 0
15382: PPUSH
15383: CALL_OW 1
15387: PPUSH
15388: CALL_OW 1
15392: ST_TO_ADDR
// side_pending_order := Replace ( side_pending_order , side , Replace ( side_pending_order [ side ] , 3 , 0 ) ) ;
15393: LD_ADDR_EXP 59
15397: PUSH
15398: LD_EXP 59
15402: PPUSH
15403: LD_VAR 0 1
15407: PPUSH
15408: LD_EXP 59
15412: PUSH
15413: LD_VAR 0 1
15417: ARRAY
15418: PPUSH
15419: LD_INT 3
15421: PPUSH
15422: LD_INT 0
15424: PPUSH
15425: CALL_OW 1
15429: PPUSH
15430: CALL_OW 1
15434: ST_TO_ADDR
// side_zone_locked := Replace ( side_zone_locked , side , 0 ) ;
15435: LD_ADDR_EXP 65
15439: PUSH
15440: LD_EXP 65
15444: PPUSH
15445: LD_VAR 0 1
15449: PPUSH
15450: LD_INT 0
15452: PPUSH
15453: CALL_OW 1
15457: ST_TO_ADDR
// if side = Your_Side then
15458: LD_VAR 0 1
15462: PUSH
15463: LD_OWVAR 2
15467: EQUAL
15468: IFFALSE 15506
// SetAreaMapShow ( team_transfer_zones [ Side_Teams [ side ] ] [ side_chosen_zone [ side ] ] , 0 ) ;
15470: LD_EXP 62
15474: PUSH
15475: LD_EXP 5
15479: PUSH
15480: LD_VAR 0 1
15484: ARRAY
15485: ARRAY
15486: PUSH
15487: LD_EXP 64
15491: PUSH
15492: LD_VAR 0 1
15496: ARRAY
15497: ARRAY
15498: PPUSH
15499: LD_INT 0
15501: PPUSH
15502: CALL_OW 424
// end ; 301 :
15506: GO 15912
15508: LD_INT 301
15510: DOUBLE
15511: EQUAL
15512: IFTRUE 15516
15514: GO 15911
15516: POP
// begin side_pending_order := Replace ( side_pending_order , side , Replace ( side_pending_order [ side ] , 1 , 0 ) ) ;
15517: LD_ADDR_EXP 59
15521: PUSH
15522: LD_EXP 59
15526: PPUSH
15527: LD_VAR 0 1
15531: PPUSH
15532: LD_EXP 59
15536: PUSH
15537: LD_VAR 0 1
15541: ARRAY
15542: PPUSH
15543: LD_INT 1
15545: PPUSH
15546: LD_INT 0
15548: PPUSH
15549: CALL_OW 1
15553: PPUSH
15554: CALL_OW 1
15558: ST_TO_ADDR
// side_pending_order := Replace ( side_pending_order , side , Replace ( side_pending_order [ side ] , 2 , 0 ) ) ;
15559: LD_ADDR_EXP 59
15563: PUSH
15564: LD_EXP 59
15568: PPUSH
15569: LD_VAR 0 1
15573: PPUSH
15574: LD_EXP 59
15578: PUSH
15579: LD_VAR 0 1
15583: ARRAY
15584: PPUSH
15585: LD_INT 2
15587: PPUSH
15588: LD_INT 0
15590: PPUSH
15591: CALL_OW 1
15595: PPUSH
15596: CALL_OW 1
15600: ST_TO_ADDR
// side_pending_order := Replace ( side_pending_order , side , Replace ( side_pending_order [ side ] , 3 , 0 ) ) ;
15601: LD_ADDR_EXP 59
15605: PUSH
15606: LD_EXP 59
15610: PPUSH
15611: LD_VAR 0 1
15615: PPUSH
15616: LD_EXP 59
15620: PUSH
15621: LD_VAR 0 1
15625: ARRAY
15626: PPUSH
15627: LD_INT 3
15629: PPUSH
15630: LD_INT 0
15632: PPUSH
15633: CALL_OW 1
15637: PPUSH
15638: CALL_OW 1
15642: ST_TO_ADDR
// side_zone_locked := Replace ( side_zone_locked , side , 0 ) ;
15643: LD_ADDR_EXP 65
15647: PUSH
15648: LD_EXP 65
15652: PPUSH
15653: LD_VAR 0 1
15657: PPUSH
15658: LD_INT 0
15660: PPUSH
15661: CALL_OW 1
15665: ST_TO_ADDR
// side_transfer_pending := Replace ( side_transfer_pending , side , 0 ) ;
15666: LD_ADDR_EXP 70
15670: PUSH
15671: LD_EXP 70
15675: PPUSH
15676: LD_VAR 0 1
15680: PPUSH
15681: LD_INT 0
15683: PPUSH
15684: CALL_OW 1
15688: ST_TO_ADDR
// side_transfer_clocks := Replace ( side_transfer_clocks , side , 0 0$0 ) ;
15689: LD_ADDR_EXP 66
15693: PUSH
15694: LD_EXP 66
15698: PPUSH
15699: LD_VAR 0 1
15703: PPUSH
15704: LD_INT 0
15706: PPUSH
15707: CALL_OW 1
15711: ST_TO_ADDR
// side_resources_remaining := Replace ( side_resources_remaining , side , Replace ( side_resources_remaining [ side ] , 1 , 0 ) ) ;
15712: LD_ADDR_EXP 69
15716: PUSH
15717: LD_EXP 69
15721: PPUSH
15722: LD_VAR 0 1
15726: PPUSH
15727: LD_EXP 69
15731: PUSH
15732: LD_VAR 0 1
15736: ARRAY
15737: PPUSH
15738: LD_INT 1
15740: PPUSH
15741: LD_INT 0
15743: PPUSH
15744: CALL_OW 1
15748: PPUSH
15749: CALL_OW 1
15753: ST_TO_ADDR
// side_resources_remaining := Replace ( side_resources_remaining , side , Replace ( side_resources_remaining [ side ] , 2 , 0 ) ) ;
15754: LD_ADDR_EXP 69
15758: PUSH
15759: LD_EXP 69
15763: PPUSH
15764: LD_VAR 0 1
15768: PPUSH
15769: LD_EXP 69
15773: PUSH
15774: LD_VAR 0 1
15778: ARRAY
15779: PPUSH
15780: LD_INT 2
15782: PPUSH
15783: LD_INT 0
15785: PPUSH
15786: CALL_OW 1
15790: PPUSH
15791: CALL_OW 1
15795: ST_TO_ADDR
// side_resources_remaining := Replace ( side_resources_remaining , side , Replace ( side_resources_remaining [ side ] , 3 , 0 ) ) ;
15796: LD_ADDR_EXP 69
15800: PUSH
15801: LD_EXP 69
15805: PPUSH
15806: LD_VAR 0 1
15810: PPUSH
15811: LD_EXP 69
15815: PUSH
15816: LD_VAR 0 1
15820: ARRAY
15821: PPUSH
15822: LD_INT 3
15824: PPUSH
15825: LD_INT 0
15827: PPUSH
15828: CALL_OW 1
15832: PPUSH
15833: CALL_OW 1
15837: ST_TO_ADDR
// side_units_outside := Replace ( side_units_outside , side , 0 ) ;
15838: LD_ADDR_EXP 67
15842: PUSH
15843: LD_EXP 67
15847: PPUSH
15848: LD_VAR 0 1
15852: PPUSH
15853: LD_INT 0
15855: PPUSH
15856: CALL_OW 1
15860: ST_TO_ADDR
// if side = Your_Side then
15861: LD_VAR 0 1
15865: PUSH
15866: LD_OWVAR 2
15870: EQUAL
15871: IFFALSE 15909
// SetAreaMapShow ( team_transfer_zones [ Side_Teams [ side ] ] [ side_chosen_zone [ side ] ] , 0 ) ;
15873: LD_EXP 62
15877: PUSH
15878: LD_EXP 5
15882: PUSH
15883: LD_VAR 0 1
15887: ARRAY
15888: ARRAY
15889: PUSH
15890: LD_EXP 64
15894: PUSH
15895: LD_VAR 0 1
15899: ARRAY
15900: ARRAY
15901: PPUSH
15902: LD_INT 0
15904: PPUSH
15905: CALL_OW 424
// end ; end ;
15909: GO 15912
15911: POP
// end ; end_of_file
15912: PPOPN 7
15914: END
// export function CYCLIC_CrateSpawn ; var i , j , k , amount ; begin
15915: LD_INT 0
15917: PPUSH
15918: PPUSH
15919: PPUSH
15920: PPUSH
15921: PPUSH
// for i = 1 to position_drop_zones do
15922: LD_ADDR_VAR 0 2
15926: PUSH
15927: DOUBLE
15928: LD_INT 1
15930: DEC
15931: ST_TO_ADDR
15932: LD_EXP 36
15936: PUSH
15937: FOR_TO
15938: IFFALSE 16088
// begin amount := Rand ( position_drop_zones [ i ] [ 1 ] , 5 ) ;
15940: LD_ADDR_VAR 0 5
15944: PUSH
15945: LD_EXP 36
15949: PUSH
15950: LD_VAR 0 2
15954: ARRAY
15955: PUSH
15956: LD_INT 1
15958: ARRAY
15959: PPUSH
15960: LD_INT 5
15962: PPUSH
15963: CALL_OW 12
15967: ST_TO_ADDR
// for j = 3 to position_drop_zones [ i ] do
15968: LD_ADDR_VAR 0 3
15972: PUSH
15973: DOUBLE
15974: LD_INT 3
15976: DEC
15977: ST_TO_ADDR
15978: LD_EXP 36
15982: PUSH
15983: LD_VAR 0 2
15987: ARRAY
15988: PUSH
15989: FOR_TO
15990: IFFALSE 16084
// if Prob ( position_drop_zones [ i ] [ 2 ] ) then
15992: LD_EXP 36
15996: PUSH
15997: LD_VAR 0 2
16001: ARRAY
16002: PUSH
16003: LD_INT 2
16005: ARRAY
16006: PPUSH
16007: CALL_OW 13
16011: IFFALSE 16082
// for k = 1 to position_drop_zones [ i ] [ j ] do
16013: LD_ADDR_VAR 0 4
16017: PUSH
16018: DOUBLE
16019: LD_INT 1
16021: DEC
16022: ST_TO_ADDR
16023: LD_EXP 36
16027: PUSH
16028: LD_VAR 0 2
16032: ARRAY
16033: PUSH
16034: LD_VAR 0 3
16038: ARRAY
16039: PUSH
16040: FOR_TO
16041: IFFALSE 16080
// CreateCratesArea ( amount , position_drop_zones [ i ] [ j ] [ k ] , true ) ;
16043: LD_VAR 0 5
16047: PPUSH
16048: LD_EXP 36
16052: PUSH
16053: LD_VAR 0 2
16057: ARRAY
16058: PUSH
16059: LD_VAR 0 3
16063: ARRAY
16064: PUSH
16065: LD_VAR 0 4
16069: ARRAY
16070: PPUSH
16071: LD_INT 1
16073: PPUSH
16074: CALL_OW 55
16078: GO 16040
16080: POP
16081: POP
16082: GO 15989
16084: POP
16085: POP
// end ;
16086: GO 15937
16088: POP
16089: POP
// end ;
16090: LD_VAR 0 1
16094: RET
// export function CYCLIC_HumanSpawn ; var i , j , entity , areas , outside , side , arguments , human ; begin
16095: LD_INT 0
16097: PPUSH
16098: PPUSH
16099: PPUSH
16100: PPUSH
16101: PPUSH
16102: PPUSH
16103: PPUSH
16104: PPUSH
16105: PPUSH
// side_soldier_count := [ [ 1 , 0 ] , [ 2 , 0 ] , [ 3 , 0 ] , [ 4 , 0 ] , [ 5 , 0 ] , [ 6 , 0 ] , [ 7 , 0 ] , [ 8 , 0 ] ] ;
16106: LD_ADDR_EXP 48
16110: PUSH
16111: LD_INT 1
16113: PUSH
16114: LD_INT 0
16116: PUSH
16117: EMPTY
16118: LIST
16119: LIST
16120: PUSH
16121: LD_INT 2
16123: PUSH
16124: LD_INT 0
16126: PUSH
16127: EMPTY
16128: LIST
16129: LIST
16130: PUSH
16131: LD_INT 3
16133: PUSH
16134: LD_INT 0
16136: PUSH
16137: EMPTY
16138: LIST
16139: LIST
16140: PUSH
16141: LD_INT 4
16143: PUSH
16144: LD_INT 0
16146: PUSH
16147: EMPTY
16148: LIST
16149: LIST
16150: PUSH
16151: LD_INT 5
16153: PUSH
16154: LD_INT 0
16156: PUSH
16157: EMPTY
16158: LIST
16159: LIST
16160: PUSH
16161: LD_INT 6
16163: PUSH
16164: LD_INT 0
16166: PUSH
16167: EMPTY
16168: LIST
16169: LIST
16170: PUSH
16171: LD_INT 7
16173: PUSH
16174: LD_INT 0
16176: PUSH
16177: EMPTY
16178: LIST
16179: LIST
16180: PUSH
16181: LD_INT 8
16183: PUSH
16184: LD_INT 0
16186: PUSH
16187: EMPTY
16188: LIST
16189: LIST
16190: PUSH
16191: EMPTY
16192: LIST
16193: LIST
16194: LIST
16195: LIST
16196: LIST
16197: LIST
16198: LIST
16199: LIST
16200: ST_TO_ADDR
// arguments := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
16201: LD_ADDR_VAR 0 8
16205: PUSH
16206: LD_INT 0
16208: PUSH
16209: LD_INT 0
16211: PUSH
16212: LD_INT 0
16214: PUSH
16215: LD_INT 0
16217: PUSH
16218: LD_INT 0
16220: PUSH
16221: LD_INT 0
16223: PUSH
16224: LD_INT 0
16226: PUSH
16227: LD_INT 0
16229: PUSH
16230: EMPTY
16231: LIST
16232: LIST
16233: LIST
16234: LIST
16235: LIST
16236: LIST
16237: LIST
16238: LIST
16239: ST_TO_ADDR
// new_character_EON := [ 0 , Rand ( 1 , 4 ) , [ Rand ( 8 , 12 ) , Rand ( 8 , 12 ) ] , [ 0 , 0 , 0 , 0 ] , [ Rand ( 0 , experience ) , Rand ( 0 , experience ) , Rand ( 0 , experience ) , Rand ( 0 , experience ) ] , 0 ] ;
16240: LD_ADDR_EXP 44
16244: PUSH
16245: LD_INT 0
16247: PUSH
16248: LD_INT 1
16250: PPUSH
16251: LD_INT 4
16253: PPUSH
16254: CALL_OW 12
16258: PUSH
16259: LD_INT 8
16261: PPUSH
16262: LD_INT 12
16264: PPUSH
16265: CALL_OW 12
16269: PUSH
16270: LD_INT 8
16272: PPUSH
16273: LD_INT 12
16275: PPUSH
16276: CALL_OW 12
16280: PUSH
16281: EMPTY
16282: LIST
16283: LIST
16284: PUSH
16285: LD_INT 0
16287: PUSH
16288: LD_INT 0
16290: PUSH
16291: LD_INT 0
16293: PUSH
16294: LD_INT 0
16296: PUSH
16297: EMPTY
16298: LIST
16299: LIST
16300: LIST
16301: LIST
16302: PUSH
16303: LD_INT 0
16305: PPUSH
16306: LD_EXP 20
16310: PPUSH
16311: CALL_OW 12
16315: PUSH
16316: LD_INT 0
16318: PPUSH
16319: LD_EXP 20
16323: PPUSH
16324: CALL_OW 12
16328: PUSH
16329: LD_INT 0
16331: PPUSH
16332: LD_EXP 20
16336: PPUSH
16337: CALL_OW 12
16341: PUSH
16342: LD_INT 0
16344: PPUSH
16345: LD_EXP 20
16349: PPUSH
16350: CALL_OW 12
16354: PUSH
16355: EMPTY
16356: LIST
16357: LIST
16358: LIST
16359: LIST
16360: PUSH
16361: LD_INT 0
16363: PUSH
16364: EMPTY
16365: LIST
16366: LIST
16367: LIST
16368: LIST
16369: LIST
16370: LIST
16371: ST_TO_ADDR
// for i = 8 downto 1 do
16372: LD_ADDR_VAR 0 2
16376: PUSH
16377: DOUBLE
16378: LD_INT 8
16380: INC
16381: ST_TO_ADDR
16382: LD_INT 1
16384: PUSH
16385: FOR_DOWNTO
16386: IFFALSE 16479
// begin side_soldier_count := Replace ( side_soldier_count , i , Replace ( side_soldier_count [ i ] , 2 , side_soldiers [ i ] + 0 ) ) ;
16388: LD_ADDR_EXP 48
16392: PUSH
16393: LD_EXP 48
16397: PPUSH
16398: LD_VAR 0 2
16402: PPUSH
16403: LD_EXP 48
16407: PUSH
16408: LD_VAR 0 2
16412: ARRAY
16413: PPUSH
16414: LD_INT 2
16416: PPUSH
16417: LD_EXP 46
16421: PUSH
16422: LD_VAR 0 2
16426: ARRAY
16427: PUSH
16428: LD_INT 0
16430: PLUS
16431: PPUSH
16432: CALL_OW 1
16436: PPUSH
16437: CALL_OW 1
16441: ST_TO_ADDR
// arguments := Replace ( arguments , i , side_soldiers [ i ] + 0 ) ;
16442: LD_ADDR_VAR 0 8
16446: PUSH
16447: LD_VAR 0 8
16451: PPUSH
16452: LD_VAR 0 2
16456: PPUSH
16457: LD_EXP 46
16461: PUSH
16462: LD_VAR 0 2
16466: ARRAY
16467: PUSH
16468: LD_INT 0
16470: PLUS
16471: PPUSH
16472: CALL_OW 1
16476: ST_TO_ADDR
// end ;
16477: GO 16385
16479: POP
16480: POP
// for i = 8 downto 1 do
16481: LD_ADDR_VAR 0 2
16485: PUSH
16486: DOUBLE
16487: LD_INT 8
16489: INC
16490: ST_TO_ADDR
16491: LD_INT 1
16493: PUSH
16494: FOR_DOWNTO
16495: IFFALSE 16552
// if not side_isalive [ i ] then
16497: LD_EXP 54
16501: PUSH
16502: LD_VAR 0 2
16506: ARRAY
16507: NOT
16508: IFFALSE 16550
// begin side_soldier_count := Delete ( side_soldier_count , i ) ;
16510: LD_ADDR_EXP 48
16514: PUSH
16515: LD_EXP 48
16519: PPUSH
16520: LD_VAR 0 2
16524: PPUSH
16525: CALL_OW 3
16529: ST_TO_ADDR
// arguments := Delete ( arguments , i ) ;
16530: LD_ADDR_VAR 0 8
16534: PUSH
16535: LD_VAR 0 8
16539: PPUSH
16540: LD_VAR 0 2
16544: PPUSH
16545: CALL_OW 3
16549: ST_TO_ADDR
// end ;
16550: GO 16494
16552: POP
16553: POP
// side_soldier_count := SortListByListAsc ( side_soldier_count , arguments ) ;
16554: LD_ADDR_EXP 48
16558: PUSH
16559: LD_EXP 48
16563: PPUSH
16564: LD_VAR 0 8
16568: PPUSH
16569: CALL_OW 76
16573: ST_TO_ADDR
// for i = side_soldier_count + 0 downto 1 do
16574: LD_ADDR_VAR 0 2
16578: PUSH
16579: DOUBLE
16580: LD_EXP 48
16584: PUSH
16585: LD_INT 0
16587: PLUS
16588: INC
16589: ST_TO_ADDR
16590: LD_INT 1
16592: PUSH
16593: FOR_DOWNTO
16594: IFFALSE 16648
// begin if side_soldier_count [ i ] [ 2 ] > side_soldier_count [ 1 ] [ 2 ] then
16596: LD_EXP 48
16600: PUSH
16601: LD_VAR 0 2
16605: ARRAY
16606: PUSH
16607: LD_INT 2
16609: ARRAY
16610: PUSH
16611: LD_EXP 48
16615: PUSH
16616: LD_INT 1
16618: ARRAY
16619: PUSH
16620: LD_INT 2
16622: ARRAY
16623: GREATER
16624: IFFALSE 16646
// side_soldier_count := Delete ( side_soldier_count , i ) ;
16626: LD_ADDR_EXP 48
16630: PUSH
16631: LD_EXP 48
16635: PPUSH
16636: LD_VAR 0 2
16640: PPUSH
16641: CALL_OW 3
16645: ST_TO_ADDR
// end ;
16646: GO 16593
16648: POP
16649: POP
// side := side_soldier_count [ Rand ( 1 , side_soldier_count ) ] [ 1 ] ;
16650: LD_ADDR_VAR 0 7
16654: PUSH
16655: LD_EXP 48
16659: PUSH
16660: LD_INT 1
16662: PPUSH
16663: LD_EXP 48
16667: PPUSH
16668: CALL_OW 12
16672: ARRAY
16673: PUSH
16674: LD_INT 1
16676: ARRAY
16677: ST_TO_ADDR
// if side_soldiers [ side ] > 0 then
16678: LD_EXP 46
16682: PUSH
16683: LD_VAR 0 7
16687: ARRAY
16688: PUSH
16689: LD_INT 0
16691: GREATER
16692: IFFALSE 16732
// entity := side_soldiers [ side ] [ Rand ( 1 , side_soldiers [ side ] ) ] else
16694: LD_ADDR_VAR 0 4
16698: PUSH
16699: LD_EXP 46
16703: PUSH
16704: LD_VAR 0 7
16708: ARRAY
16709: PUSH
16710: LD_INT 1
16712: PPUSH
16713: LD_EXP 46
16717: PUSH
16718: LD_VAR 0 7
16722: ARRAY
16723: PPUSH
16724: CALL_OW 12
16728: ARRAY
16729: ST_TO_ADDR
16730: GO 16821
// begin entity := FilterAllUnits ( [ [ f_side , side ] , [ f_type , 3 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) ;
16732: LD_ADDR_VAR 0 4
16736: PUSH
16737: LD_INT 22
16739: PUSH
16740: LD_VAR 0 7
16744: PUSH
16745: EMPTY
16746: LIST
16747: LIST
16748: PUSH
16749: LD_INT 21
16751: PUSH
16752: LD_INT 3
16754: PUSH
16755: EMPTY
16756: LIST
16757: LIST
16758: PUSH
16759: LD_INT 2
16761: PUSH
16762: LD_INT 30
16764: PUSH
16765: LD_INT 0
16767: PUSH
16768: EMPTY
16769: LIST
16770: LIST
16771: PUSH
16772: LD_INT 30
16774: PUSH
16775: LD_INT 1
16777: PUSH
16778: EMPTY
16779: LIST
16780: LIST
16781: PUSH
16782: EMPTY
16783: LIST
16784: LIST
16785: LIST
16786: PUSH
16787: EMPTY
16788: LIST
16789: LIST
16790: LIST
16791: PPUSH
16792: CALL_OW 69
16796: ST_TO_ADDR
// entity := entity [ Rand ( 1 , entity ) ] ;
16797: LD_ADDR_VAR 0 4
16801: PUSH
16802: LD_VAR 0 4
16806: PUSH
16807: LD_INT 1
16809: PPUSH
16810: LD_VAR 0 4
16814: PPUSH
16815: CALL_OW 12
16819: ARRAY
16820: ST_TO_ADDR
// end ; outside := 0 ;
16821: LD_ADDR_VAR 0 6
16825: PUSH
16826: LD_INT 0
16828: ST_TO_ADDR
// areas := 0 ;
16829: LD_ADDR_VAR 0 5
16833: PUSH
16834: LD_INT 0
16836: ST_TO_ADDR
// for i = 1 to position_drop_zones do
16837: LD_ADDR_VAR 0 2
16841: PUSH
16842: DOUBLE
16843: LD_INT 1
16845: DEC
16846: ST_TO_ADDR
16847: LD_EXP 36
16851: PUSH
16852: FOR_TO
16853: IFFALSE 17145
// for j = 1 to position_drop_zones [ i ] [ 3 ] do
16855: LD_ADDR_VAR 0 3
16859: PUSH
16860: DOUBLE
16861: LD_INT 1
16863: DEC
16864: ST_TO_ADDR
16865: LD_EXP 36
16869: PUSH
16870: LD_VAR 0 2
16874: ARRAY
16875: PUSH
16876: LD_INT 3
16878: ARRAY
16879: PUSH
16880: FOR_TO
16881: IFFALSE 17141
// begin areas := areas + 1 ;
16883: LD_ADDR_VAR 0 5
16887: PUSH
16888: LD_VAR 0 5
16892: PUSH
16893: LD_INT 1
16895: PLUS
16896: ST_TO_ADDR
// if IsInArea ( entity , position_drop_zones [ i ] [ 3 ] [ j ] ) then
16897: LD_VAR 0 4
16901: PPUSH
16902: LD_EXP 36
16906: PUSH
16907: LD_VAR 0 2
16911: ARRAY
16912: PUSH
16913: LD_INT 3
16915: ARRAY
16916: PUSH
16917: LD_VAR 0 3
16921: ARRAY
16922: PPUSH
16923: CALL_OW 308
16927: IFFALSE 17125
// begin human := PrepareCharacters ( side , [ Rand ( 0 , 5 ) , Rand ( 0 , 5 ) , Rand ( 0 , 5 ) , Rand ( 0 , 5 ) , Rand ( 0 , 5 ) , Rand ( 0 , 5 ) , Rand ( 0 , 5 ) , Rand ( 0 , 5 ) ] , new_character_EON ) ;
16929: LD_ADDR_VAR 0 9
16933: PUSH
16934: LD_VAR 0 7
16938: PPUSH
16939: LD_INT 0
16941: PPUSH
16942: LD_INT 5
16944: PPUSH
16945: CALL_OW 12
16949: PUSH
16950: LD_INT 0
16952: PPUSH
16953: LD_INT 5
16955: PPUSH
16956: CALL_OW 12
16960: PUSH
16961: LD_INT 0
16963: PPUSH
16964: LD_INT 5
16966: PPUSH
16967: CALL_OW 12
16971: PUSH
16972: LD_INT 0
16974: PPUSH
16975: LD_INT 5
16977: PPUSH
16978: CALL_OW 12
16982: PUSH
16983: LD_INT 0
16985: PPUSH
16986: LD_INT 5
16988: PPUSH
16989: CALL_OW 12
16993: PUSH
16994: LD_INT 0
16996: PPUSH
16997: LD_INT 5
16999: PPUSH
17000: CALL_OW 12
17004: PUSH
17005: LD_INT 0
17007: PPUSH
17008: LD_INT 5
17010: PPUSH
17011: CALL_OW 12
17015: PUSH
17016: LD_INT 0
17018: PPUSH
17019: LD_INT 5
17021: PPUSH
17022: CALL_OW 12
17026: PUSH
17027: EMPTY
17028: LIST
17029: LIST
17030: LIST
17031: LIST
17032: LIST
17033: LIST
17034: LIST
17035: LIST
17036: PPUSH
17037: LD_EXP 44
17041: PPUSH
17042: CALL 6422 0 3
17046: ST_TO_ADDR
// PlaceUnitArea ( human , position_drop_zones [ i ] [ 3 ] [ j ] , true ) ;
17047: LD_VAR 0 9
17051: PPUSH
17052: LD_EXP 36
17056: PUSH
17057: LD_VAR 0 2
17061: ARRAY
17062: PUSH
17063: LD_INT 3
17065: ARRAY
17066: PUSH
17067: LD_VAR 0 3
17071: ARRAY
17072: PPUSH
17073: LD_INT 1
17075: PPUSH
17076: CALL_OW 49
// side_soldiers := Replace ( side_soldiers , side , side_soldiers [ side ] ^ human ) ;
17080: LD_ADDR_EXP 46
17084: PUSH
17085: LD_EXP 46
17089: PPUSH
17090: LD_VAR 0 7
17094: PPUSH
17095: LD_EXP 46
17099: PUSH
17100: LD_VAR 0 7
17104: ARRAY
17105: PUSH
17106: LD_VAR 0 9
17110: ADD
17111: PPUSH
17112: CALL_OW 1
17116: ST_TO_ADDR
// exit ;
17117: POP
17118: POP
17119: POP
17120: POP
17121: GO 17393
// end else
17123: GO 17139
// begin outside := outside + 1 ;
17125: LD_ADDR_VAR 0 6
17129: PUSH
17130: LD_VAR 0 6
17134: PUSH
17135: LD_INT 1
17137: PLUS
17138: ST_TO_ADDR
// end ; end ;
17139: GO 16880
17141: POP
17142: POP
17143: GO 16852
17145: POP
17146: POP
// if areas = outside then
17147: LD_VAR 0 5
17151: PUSH
17152: LD_VAR 0 6
17156: EQUAL
17157: IFFALSE 17393
// begin i := Rand ( 1 , position_drop_zones ) ;
17159: LD_ADDR_VAR 0 2
17163: PUSH
17164: LD_INT 1
17166: PPUSH
17167: LD_EXP 36
17171: PPUSH
17172: CALL_OW 12
17176: ST_TO_ADDR
// j := Rand ( 1 , position_drop_zones [ i ] [ 3 ] ) ;
17177: LD_ADDR_VAR 0 3
17181: PUSH
17182: LD_INT 1
17184: PPUSH
17185: LD_EXP 36
17189: PUSH
17190: LD_VAR 0 2
17194: ARRAY
17195: PUSH
17196: LD_INT 3
17198: ARRAY
17199: PPUSH
17200: CALL_OW 12
17204: ST_TO_ADDR
// human := PrepareCharacters ( side , [ Rand ( 0 , 5 ) , Rand ( 0 , 5 ) , Rand ( 0 , 5 ) , Rand ( 0 , 5 ) , Rand ( 0 , 5 ) , Rand ( 0 , 5 ) , Rand ( 0 , 5 ) , Rand ( 0 , 5 ) ] , new_character_EON ) ;
17205: LD_ADDR_VAR 0 9
17209: PUSH
17210: LD_VAR 0 7
17214: PPUSH
17215: LD_INT 0
17217: PPUSH
17218: LD_INT 5
17220: PPUSH
17221: CALL_OW 12
17225: PUSH
17226: LD_INT 0
17228: PPUSH
17229: LD_INT 5
17231: PPUSH
17232: CALL_OW 12
17236: PUSH
17237: LD_INT 0
17239: PPUSH
17240: LD_INT 5
17242: PPUSH
17243: CALL_OW 12
17247: PUSH
17248: LD_INT 0
17250: PPUSH
17251: LD_INT 5
17253: PPUSH
17254: CALL_OW 12
17258: PUSH
17259: LD_INT 0
17261: PPUSH
17262: LD_INT 5
17264: PPUSH
17265: CALL_OW 12
17269: PUSH
17270: LD_INT 0
17272: PPUSH
17273: LD_INT 5
17275: PPUSH
17276: CALL_OW 12
17280: PUSH
17281: LD_INT 0
17283: PPUSH
17284: LD_INT 5
17286: PPUSH
17287: CALL_OW 12
17291: PUSH
17292: LD_INT 0
17294: PPUSH
17295: LD_INT 5
17297: PPUSH
17298: CALL_OW 12
17302: PUSH
17303: EMPTY
17304: LIST
17305: LIST
17306: LIST
17307: LIST
17308: LIST
17309: LIST
17310: LIST
17311: LIST
17312: PPUSH
17313: LD_EXP 44
17317: PPUSH
17318: CALL 6422 0 3
17322: ST_TO_ADDR
// PlaceUnitArea ( human , position_drop_zones [ i ] [ 3 ] [ j ] , true ) ;
17323: LD_VAR 0 9
17327: PPUSH
17328: LD_EXP 36
17332: PUSH
17333: LD_VAR 0 2
17337: ARRAY
17338: PUSH
17339: LD_INT 3
17341: ARRAY
17342: PUSH
17343: LD_VAR 0 3
17347: ARRAY
17348: PPUSH
17349: LD_INT 1
17351: PPUSH
17352: CALL_OW 49
// side_soldiers := Replace ( side_soldiers , side , side_soldiers [ side ] ^ human ) ;
17356: LD_ADDR_EXP 46
17360: PUSH
17361: LD_EXP 46
17365: PPUSH
17366: LD_VAR 0 7
17370: PPUSH
17371: LD_EXP 46
17375: PUSH
17376: LD_VAR 0 7
17380: ARRAY
17381: PUSH
17382: LD_VAR 0 9
17386: ADD
17387: PPUSH
17388: CALL_OW 1
17392: ST_TO_ADDR
// end ; end ;
17393: LD_VAR 0 1
17397: RET
// export function CYCLIC_Fluctuation ; var change ; begin
17398: LD_INT 0
17400: PPUSH
17401: PPUSH
// current_spawn_rate := Rand ( - 5 , 5 ) ;
17402: LD_ADDR_EXP 41
17406: PUSH
17407: LD_INT 5
17409: NEG
17410: PPUSH
17411: LD_INT 5
17413: PPUSH
17414: CALL_OW 12
17418: ST_TO_ADDR
// fluctuation_modifier_crates := fluctuation_base_crates * current_spawn_rate ;
17419: LD_ADDR_EXP 39
17423: PUSH
17424: LD_EXP 37
17428: PUSH
17429: LD_EXP 41
17433: MUL
17434: ST_TO_ADDR
// fluctuation_modifier_humans := fluctuation_base_humans * current_spawn_rate ;
17435: LD_ADDR_EXP 40
17439: PUSH
17440: LD_EXP 38
17444: PUSH
17445: LD_EXP 41
17449: MUL
17450: ST_TO_ADDR
// change := current_spawn_rate - past_spawn_rate ;
17451: LD_ADDR_VAR 0 2
17455: PUSH
17456: LD_EXP 41
17460: PUSH
17461: LD_EXP 42
17465: MINUS
17466: ST_TO_ADDR
// case change of - 10 .. - 6 :
17467: LD_VAR 0 2
17471: PUSH
17472: LD_INT 10
17474: NEG
17475: DOUBLE
17476: GREATEREQUAL
17477: IFFALSE 17486
17479: LD_INT 6
17481: NEG
17482: DOUBLE
17483: LESSEQUAL
17484: IFTRUE 17488
17486: GO 17491
17488: POP
// begin end ; - 5 .. - 1 :
17489: GO 17556
17491: LD_INT 5
17493: NEG
17494: DOUBLE
17495: GREATEREQUAL
17496: IFFALSE 17505
17498: LD_INT 1
17500: NEG
17501: DOUBLE
17502: LESSEQUAL
17503: IFTRUE 17507
17505: GO 17510
17507: POP
// begin end ; 0 :
17508: GO 17556
17510: LD_INT 0
17512: DOUBLE
17513: EQUAL
17514: IFTRUE 17518
17516: GO 17521
17518: POP
// begin end ; 1 .. 5 :
17519: GO 17556
17521: LD_INT 1
17523: DOUBLE
17524: GREATEREQUAL
17525: IFFALSE 17533
17527: LD_INT 5
17529: DOUBLE
17530: LESSEQUAL
17531: IFTRUE 17535
17533: GO 17538
17535: POP
// begin end ; 6 .. 10 :
17536: GO 17556
17538: LD_INT 6
17540: DOUBLE
17541: GREATEREQUAL
17542: IFFALSE 17550
17544: LD_INT 10
17546: DOUBLE
17547: LESSEQUAL
17548: IFTRUE 17552
17550: GO 17555
17552: POP
// begin end ; end ;
17553: GO 17556
17555: POP
// past_spawn_rate := current_spawn_rate ;
17556: LD_ADDR_EXP 42
17560: PUSH
17561: LD_EXP 41
17565: ST_TO_ADDR
// end ;
17566: LD_VAR 0 1
17570: RET
// export function CYCLIC_CheckTransportsInZones ; var i , cargo_bays ; begin
17571: LD_INT 0
17573: PPUSH
17574: PPUSH
17575: PPUSH
// for i = 1 to 8 do
17576: LD_ADDR_VAR 0 2
17580: PUSH
17581: DOUBLE
17582: LD_INT 1
17584: DEC
17585: ST_TO_ADDR
17586: LD_INT 8
17588: PUSH
17589: FOR_TO
17590: IFFALSE 18399
// begin side_resources_delivered := Replace ( side_resources_delivered , i , [ 0 , 0 , 0 ] ) ;
17592: LD_ADDR_EXP 60
17596: PUSH
17597: LD_EXP 60
17601: PPUSH
17602: LD_VAR 0 2
17606: PPUSH
17607: LD_INT 0
17609: PUSH
17610: LD_INT 0
17612: PUSH
17613: LD_INT 0
17615: PUSH
17616: EMPTY
17617: LIST
17618: LIST
17619: LIST
17620: PPUSH
17621: CALL_OW 1
17625: ST_TO_ADDR
// if not side_zone_locked [ i ] = 0 then
17626: LD_EXP 65
17630: PUSH
17631: LD_VAR 0 2
17635: ARRAY
17636: PUSH
17637: LD_INT 0
17639: EQUAL
17640: NOT
17641: IFFALSE 18397
// begin cargo_bays := FilterUnitsInArea ( team_transfer_zones [ Side_Teams [ i ] ] [ side_chosen_zone [ i ] ] , [ [ f_side , i ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , 12 ] , [ f_weapon , 32 ] , [ f_weapon , 51 ] ] , [ f_or , [ f_and , [ f_control , 2 ] , [ f_linked ] ] , [ f_and , [ f_control , 1 ] , [ f_occupied ] ] , [ f_control , 3 ] ] ] ) ;
17643: LD_ADDR_VAR 0 3
17647: PUSH
17648: LD_EXP 62
17652: PUSH
17653: LD_EXP 5
17657: PUSH
17658: LD_VAR 0 2
17662: ARRAY
17663: ARRAY
17664: PUSH
17665: LD_EXP 64
17669: PUSH
17670: LD_VAR 0 2
17674: ARRAY
17675: ARRAY
17676: PPUSH
17677: LD_INT 22
17679: PUSH
17680: LD_VAR 0 2
17684: PUSH
17685: EMPTY
17686: LIST
17687: LIST
17688: PUSH
17689: LD_INT 21
17691: PUSH
17692: LD_INT 2
17694: PUSH
17695: EMPTY
17696: LIST
17697: LIST
17698: PUSH
17699: LD_INT 2
17701: PUSH
17702: LD_INT 34
17704: PUSH
17705: LD_INT 12
17707: PUSH
17708: EMPTY
17709: LIST
17710: LIST
17711: PUSH
17712: LD_INT 34
17714: PUSH
17715: LD_INT 32
17717: PUSH
17718: EMPTY
17719: LIST
17720: LIST
17721: PUSH
17722: LD_INT 34
17724: PUSH
17725: LD_INT 51
17727: PUSH
17728: EMPTY
17729: LIST
17730: LIST
17731: PUSH
17732: EMPTY
17733: LIST
17734: LIST
17735: LIST
17736: LIST
17737: PUSH
17738: LD_INT 2
17740: PUSH
17741: LD_INT 1
17743: PUSH
17744: LD_INT 33
17746: PUSH
17747: LD_INT 2
17749: PUSH
17750: EMPTY
17751: LIST
17752: LIST
17753: PUSH
17754: LD_INT 61
17756: PUSH
17757: EMPTY
17758: LIST
17759: PUSH
17760: EMPTY
17761: LIST
17762: LIST
17763: LIST
17764: PUSH
17765: LD_INT 1
17767: PUSH
17768: LD_INT 33
17770: PUSH
17771: LD_INT 1
17773: PUSH
17774: EMPTY
17775: LIST
17776: LIST
17777: PUSH
17778: LD_INT 59
17780: PUSH
17781: EMPTY
17782: LIST
17783: PUSH
17784: EMPTY
17785: LIST
17786: LIST
17787: LIST
17788: PUSH
17789: LD_INT 33
17791: PUSH
17792: LD_INT 3
17794: PUSH
17795: EMPTY
17796: LIST
17797: LIST
17798: PUSH
17799: EMPTY
17800: LIST
17801: LIST
17802: LIST
17803: LIST
17804: PUSH
17805: EMPTY
17806: LIST
17807: LIST
17808: LIST
17809: LIST
17810: PPUSH
17811: CALL_OW 70
17815: ST_TO_ADDR
// if not cargo_bays = [ ] then
17816: LD_VAR 0 3
17820: PUSH
17821: EMPTY
17822: EQUAL
17823: NOT
17824: IFFALSE 17982
// begin side_resources_delivered := Replace ( side_resources_delivered , i , Replace ( side_resources_delivered [ i ] , 1 , GetCargo ( cargo_bays , mat_cans ) ) ) ;
17826: LD_ADDR_EXP 60
17830: PUSH
17831: LD_EXP 60
17835: PPUSH
17836: LD_VAR 0 2
17840: PPUSH
17841: LD_EXP 60
17845: PUSH
17846: LD_VAR 0 2
17850: ARRAY
17851: PPUSH
17852: LD_INT 1
17854: PPUSH
17855: LD_VAR 0 3
17859: PPUSH
17860: LD_INT 1
17862: PPUSH
17863: CALL_OW 289
17867: PPUSH
17868: CALL_OW 1
17872: PPUSH
17873: CALL_OW 1
17877: ST_TO_ADDR
// side_resources_delivered := Replace ( side_resources_delivered , i , Replace ( side_resources_delivered [ i ] , 2 , GetCargo ( cargo_bays , mat_oil ) ) ) ;
17878: LD_ADDR_EXP 60
17882: PUSH
17883: LD_EXP 60
17887: PPUSH
17888: LD_VAR 0 2
17892: PPUSH
17893: LD_EXP 60
17897: PUSH
17898: LD_VAR 0 2
17902: ARRAY
17903: PPUSH
17904: LD_INT 2
17906: PPUSH
17907: LD_VAR 0 3
17911: PPUSH
17912: LD_INT 2
17914: PPUSH
17915: CALL_OW 289
17919: PPUSH
17920: CALL_OW 1
17924: PPUSH
17925: CALL_OW 1
17929: ST_TO_ADDR
// side_resources_delivered := Replace ( side_resources_delivered , i , Replace ( side_resources_delivered [ i ] , 3 , GetCargo ( cargo_bays , mat_siberit ) ) ) ;
17930: LD_ADDR_EXP 60
17934: PUSH
17935: LD_EXP 60
17939: PPUSH
17940: LD_VAR 0 2
17944: PPUSH
17945: LD_EXP 60
17949: PUSH
17950: LD_VAR 0 2
17954: ARRAY
17955: PPUSH
17956: LD_INT 3
17958: PPUSH
17959: LD_VAR 0 3
17963: PPUSH
17964: LD_INT 3
17966: PPUSH
17967: CALL_OW 289
17971: PPUSH
17972: CALL_OW 1
17976: PPUSH
17977: CALL_OW 1
17981: ST_TO_ADDR
// end ; if i = Your_Side and ( side_order_type [ i ] = 1 or side_order_type [ i ] = 2 ) then
17982: LD_VAR 0 2
17986: PUSH
17987: LD_OWVAR 2
17991: EQUAL
17992: PUSH
17993: LD_EXP 68
17997: PUSH
17998: LD_VAR 0 2
18002: ARRAY
18003: PUSH
18004: LD_INT 1
18006: EQUAL
18007: PUSH
18008: LD_EXP 68
18012: PUSH
18013: LD_VAR 0 2
18017: ARRAY
18018: PUSH
18019: LD_INT 2
18021: EQUAL
18022: OR
18023: AND
18024: IFFALSE 18117
// ToLua ( LUA_UpdateTransferResources( & side_resources_delivered [ i ] [ 1 ] & , & side_resources_delivered [ i ] [ 2 ] & , & side_resources_delivered [ i ] [ 3 ] & , & 0 & , & side_order_type [ i ] & ); ) ;
18026: LD_STRING LUA_UpdateTransferResources(
18028: PUSH
18029: LD_EXP 60
18033: PUSH
18034: LD_VAR 0 2
18038: ARRAY
18039: PUSH
18040: LD_INT 1
18042: ARRAY
18043: STR
18044: PUSH
18045: LD_STRING ,
18047: STR
18048: PUSH
18049: LD_EXP 60
18053: PUSH
18054: LD_VAR 0 2
18058: ARRAY
18059: PUSH
18060: LD_INT 2
18062: ARRAY
18063: STR
18064: PUSH
18065: LD_STRING ,
18067: STR
18068: PUSH
18069: LD_EXP 60
18073: PUSH
18074: LD_VAR 0 2
18078: ARRAY
18079: PUSH
18080: LD_INT 3
18082: ARRAY
18083: STR
18084: PUSH
18085: LD_STRING ,
18087: STR
18088: PUSH
18089: LD_INT 0
18091: STR
18092: PUSH
18093: LD_STRING ,
18095: STR
18096: PUSH
18097: LD_EXP 68
18101: PUSH
18102: LD_VAR 0 2
18106: ARRAY
18107: STR
18108: PUSH
18109: LD_STRING );
18111: STR
18112: PPUSH
18113: CALL_OW 559
// if i = Your_Side and side_order_type [ i ] = 3 then
18117: LD_VAR 0 2
18121: PUSH
18122: LD_OWVAR 2
18126: EQUAL
18127: PUSH
18128: LD_EXP 68
18132: PUSH
18133: LD_VAR 0 2
18137: ARRAY
18138: PUSH
18139: LD_INT 3
18141: EQUAL
18142: AND
18143: IFFALSE 18236
// ToLua ( LUA_UpdateTransferResources( & 0 & , & 0 & , & side_resources_delivered [ i ] [ 3 ] & + & team_siberite_stocked [ Side_Teams [ i ] ] & , & victory_cond & , & side_order_type [ i ] & ); ) ;
18145: LD_STRING LUA_UpdateTransferResources(
18147: PUSH
18148: LD_INT 0
18150: STR
18151: PUSH
18152: LD_STRING ,
18154: STR
18155: PUSH
18156: LD_INT 0
18158: STR
18159: PUSH
18160: LD_STRING ,
18162: STR
18163: PUSH
18164: LD_EXP 60
18168: PUSH
18169: LD_VAR 0 2
18173: ARRAY
18174: PUSH
18175: LD_INT 3
18177: ARRAY
18178: STR
18179: PUSH
18180: LD_STRING +
18182: STR
18183: PUSH
18184: LD_EXP 61
18188: PUSH
18189: LD_EXP 5
18193: PUSH
18194: LD_VAR 0 2
18198: ARRAY
18199: ARRAY
18200: STR
18201: PUSH
18202: LD_STRING ,
18204: STR
18205: PUSH
18206: LD_EXP 27
18210: STR
18211: PUSH
18212: LD_STRING ,
18214: STR
18215: PUSH
18216: LD_EXP 68
18220: PUSH
18221: LD_VAR 0 2
18225: ARRAY
18226: STR
18227: PUSH
18228: LD_STRING );
18230: STR
18231: PPUSH
18232: CALL_OW 559
// if side_resources_delivered [ i ] [ 1 ] >= side_pending_order [ i ] [ 1 ] and side_resources_delivered [ i ] [ 2 ] >= side_pending_order [ i ] [ 2 ] and side_resources_delivered [ i ] [ 3 ] >= side_pending_order [ i ] [ 3 ] and i = Your_Side then
18236: LD_EXP 60
18240: PUSH
18241: LD_VAR 0 2
18245: ARRAY
18246: PUSH
18247: LD_INT 1
18249: ARRAY
18250: PUSH
18251: LD_EXP 59
18255: PUSH
18256: LD_VAR 0 2
18260: ARRAY
18261: PUSH
18262: LD_INT 1
18264: ARRAY
18265: GREATEREQUAL
18266: PUSH
18267: LD_EXP 60
18271: PUSH
18272: LD_VAR 0 2
18276: ARRAY
18277: PUSH
18278: LD_INT 2
18280: ARRAY
18281: PUSH
18282: LD_EXP 59
18286: PUSH
18287: LD_VAR 0 2
18291: ARRAY
18292: PUSH
18293: LD_INT 2
18295: ARRAY
18296: GREATEREQUAL
18297: AND
18298: PUSH
18299: LD_EXP 60
18303: PUSH
18304: LD_VAR 0 2
18308: ARRAY
18309: PUSH
18310: LD_INT 3
18312: ARRAY
18313: PUSH
18314: LD_EXP 59
18318: PUSH
18319: LD_VAR 0 2
18323: ARRAY
18324: PUSH
18325: LD_INT 3
18327: ARRAY
18328: GREATEREQUAL
18329: AND
18330: PUSH
18331: LD_VAR 0 2
18335: PUSH
18336: LD_OWVAR 2
18340: EQUAL
18341: AND
18342: IFFALSE 18378
// begin if side_order_type [ i ] = 3 then
18344: LD_EXP 68
18348: PUSH
18349: LD_VAR 0 2
18353: ARRAY
18354: PUSH
18355: LD_INT 3
18357: EQUAL
18358: IFFALSE 18369
// ToLua ( LUA_CanSendShipment(); ) else
18360: LD_STRING LUA_CanSendShipment();
18362: PPUSH
18363: CALL_OW 559
18367: GO 18376
// ToLua ( LUA_AutomaticSend(); ) ;
18369: LD_STRING LUA_AutomaticSend();
18371: PPUSH
18372: CALL_OW 559
// end else
18376: GO 18397
// if i = Your_Side then
18378: LD_VAR 0 2
18382: PUSH
18383: LD_OWVAR 2
18387: EQUAL
18388: IFFALSE 18397
// ToLua ( LUA_CannotSendShipment(); ) ;
18390: LD_STRING LUA_CannotSendShipment();
18392: PPUSH
18393: CALL_OW 559
// end ; end ;
18397: GO 17589
18399: POP
18400: POP
// end ;
18401: LD_VAR 0 1
18405: RET
// export function CYCLIC_FinalizeTransfer ( side , in1 , in2 , in3 ) ; var human , i , bulk , crates , oil , siberite ; begin
18406: LD_INT 0
18408: PPUSH
18409: PPUSH
18410: PPUSH
18411: PPUSH
18412: PPUSH
18413: PPUSH
18414: PPUSH
// SetCargo ( side_units_outside [ side ] , mat_cans , 0 ) ;
18415: LD_EXP 67
18419: PUSH
18420: LD_VAR 0 1
18424: ARRAY
18425: PPUSH
18426: LD_INT 1
18428: PPUSH
18429: LD_INT 0
18431: PPUSH
18432: CALL_OW 290
// crates := in1 ;
18436: LD_ADDR_VAR 0 9
18440: PUSH
18441: LD_VAR 0 2
18445: ST_TO_ADDR
// oil := in2 ;
18446: LD_ADDR_VAR 0 10
18450: PUSH
18451: LD_VAR 0 3
18455: ST_TO_ADDR
// siberite := in3 ;
18456: LD_ADDR_VAR 0 11
18460: PUSH
18461: LD_VAR 0 4
18465: ST_TO_ADDR
// case side_order_type [ side ] of 1 :
18466: LD_EXP 68
18470: PUSH
18471: LD_VAR 0 1
18475: ARRAY
18476: PUSH
18477: LD_INT 1
18479: DOUBLE
18480: EQUAL
18481: IFTRUE 18485
18483: GO 19003
18485: POP
// begin for i = 1 to side_reinforcement_amount [ side ] do
18486: LD_ADDR_VAR 0 7
18490: PUSH
18491: DOUBLE
18492: LD_INT 1
18494: DEC
18495: ST_TO_ADDR
18496: LD_EXP 57
18500: PUSH
18501: LD_VAR 0 1
18505: ARRAY
18506: PUSH
18507: FOR_TO
18508: IFFALSE 18832
// begin new_character_reinforcements := [ 0 , 1 , [ Rand ( 8 , 12 ) , Rand ( 8 , 12 ) ] , [ 0 , 0 , 0 , 0 ] , [ Rand ( 0 , experience ) , Rand ( 0 , experience ) , Rand ( 0 , experience ) , Rand ( 0 , experience ) ] , 0 ] ;
18510: LD_ADDR_EXP 45
18514: PUSH
18515: LD_INT 0
18517: PUSH
18518: LD_INT 1
18520: PUSH
18521: LD_INT 8
18523: PPUSH
18524: LD_INT 12
18526: PPUSH
18527: CALL_OW 12
18531: PUSH
18532: LD_INT 8
18534: PPUSH
18535: LD_INT 12
18537: PPUSH
18538: CALL_OW 12
18542: PUSH
18543: EMPTY
18544: LIST
18545: LIST
18546: PUSH
18547: LD_INT 0
18549: PUSH
18550: LD_INT 0
18552: PUSH
18553: LD_INT 0
18555: PUSH
18556: LD_INT 0
18558: PUSH
18559: EMPTY
18560: LIST
18561: LIST
18562: LIST
18563: LIST
18564: PUSH
18565: LD_INT 0
18567: PPUSH
18568: LD_EXP 20
18572: PPUSH
18573: CALL_OW 12
18577: PUSH
18578: LD_INT 0
18580: PPUSH
18581: LD_EXP 20
18585: PPUSH
18586: CALL_OW 12
18590: PUSH
18591: LD_INT 0
18593: PPUSH
18594: LD_EXP 20
18598: PPUSH
18599: CALL_OW 12
18603: PUSH
18604: LD_INT 0
18606: PPUSH
18607: LD_EXP 20
18611: PPUSH
18612: CALL_OW 12
18616: PUSH
18617: EMPTY
18618: LIST
18619: LIST
18620: LIST
18621: LIST
18622: PUSH
18623: LD_INT 0
18625: PUSH
18626: EMPTY
18627: LIST
18628: LIST
18629: LIST
18630: LIST
18631: LIST
18632: LIST
18633: ST_TO_ADDR
// human := PrepareCharacters ( side , [ Rand ( 0 , 5 ) , Rand ( 0 , 5 ) , Rand ( 0 , 5 ) , Rand ( 0 , 5 ) , Rand ( 0 , 5 ) , Rand ( 0 , 5 ) , Rand ( 0 , 5 ) , Rand ( 0 , 5 ) ] , new_character_reinforcements ) ;
18634: LD_ADDR_VAR 0 6
18638: PUSH
18639: LD_VAR 0 1
18643: PPUSH
18644: LD_INT 0
18646: PPUSH
18647: LD_INT 5
18649: PPUSH
18650: CALL_OW 12
18654: PUSH
18655: LD_INT 0
18657: PPUSH
18658: LD_INT 5
18660: PPUSH
18661: CALL_OW 12
18665: PUSH
18666: LD_INT 0
18668: PPUSH
18669: LD_INT 5
18671: PPUSH
18672: CALL_OW 12
18676: PUSH
18677: LD_INT 0
18679: PPUSH
18680: LD_INT 5
18682: PPUSH
18683: CALL_OW 12
18687: PUSH
18688: LD_INT 0
18690: PPUSH
18691: LD_INT 5
18693: PPUSH
18694: CALL_OW 12
18698: PUSH
18699: LD_INT 0
18701: PPUSH
18702: LD_INT 5
18704: PPUSH
18705: CALL_OW 12
18709: PUSH
18710: LD_INT 0
18712: PPUSH
18713: LD_INT 5
18715: PPUSH
18716: CALL_OW 12
18720: PUSH
18721: LD_INT 0
18723: PPUSH
18724: LD_INT 5
18726: PPUSH
18727: CALL_OW 12
18731: PUSH
18732: EMPTY
18733: LIST
18734: LIST
18735: LIST
18736: LIST
18737: LIST
18738: LIST
18739: LIST
18740: LIST
18741: PPUSH
18742: LD_EXP 45
18746: PPUSH
18747: CALL 6422 0 3
18751: ST_TO_ADDR
// side_soldiers := Replace ( side_soldiers , side , side_soldiers [ side ] ^ human ) ;
18752: LD_ADDR_EXP 46
18756: PUSH
18757: LD_EXP 46
18761: PPUSH
18762: LD_VAR 0 1
18766: PPUSH
18767: LD_EXP 46
18771: PUSH
18772: LD_VAR 0 1
18776: ARRAY
18777: PUSH
18778: LD_VAR 0 6
18782: ADD
18783: PPUSH
18784: CALL_OW 1
18788: ST_TO_ADDR
// PlaceUnitArea ( human , team_transfer_zones [ Side_Teams [ side ] ] [ side_chosen_zone [ side ] ] , false ) ;
18789: LD_VAR 0 6
18793: PPUSH
18794: LD_EXP 62
18798: PUSH
18799: LD_EXP 5
18803: PUSH
18804: LD_VAR 0 1
18808: ARRAY
18809: ARRAY
18810: PUSH
18811: LD_EXP 64
18815: PUSH
18816: LD_VAR 0 1
18820: ARRAY
18821: ARRAY
18822: PPUSH
18823: LD_INT 0
18825: PPUSH
18826: CALL_OW 49
// end ;
18830: GO 18507
18832: POP
18833: POP
// for i in side_units_outside [ side ] do
18834: LD_ADDR_VAR 0 7
18838: PUSH
18839: LD_EXP 67
18843: PUSH
18844: LD_VAR 0 1
18848: ARRAY
18849: PUSH
18850: FOR_IN
18851: IFFALSE 18999
// begin bulk := FillUpVehicles ( i , crates , oil , siberite ) ;
18853: LD_ADDR_VAR 0 8
18857: PUSH
18858: LD_VAR 0 7
18862: PPUSH
18863: LD_VAR 0 9
18867: PPUSH
18868: LD_VAR 0 10
18872: PPUSH
18873: LD_VAR 0 11
18877: PPUSH
18878: CALL 11093 0 4
18882: ST_TO_ADDR
// crates := bulk [ 2 ] ;
18883: LD_ADDR_VAR 0 9
18887: PUSH
18888: LD_VAR 0 8
18892: PUSH
18893: LD_INT 2
18895: ARRAY
18896: ST_TO_ADDR
// oil := bulk [ 3 ] ;
18897: LD_ADDR_VAR 0 10
18901: PUSH
18902: LD_VAR 0 8
18906: PUSH
18907: LD_INT 3
18909: ARRAY
18910: ST_TO_ADDR
// siberite := bulk [ 4 ] ;
18911: LD_ADDR_VAR 0 11
18915: PUSH
18916: LD_VAR 0 8
18920: PUSH
18921: LD_INT 4
18923: ARRAY
18924: ST_TO_ADDR
// SetDir ( i , RotateUnit ( GetDir ( i ) , 3 ) ) ;
18925: LD_VAR 0 7
18929: PPUSH
18930: LD_VAR 0 7
18934: PPUSH
18935: CALL_OW 254
18939: PPUSH
18940: LD_INT 3
18942: PPUSH
18943: CALL 11375 0 2
18947: PPUSH
18948: CALL_OW 233
// PlaceUnitArea ( bulk [ 1 ] , team_transfer_zones [ Side_Teams [ side ] ] [ side_chosen_zone [ side ] ] , false ) ;
18952: LD_VAR 0 8
18956: PUSH
18957: LD_INT 1
18959: ARRAY
18960: PPUSH
18961: LD_EXP 62
18965: PUSH
18966: LD_EXP 5
18970: PUSH
18971: LD_VAR 0 1
18975: ARRAY
18976: ARRAY
18977: PUSH
18978: LD_EXP 64
18982: PUSH
18983: LD_VAR 0 1
18987: ARRAY
18988: ARRAY
18989: PPUSH
18990: LD_INT 0
18992: PPUSH
18993: CALL_OW 49
// end ;
18997: GO 18850
18999: POP
19000: POP
// end ; 2 :
19001: GO 19714
19003: LD_INT 2
19005: DOUBLE
19006: EQUAL
19007: IFTRUE 19011
19009: GO 19345
19011: POP
// begin side_tech_lvl := Replace ( side_tech_lvl , side , side_tech_lvl [ side ] + 1 ) ;
19012: LD_ADDR_EXP 31
19016: PUSH
19017: LD_EXP 31
19021: PPUSH
19022: LD_VAR 0 1
19026: PPUSH
19027: LD_EXP 31
19031: PUSH
19032: LD_VAR 0 1
19036: ARRAY
19037: PUSH
19038: LD_INT 1
19040: PLUS
19041: PPUSH
19042: CALL_OW 1
19046: ST_TO_ADDR
// TechUpgrade ( side_tech_lvl [ side ] , Side_Nations [ side ] , side ) ;
19047: LD_EXP 31
19051: PUSH
19052: LD_VAR 0 1
19056: ARRAY
19057: PPUSH
19058: LD_EXP 3
19062: PUSH
19063: LD_VAR 0 1
19067: ARRAY
19068: PPUSH
19069: LD_VAR 0 1
19073: PPUSH
19074: CALL 7795 0 3
// if side = Your_Side then
19078: LD_VAR 0 1
19082: PUSH
19083: LD_OWVAR 2
19087: EQUAL
19088: IFFALSE 19123
// ToLua ( LUA_UpdateSideInterface( & side & , & side_tech_lvl [ side ] & ); ) ;
19090: LD_STRING LUA_UpdateSideInterface(
19092: PUSH
19093: LD_VAR 0 1
19097: STR
19098: PUSH
19099: LD_STRING ,
19101: STR
19102: PUSH
19103: LD_EXP 31
19107: PUSH
19108: LD_VAR 0 1
19112: ARRAY
19113: STR
19114: PUSH
19115: LD_STRING );
19117: STR
19118: PPUSH
19119: CALL_OW 559
// if Your_Side = 9 then
19123: LD_OWVAR 2
19127: PUSH
19128: LD_INT 9
19130: EQUAL
19131: IFFALSE 19176
// ToLua ( LUA_UpdateSpecInterface( & side & , & side & , & side_tech_lvl [ side ] & ); ) ;
19133: LD_STRING LUA_UpdateSpecInterface(
19135: PUSH
19136: LD_VAR 0 1
19140: STR
19141: PUSH
19142: LD_STRING ,
19144: STR
19145: PUSH
19146: LD_VAR 0 1
19150: STR
19151: PUSH
19152: LD_STRING ,
19154: STR
19155: PUSH
19156: LD_EXP 31
19160: PUSH
19161: LD_VAR 0 1
19165: ARRAY
19166: STR
19167: PUSH
19168: LD_STRING );
19170: STR
19171: PPUSH
19172: CALL_OW 559
// for i in side_units_outside [ side ] do
19176: LD_ADDR_VAR 0 7
19180: PUSH
19181: LD_EXP 67
19185: PUSH
19186: LD_VAR 0 1
19190: ARRAY
19191: PUSH
19192: FOR_IN
19193: IFFALSE 19341
// begin bulk := FillUpVehicles ( i , crates , oil , siberite ) ;
19195: LD_ADDR_VAR 0 8
19199: PUSH
19200: LD_VAR 0 7
19204: PPUSH
19205: LD_VAR 0 9
19209: PPUSH
19210: LD_VAR 0 10
19214: PPUSH
19215: LD_VAR 0 11
19219: PPUSH
19220: CALL 11093 0 4
19224: ST_TO_ADDR
// crates := bulk [ 2 ] ;
19225: LD_ADDR_VAR 0 9
19229: PUSH
19230: LD_VAR 0 8
19234: PUSH
19235: LD_INT 2
19237: ARRAY
19238: ST_TO_ADDR
// oil := bulk [ 3 ] ;
19239: LD_ADDR_VAR 0 10
19243: PUSH
19244: LD_VAR 0 8
19248: PUSH
19249: LD_INT 3
19251: ARRAY
19252: ST_TO_ADDR
// siberite := bulk [ 4 ] ;
19253: LD_ADDR_VAR 0 11
19257: PUSH
19258: LD_VAR 0 8
19262: PUSH
19263: LD_INT 4
19265: ARRAY
19266: ST_TO_ADDR
// SetDir ( i , RotateUnit ( GetDir ( i ) , 3 ) ) ;
19267: LD_VAR 0 7
19271: PPUSH
19272: LD_VAR 0 7
19276: PPUSH
19277: CALL_OW 254
19281: PPUSH
19282: LD_INT 3
19284: PPUSH
19285: CALL 11375 0 2
19289: PPUSH
19290: CALL_OW 233
// PlaceUnitArea ( bulk [ 1 ] , team_transfer_zones [ Side_Teams [ side ] ] [ side_chosen_zone [ side ] ] , false ) ;
19294: LD_VAR 0 8
19298: PUSH
19299: LD_INT 1
19301: ARRAY
19302: PPUSH
19303: LD_EXP 62
19307: PUSH
19308: LD_EXP 5
19312: PUSH
19313: LD_VAR 0 1
19317: ARRAY
19318: ARRAY
19319: PUSH
19320: LD_EXP 64
19324: PUSH
19325: LD_VAR 0 1
19329: ARRAY
19330: ARRAY
19331: PPUSH
19332: LD_INT 0
19334: PPUSH
19335: CALL_OW 49
// end ;
19339: GO 19192
19341: POP
19342: POP
// end ; 3 :
19343: GO 19714
19345: LD_INT 3
19347: DOUBLE
19348: EQUAL
19349: IFTRUE 19353
19351: GO 19713
19353: POP
// begin team_siberite_stocked := Replace ( team_siberite_stocked , Side_Teams [ side ] , team_siberite_stocked [ Side_Teams [ side ] ] + siberite ) ;
19354: LD_ADDR_EXP 61
19358: PUSH
19359: LD_EXP 61
19363: PPUSH
19364: LD_EXP 5
19368: PUSH
19369: LD_VAR 0 1
19373: ARRAY
19374: PPUSH
19375: LD_EXP 61
19379: PUSH
19380: LD_EXP 5
19384: PUSH
19385: LD_VAR 0 1
19389: ARRAY
19390: ARRAY
19391: PUSH
19392: LD_VAR 0 11
19396: PLUS
19397: PPUSH
19398: CALL_OW 1
19402: ST_TO_ADDR
// siberite := 0 ;
19403: LD_ADDR_VAR 0 11
19407: PUSH
19408: LD_INT 0
19410: ST_TO_ADDR
// for i in side_units_outside [ side ] do
19411: LD_ADDR_VAR 0 7
19415: PUSH
19416: LD_EXP 67
19420: PUSH
19421: LD_VAR 0 1
19425: ARRAY
19426: PUSH
19427: FOR_IN
19428: IFFALSE 19576
// begin bulk := FillUpVehicles ( i , crates , oil , siberite ) ;
19430: LD_ADDR_VAR 0 8
19434: PUSH
19435: LD_VAR 0 7
19439: PPUSH
19440: LD_VAR 0 9
19444: PPUSH
19445: LD_VAR 0 10
19449: PPUSH
19450: LD_VAR 0 11
19454: PPUSH
19455: CALL 11093 0 4
19459: ST_TO_ADDR
// crates := bulk [ 2 ] ;
19460: LD_ADDR_VAR 0 9
19464: PUSH
19465: LD_VAR 0 8
19469: PUSH
19470: LD_INT 2
19472: ARRAY
19473: ST_TO_ADDR
// oil := bulk [ 3 ] ;
19474: LD_ADDR_VAR 0 10
19478: PUSH
19479: LD_VAR 0 8
19483: PUSH
19484: LD_INT 3
19486: ARRAY
19487: ST_TO_ADDR
// siberite := bulk [ 4 ] ;
19488: LD_ADDR_VAR 0 11
19492: PUSH
19493: LD_VAR 0 8
19497: PUSH
19498: LD_INT 4
19500: ARRAY
19501: ST_TO_ADDR
// SetDir ( i , RotateUnit ( GetDir ( i ) , 3 ) ) ;
19502: LD_VAR 0 7
19506: PPUSH
19507: LD_VAR 0 7
19511: PPUSH
19512: CALL_OW 254
19516: PPUSH
19517: LD_INT 3
19519: PPUSH
19520: CALL 11375 0 2
19524: PPUSH
19525: CALL_OW 233
// PlaceUnitArea ( bulk [ 1 ] , team_transfer_zones [ Side_Teams [ side ] ] [ side_chosen_zone [ side ] ] , false ) ;
19529: LD_VAR 0 8
19533: PUSH
19534: LD_INT 1
19536: ARRAY
19537: PPUSH
19538: LD_EXP 62
19542: PUSH
19543: LD_EXP 5
19547: PUSH
19548: LD_VAR 0 1
19552: ARRAY
19553: ARRAY
19554: PUSH
19555: LD_EXP 64
19559: PUSH
19560: LD_VAR 0 1
19564: ARRAY
19565: ARRAY
19566: PPUSH
19567: LD_INT 0
19569: PPUSH
19570: CALL_OW 49
// end ;
19574: GO 19427
19576: POP
19577: POP
// if side = Your_Side then
19578: LD_VAR 0 1
19582: PUSH
19583: LD_OWVAR 2
19587: EQUAL
19588: IFFALSE 19629
// ToLua ( LUA_UpdateSiberiteSent( & team_siberite_stocked [ Side_Teams [ side ] ] & , & victory_cond & ); ) ;
19590: LD_STRING LUA_UpdateSiberiteSent(
19592: PUSH
19593: LD_EXP 61
19597: PUSH
19598: LD_EXP 5
19602: PUSH
19603: LD_VAR 0 1
19607: ARRAY
19608: ARRAY
19609: STR
19610: PUSH
19611: LD_STRING ,
19613: STR
19614: PUSH
19615: LD_EXP 27
19619: STR
19620: PUSH
19621: LD_STRING );
19623: STR
19624: PPUSH
19625: CALL_OW 559
// if Your_Side = 9 then
19629: LD_OWVAR 2
19633: PUSH
19634: LD_INT 9
19636: EQUAL
19637: IFFALSE 19704
// for i = 1 to Teams do
19639: LD_ADDR_VAR 0 7
19643: PUSH
19644: DOUBLE
19645: LD_INT 1
19647: DEC
19648: ST_TO_ADDR
19649: LD_EXP 6
19653: PUSH
19654: FOR_TO
19655: IFFALSE 19702
// ToLua ( LUA_UpdateSiberiteSpec( & team_siberite_stocked [ i ] & , & victory_cond & , & i & ); ) ;
19657: LD_STRING LUA_UpdateSiberiteSpec(
19659: PUSH
19660: LD_EXP 61
19664: PUSH
19665: LD_VAR 0 7
19669: ARRAY
19670: STR
19671: PUSH
19672: LD_STRING ,
19674: STR
19675: PUSH
19676: LD_EXP 27
19680: STR
19681: PUSH
19682: LD_STRING ,
19684: STR
19685: PUSH
19686: LD_VAR 0 7
19690: STR
19691: PUSH
19692: LD_STRING );
19694: STR
19695: PPUSH
19696: CALL_OW 559
19700: GO 19654
19702: POP
19703: POP
// RaiseSailEvent ( 67 ) ;
19704: LD_INT 67
19706: PPUSH
19707: CALL_OW 427
// end ; end ;
19711: GO 19714
19713: POP
// if side = Your_Side then
19714: LD_VAR 0 1
19718: PUSH
19719: LD_OWVAR 2
19723: EQUAL
19724: IFFALSE 19733
// ToLua ( LUA_TransferFinished(); ) ;
19726: LD_STRING LUA_TransferFinished();
19728: PPUSH
19729: CALL_OW 559
// end ; end_of_file
19733: LD_VAR 0 5
19737: RET
// export ExtraStrings ; export WaitServerStrings ; export function ShowTimer ; var AllStrings ; begin
19738: LD_INT 0
19740: PPUSH
19741: PPUSH
// AllStrings := [ #Multi1x1-Time , tick ] ;
19742: LD_ADDR_VAR 0 2
19746: PUSH
19747: LD_STRING #Multi1x1-Time
19749: PUSH
19750: LD_OWVAR 1
19754: PUSH
19755: EMPTY
19756: LIST
19757: LIST
19758: ST_TO_ADDR
// if WaitServerStrings then
19759: LD_EXP 72
19763: IFFALSE 19781
// AllStrings = AllStrings ^ WaitServerStrings ;
19765: LD_ADDR_VAR 0 2
19769: PUSH
19770: LD_VAR 0 2
19774: PUSH
19775: LD_EXP 72
19779: ADD
19780: ST_TO_ADDR
// ExtraStrings :=  ;
19781: LD_ADDR_EXP 71
19785: PUSH
19786: LD_STRING 
19788: ST_TO_ADDR
// if ( ExtraStrings ) then
19789: LD_EXP 71
19793: IFFALSE 19815
// AllStrings := AllStrings ^  ^ ExtraStrings ;
19795: LD_ADDR_VAR 0 2
19799: PUSH
19800: LD_VAR 0 2
19804: PUSH
19805: LD_STRING 
19807: ADD
19808: PUSH
19809: LD_EXP 71
19813: ADD
19814: ST_TO_ADDR
// Display_Strings := AllStrings ;
19815: LD_ADDR_OWVAR 47
19819: PUSH
19820: LD_VAR 0 2
19824: ST_TO_ADDR
// end ; end_of_file
19825: LD_VAR 0 1
19829: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
19830: LD_INT 0
19832: PPUSH
19833: PPUSH
19834: PPUSH
19835: PPUSH
19836: PPUSH
19837: PPUSH
19838: PPUSH
19839: PPUSH
19840: PPUSH
// for i := 1 to 8 do
19841: LD_ADDR_VAR 0 2
19845: PUSH
19846: DOUBLE
19847: LD_INT 1
19849: DEC
19850: ST_TO_ADDR
19851: LD_INT 8
19853: PUSH
19854: FOR_TO
19855: IFFALSE 20239
// begin if Side_Positions [ i ] then
19857: LD_EXP 2
19861: PUSH
19862: LD_VAR 0 2
19866: ARRAY
19867: IFFALSE 20237
// begin people := FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) + 0 ;
19869: LD_ADDR_VAR 0 7
19873: PUSH
19874: LD_INT 22
19876: PUSH
19877: LD_VAR 0 2
19881: PUSH
19882: EMPTY
19883: LIST
19884: LIST
19885: PUSH
19886: LD_INT 21
19888: PUSH
19889: LD_INT 1
19891: PUSH
19892: EMPTY
19893: LIST
19894: LIST
19895: PUSH
19896: EMPTY
19897: LIST
19898: LIST
19899: PPUSH
19900: CALL_OW 69
19904: PUSH
19905: LD_INT 0
19907: PLUS
19908: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19909: LD_ADDR_VAR 0 9
19913: PUSH
19914: LD_INT 22
19916: PUSH
19917: LD_VAR 0 2
19921: PUSH
19922: EMPTY
19923: LIST
19924: LIST
19925: PUSH
19926: LD_INT 2
19928: PUSH
19929: LD_INT 30
19931: PUSH
19932: LD_INT 0
19934: PUSH
19935: EMPTY
19936: LIST
19937: LIST
19938: PUSH
19939: LD_INT 30
19941: PUSH
19942: LD_INT 1
19944: PUSH
19945: EMPTY
19946: LIST
19947: LIST
19948: PUSH
19949: EMPTY
19950: LIST
19951: LIST
19952: LIST
19953: PUSH
19954: EMPTY
19955: LIST
19956: LIST
19957: PPUSH
19958: CALL_OW 69
19962: ST_TO_ADDR
// crates := 0 ;
19963: LD_ADDR_VAR 0 4
19967: PUSH
19968: LD_INT 0
19970: ST_TO_ADDR
// oil := 0 ;
19971: LD_ADDR_VAR 0 5
19975: PUSH
19976: LD_INT 0
19978: ST_TO_ADDR
// sib := 0 ;
19979: LD_ADDR_VAR 0 6
19983: PUSH
19984: LD_INT 0
19986: ST_TO_ADDR
// if bases then
19987: LD_VAR 0 9
19991: IFFALSE 20097
// begin for j in bases do
19993: LD_ADDR_VAR 0 3
19997: PUSH
19998: LD_VAR 0 9
20002: PUSH
20003: FOR_IN
20004: IFFALSE 20095
// begin base := GetBase ( j ) ;
20006: LD_ADDR_VAR 0 8
20010: PUSH
20011: LD_VAR 0 3
20015: PPUSH
20016: CALL_OW 274
20020: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
20021: LD_ADDR_VAR 0 4
20025: PUSH
20026: LD_VAR 0 4
20030: PUSH
20031: LD_VAR 0 8
20035: PPUSH
20036: LD_INT 1
20038: PPUSH
20039: CALL_OW 275
20043: PLUS
20044: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
20045: LD_ADDR_VAR 0 5
20049: PUSH
20050: LD_VAR 0 5
20054: PUSH
20055: LD_VAR 0 8
20059: PPUSH
20060: LD_INT 2
20062: PPUSH
20063: CALL_OW 275
20067: PLUS
20068: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
20069: LD_ADDR_VAR 0 6
20073: PUSH
20074: LD_VAR 0 6
20078: PUSH
20079: LD_VAR 0 8
20083: PPUSH
20084: LD_INT 3
20086: PPUSH
20087: CALL_OW 275
20091: PLUS
20092: ST_TO_ADDR
// end ;
20093: GO 20003
20095: POP
20096: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
20097: LD_STRING setSpecText(
20099: PUSH
20100: LD_VAR 0 2
20104: STR
20105: PUSH
20106: LD_STRING ,
20108: STR
20109: PUSH
20110: LD_INT 2
20112: STR
20113: PUSH
20114: LD_STRING ,
20116: STR
20117: PUSH
20118: LD_VAR 0 4
20122: STR
20123: PUSH
20124: LD_STRING )
20126: STR
20127: PPUSH
20128: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
20132: LD_STRING setSpecText(
20134: PUSH
20135: LD_VAR 0 2
20139: STR
20140: PUSH
20141: LD_STRING ,
20143: STR
20144: PUSH
20145: LD_INT 3
20147: STR
20148: PUSH
20149: LD_STRING ,
20151: STR
20152: PUSH
20153: LD_VAR 0 5
20157: STR
20158: PUSH
20159: LD_STRING )
20161: STR
20162: PPUSH
20163: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
20167: LD_STRING setSpecText(
20169: PUSH
20170: LD_VAR 0 2
20174: STR
20175: PUSH
20176: LD_STRING ,
20178: STR
20179: PUSH
20180: LD_INT 4
20182: STR
20183: PUSH
20184: LD_STRING ,
20186: STR
20187: PUSH
20188: LD_VAR 0 6
20192: STR
20193: PUSH
20194: LD_STRING )
20196: STR
20197: PPUSH
20198: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
20202: LD_STRING setSpecText(
20204: PUSH
20205: LD_VAR 0 2
20209: STR
20210: PUSH
20211: LD_STRING ,
20213: STR
20214: PUSH
20215: LD_INT 5
20217: STR
20218: PUSH
20219: LD_STRING ,
20221: STR
20222: PUSH
20223: LD_VAR 0 7
20227: STR
20228: PUSH
20229: LD_STRING )
20231: STR
20232: PPUSH
20233: CALL_OW 559
// end ; end ;
20237: GO 19854
20239: POP
20240: POP
// end ;
20241: LD_VAR 0 1
20245: RET
// every 0 0$1 do
20246: GO 20248
20248: DISABLE
// begin ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
20249: LD_STRING setSpecLogoNumber(
20251: PUSH
20252: LD_INT 2
20254: STR
20255: PUSH
20256: LD_STRING ,
20258: STR
20259: PUSH
20260: LD_INT 1
20262: STR
20263: PUSH
20264: LD_STRING )
20266: STR
20267: PPUSH
20268: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
20272: LD_STRING setSpecLogoNumber(
20274: PUSH
20275: LD_INT 3
20277: STR
20278: PUSH
20279: LD_STRING ,
20281: STR
20282: PUSH
20283: LD_INT 2
20285: STR
20286: PUSH
20287: LD_STRING )
20289: STR
20290: PPUSH
20291: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
20295: LD_STRING setSpecLogoNumber(
20297: PUSH
20298: LD_INT 4
20300: STR
20301: PUSH
20302: LD_STRING ,
20304: STR
20305: PUSH
20306: LD_INT 3
20308: STR
20309: PUSH
20310: LD_STRING )
20312: STR
20313: PPUSH
20314: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
20318: LD_STRING setSpecLogoNumber(
20320: PUSH
20321: LD_INT 5
20323: STR
20324: PUSH
20325: LD_STRING ,
20327: STR
20328: PUSH
20329: LD_INT 4
20331: STR
20332: PUSH
20333: LD_STRING )
20335: STR
20336: PPUSH
20337: CALL_OW 559
// end ;
20341: END
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
20342: LD_INT 2
20344: PUSH
20345: LD_INT 30
20347: PUSH
20348: LD_INT 0
20350: PUSH
20351: EMPTY
20352: LIST
20353: LIST
20354: PUSH
20355: LD_INT 30
20357: PUSH
20358: LD_INT 1
20360: PUSH
20361: EMPTY
20362: LIST
20363: LIST
20364: PUSH
20365: EMPTY
20366: LIST
20367: LIST
20368: LIST
20369: PPUSH
20370: CALL_OW 69
20374: IFFALSE 20384
20376: GO 20378
20378: DISABLE
// begin enable ;
20379: ENABLE
// UpdateSpectatorBar ;
20380: CALL 19830 0 0
// end ; end_of_file
20384: END
// export function SA_OnSiberiteRocketExploded ( siberite_rocket_vehicle , target_x , target_y , requestSide ) ; begin
20385: LD_INT 0
20387: PPUSH
// if GetSide ( siberite_rocket_vehicle ) = requestSide then
20388: LD_VAR 0 1
20392: PPUSH
20393: CALL_OW 255
20397: PUSH
20398: LD_VAR 0 4
20402: EQUAL
20403: IFFALSE 20422
// begin SetAchievement ( ACH_RAD ) ;
20405: LD_STRING ACH_RAD
20407: PPUSH
20408: CALL_OW 543
// SetAchievementEx ( ACH_NL , 1 ) ;
20412: LD_STRING ACH_NL
20414: PPUSH
20415: LD_INT 1
20417: PPUSH
20418: CALL_OW 564
// end end ;
20422: LD_VAR 0 5
20426: RET
// export function SA_Win ( side ) ; begin
20427: LD_INT 0
20429: PPUSH
// case side of 1 :
20430: LD_VAR 0 1
20434: PUSH
20435: LD_INT 1
20437: DOUBLE
20438: EQUAL
20439: IFTRUE 20443
20441: GO 20456
20443: POP
// SetAchievementEx ( ACH_AH , 1 ) ; 2 :
20444: LD_STRING ACH_AH
20446: PPUSH
20447: LD_INT 1
20449: PPUSH
20450: CALL_OW 564
20454: GO 20619
20456: LD_INT 2
20458: DOUBLE
20459: EQUAL
20460: IFTRUE 20464
20462: GO 20477
20464: POP
// SetAchievementEx ( ACH_E , 1 ) ; 3 :
20465: LD_STRING ACH_E
20467: PPUSH
20468: LD_INT 1
20470: PPUSH
20471: CALL_OW 564
20475: GO 20619
20477: LD_INT 3
20479: DOUBLE
20480: EQUAL
20481: IFTRUE 20485
20483: GO 20498
20485: POP
// SetAchievementEx ( ACH_OOL , 1 ) ; [ 1 , 2 ] :
20486: LD_STRING ACH_OOL
20488: PPUSH
20489: LD_INT 1
20491: PPUSH
20492: CALL_OW 564
20496: GO 20619
20498: LD_INT 1
20500: PUSH
20501: LD_INT 2
20503: PUSH
20504: EMPTY
20505: LIST
20506: LIST
20507: DOUBLE
20508: EQUAL
20509: IFTRUE 20513
20511: GO 20538
20513: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
20514: LD_STRING ACH_AH
20516: PPUSH
20517: LD_REAL  5.00000000000000E-0001
20520: PPUSH
20521: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
20525: LD_STRING ACH_E
20527: PPUSH
20528: LD_REAL  5.00000000000000E-0001
20531: PPUSH
20532: CALL_OW 564
// end ; [ 2 , 3 ] :
20536: GO 20619
20538: LD_INT 2
20540: PUSH
20541: LD_INT 3
20543: PUSH
20544: EMPTY
20545: LIST
20546: LIST
20547: DOUBLE
20548: EQUAL
20549: IFTRUE 20553
20551: GO 20578
20553: POP
// begin SetAchievementEx ( ACH_OOL , 0.5 ) ;
20554: LD_STRING ACH_OOL
20556: PPUSH
20557: LD_REAL  5.00000000000000E-0001
20560: PPUSH
20561: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
20565: LD_STRING ACH_E
20567: PPUSH
20568: LD_REAL  5.00000000000000E-0001
20571: PPUSH
20572: CALL_OW 564
// end ; [ 3 , 1 ] :
20576: GO 20619
20578: LD_INT 3
20580: PUSH
20581: LD_INT 1
20583: PUSH
20584: EMPTY
20585: LIST
20586: LIST
20587: DOUBLE
20588: EQUAL
20589: IFTRUE 20593
20591: GO 20618
20593: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
20594: LD_STRING ACH_AH
20596: PPUSH
20597: LD_REAL  5.00000000000000E-0001
20600: PPUSH
20601: CALL_OW 564
// SetAchievementEx ( ACH_OOL , 0.5 ) ;
20605: LD_STRING ACH_OOL
20607: PPUSH
20608: LD_REAL  5.00000000000000E-0001
20611: PPUSH
20612: CALL_OW 564
// end ; end ;
20616: GO 20619
20618: POP
// end ;
20619: LD_VAR 0 2
20623: RET
