// starting begin mp_selectmsg := true ;
   0: LD_ADDR_OWVAR 13
   4: PUSH
   5: LD_INT 1
   7: ST_TO_ADDR
// INIT_LoadMapParams ;
   8: CALL 4031 0 0
// INIT_LoadGameParams ;
  12: CALL 521 0 0
// INIT_ApplyGameParams ;
  16: CALL 1080 0 0
// INIT_GenerateDeposits ;
  20: CALL 1508 0 0
// INIT_SetUpAllies ;
  24: CALL 2074 0 0
// INIT_SetUpTechs ;
  28: CALL 2276 0 0
// INIT_PrepareSquad ;
  32: CALL 2589 0 0
// INIT_SpawnStartingUnits ;
  36: CALL 3201 0 0
// INIT_CameraFocus ;
  40: CALL 3969 0 0
// INIT_ActivateLUAInterface ;
  44: CALL 2364 0 0
// if Your_Side >= 1 and Your_Side <= 8 then
  48: LD_OWVAR 2
  52: PUSH
  53: LD_INT 1
  55: GREATEREQUAL
  56: PUSH
  57: LD_OWVAR 2
  61: PUSH
  62: LD_INT 8
  64: LESSEQUAL
  65: AND
  66: IFFALSE 84
// music_nat := Side_Nations [ Your_Side ] ;
  68: LD_ADDR_OWVAR 71
  72: PUSH
  73: LD_EXP 3
  77: PUSH
  78: LD_OWVAR 2
  82: ARRAY
  83: ST_TO_ADDR
// end ;
  84: END
// every 0 0$1 do
  85: GO 87
  87: DISABLE
// begin ShowTimer ;
  88: CALL 18982 0 0
// enable ;
  92: ENABLE
// end ;
  93: END
// every 0 0$3 trigger Multiplayer do
  94: LD_OWVAR 4
  98: IFFALSE 108
 100: GO 102
 102: DISABLE
// begin CheckPlayerPresence ;
 103: CALL 6806 0 0
// enable ;
 107: ENABLE
// end ;
 108: END
// every 0 0$1 trigger tick >= CLOCK_fluctuation and spawn_fluctuation <> 0 do
 109: LD_OWVAR 1
 113: PUSH
 114: LD_EXP 52
 118: GREATEREQUAL
 119: PUSH
 120: LD_EXP 24
 124: PUSH
 125: LD_INT 0
 127: NONEQUAL
 128: AND
 129: IFFALSE 155
 131: GO 133
 133: DISABLE
// begin enable ;
 134: ENABLE
// CLOCK_fluctuation := CLOCK_fluctuation + spawn_fluctuation ;
 135: LD_ADDR_EXP 52
 139: PUSH
 140: LD_EXP 52
 144: PUSH
 145: LD_EXP 24
 149: PLUS
 150: ST_TO_ADDR
// CYCLIC_Fluctuation ;
 151: CALL 16897 0 0
// end ;
 155: END
// every 0 0$1 trigger tick >= CLOCK_crate_spawn do
 156: LD_OWVAR 1
 160: PUSH
 161: LD_EXP 50
 165: GREATEREQUAL
 166: IFFALSE 198
 168: GO 170
 170: DISABLE
// begin enable ;
 171: ENABLE
// CLOCK_crate_spawn := CLOCK_crate_spawn + crate_spawn_rate + fluctuation_modifier_crates ;
 172: LD_ADDR_EXP 50
 176: PUSH
 177: LD_EXP 50
 181: PUSH
 182: LD_EXP 22
 186: PLUS
 187: PUSH
 188: LD_EXP 39
 192: PLUS
 193: ST_TO_ADDR
// CYCLIC_CrateSpawn ;
 194: CALL 15414 0 0
// end ;
 198: END
// every 0 0$1 trigger tick >= CLOCK_human_spawn and people_spawn_rate <> 0 do
 199: LD_OWVAR 1
 203: PUSH
 204: LD_EXP 51
 208: GREATEREQUAL
 209: PUSH
 210: LD_EXP 23
 214: PUSH
 215: LD_INT 0
 217: NONEQUAL
 218: AND
 219: IFFALSE 251
 221: GO 223
 223: DISABLE
// begin enable ;
 224: ENABLE
// CLOCK_human_spawn := CLOCK_human_spawn + people_spawn_rate + fluctuation_modifier_humans ;
 225: LD_ADDR_EXP 51
 229: PUSH
 230: LD_EXP 51
 234: PUSH
 235: LD_EXP 23
 239: PLUS
 240: PUSH
 241: LD_EXP 40
 245: PLUS
 246: ST_TO_ADDR
// CYCLIC_HumanSpawn ;
 247: CALL 15594 0 0
// end ;
 251: END
// every 0 0$1 do var i , count ;
 252: GO 254
 254: DISABLE
 255: LD_INT 0
 257: PPUSH
 258: PPUSH
// begin if not side_zone_locked = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] then
 259: LD_EXP 64
 263: PUSH
 264: LD_INT 0
 266: PUSH
 267: LD_INT 0
 269: PUSH
 270: LD_INT 0
 272: PUSH
 273: LD_INT 0
 275: PUSH
 276: LD_INT 0
 278: PUSH
 279: LD_INT 0
 281: PUSH
 282: LD_INT 0
 284: PUSH
 285: LD_INT 0
 287: PUSH
 288: EMPTY
 289: LIST
 290: LIST
 291: LIST
 292: LIST
 293: LIST
 294: LIST
 295: LIST
 296: LIST
 297: EQUAL
 298: NOT
 299: IFFALSE 305
// CYCLIC_CheckTransportsInZones ;
 301: CALL 17070 0 0
// enable ;
 305: ENABLE
// end ;
 306: PPOPN 2
 308: END
// every 0 0$1 trigger not side_transfer_pending = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] do var i , remaining ;
 309: LD_EXP 69
 313: PUSH
 314: LD_INT 0
 316: PUSH
 317: LD_INT 0
 319: PUSH
 320: LD_INT 0
 322: PUSH
 323: LD_INT 0
 325: PUSH
 326: LD_INT 0
 328: PUSH
 329: LD_INT 0
 331: PUSH
 332: LD_INT 0
 334: PUSH
 335: LD_INT 0
 337: PUSH
 338: EMPTY
 339: LIST
 340: LIST
 341: LIST
 342: LIST
 343: LIST
 344: LIST
 345: LIST
 346: LIST
 347: EQUAL
 348: NOT
 349: IFFALSE 518
 351: GO 353
 353: DISABLE
 354: LD_INT 0
 356: PPUSH
 357: PPUSH
// begin for i = 1 to 8 do
 358: LD_ADDR_VAR 0 1
 362: PUSH
 363: DOUBLE
 364: LD_INT 1
 366: DEC
 367: ST_TO_ADDR
 368: LD_INT 8
 370: PUSH
 371: FOR_TO
 372: IFFALSE 515
// begin if side_transfer_pending [ i ] = 1 then
 374: LD_EXP 69
 378: PUSH
 379: LD_VAR 0 1
 383: ARRAY
 384: PUSH
 385: LD_INT 1
 387: EQUAL
 388: IFFALSE 513
// begin remaining := side_transfer_clocks [ i ] - tick ;
 390: LD_ADDR_VAR 0 2
 394: PUSH
 395: LD_EXP 65
 399: PUSH
 400: LD_VAR 0 1
 404: ARRAY
 405: PUSH
 406: LD_OWVAR 1
 410: MINUS
 411: ST_TO_ADDR
// if tick >= side_transfer_clocks [ i ] then
 412: LD_OWVAR 1
 416: PUSH
 417: LD_EXP 65
 421: PUSH
 422: LD_VAR 0 1
 426: ARRAY
 427: GREATEREQUAL
 428: IFFALSE 484
// CYCLIC_FinalizeTransfer ( i , side_resources_remaining [ i ] [ 1 ] , side_resources_remaining [ i ] [ 2 ] , side_resources_remaining [ i ] [ 3 ] ) ;
 430: LD_VAR 0 1
 434: PPUSH
 435: LD_EXP 68
 439: PUSH
 440: LD_VAR 0 1
 444: ARRAY
 445: PUSH
 446: LD_INT 1
 448: ARRAY
 449: PPUSH
 450: LD_EXP 68
 454: PUSH
 455: LD_VAR 0 1
 459: ARRAY
 460: PUSH
 461: LD_INT 2
 463: ARRAY
 464: PPUSH
 465: LD_EXP 68
 469: PUSH
 470: LD_VAR 0 1
 474: ARRAY
 475: PUSH
 476: LD_INT 3
 478: ARRAY
 479: PPUSH
 480: CALL 17868 0 4
// if i = Your_Side then
 484: LD_VAR 0 1
 488: PUSH
 489: LD_OWVAR 2
 493: EQUAL
 494: IFFALSE 513
// ToLua ( LUA_UpdateClock( & remaining & ); ) ;
 496: LD_STRING LUA_UpdateClock(
 498: PUSH
 499: LD_VAR 0 2
 503: STR
 504: PUSH
 505: LD_STRING );
 507: STR
 508: PPUSH
 509: CALL_OW 559
// end ; end ;
 513: GO 371
 515: POP
 516: POP
// enable ;
 517: ENABLE
// end ; end_of_file
 518: PPOPN 2
 520: END
// export function INIT_LoadGameParams ; begin
 521: LD_INT 0
 523: PPUSH
// if Multiplayer then
 524: LD_OWVAR 4
 528: IFFALSE 758
// begin Game_Type := mp_game_type ;
 530: LD_ADDR_EXP 1
 534: PUSH
 535: LD_OWVAR 6
 539: ST_TO_ADDR
// Your_Side := mp_player_side ;
 540: LD_ADDR_OWVAR 2
 544: PUSH
 545: LD_OWVAR 7
 549: ST_TO_ADDR
// Side_Positions := mp_sides_positions ;
 550: LD_ADDR_EXP 2
 554: PUSH
 555: LD_OWVAR 17
 559: ST_TO_ADDR
// Side_Nations := mp_sides_nations ;
 560: LD_ADDR_EXP 3
 564: PUSH
 565: LD_OWVAR 16
 569: ST_TO_ADDR
// Side_Comps := mp_sides_comps ;
 570: LD_ADDR_EXP 4
 574: PUSH
 575: CALL 6122 0 0
 579: ST_TO_ADDR
// Side_Teams := mp_sides_teams ;
 580: LD_ADDR_EXP 5
 584: PUSH
 585: LD_OWVAR 15
 589: ST_TO_ADDR
// Teams := mp_teams ;
 590: LD_ADDR_EXP 6
 594: PUSH
 595: LD_OWVAR 12
 599: ST_TO_ADDR
// Choice_people_num := GetMultiplayerSetting ( 0 ) ;
 600: LD_ADDR_EXP 7
 604: PUSH
 605: LD_INT 0
 607: PPUSH
 608: CALL_OW 426
 612: ST_TO_ADDR
// Choice_experience := GetMultiplayerSetting ( 1 ) ;
 613: LD_ADDR_EXP 8
 617: PUSH
 618: LD_INT 1
 620: PPUSH
 621: CALL_OW 426
 625: ST_TO_ADDR
// Choice_starting_resources := GetMultiplayerSetting ( 2 ) ;
 626: LD_ADDR_EXP 9
 630: PUSH
 631: LD_INT 2
 633: PPUSH
 634: CALL_OW 426
 638: ST_TO_ADDR
// Choice_crate_spawn_rate := GetMultiplayerSetting ( 3 ) ;
 639: LD_ADDR_EXP 10
 643: PUSH
 644: LD_INT 3
 646: PPUSH
 647: CALL_OW 426
 651: ST_TO_ADDR
// Choice_people_spawn_rate := GetMultiplayerSetting ( 4 ) ;
 652: LD_ADDR_EXP 11
 656: PUSH
 657: LD_INT 4
 659: PPUSH
 660: CALL_OW 426
 664: ST_TO_ADDR
// Choice_spawn_fluctuation := GetMultiplayerSetting ( 5 ) ;
 665: LD_ADDR_EXP 12
 669: PUSH
 670: LD_INT 5
 672: PPUSH
 673: CALL_OW 426
 677: ST_TO_ADDR
// Choice_oil_abundance := GetMultiplayerSetting ( 6 ) ;
 678: LD_ADDR_EXP 13
 682: PUSH
 683: LD_INT 6
 685: PPUSH
 686: CALL_OW 426
 690: ST_TO_ADDR
// Choice_sib_abundance := GetMultiplayerSetting ( 7 ) ;
 691: LD_ADDR_EXP 14
 695: PUSH
 696: LD_INT 7
 698: PPUSH
 699: CALL_OW 426
 703: ST_TO_ADDR
// Choice_victory_cond := GetMultiplayerSetting ( 8 ) ;
 704: LD_ADDR_EXP 15
 708: PUSH
 709: LD_INT 8
 711: PPUSH
 712: CALL_OW 426
 716: ST_TO_ADDR
// Choice_reinforce_cost := GetMultiplayerSetting ( 9 ) ;
 717: LD_ADDR_EXP 16
 721: PUSH
 722: LD_INT 9
 724: PPUSH
 725: CALL_OW 426
 729: ST_TO_ADDR
// Choice_black_FoW := GetMultiplayerSetting ( 10 ) ;
 730: LD_ADDR_EXP 17
 734: PUSH
 735: LD_INT 10
 737: PPUSH
 738: CALL_OW 426
 742: ST_TO_ADDR
// Choice_starting_tech_lvl := GetMultiplayerSetting ( 11 ) ;
 743: LD_ADDR_EXP 18
 747: PUSH
 748: LD_INT 11
 750: PPUSH
 751: CALL_OW 426
 755: ST_TO_ADDR
// end else
 756: GO 1075
// begin RandomizeAll ;
 758: CALL_OW 11
// Game_Type := 1 ;
 762: LD_ADDR_EXP 1
 766: PUSH
 767: LD_INT 1
 769: ST_TO_ADDR
// Your_Side := 1 ;
 770: LD_ADDR_OWVAR 2
 774: PUSH
 775: LD_INT 1
 777: ST_TO_ADDR
// Side_Positions := [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] ;
 778: LD_ADDR_EXP 2
 782: PUSH
 783: LD_INT 1
 785: PUSH
 786: LD_INT 2
 788: PUSH
 789: LD_INT 3
 791: PUSH
 792: LD_INT 4
 794: PUSH
 795: LD_INT 5
 797: PUSH
 798: LD_INT 6
 800: PUSH
 801: LD_INT 7
 803: PUSH
 804: LD_INT 8
 806: PUSH
 807: EMPTY
 808: LIST
 809: LIST
 810: LIST
 811: LIST
 812: LIST
 813: LIST
 814: LIST
 815: LIST
 816: ST_TO_ADDR
// Side_Nations := [ 1 , 2 , 3 , 1 , 2 , 3 , 1 , 2 ] ;
 817: LD_ADDR_EXP 3
 821: PUSH
 822: LD_INT 1
 824: PUSH
 825: LD_INT 2
 827: PUSH
 828: LD_INT 3
 830: PUSH
 831: LD_INT 1
 833: PUSH
 834: LD_INT 2
 836: PUSH
 837: LD_INT 3
 839: PUSH
 840: LD_INT 1
 842: PUSH
 843: LD_INT 2
 845: PUSH
 846: EMPTY
 847: LIST
 848: LIST
 849: LIST
 850: LIST
 851: LIST
 852: LIST
 853: LIST
 854: LIST
 855: ST_TO_ADDR
// Side_Comps := [ 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 ] ;
 856: LD_ADDR_EXP 4
 860: PUSH
 861: LD_INT 1
 863: PUSH
 864: LD_INT 1
 866: PUSH
 867: LD_INT 1
 869: PUSH
 870: LD_INT 1
 872: PUSH
 873: LD_INT 1
 875: PUSH
 876: LD_INT 1
 878: PUSH
 879: LD_INT 1
 881: PUSH
 882: LD_INT 1
 884: PUSH
 885: EMPTY
 886: LIST
 887: LIST
 888: LIST
 889: LIST
 890: LIST
 891: LIST
 892: LIST
 893: LIST
 894: ST_TO_ADDR
// Side_Teams := [ 1 , 1 , 1 , 1 , 2 , 2 , 2 , 2 ] ;
 895: LD_ADDR_EXP 5
 899: PUSH
 900: LD_INT 1
 902: PUSH
 903: LD_INT 1
 905: PUSH
 906: LD_INT 1
 908: PUSH
 909: LD_INT 1
 911: PUSH
 912: LD_INT 2
 914: PUSH
 915: LD_INT 2
 917: PUSH
 918: LD_INT 2
 920: PUSH
 921: LD_INT 2
 923: PUSH
 924: EMPTY
 925: LIST
 926: LIST
 927: LIST
 928: LIST
 929: LIST
 930: LIST
 931: LIST
 932: LIST
 933: ST_TO_ADDR
// Teams := [ [ 1 , 2 , 3 , 4 ] , [ 5 , 6 , 7 , 8 ] ] ;
 934: LD_ADDR_EXP 6
 938: PUSH
 939: LD_INT 1
 941: PUSH
 942: LD_INT 2
 944: PUSH
 945: LD_INT 3
 947: PUSH
 948: LD_INT 4
 950: PUSH
 951: EMPTY
 952: LIST
 953: LIST
 954: LIST
 955: LIST
 956: PUSH
 957: LD_INT 5
 959: PUSH
 960: LD_INT 6
 962: PUSH
 963: LD_INT 7
 965: PUSH
 966: LD_INT 8
 968: PUSH
 969: EMPTY
 970: LIST
 971: LIST
 972: LIST
 973: LIST
 974: PUSH
 975: EMPTY
 976: LIST
 977: LIST
 978: ST_TO_ADDR
// Choice_people_num := 2 ;
 979: LD_ADDR_EXP 7
 983: PUSH
 984: LD_INT 2
 986: ST_TO_ADDR
// Choice_experience := 3 ;
 987: LD_ADDR_EXP 8
 991: PUSH
 992: LD_INT 3
 994: ST_TO_ADDR
// Choice_starting_resources := 3 ;
 995: LD_ADDR_EXP 9
 999: PUSH
1000: LD_INT 3
1002: ST_TO_ADDR
// Choice_crate_spawn_rate := 3 ;
1003: LD_ADDR_EXP 10
1007: PUSH
1008: LD_INT 3
1010: ST_TO_ADDR
// Choice_people_spawn_rate := 3 ;
1011: LD_ADDR_EXP 11
1015: PUSH
1016: LD_INT 3
1018: ST_TO_ADDR
// Choice_spawn_fluctuation := 0 ;
1019: LD_ADDR_EXP 12
1023: PUSH
1024: LD_INT 0
1026: ST_TO_ADDR
// Choice_oil_abundance := 0 ;
1027: LD_ADDR_EXP 13
1031: PUSH
1032: LD_INT 0
1034: ST_TO_ADDR
// Choice_sib_abundance := 0 ;
1035: LD_ADDR_EXP 14
1039: PUSH
1040: LD_INT 0
1042: ST_TO_ADDR
// Choice_victory_cond := 2 ;
1043: LD_ADDR_EXP 15
1047: PUSH
1048: LD_INT 2
1050: ST_TO_ADDR
// Choice_reinforce_cost := 1 ;
1051: LD_ADDR_EXP 16
1055: PUSH
1056: LD_INT 1
1058: ST_TO_ADDR
// Choice_black_FoW := 0 ;
1059: LD_ADDR_EXP 17
1063: PUSH
1064: LD_INT 0
1066: ST_TO_ADDR
// Choice_starting_tech_lvl := 0 ;
1067: LD_ADDR_EXP 18
1071: PUSH
1072: LD_INT 0
1074: ST_TO_ADDR
// end ; end ;
1075: LD_VAR 0 1
1079: RET
// export function INIT_ApplyGameParams ; var i ; begin
1080: LD_INT 0
1082: PPUSH
1083: PPUSH
// people_num := people_num [ Choice_people_num + 1 ] ;
1084: LD_ADDR_EXP 19
1088: PUSH
1089: LD_EXP 19
1093: PUSH
1094: LD_EXP 7
1098: PUSH
1099: LD_INT 1
1101: PLUS
1102: ARRAY
1103: ST_TO_ADDR
// experience := experience [ Choice_experience + 1 ] ;
1104: LD_ADDR_EXP 20
1108: PUSH
1109: LD_EXP 20
1113: PUSH
1114: LD_EXP 8
1118: PUSH
1119: LD_INT 1
1121: PLUS
1122: ARRAY
1123: ST_TO_ADDR
// starting_resources := starting_resources [ Choice_starting_resources + 1 ] ;
1124: LD_ADDR_EXP 21
1128: PUSH
1129: LD_EXP 21
1133: PUSH
1134: LD_EXP 9
1138: PUSH
1139: LD_INT 1
1141: PLUS
1142: ARRAY
1143: ST_TO_ADDR
// crate_spawn_rate := crate_spawn_rate [ Choice_crate_spawn_rate + 1 ] ;
1144: LD_ADDR_EXP 22
1148: PUSH
1149: LD_EXP 22
1153: PUSH
1154: LD_EXP 10
1158: PUSH
1159: LD_INT 1
1161: PLUS
1162: ARRAY
1163: ST_TO_ADDR
// people_spawn_rate := people_spawn_rate [ Choice_people_spawn_rate + 1 ] ;
1164: LD_ADDR_EXP 23
1168: PUSH
1169: LD_EXP 23
1173: PUSH
1174: LD_EXP 11
1178: PUSH
1179: LD_INT 1
1181: PLUS
1182: ARRAY
1183: ST_TO_ADDR
// spawn_fluctuation := spawn_fluctuation [ Choice_spawn_fluctuation + 1 ] ;
1184: LD_ADDR_EXP 24
1188: PUSH
1189: LD_EXP 24
1193: PUSH
1194: LD_EXP 12
1198: PUSH
1199: LD_INT 1
1201: PLUS
1202: ARRAY
1203: ST_TO_ADDR
// fluctuation_base_crates := fluctuation_base_crates [ Choice_crate_spawn_rate + 1 ] ;
1204: LD_ADDR_EXP 37
1208: PUSH
1209: LD_EXP 37
1213: PUSH
1214: LD_EXP 10
1218: PUSH
1219: LD_INT 1
1221: PLUS
1222: ARRAY
1223: ST_TO_ADDR
// fluctuation_base_humans := fluctuation_base_humans [ Choice_people_spawn_rate + 1 ] ;
1224: LD_ADDR_EXP 38
1228: PUSH
1229: LD_EXP 38
1233: PUSH
1234: LD_EXP 11
1238: PUSH
1239: LD_INT 1
1241: PLUS
1242: ARRAY
1243: ST_TO_ADDR
// oil_abundance := oil_abundance [ Choice_oil_abundance + 1 ] ;
1244: LD_ADDR_EXP 25
1248: PUSH
1249: LD_EXP 25
1253: PUSH
1254: LD_EXP 13
1258: PUSH
1259: LD_INT 1
1261: PLUS
1262: ARRAY
1263: ST_TO_ADDR
// sib_abundance := sib_abundance [ Choice_sib_abundance + 1 ] ;
1264: LD_ADDR_EXP 26
1268: PUSH
1269: LD_EXP 26
1273: PUSH
1274: LD_EXP 14
1278: PUSH
1279: LD_INT 1
1281: PLUS
1282: ARRAY
1283: ST_TO_ADDR
// victory_cond := victory_cond [ Choice_victory_cond + 1 ] ;
1284: LD_ADDR_EXP 27
1288: PUSH
1289: LD_EXP 27
1293: PUSH
1294: LD_EXP 15
1298: PUSH
1299: LD_INT 1
1301: PLUS
1302: ARRAY
1303: ST_TO_ADDR
// reinforce_cost := reinforce_cost [ Choice_reinforce_cost + 1 ] ;
1304: LD_ADDR_EXP 28
1308: PUSH
1309: LD_EXP 28
1313: PUSH
1314: LD_EXP 16
1318: PUSH
1319: LD_INT 1
1321: PLUS
1322: ARRAY
1323: ST_TO_ADDR
// soldier_limit := people_num [ Choice_people_num + 1 ] ;
1324: LD_ADDR_EXP 48
1328: PUSH
1329: LD_EXP 19
1333: PUSH
1334: LD_EXP 7
1338: PUSH
1339: LD_INT 1
1341: PLUS
1342: ARRAY
1343: ST_TO_ADDR
// black_fow := Choice_black_FoW ;
1344: LD_ADDR_EXP 29
1348: PUSH
1349: LD_EXP 17
1353: ST_TO_ADDR
// starting_tech_lvl := Choice_starting_tech_lvl ;
1354: LD_ADDR_EXP 30
1358: PUSH
1359: LD_EXP 18
1363: ST_TO_ADDR
// CLOCK_crate_spawn := crate_spawn_rate ;
1364: LD_ADDR_EXP 50
1368: PUSH
1369: LD_EXP 22
1373: ST_TO_ADDR
// CLOCK_human_spawn := people_spawn_rate ;
1374: LD_ADDR_EXP 51
1378: PUSH
1379: LD_EXP 23
1383: ST_TO_ADDR
// CLOCK_fluctuation := spawn_fluctuation ;
1384: LD_ADDR_EXP 52
1388: PUSH
1389: LD_EXP 24
1393: ST_TO_ADDR
// for i = 1 to Side_Positions do
1394: LD_ADDR_VAR 0 2
1398: PUSH
1399: DOUBLE
1400: LD_INT 1
1402: DEC
1403: ST_TO_ADDR
1404: LD_EXP 2
1408: PUSH
1409: FOR_TO
1410: IFFALSE 1475
// begin if not Side_Positions [ i ] then
1412: LD_EXP 2
1416: PUSH
1417: LD_VAR 0 2
1421: ARRAY
1422: NOT
1423: IFFALSE 1450
// side_isalive := Replace ( side_isalive , i , 0 ) else
1425: LD_ADDR_EXP 53
1429: PUSH
1430: LD_EXP 53
1434: PPUSH
1435: LD_VAR 0 2
1439: PPUSH
1440: LD_INT 0
1442: PPUSH
1443: CALL_OW 1
1447: ST_TO_ADDR
1448: GO 1473
// side_isalive := Replace ( side_isalive , i , 1 ) ;
1450: LD_ADDR_EXP 53
1454: PUSH
1455: LD_EXP 53
1459: PPUSH
1460: LD_VAR 0 2
1464: PPUSH
1465: LD_INT 1
1467: PPUSH
1468: CALL_OW 1
1472: ST_TO_ADDR
// end ;
1473: GO 1409
1475: POP
1476: POP
// if victory_cond = 0 then
1477: LD_EXP 27
1481: PUSH
1482: LD_INT 0
1484: EQUAL
1485: IFFALSE 1496
// ToLua ( Deathmatch = 1; ) else
1487: LD_STRING Deathmatch = 1;
1489: PPUSH
1490: CALL_OW 559
1494: GO 1503
// ToLua ( Deathmatch = 0; ) ;
1496: LD_STRING Deathmatch = 0;
1498: PPUSH
1499: CALL_OW 559
// end ;
1503: LD_VAR 0 1
1507: RET
// export function INIT_GenerateDeposits ; var x , y , i , j , pool_oil_deposits , pool_siberite_deposits ; begin
1508: LD_INT 0
1510: PPUSH
1511: PPUSH
1512: PPUSH
1513: PPUSH
1514: PPUSH
1515: PPUSH
1516: PPUSH
// pool_oil_deposits := available_oil_deposits ;
1517: LD_ADDR_VAR 0 6
1521: PUSH
1522: LD_EXP 32
1526: ST_TO_ADDR
// pool_siberite_deposits := available_siberite_deposits ;
1527: LD_ADDR_VAR 0 7
1531: PUSH
1532: LD_EXP 33
1536: ST_TO_ADDR
// i := 0 ;
1537: LD_ADDR_VAR 0 4
1541: PUSH
1542: LD_INT 0
1544: ST_TO_ADDR
// while i < oil_abundance do
1545: LD_VAR 0 4
1549: PUSH
1550: LD_EXP 25
1554: LESS
1555: IFFALSE 1803
// begin for j = 1 to pool_oil_deposits do
1557: LD_ADDR_VAR 0 5
1561: PUSH
1562: DOUBLE
1563: LD_INT 1
1565: DEC
1566: ST_TO_ADDR
1567: LD_VAR 0 6
1571: PUSH
1572: FOR_TO
1573: IFFALSE 1799
// begin i := i + 1 ;
1575: LD_ADDR_VAR 0 4
1579: PUSH
1580: LD_VAR 0 4
1584: PUSH
1585: LD_INT 1
1587: PLUS
1588: ST_TO_ADDR
// x := length ( pool_oil_deposits [ j ] ) ;
1589: LD_ADDR_VAR 0 2
1593: PUSH
1594: LD_VAR 0 6
1598: PUSH
1599: LD_VAR 0 5
1603: ARRAY
1604: PPUSH
1605: CALL 6074 0 1
1609: ST_TO_ADDR
// y := Rand ( 1 , x ) ;
1610: LD_ADDR_VAR 0 3
1614: PUSH
1615: LD_INT 1
1617: PPUSH
1618: LD_VAR 0 2
1622: PPUSH
1623: CALL_OW 12
1627: ST_TO_ADDR
// CreateDepositXY ( pool_oil_deposits [ j ] [ y ] [ 1 ] [ 1 ] , pool_oil_deposits [ j ] [ y ] [ 1 ] [ 2 ] , mat_oil ) ;
1628: LD_VAR 0 6
1632: PUSH
1633: LD_VAR 0 5
1637: ARRAY
1638: PUSH
1639: LD_VAR 0 3
1643: ARRAY
1644: PUSH
1645: LD_INT 1
1647: ARRAY
1648: PUSH
1649: LD_INT 1
1651: ARRAY
1652: PPUSH
1653: LD_VAR 0 6
1657: PUSH
1658: LD_VAR 0 5
1662: ARRAY
1663: PUSH
1664: LD_VAR 0 3
1668: ARRAY
1669: PUSH
1670: LD_INT 1
1672: ARRAY
1673: PUSH
1674: LD_INT 2
1676: ARRAY
1677: PPUSH
1678: LD_INT 2
1680: PPUSH
1681: CALL_OW 62
// CreateDepositXY ( pool_oil_deposits [ j ] [ y ] [ 2 ] [ 1 ] , pool_oil_deposits [ j ] [ y ] [ 2 ] [ 2 ] , mat_oil ) ;
1685: LD_VAR 0 6
1689: PUSH
1690: LD_VAR 0 5
1694: ARRAY
1695: PUSH
1696: LD_VAR 0 3
1700: ARRAY
1701: PUSH
1702: LD_INT 2
1704: ARRAY
1705: PUSH
1706: LD_INT 1
1708: ARRAY
1709: PPUSH
1710: LD_VAR 0 6
1714: PUSH
1715: LD_VAR 0 5
1719: ARRAY
1720: PUSH
1721: LD_VAR 0 3
1725: ARRAY
1726: PUSH
1727: LD_INT 2
1729: ARRAY
1730: PUSH
1731: LD_INT 2
1733: ARRAY
1734: PPUSH
1735: LD_INT 2
1737: PPUSH
1738: CALL_OW 62
// pool_oil_deposits := Replace ( pool_oil_deposits , j , Delete ( pool_oil_deposits [ j ] , y ) ) ;
1742: LD_ADDR_VAR 0 6
1746: PUSH
1747: LD_VAR 0 6
1751: PPUSH
1752: LD_VAR 0 5
1756: PPUSH
1757: LD_VAR 0 6
1761: PUSH
1762: LD_VAR 0 5
1766: ARRAY
1767: PPUSH
1768: LD_VAR 0 3
1772: PPUSH
1773: CALL_OW 3
1777: PPUSH
1778: CALL_OW 1
1782: ST_TO_ADDR
// if i >= oil_abundance then
1783: LD_VAR 0 4
1787: PUSH
1788: LD_EXP 25
1792: GREATEREQUAL
1793: IFFALSE 1797
// break ;
1795: GO 1799
// end ;
1797: GO 1572
1799: POP
1800: POP
// end ;
1801: GO 1545
// i := 0 ;
1803: LD_ADDR_VAR 0 4
1807: PUSH
1808: LD_INT 0
1810: ST_TO_ADDR
// while i < sib_abundance do
1811: LD_VAR 0 4
1815: PUSH
1816: LD_EXP 26
1820: LESS
1821: IFFALSE 2069
// begin for j = 1 to pool_siberite_deposits do
1823: LD_ADDR_VAR 0 5
1827: PUSH
1828: DOUBLE
1829: LD_INT 1
1831: DEC
1832: ST_TO_ADDR
1833: LD_VAR 0 7
1837: PUSH
1838: FOR_TO
1839: IFFALSE 2065
// begin i := i + 1 ;
1841: LD_ADDR_VAR 0 4
1845: PUSH
1846: LD_VAR 0 4
1850: PUSH
1851: LD_INT 1
1853: PLUS
1854: ST_TO_ADDR
// x := length ( pool_siberite_deposits [ j ] ) ;
1855: LD_ADDR_VAR 0 2
1859: PUSH
1860: LD_VAR 0 7
1864: PUSH
1865: LD_VAR 0 5
1869: ARRAY
1870: PPUSH
1871: CALL 6074 0 1
1875: ST_TO_ADDR
// y := Rand ( 1 , x ) ;
1876: LD_ADDR_VAR 0 3
1880: PUSH
1881: LD_INT 1
1883: PPUSH
1884: LD_VAR 0 2
1888: PPUSH
1889: CALL_OW 12
1893: ST_TO_ADDR
// CreateDepositXY ( pool_siberite_deposits [ j ] [ y ] [ 1 ] [ 1 ] , pool_siberite_deposits [ j ] [ y ] [ 1 ] [ 2 ] , mat_siberit ) ;
1894: LD_VAR 0 7
1898: PUSH
1899: LD_VAR 0 5
1903: ARRAY
1904: PUSH
1905: LD_VAR 0 3
1909: ARRAY
1910: PUSH
1911: LD_INT 1
1913: ARRAY
1914: PUSH
1915: LD_INT 1
1917: ARRAY
1918: PPUSH
1919: LD_VAR 0 7
1923: PUSH
1924: LD_VAR 0 5
1928: ARRAY
1929: PUSH
1930: LD_VAR 0 3
1934: ARRAY
1935: PUSH
1936: LD_INT 1
1938: ARRAY
1939: PUSH
1940: LD_INT 2
1942: ARRAY
1943: PPUSH
1944: LD_INT 3
1946: PPUSH
1947: CALL_OW 62
// CreateDepositXY ( pool_siberite_deposits [ j ] [ y ] [ 2 ] [ 1 ] , pool_siberite_deposits [ j ] [ y ] [ 2 ] [ 2 ] , mat_siberit ) ;
1951: LD_VAR 0 7
1955: PUSH
1956: LD_VAR 0 5
1960: ARRAY
1961: PUSH
1962: LD_VAR 0 3
1966: ARRAY
1967: PUSH
1968: LD_INT 2
1970: ARRAY
1971: PUSH
1972: LD_INT 1
1974: ARRAY
1975: PPUSH
1976: LD_VAR 0 7
1980: PUSH
1981: LD_VAR 0 5
1985: ARRAY
1986: PUSH
1987: LD_VAR 0 3
1991: ARRAY
1992: PUSH
1993: LD_INT 2
1995: ARRAY
1996: PUSH
1997: LD_INT 2
1999: ARRAY
2000: PPUSH
2001: LD_INT 3
2003: PPUSH
2004: CALL_OW 62
// pool_siberite_deposits := Replace ( pool_siberite_deposits , j , Delete ( pool_siberite_deposits [ j ] , y ) ) ;
2008: LD_ADDR_VAR 0 7
2012: PUSH
2013: LD_VAR 0 7
2017: PPUSH
2018: LD_VAR 0 5
2022: PPUSH
2023: LD_VAR 0 7
2027: PUSH
2028: LD_VAR 0 5
2032: ARRAY
2033: PPUSH
2034: LD_VAR 0 3
2038: PPUSH
2039: CALL_OW 3
2043: PPUSH
2044: CALL_OW 1
2048: ST_TO_ADDR
// if i >= sib_abundance then
2049: LD_VAR 0 4
2053: PUSH
2054: LD_EXP 26
2058: GREATEREQUAL
2059: IFFALSE 2063
// break ;
2061: GO 2065
// end ;
2063: GO 1838
2065: POP
2066: POP
// end ;
2067: GO 1811
// end ;
2069: LD_VAR 0 1
2073: RET
// export function INIT_SetUpAllies ; var i , j ; begin
2074: LD_INT 0
2076: PPUSH
2077: PPUSH
2078: PPUSH
// for i = 1 to 8 do
2079: LD_ADDR_VAR 0 2
2083: PUSH
2084: DOUBLE
2085: LD_INT 1
2087: DEC
2088: ST_TO_ADDR
2089: LD_INT 8
2091: PUSH
2092: FOR_TO
2093: IFFALSE 2183
// for j = 1 to 8 do
2095: LD_ADDR_VAR 0 3
2099: PUSH
2100: DOUBLE
2101: LD_INT 1
2103: DEC
2104: ST_TO_ADDR
2105: LD_INT 8
2107: PUSH
2108: FOR_TO
2109: IFFALSE 2179
// begin if Side_Teams [ i ] = Side_Teams [ j ] then
2111: LD_EXP 5
2115: PUSH
2116: LD_VAR 0 2
2120: ARRAY
2121: PUSH
2122: LD_EXP 5
2126: PUSH
2127: LD_VAR 0 3
2131: ARRAY
2132: EQUAL
2133: IFFALSE 2157
// SetAttitude ( i , j , att_friend , true ) else
2135: LD_VAR 0 2
2139: PPUSH
2140: LD_VAR 0 3
2144: PPUSH
2145: LD_INT 1
2147: PPUSH
2148: LD_INT 1
2150: PPUSH
2151: CALL_OW 80
2155: GO 2177
// SetAttitude ( i , j , att_enemy , true ) ;
2157: LD_VAR 0 2
2161: PPUSH
2162: LD_VAR 0 3
2166: PPUSH
2167: LD_INT 2
2169: PPUSH
2170: LD_INT 1
2172: PPUSH
2173: CALL_OW 80
// end ;
2177: GO 2108
2179: POP
2180: POP
2181: GO 2092
2183: POP
2184: POP
// for i = 1 to 8 do
2185: LD_ADDR_VAR 0 2
2189: PUSH
2190: DOUBLE
2191: LD_INT 1
2193: DEC
2194: ST_TO_ADDR
2195: LD_INT 8
2197: PUSH
2198: FOR_TO
2199: IFFALSE 2223
// ChangeSideFog ( i , Side_Teams [ i ] ) ;
2201: LD_VAR 0 2
2205: PPUSH
2206: LD_EXP 5
2210: PUSH
2211: LD_VAR 0 2
2215: ARRAY
2216: PPUSH
2217: CALL_OW 343
2221: GO 2198
2223: POP
2224: POP
// FogOff ( 0 ) ;
2225: LD_INT 0
2227: PPUSH
2228: CALL_OW 344
// ResetFog ;
2232: CALL_OW 335
// if black_fow then
2236: LD_EXP 29
2240: IFFALSE 2271
// for i = 1 to 8 do
2242: LD_ADDR_VAR 0 2
2246: PUSH
2247: DOUBLE
2248: LD_INT 1
2250: DEC
2251: ST_TO_ADDR
2252: LD_INT 8
2254: PUSH
2255: FOR_TO
2256: IFFALSE 2269
// ClearAllFogForSide ( i ) ;
2258: LD_VAR 0 2
2262: PPUSH
2263: CALL_OW 520
2267: GO 2255
2269: POP
2270: POP
// end ;
2271: LD_VAR 0 1
2275: RET
// export function INIT_SetUpTechs ; var i ; begin
2276: LD_INT 0
2278: PPUSH
2279: PPUSH
// for i = 1 to 8 do
2280: LD_ADDR_VAR 0 2
2284: PUSH
2285: DOUBLE
2286: LD_INT 1
2288: DEC
2289: ST_TO_ADDR
2290: LD_INT 8
2292: PUSH
2293: FOR_TO
2294: IFFALSE 2357
// begin DisableAllTechs ( i ) ;
2296: LD_VAR 0 2
2300: PPUSH
2301: CALL 7037 0 1
// side_tech_lvl := Replace ( side_tech_lvl , i , starting_tech_lvl ) ;
2305: LD_ADDR_EXP 31
2309: PUSH
2310: LD_EXP 31
2314: PPUSH
2315: LD_VAR 0 2
2319: PPUSH
2320: LD_EXP 30
2324: PPUSH
2325: CALL_OW 1
2329: ST_TO_ADDR
// TechUpgrade ( starting_tech_lvl , Side_Nations [ i ] , i ) ;
2330: LD_EXP 30
2334: PPUSH
2335: LD_EXP 3
2339: PUSH
2340: LD_VAR 0 2
2344: ARRAY
2345: PPUSH
2346: LD_VAR 0 2
2350: PPUSH
2351: CALL 7539 0 3
// end ;
2355: GO 2293
2357: POP
2358: POP
// end ;
2359: LD_VAR 0 1
2363: RET
// export function INIT_ActivateLUAInterface ; var colour , tech , i ; begin
2364: LD_INT 0
2366: PPUSH
2367: PPUSH
2368: PPUSH
2369: PPUSH
// if victory_cond = 0 then
2370: LD_EXP 27
2374: PUSH
2375: LD_INT 0
2377: EQUAL
2378: IFFALSE 2389
// ToLua ( Deathmatch = 1; ) else
2380: LD_STRING Deathmatch = 1;
2382: PPUSH
2383: CALL_OW 559
2387: GO 2396
// ToLua ( Deathmatch = 0; ) ;
2389: LD_STRING Deathmatch = 0;
2391: PPUSH
2392: CALL_OW 559
// if Your_Side >= 1 and Your_Side <= 8 then
2396: LD_OWVAR 2
2400: PUSH
2401: LD_INT 1
2403: GREATEREQUAL
2404: PUSH
2405: LD_OWVAR 2
2409: PUSH
2410: LD_INT 8
2412: LESSEQUAL
2413: AND
2414: IFFALSE 2465
// begin ToLua ( LUA_UpdateSideInterface( & Your_Side & , & side_tech_lvl [ Your_Side ] & ); ) ;
2416: LD_STRING LUA_UpdateSideInterface(
2418: PUSH
2419: LD_OWVAR 2
2423: STR
2424: PUSH
2425: LD_STRING ,
2427: STR
2428: PUSH
2429: LD_EXP 31
2433: PUSH
2434: LD_OWVAR 2
2438: ARRAY
2439: STR
2440: PUSH
2441: LD_STRING );
2443: STR
2444: PPUSH
2445: CALL_OW 559
// ToLua ( StartSideInterface(); ) ;
2449: LD_STRING StartSideInterface();
2451: PPUSH
2452: CALL_OW 559
// ToLua ( LUA_NoDepot(); ) ;
2456: LD_STRING LUA_NoDepot();
2458: PPUSH
2459: CALL_OW 559
// end else
2463: GO 2584
// begin for i = 1 to 8 do
2465: LD_ADDR_VAR 0 4
2469: PUSH
2470: DOUBLE
2471: LD_INT 1
2473: DEC
2474: ST_TO_ADDR
2475: LD_INT 8
2477: PUSH
2478: FOR_TO
2479: IFFALSE 2575
// begin colour := i ;
2481: LD_ADDR_VAR 0 2
2485: PUSH
2486: LD_VAR 0 4
2490: ST_TO_ADDR
// tech := side_tech_lvl [ i ] ;
2491: LD_ADDR_VAR 0 3
2495: PUSH
2496: LD_EXP 31
2500: PUSH
2501: LD_VAR 0 4
2505: ARRAY
2506: ST_TO_ADDR
// if not Side_Positions [ i ] then
2507: LD_EXP 2
2511: PUSH
2512: LD_VAR 0 4
2516: ARRAY
2517: NOT
2518: IFFALSE 2536
// begin colour := 0 ;
2520: LD_ADDR_VAR 0 2
2524: PUSH
2525: LD_INT 0
2527: ST_TO_ADDR
// tech := "X" ;
2528: LD_ADDR_VAR 0 3
2532: PUSH
2533: LD_STRING "X"
2535: ST_TO_ADDR
// end ; ToLua ( LUA_RenderSpecLabels( & i & , & colour & , & tech & ); ) ;
2536: LD_STRING LUA_RenderSpecLabels(
2538: PUSH
2539: LD_VAR 0 4
2543: STR
2544: PUSH
2545: LD_STRING ,
2547: STR
2548: PUSH
2549: LD_VAR 0 2
2553: STR
2554: PUSH
2555: LD_STRING ,
2557: STR
2558: PUSH
2559: LD_VAR 0 3
2563: STR
2564: PUSH
2565: LD_STRING );
2567: STR
2568: PPUSH
2569: CALL_OW 559
// end ;
2573: GO 2478
2575: POP
2576: POP
// ToLua ( StartSpecInterface(); ) ;
2577: LD_STRING StartSpecInterface();
2579: PPUSH
2580: CALL_OW 559
// end ; end ;
2584: LD_VAR 0 1
2588: RET
// export function INIT_PrepareSquad ; var i , j , commander , profession , attributes , basic_skills , skill_levels , importance , stat_array ; begin
2589: LD_INT 0
2591: PPUSH
2592: PPUSH
2593: PPUSH
2594: PPUSH
2595: PPUSH
2596: PPUSH
2597: PPUSH
2598: PPUSH
2599: PPUSH
2600: PPUSH
// stat_array := [ ] ;
2601: LD_ADDR_VAR 0 10
2605: PUSH
2606: EMPTY
2607: ST_TO_ADDR
// for i = 1 to people_num [ 1 ] do
2608: LD_ADDR_VAR 0 2
2612: PUSH
2613: DOUBLE
2614: LD_INT 1
2616: DEC
2617: ST_TO_ADDR
2618: LD_EXP 19
2622: PUSH
2623: LD_INT 1
2625: ARRAY
2626: PUSH
2627: FOR_TO
2628: IFFALSE 2845
// begin commander := 1 ;
2630: LD_ADDR_VAR 0 4
2634: PUSH
2635: LD_INT 1
2637: ST_TO_ADDR
// profession := 1 ;
2638: LD_ADDR_VAR 0 5
2642: PUSH
2643: LD_INT 1
2645: ST_TO_ADDR
// attributes := [ Rand ( 10 , 15 ) , Rand ( 9 , 11 ) ] ;
2646: LD_ADDR_VAR 0 6
2650: PUSH
2651: LD_INT 10
2653: PPUSH
2654: LD_INT 15
2656: PPUSH
2657: CALL_OW 12
2661: PUSH
2662: LD_INT 9
2664: PPUSH
2665: LD_INT 11
2667: PPUSH
2668: CALL_OW 12
2672: PUSH
2673: EMPTY
2674: LIST
2675: LIST
2676: ST_TO_ADDR
// basic_skills := [ Rand ( 1 , 3 ) , 0 , 0 , 0 ] ;
2677: LD_ADDR_VAR 0 7
2681: PUSH
2682: LD_INT 1
2684: PPUSH
2685: LD_INT 3
2687: PPUSH
2688: CALL_OW 12
2692: PUSH
2693: LD_INT 0
2695: PUSH
2696: LD_INT 0
2698: PUSH
2699: LD_INT 0
2701: PUSH
2702: EMPTY
2703: LIST
2704: LIST
2705: LIST
2706: LIST
2707: ST_TO_ADDR
// skill_levels := [ basic_skills [ 1 ] + experience , Rand ( 0 , experience ) , Rand ( 0 , experience ) , Rand ( 0 , experience ) ] ;
2708: LD_ADDR_VAR 0 8
2712: PUSH
2713: LD_VAR 0 7
2717: PUSH
2718: LD_INT 1
2720: ARRAY
2721: PUSH
2722: LD_EXP 20
2726: PLUS
2727: PUSH
2728: LD_INT 0
2730: PPUSH
2731: LD_EXP 20
2735: PPUSH
2736: CALL_OW 12
2740: PUSH
2741: LD_INT 0
2743: PPUSH
2744: LD_EXP 20
2748: PPUSH
2749: CALL_OW 12
2753: PUSH
2754: LD_INT 0
2756: PPUSH
2757: LD_EXP 20
2761: PPUSH
2762: CALL_OW 12
2766: PUSH
2767: EMPTY
2768: LIST
2769: LIST
2770: LIST
2771: LIST
2772: ST_TO_ADDR
// importance := 105 ;
2773: LD_ADDR_VAR 0 9
2777: PUSH
2778: LD_INT 105
2780: ST_TO_ADDR
// stat_array := Replace ( stat_array , stat_array + 1 , [ commander , profession , attributes , basic_skills , skill_levels , importance ] ) ;
2781: LD_ADDR_VAR 0 10
2785: PUSH
2786: LD_VAR 0 10
2790: PPUSH
2791: LD_VAR 0 10
2795: PUSH
2796: LD_INT 1
2798: PLUS
2799: PPUSH
2800: LD_VAR 0 4
2804: PUSH
2805: LD_VAR 0 5
2809: PUSH
2810: LD_VAR 0 6
2814: PUSH
2815: LD_VAR 0 7
2819: PUSH
2820: LD_VAR 0 8
2824: PUSH
2825: LD_VAR 0 9
2829: PUSH
2830: EMPTY
2831: LIST
2832: LIST
2833: LIST
2834: LIST
2835: LIST
2836: LIST
2837: PPUSH
2838: CALL_OW 1
2842: ST_TO_ADDR
// end ;
2843: GO 2627
2845: POP
2846: POP
// for j = 2 to people_num do
2847: LD_ADDR_VAR 0 3
2851: PUSH
2852: DOUBLE
2853: LD_INT 2
2855: DEC
2856: ST_TO_ADDR
2857: LD_EXP 19
2861: PUSH
2862: FOR_TO
2863: IFFALSE 3184
// begin commander := 0 ;
2865: LD_ADDR_VAR 0 4
2869: PUSH
2870: LD_INT 0
2872: ST_TO_ADDR
// attributes := [ Rand ( 8 , 12 ) , Rand ( 8 , 12 ) ] ;
2873: LD_ADDR_VAR 0 6
2877: PUSH
2878: LD_INT 8
2880: PPUSH
2881: LD_INT 12
2883: PPUSH
2884: CALL_OW 12
2888: PUSH
2889: LD_INT 8
2891: PPUSH
2892: LD_INT 12
2894: PPUSH
2895: CALL_OW 12
2899: PUSH
2900: EMPTY
2901: LIST
2902: LIST
2903: ST_TO_ADDR
// importance := 0 ;
2904: LD_ADDR_VAR 0 9
2908: PUSH
2909: LD_INT 0
2911: ST_TO_ADDR
// profession := j - 1 ;
2912: LD_ADDR_VAR 0 5
2916: PUSH
2917: LD_VAR 0 3
2921: PUSH
2922: LD_INT 1
2924: MINUS
2925: ST_TO_ADDR
// for i = 1 to people_num [ j ] do
2926: LD_ADDR_VAR 0 2
2930: PUSH
2931: DOUBLE
2932: LD_INT 1
2934: DEC
2935: ST_TO_ADDR
2936: LD_EXP 19
2940: PUSH
2941: LD_VAR 0 3
2945: ARRAY
2946: PUSH
2947: FOR_TO
2948: IFFALSE 3180
// begin basic_skills := [ 0 , 0 , 0 , 0 ] ;
2950: LD_ADDR_VAR 0 7
2954: PUSH
2955: LD_INT 0
2957: PUSH
2958: LD_INT 0
2960: PUSH
2961: LD_INT 0
2963: PUSH
2964: LD_INT 0
2966: PUSH
2967: EMPTY
2968: LIST
2969: LIST
2970: LIST
2971: LIST
2972: ST_TO_ADDR
// skill_levels := [ Rand ( 0 , experience ) , Rand ( 0 , experience ) , Rand ( 0 , experience ) , Rand ( 0 , experience ) ] ;
2973: LD_ADDR_VAR 0 8
2977: PUSH
2978: LD_INT 0
2980: PPUSH
2981: LD_EXP 20
2985: PPUSH
2986: CALL_OW 12
2990: PUSH
2991: LD_INT 0
2993: PPUSH
2994: LD_EXP 20
2998: PPUSH
2999: CALL_OW 12
3003: PUSH
3004: LD_INT 0
3006: PPUSH
3007: LD_EXP 20
3011: PPUSH
3012: CALL_OW 12
3016: PUSH
3017: LD_INT 0
3019: PPUSH
3020: LD_EXP 20
3024: PPUSH
3025: CALL_OW 12
3029: PUSH
3030: EMPTY
3031: LIST
3032: LIST
3033: LIST
3034: LIST
3035: ST_TO_ADDR
// basic_skills := Replace ( basic_skills , j - 1 , Rand ( 0 , 2 ) ) ;
3036: LD_ADDR_VAR 0 7
3040: PUSH
3041: LD_VAR 0 7
3045: PPUSH
3046: LD_VAR 0 3
3050: PUSH
3051: LD_INT 1
3053: MINUS
3054: PPUSH
3055: LD_INT 0
3057: PPUSH
3058: LD_INT 2
3060: PPUSH
3061: CALL_OW 12
3065: PPUSH
3066: CALL_OW 1
3070: ST_TO_ADDR
// skill_levels := Replace ( skill_levels , j - 1 , basic_skills [ j - 1 ] + experience ) ;
3071: LD_ADDR_VAR 0 8
3075: PUSH
3076: LD_VAR 0 8
3080: PPUSH
3081: LD_VAR 0 3
3085: PUSH
3086: LD_INT 1
3088: MINUS
3089: PPUSH
3090: LD_VAR 0 7
3094: PUSH
3095: LD_VAR 0 3
3099: PUSH
3100: LD_INT 1
3102: MINUS
3103: ARRAY
3104: PUSH
3105: LD_EXP 20
3109: PLUS
3110: PPUSH
3111: CALL_OW 1
3115: ST_TO_ADDR
// stat_array := Replace ( stat_array , stat_array + 1 , [ commander , profession , attributes , basic_skills , skill_levels , importance ] ) ;
3116: LD_ADDR_VAR 0 10
3120: PUSH
3121: LD_VAR 0 10
3125: PPUSH
3126: LD_VAR 0 10
3130: PUSH
3131: LD_INT 1
3133: PLUS
3134: PPUSH
3135: LD_VAR 0 4
3139: PUSH
3140: LD_VAR 0 5
3144: PUSH
3145: LD_VAR 0 6
3149: PUSH
3150: LD_VAR 0 7
3154: PUSH
3155: LD_VAR 0 8
3159: PUSH
3160: LD_VAR 0 9
3164: PUSH
3165: EMPTY
3166: LIST
3167: LIST
3168: LIST
3169: LIST
3170: LIST
3171: LIST
3172: PPUSH
3173: CALL_OW 1
3177: ST_TO_ADDR
// end ;
3178: GO 2947
3180: POP
3181: POP
// end ;
3182: GO 2862
3184: POP
3185: POP
// composition := stat_array ;
3186: LD_ADDR_EXP 43
3190: PUSH
3191: LD_VAR 0 10
3195: ST_TO_ADDR
// end ;
3196: LD_VAR 0 1
3200: RET
// export function INIT_SpawnStartingUnits ; var i , j , human , vehicle , crates , oil , siberite , cargo_capacity , vehicle_amount , bulk ; begin
3201: LD_INT 0
3203: PPUSH
3204: PPUSH
3205: PPUSH
3206: PPUSH
3207: PPUSH
3208: PPUSH
3209: PPUSH
3210: PPUSH
3211: PPUSH
3212: PPUSH
3213: PPUSH
// side_soldiers := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
3214: LD_ADDR_EXP 46
3218: PUSH
3219: EMPTY
3220: PUSH
3221: EMPTY
3222: PUSH
3223: EMPTY
3224: PUSH
3225: EMPTY
3226: PUSH
3227: EMPTY
3228: PUSH
3229: EMPTY
3230: PUSH
3231: EMPTY
3232: PUSH
3233: EMPTY
3234: PUSH
3235: EMPTY
3236: LIST
3237: LIST
3238: LIST
3239: LIST
3240: LIST
3241: LIST
3242: LIST
3243: LIST
3244: ST_TO_ADDR
// side_vehicles := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
3245: LD_ADDR_EXP 49
3249: PUSH
3250: EMPTY
3251: PUSH
3252: EMPTY
3253: PUSH
3254: EMPTY
3255: PUSH
3256: EMPTY
3257: PUSH
3258: EMPTY
3259: PUSH
3260: EMPTY
3261: PUSH
3262: EMPTY
3263: PUSH
3264: EMPTY
3265: PUSH
3266: EMPTY
3267: LIST
3268: LIST
3269: LIST
3270: LIST
3271: LIST
3272: LIST
3273: LIST
3274: LIST
3275: ST_TO_ADDR
// vehicle_amount := 0 ;
3276: LD_ADDR_VAR 0 10
3280: PUSH
3281: LD_INT 0
3283: ST_TO_ADDR
// crates := starting_resources [ 1 ] ;
3284: LD_ADDR_VAR 0 6
3288: PUSH
3289: LD_EXP 21
3293: PUSH
3294: LD_INT 1
3296: ARRAY
3297: ST_TO_ADDR
// oil := starting_resources [ 2 ] ;
3298: LD_ADDR_VAR 0 7
3302: PUSH
3303: LD_EXP 21
3307: PUSH
3308: LD_INT 2
3310: ARRAY
3311: ST_TO_ADDR
// siberite := starting_resources [ 3 ] ;
3312: LD_ADDR_VAR 0 8
3316: PUSH
3317: LD_EXP 21
3321: PUSH
3322: LD_INT 3
3324: ARRAY
3325: ST_TO_ADDR
// cargo_capacity := crates + oil + siberite ;
3326: LD_ADDR_VAR 0 9
3330: PUSH
3331: LD_VAR 0 6
3335: PUSH
3336: LD_VAR 0 7
3340: PLUS
3341: PUSH
3342: LD_VAR 0 8
3346: PLUS
3347: ST_TO_ADDR
// if cargo_capacity > 0 then
3348: LD_VAR 0 9
3352: PUSH
3353: LD_INT 0
3355: GREATER
3356: IFFALSE 3398
// begin while cargo_capacity > 0 do
3358: LD_VAR 0 9
3362: PUSH
3363: LD_INT 0
3365: GREATER
3366: IFFALSE 3398
// begin vehicle_amount := vehicle_amount + 1 ;
3368: LD_ADDR_VAR 0 10
3372: PUSH
3373: LD_VAR 0 10
3377: PUSH
3378: LD_INT 1
3380: PLUS
3381: ST_TO_ADDR
// cargo_capacity := cargo_capacity - 100 ;
3382: LD_ADDR_VAR 0 9
3386: PUSH
3387: LD_VAR 0 9
3391: PUSH
3392: LD_INT 100
3394: MINUS
3395: ST_TO_ADDR
// end ;
3396: GO 3358
// end ; for i = 1 to 8 do
3398: LD_ADDR_VAR 0 2
3402: PUSH
3403: DOUBLE
3404: LD_INT 1
3406: DEC
3407: ST_TO_ADDR
3408: LD_INT 8
3410: PUSH
3411: FOR_TO
3412: IFFALSE 3962
// begin if not side_isalive [ i ] then
3414: LD_EXP 53
3418: PUSH
3419: LD_VAR 0 2
3423: ARRAY
3424: NOT
3425: IFFALSE 3429
// continue ;
3427: GO 3411
// for j = 1 to composition do
3429: LD_ADDR_VAR 0 3
3433: PUSH
3434: DOUBLE
3435: LD_INT 1
3437: DEC
3438: ST_TO_ADDR
3439: LD_EXP 43
3443: PUSH
3444: FOR_TO
3445: IFFALSE 3517
// begin human := PrepareCharacters ( i , position_spawn_direction , composition [ j ] ) ;
3447: LD_ADDR_VAR 0 4
3451: PUSH
3452: LD_VAR 0 2
3456: PPUSH
3457: LD_EXP 34
3461: PPUSH
3462: LD_EXP 43
3466: PUSH
3467: LD_VAR 0 3
3471: ARRAY
3472: PPUSH
3473: CALL 6190 0 3
3477: ST_TO_ADDR
// side_soldiers := Replace ( side_soldiers , i , side_soldiers [ i ] ^ human ) ;
3478: LD_ADDR_EXP 46
3482: PUSH
3483: LD_EXP 46
3487: PPUSH
3488: LD_VAR 0 2
3492: PPUSH
3493: LD_EXP 46
3497: PUSH
3498: LD_VAR 0 2
3502: ARRAY
3503: PUSH
3504: LD_VAR 0 4
3508: ADD
3509: PPUSH
3510: CALL_OW 1
3514: ST_TO_ADDR
// end ;
3515: GO 3444
3517: POP
3518: POP
// crates := starting_resources [ 1 ] ;
3519: LD_ADDR_VAR 0 6
3523: PUSH
3524: LD_EXP 21
3528: PUSH
3529: LD_INT 1
3531: ARRAY
3532: ST_TO_ADDR
// oil := starting_resources [ 2 ] ;
3533: LD_ADDR_VAR 0 7
3537: PUSH
3538: LD_EXP 21
3542: PUSH
3543: LD_INT 2
3545: ARRAY
3546: ST_TO_ADDR
// siberite := starting_resources [ 3 ] ;
3547: LD_ADDR_VAR 0 8
3551: PUSH
3552: LD_EXP 21
3556: PUSH
3557: LD_INT 3
3559: ARRAY
3560: ST_TO_ADDR
// for j = 1 to vehicle_amount do
3561: LD_ADDR_VAR 0 3
3565: PUSH
3566: DOUBLE
3567: LD_INT 1
3569: DEC
3570: ST_TO_ADDR
3571: LD_VAR 0 10
3575: PUSH
3576: FOR_TO
3577: IFFALSE 3714
// begin vehicle := PrepareVehicles ( i , position_spawn_direction ) ;
3579: LD_ADDR_VAR 0 5
3583: PUSH
3584: LD_VAR 0 2
3588: PPUSH
3589: LD_EXP 34
3593: PPUSH
3594: CALL 6404 0 2
3598: ST_TO_ADDR
// bulk := FillUpVehicles ( vehicle , crates , oil , siberite ) ;
3599: LD_ADDR_VAR 0 11
3603: PUSH
3604: LD_VAR 0 5
3608: PPUSH
3609: LD_VAR 0 6
3613: PPUSH
3614: LD_VAR 0 7
3618: PPUSH
3619: LD_VAR 0 8
3623: PPUSH
3624: CALL 10825 0 4
3628: ST_TO_ADDR
// crates := bulk [ 2 ] ;
3629: LD_ADDR_VAR 0 6
3633: PUSH
3634: LD_VAR 0 11
3638: PUSH
3639: LD_INT 2
3641: ARRAY
3642: ST_TO_ADDR
// oil := bulk [ 3 ] ;
3643: LD_ADDR_VAR 0 7
3647: PUSH
3648: LD_VAR 0 11
3652: PUSH
3653: LD_INT 3
3655: ARRAY
3656: ST_TO_ADDR
// siberite := bulk [ 4 ] ;
3657: LD_ADDR_VAR 0 8
3661: PUSH
3662: LD_VAR 0 11
3666: PUSH
3667: LD_INT 4
3669: ARRAY
3670: ST_TO_ADDR
// side_vehicles := Replace ( side_vehicles , i , side_vehicles [ i ] ^ bulk [ 1 ] ) ;
3671: LD_ADDR_EXP 49
3675: PUSH
3676: LD_EXP 49
3680: PPUSH
3681: LD_VAR 0 2
3685: PPUSH
3686: LD_EXP 49
3690: PUSH
3691: LD_VAR 0 2
3695: ARRAY
3696: PUSH
3697: LD_VAR 0 11
3701: PUSH
3702: LD_INT 1
3704: ARRAY
3705: ADD
3706: PPUSH
3707: CALL_OW 1
3711: ST_TO_ADDR
// end ;
3712: GO 3576
3714: POP
3715: POP
// for j = 1 to side_vehicles [ i ] do
3716: LD_ADDR_VAR 0 3
3720: PUSH
3721: DOUBLE
3722: LD_INT 1
3724: DEC
3725: ST_TO_ADDR
3726: LD_EXP 49
3730: PUSH
3731: LD_VAR 0 2
3735: ARRAY
3736: PUSH
3737: FOR_TO
3738: IFFALSE 3820
// PlaceHumanInUnit ( side_soldiers [ i ] [ people_num [ 1 ] + people_num [ 2 ] + people_num [ 3 ] + people_num [ 4 ] - j ] , side_vehicles [ i ] [ j ] ) ;
3740: LD_EXP 46
3744: PUSH
3745: LD_VAR 0 2
3749: ARRAY
3750: PUSH
3751: LD_EXP 19
3755: PUSH
3756: LD_INT 1
3758: ARRAY
3759: PUSH
3760: LD_EXP 19
3764: PUSH
3765: LD_INT 2
3767: ARRAY
3768: PLUS
3769: PUSH
3770: LD_EXP 19
3774: PUSH
3775: LD_INT 3
3777: ARRAY
3778: PLUS
3779: PUSH
3780: LD_EXP 19
3784: PUSH
3785: LD_INT 4
3787: ARRAY
3788: PLUS
3789: PUSH
3790: LD_VAR 0 3
3794: MINUS
3795: ARRAY
3796: PPUSH
3797: LD_EXP 49
3801: PUSH
3802: LD_VAR 0 2
3806: ARRAY
3807: PUSH
3808: LD_VAR 0 3
3812: ARRAY
3813: PPUSH
3814: CALL_OW 52
3818: GO 3737
3820: POP
3821: POP
// for j = 1 to side_soldiers [ i ] do
3822: LD_ADDR_VAR 0 3
3826: PUSH
3827: DOUBLE
3828: LD_INT 1
3830: DEC
3831: ST_TO_ADDR
3832: LD_EXP 46
3836: PUSH
3837: LD_VAR 0 2
3841: ARRAY
3842: PUSH
3843: FOR_TO
3844: IFFALSE 3889
// PlaceUnitArea ( side_soldiers [ i ] [ j ] , position_spawn_area [ Side_Positions [ i ] ] , false ) ;
3846: LD_EXP 46
3850: PUSH
3851: LD_VAR 0 2
3855: ARRAY
3856: PUSH
3857: LD_VAR 0 3
3861: ARRAY
3862: PPUSH
3863: LD_EXP 35
3867: PUSH
3868: LD_EXP 2
3872: PUSH
3873: LD_VAR 0 2
3877: ARRAY
3878: ARRAY
3879: PPUSH
3880: LD_INT 0
3882: PPUSH
3883: CALL_OW 49
3887: GO 3843
3889: POP
3890: POP
// for j = 1 to side_vehicles [ i ] do
3891: LD_ADDR_VAR 0 3
3895: PUSH
3896: DOUBLE
3897: LD_INT 1
3899: DEC
3900: ST_TO_ADDR
3901: LD_EXP 49
3905: PUSH
3906: LD_VAR 0 2
3910: ARRAY
3911: PUSH
3912: FOR_TO
3913: IFFALSE 3958
// PlaceUnitArea ( side_vehicles [ i ] [ j ] , position_spawn_area [ Side_Positions [ i ] ] , false ) ;
3915: LD_EXP 49
3919: PUSH
3920: LD_VAR 0 2
3924: ARRAY
3925: PUSH
3926: LD_VAR 0 3
3930: ARRAY
3931: PPUSH
3932: LD_EXP 35
3936: PUSH
3937: LD_EXP 2
3941: PUSH
3942: LD_VAR 0 2
3946: ARRAY
3947: ARRAY
3948: PPUSH
3949: LD_INT 0
3951: PPUSH
3952: CALL_OW 49
3956: GO 3912
3958: POP
3959: POP
// end ;
3960: GO 3411
3962: POP
3963: POP
// end ;
3964: LD_VAR 0 1
3968: RET
// export function INIT_CameraFocus ; begin
3969: LD_INT 0
3971: PPUSH
// if Your_Side >= 1 and Your_Side <= 8 then
3972: LD_OWVAR 2
3976: PUSH
3977: LD_INT 1
3979: GREATEREQUAL
3980: PUSH
3981: LD_OWVAR 2
3985: PUSH
3986: LD_INT 8
3988: LESSEQUAL
3989: AND
3990: IFFALSE 4009
// CenterNowOnUnits ( side_soldiers [ Your_Side ] ) else
3992: LD_EXP 46
3996: PUSH
3997: LD_OWVAR 2
4001: ARRAY
4002: PPUSH
4003: CALL_OW 87
4007: GO 4026
// begin CenterNowOnXY ( 164 , 129 ) ;
4009: LD_INT 164
4011: PPUSH
4012: LD_INT 129
4014: PPUSH
4015: CALL_OW 86
// FogOff ( 1 ) ;
4019: LD_INT 1
4021: PPUSH
4022: CALL_OW 344
// end ; end ; end_of_file
4026: LD_VAR 0 1
4030: RET
// export Game_Type , Side_Positions , Side_Nations , Side_Comps , Side_Teams , Teams , Choice_people_num , Choice_experience , Choice_starting_resources , Choice_crate_spawn_rate , Choice_people_spawn_rate , Choice_spawn_fluctuation , Choice_oil_abundance , Choice_sib_abundance , Choice_victory_cond , Choice_reinforce_cost , Choice_black_FoW , Choice_starting_tech_lvl , people_num , experience , starting_resources , crate_spawn_rate , people_spawn_rate , spawn_fluctuation , oil_abundance , sib_abundance , victory_cond , reinforce_cost , black_fow , starting_tech_lvl , side_tech_lvl , available_oil_deposits , available_siberite_deposits , position_spawn_direction , position_spawn_area , position_drop_zones , fluctuation_base_crates , fluctuation_base_humans , fluctuation_modifier_crates , fluctuation_modifier_humans , current_spawn_rate , past_spawn_rate , composition , new_character_EON , new_character_reinforcements , side_soldiers , side_soldier_count , soldier_limit , side_vehicles , CLOCK_crate_spawn , CLOCK_human_spawn , CLOCK_fluctuation , side_isalive , cost_per_human , cost_per_upgrade , side_reinforcement_amount , side_reinforcement_cap , side_pending_order , side_resources_delivered , team_siberite_stocked , team_transfer_zones , transfer_zone_direction , side_chosen_zone , side_zone_locked , side_transfer_clocks , side_units_outside , side_order_type , side_resources_remaining , side_transfer_pending ; export function INIT_LoadMapParams ; var i ; begin
4031: LD_INT 0
4033: PPUSH
4034: PPUSH
// people_num := [ [ 1 , 1 , 1 , 1 , 1 ] , [ 1 , 2 , 2 , 2 , 2 ] , [ 1 , 3 , 3 , 3 , 3 ] , [ 1 , 4 , 4 , 4 , 4 ] ] ;
4035: LD_ADDR_EXP 19
4039: PUSH
4040: LD_INT 1
4042: PUSH
4043: LD_INT 1
4045: PUSH
4046: LD_INT 1
4048: PUSH
4049: LD_INT 1
4051: PUSH
4052: LD_INT 1
4054: PUSH
4055: EMPTY
4056: LIST
4057: LIST
4058: LIST
4059: LIST
4060: LIST
4061: PUSH
4062: LD_INT 1
4064: PUSH
4065: LD_INT 2
4067: PUSH
4068: LD_INT 2
4070: PUSH
4071: LD_INT 2
4073: PUSH
4074: LD_INT 2
4076: PUSH
4077: EMPTY
4078: LIST
4079: LIST
4080: LIST
4081: LIST
4082: LIST
4083: PUSH
4084: LD_INT 1
4086: PUSH
4087: LD_INT 3
4089: PUSH
4090: LD_INT 3
4092: PUSH
4093: LD_INT 3
4095: PUSH
4096: LD_INT 3
4098: PUSH
4099: EMPTY
4100: LIST
4101: LIST
4102: LIST
4103: LIST
4104: LIST
4105: PUSH
4106: LD_INT 1
4108: PUSH
4109: LD_INT 4
4111: PUSH
4112: LD_INT 4
4114: PUSH
4115: LD_INT 4
4117: PUSH
4118: LD_INT 4
4120: PUSH
4121: EMPTY
4122: LIST
4123: LIST
4124: LIST
4125: LIST
4126: LIST
4127: PUSH
4128: EMPTY
4129: LIST
4130: LIST
4131: LIST
4132: LIST
4133: ST_TO_ADDR
// experience := [ 1 , 2 , 4 , 5 ] ;
4134: LD_ADDR_EXP 20
4138: PUSH
4139: LD_INT 1
4141: PUSH
4142: LD_INT 2
4144: PUSH
4145: LD_INT 4
4147: PUSH
4148: LD_INT 5
4150: PUSH
4151: EMPTY
4152: LIST
4153: LIST
4154: LIST
4155: LIST
4156: ST_TO_ADDR
// starting_resources := [ [ 0 , 0 , 0 ] , [ 50 , 30 , 0 ] , [ 100 , 30 , 0 ] , [ 150 , 50 , 0 ] ] ;
4157: LD_ADDR_EXP 21
4161: PUSH
4162: LD_INT 0
4164: PUSH
4165: LD_INT 0
4167: PUSH
4168: LD_INT 0
4170: PUSH
4171: EMPTY
4172: LIST
4173: LIST
4174: LIST
4175: PUSH
4176: LD_INT 50
4178: PUSH
4179: LD_INT 30
4181: PUSH
4182: LD_INT 0
4184: PUSH
4185: EMPTY
4186: LIST
4187: LIST
4188: LIST
4189: PUSH
4190: LD_INT 100
4192: PUSH
4193: LD_INT 30
4195: PUSH
4196: LD_INT 0
4198: PUSH
4199: EMPTY
4200: LIST
4201: LIST
4202: LIST
4203: PUSH
4204: LD_INT 150
4206: PUSH
4207: LD_INT 50
4209: PUSH
4210: LD_INT 0
4212: PUSH
4213: EMPTY
4214: LIST
4215: LIST
4216: LIST
4217: PUSH
4218: EMPTY
4219: LIST
4220: LIST
4221: LIST
4222: LIST
4223: ST_TO_ADDR
// crate_spawn_rate := [ 2 2$00 , 1 1$30 , 1 1$00 , 0 0$30 ] ;
4224: LD_ADDR_EXP 22
4228: PUSH
4229: LD_INT 4200
4231: PUSH
4232: LD_INT 3150
4234: PUSH
4235: LD_INT 2100
4237: PUSH
4238: LD_INT 1050
4240: PUSH
4241: EMPTY
4242: LIST
4243: LIST
4244: LIST
4245: LIST
4246: ST_TO_ADDR
// people_spawn_rate := [ 0 , 15 15$0 , 10 10$0 , 5 5$0 ] ;
4247: LD_ADDR_EXP 23
4251: PUSH
4252: LD_INT 0
4254: PUSH
4255: LD_INT 31500
4257: PUSH
4258: LD_INT 21000
4260: PUSH
4261: LD_INT 10500
4263: PUSH
4264: EMPTY
4265: LIST
4266: LIST
4267: LIST
4268: LIST
4269: ST_TO_ADDR
// spawn_fluctuation := [ 0 , 5 5$0 , 2 2$30 ] ;
4270: LD_ADDR_EXP 24
4274: PUSH
4275: LD_INT 0
4277: PUSH
4278: LD_INT 10500
4280: PUSH
4281: LD_INT 5250
4283: PUSH
4284: EMPTY
4285: LIST
4286: LIST
4287: LIST
4288: ST_TO_ADDR
// oil_abundance := [ 4 , 6 , 8 ] ;
4289: LD_ADDR_EXP 25
4293: PUSH
4294: LD_INT 4
4296: PUSH
4297: LD_INT 6
4299: PUSH
4300: LD_INT 8
4302: PUSH
4303: EMPTY
4304: LIST
4305: LIST
4306: LIST
4307: ST_TO_ADDR
// sib_abundance := [ 2 , 3 , 4 ] ;
4308: LD_ADDR_EXP 26
4312: PUSH
4313: LD_INT 2
4315: PUSH
4316: LD_INT 3
4318: PUSH
4319: LD_INT 4
4321: PUSH
4322: EMPTY
4323: LIST
4324: LIST
4325: LIST
4326: ST_TO_ADDR
// victory_cond := [ 0 , 400 , 800 , 1200 ] ;
4327: LD_ADDR_EXP 27
4331: PUSH
4332: LD_INT 0
4334: PUSH
4335: LD_INT 400
4337: PUSH
4338: LD_INT 800
4340: PUSH
4341: LD_INT 1200
4343: PUSH
4344: EMPTY
4345: LIST
4346: LIST
4347: LIST
4348: LIST
4349: ST_TO_ADDR
// reinforce_cost := [ 1 , 2 , 3 , 4 ] ;
4350: LD_ADDR_EXP 28
4354: PUSH
4355: LD_INT 1
4357: PUSH
4358: LD_INT 2
4360: PUSH
4361: LD_INT 3
4363: PUSH
4364: LD_INT 4
4366: PUSH
4367: EMPTY
4368: LIST
4369: LIST
4370: LIST
4371: LIST
4372: ST_TO_ADDR
// cost_per_human := [ 50 , 70 , 100 , 150 ] ;
4373: LD_ADDR_EXP 54
4377: PUSH
4378: LD_INT 50
4380: PUSH
4381: LD_INT 70
4383: PUSH
4384: LD_INT 100
4386: PUSH
4387: LD_INT 150
4389: PUSH
4390: EMPTY
4391: LIST
4392: LIST
4393: LIST
4394: LIST
4395: ST_TO_ADDR
// cost_per_upgrade := [ [ [ 70 , 30 , 0 ] , [ 100 , 50 , 0 ] , [ 150 , 50 , 0 ] , [ 200 , 100 , 0 ] ] , [ [ 100 , 30 , 0 ] , [ 150 , 50 , 0 ] , [ 200 , 50 , 0 ] , [ 250 , 100 , 0 ] ] , [ [ 130 , 30 , 10 ] , [ 200 , 50 , 20 ] , [ 250 , 50 , 20 ] , [ 300 , 100 , 50 ] ] , [ [ 150 , 0 , 30 ] , [ 250 , 0 , 50 ] , [ 300 , 0 , 70 ] , [ 350 , 0 , 100 ] ] ] ;
4396: LD_ADDR_EXP 55
4400: PUSH
4401: LD_INT 70
4403: PUSH
4404: LD_INT 30
4406: PUSH
4407: LD_INT 0
4409: PUSH
4410: EMPTY
4411: LIST
4412: LIST
4413: LIST
4414: PUSH
4415: LD_INT 100
4417: PUSH
4418: LD_INT 50
4420: PUSH
4421: LD_INT 0
4423: PUSH
4424: EMPTY
4425: LIST
4426: LIST
4427: LIST
4428: PUSH
4429: LD_INT 150
4431: PUSH
4432: LD_INT 50
4434: PUSH
4435: LD_INT 0
4437: PUSH
4438: EMPTY
4439: LIST
4440: LIST
4441: LIST
4442: PUSH
4443: LD_INT 200
4445: PUSH
4446: LD_INT 100
4448: PUSH
4449: LD_INT 0
4451: PUSH
4452: EMPTY
4453: LIST
4454: LIST
4455: LIST
4456: PUSH
4457: EMPTY
4458: LIST
4459: LIST
4460: LIST
4461: LIST
4462: PUSH
4463: LD_INT 100
4465: PUSH
4466: LD_INT 30
4468: PUSH
4469: LD_INT 0
4471: PUSH
4472: EMPTY
4473: LIST
4474: LIST
4475: LIST
4476: PUSH
4477: LD_INT 150
4479: PUSH
4480: LD_INT 50
4482: PUSH
4483: LD_INT 0
4485: PUSH
4486: EMPTY
4487: LIST
4488: LIST
4489: LIST
4490: PUSH
4491: LD_INT 200
4493: PUSH
4494: LD_INT 50
4496: PUSH
4497: LD_INT 0
4499: PUSH
4500: EMPTY
4501: LIST
4502: LIST
4503: LIST
4504: PUSH
4505: LD_INT 250
4507: PUSH
4508: LD_INT 100
4510: PUSH
4511: LD_INT 0
4513: PUSH
4514: EMPTY
4515: LIST
4516: LIST
4517: LIST
4518: PUSH
4519: EMPTY
4520: LIST
4521: LIST
4522: LIST
4523: LIST
4524: PUSH
4525: LD_INT 130
4527: PUSH
4528: LD_INT 30
4530: PUSH
4531: LD_INT 10
4533: PUSH
4534: EMPTY
4535: LIST
4536: LIST
4537: LIST
4538: PUSH
4539: LD_INT 200
4541: PUSH
4542: LD_INT 50
4544: PUSH
4545: LD_INT 20
4547: PUSH
4548: EMPTY
4549: LIST
4550: LIST
4551: LIST
4552: PUSH
4553: LD_INT 250
4555: PUSH
4556: LD_INT 50
4558: PUSH
4559: LD_INT 20
4561: PUSH
4562: EMPTY
4563: LIST
4564: LIST
4565: LIST
4566: PUSH
4567: LD_INT 300
4569: PUSH
4570: LD_INT 100
4572: PUSH
4573: LD_INT 50
4575: PUSH
4576: EMPTY
4577: LIST
4578: LIST
4579: LIST
4580: PUSH
4581: EMPTY
4582: LIST
4583: LIST
4584: LIST
4585: LIST
4586: PUSH
4587: LD_INT 150
4589: PUSH
4590: LD_INT 0
4592: PUSH
4593: LD_INT 30
4595: PUSH
4596: EMPTY
4597: LIST
4598: LIST
4599: LIST
4600: PUSH
4601: LD_INT 250
4603: PUSH
4604: LD_INT 0
4606: PUSH
4607: LD_INT 50
4609: PUSH
4610: EMPTY
4611: LIST
4612: LIST
4613: LIST
4614: PUSH
4615: LD_INT 300
4617: PUSH
4618: LD_INT 0
4620: PUSH
4621: LD_INT 70
4623: PUSH
4624: EMPTY
4625: LIST
4626: LIST
4627: LIST
4628: PUSH
4629: LD_INT 350
4631: PUSH
4632: LD_INT 0
4634: PUSH
4635: LD_INT 100
4637: PUSH
4638: EMPTY
4639: LIST
4640: LIST
4641: LIST
4642: PUSH
4643: EMPTY
4644: LIST
4645: LIST
4646: LIST
4647: LIST
4648: PUSH
4649: EMPTY
4650: LIST
4651: LIST
4652: LIST
4653: LIST
4654: ST_TO_ADDR
// available_oil_deposits := [ [ [ [ 12 , 17 ] , [ 317 , 242 ] ] , [ [ 46 , 47 ] , [ 283 , 211 ] ] , [ [ 34 , 12 ] , [ 295 , 247 ] ] , [ [ 72 , 48 ] , [ 257 , 211 ] ] , [ [ 95 , 78 ] , [ 235 , 182 ] ] ] , [ [ [ 89 , 28 ] , [ 241 , 232 ] ] , [ [ 118 , 41 ] , [ 211 , 218 ] ] , [ [ 125 , 7 ] , [ 203 , 252 ] ] , [ [ 166 , 80 ] , [ 163 , 179 ] ] ] , [ [ [ 192 , 57 ] , [ 137 , 202 ] ] , [ [ 197 , 6 ] , [ 150 , 253 ] ] , [ [ 214 , 66 ] , [ 115 , 192 ] ] , [ [ 208 , 25 ] , [ 121 , 234 ] ] , [ [ 242 , 89 ] , [ 87 , 170 ] ] ] ] ;
4655: LD_ADDR_EXP 32
4659: PUSH
4660: LD_INT 12
4662: PUSH
4663: LD_INT 17
4665: PUSH
4666: EMPTY
4667: LIST
4668: LIST
4669: PUSH
4670: LD_INT 317
4672: PUSH
4673: LD_INT 242
4675: PUSH
4676: EMPTY
4677: LIST
4678: LIST
4679: PUSH
4680: EMPTY
4681: LIST
4682: LIST
4683: PUSH
4684: LD_INT 46
4686: PUSH
4687: LD_INT 47
4689: PUSH
4690: EMPTY
4691: LIST
4692: LIST
4693: PUSH
4694: LD_INT 283
4696: PUSH
4697: LD_INT 211
4699: PUSH
4700: EMPTY
4701: LIST
4702: LIST
4703: PUSH
4704: EMPTY
4705: LIST
4706: LIST
4707: PUSH
4708: LD_INT 34
4710: PUSH
4711: LD_INT 12
4713: PUSH
4714: EMPTY
4715: LIST
4716: LIST
4717: PUSH
4718: LD_INT 295
4720: PUSH
4721: LD_INT 247
4723: PUSH
4724: EMPTY
4725: LIST
4726: LIST
4727: PUSH
4728: EMPTY
4729: LIST
4730: LIST
4731: PUSH
4732: LD_INT 72
4734: PUSH
4735: LD_INT 48
4737: PUSH
4738: EMPTY
4739: LIST
4740: LIST
4741: PUSH
4742: LD_INT 257
4744: PUSH
4745: LD_INT 211
4747: PUSH
4748: EMPTY
4749: LIST
4750: LIST
4751: PUSH
4752: EMPTY
4753: LIST
4754: LIST
4755: PUSH
4756: LD_INT 95
4758: PUSH
4759: LD_INT 78
4761: PUSH
4762: EMPTY
4763: LIST
4764: LIST
4765: PUSH
4766: LD_INT 235
4768: PUSH
4769: LD_INT 182
4771: PUSH
4772: EMPTY
4773: LIST
4774: LIST
4775: PUSH
4776: EMPTY
4777: LIST
4778: LIST
4779: PUSH
4780: EMPTY
4781: LIST
4782: LIST
4783: LIST
4784: LIST
4785: LIST
4786: PUSH
4787: LD_INT 89
4789: PUSH
4790: LD_INT 28
4792: PUSH
4793: EMPTY
4794: LIST
4795: LIST
4796: PUSH
4797: LD_INT 241
4799: PUSH
4800: LD_INT 232
4802: PUSH
4803: EMPTY
4804: LIST
4805: LIST
4806: PUSH
4807: EMPTY
4808: LIST
4809: LIST
4810: PUSH
4811: LD_INT 118
4813: PUSH
4814: LD_INT 41
4816: PUSH
4817: EMPTY
4818: LIST
4819: LIST
4820: PUSH
4821: LD_INT 211
4823: PUSH
4824: LD_INT 218
4826: PUSH
4827: EMPTY
4828: LIST
4829: LIST
4830: PUSH
4831: EMPTY
4832: LIST
4833: LIST
4834: PUSH
4835: LD_INT 125
4837: PUSH
4838: LD_INT 7
4840: PUSH
4841: EMPTY
4842: LIST
4843: LIST
4844: PUSH
4845: LD_INT 203
4847: PUSH
4848: LD_INT 252
4850: PUSH
4851: EMPTY
4852: LIST
4853: LIST
4854: PUSH
4855: EMPTY
4856: LIST
4857: LIST
4858: PUSH
4859: LD_INT 166
4861: PUSH
4862: LD_INT 80
4864: PUSH
4865: EMPTY
4866: LIST
4867: LIST
4868: PUSH
4869: LD_INT 163
4871: PUSH
4872: LD_INT 179
4874: PUSH
4875: EMPTY
4876: LIST
4877: LIST
4878: PUSH
4879: EMPTY
4880: LIST
4881: LIST
4882: PUSH
4883: EMPTY
4884: LIST
4885: LIST
4886: LIST
4887: LIST
4888: PUSH
4889: LD_INT 192
4891: PUSH
4892: LD_INT 57
4894: PUSH
4895: EMPTY
4896: LIST
4897: LIST
4898: PUSH
4899: LD_INT 137
4901: PUSH
4902: LD_INT 202
4904: PUSH
4905: EMPTY
4906: LIST
4907: LIST
4908: PUSH
4909: EMPTY
4910: LIST
4911: LIST
4912: PUSH
4913: LD_INT 197
4915: PUSH
4916: LD_INT 6
4918: PUSH
4919: EMPTY
4920: LIST
4921: LIST
4922: PUSH
4923: LD_INT 150
4925: PUSH
4926: LD_INT 253
4928: PUSH
4929: EMPTY
4930: LIST
4931: LIST
4932: PUSH
4933: EMPTY
4934: LIST
4935: LIST
4936: PUSH
4937: LD_INT 214
4939: PUSH
4940: LD_INT 66
4942: PUSH
4943: EMPTY
4944: LIST
4945: LIST
4946: PUSH
4947: LD_INT 115
4949: PUSH
4950: LD_INT 192
4952: PUSH
4953: EMPTY
4954: LIST
4955: LIST
4956: PUSH
4957: EMPTY
4958: LIST
4959: LIST
4960: PUSH
4961: LD_INT 208
4963: PUSH
4964: LD_INT 25
4966: PUSH
4967: EMPTY
4968: LIST
4969: LIST
4970: PUSH
4971: LD_INT 121
4973: PUSH
4974: LD_INT 234
4976: PUSH
4977: EMPTY
4978: LIST
4979: LIST
4980: PUSH
4981: EMPTY
4982: LIST
4983: LIST
4984: PUSH
4985: LD_INT 242
4987: PUSH
4988: LD_INT 89
4990: PUSH
4991: EMPTY
4992: LIST
4993: LIST
4994: PUSH
4995: LD_INT 87
4997: PUSH
4998: LD_INT 170
5000: PUSH
5001: EMPTY
5002: LIST
5003: LIST
5004: PUSH
5005: EMPTY
5006: LIST
5007: LIST
5008: PUSH
5009: EMPTY
5010: LIST
5011: LIST
5012: LIST
5013: LIST
5014: LIST
5015: PUSH
5016: EMPTY
5017: LIST
5018: LIST
5019: LIST
5020: ST_TO_ADDR
// available_siberite_deposits := [ [ [ [ 61 , 103 ] , [ 268 , 156 ] ] , [ [ 100 , 115 ] , [ 229 , 144 ] ] , [ [ 128 , 105 ] , [ 201 , 154 ] ] , [ [ 113 , 75 ] , [ 216 , 184 ] ] ] , [ [ [ 167 , 143 ] , [ 162 , 116 ] ] , [ [ 129 , 157 ] , [ 200 , 102 ] ] ] ] ;
5021: LD_ADDR_EXP 33
5025: PUSH
5026: LD_INT 61
5028: PUSH
5029: LD_INT 103
5031: PUSH
5032: EMPTY
5033: LIST
5034: LIST
5035: PUSH
5036: LD_INT 268
5038: PUSH
5039: LD_INT 156
5041: PUSH
5042: EMPTY
5043: LIST
5044: LIST
5045: PUSH
5046: EMPTY
5047: LIST
5048: LIST
5049: PUSH
5050: LD_INT 100
5052: PUSH
5053: LD_INT 115
5055: PUSH
5056: EMPTY
5057: LIST
5058: LIST
5059: PUSH
5060: LD_INT 229
5062: PUSH
5063: LD_INT 144
5065: PUSH
5066: EMPTY
5067: LIST
5068: LIST
5069: PUSH
5070: EMPTY
5071: LIST
5072: LIST
5073: PUSH
5074: LD_INT 128
5076: PUSH
5077: LD_INT 105
5079: PUSH
5080: EMPTY
5081: LIST
5082: LIST
5083: PUSH
5084: LD_INT 201
5086: PUSH
5087: LD_INT 154
5089: PUSH
5090: EMPTY
5091: LIST
5092: LIST
5093: PUSH
5094: EMPTY
5095: LIST
5096: LIST
5097: PUSH
5098: LD_INT 113
5100: PUSH
5101: LD_INT 75
5103: PUSH
5104: EMPTY
5105: LIST
5106: LIST
5107: PUSH
5108: LD_INT 216
5110: PUSH
5111: LD_INT 184
5113: PUSH
5114: EMPTY
5115: LIST
5116: LIST
5117: PUSH
5118: EMPTY
5119: LIST
5120: LIST
5121: PUSH
5122: EMPTY
5123: LIST
5124: LIST
5125: LIST
5126: LIST
5127: PUSH
5128: LD_INT 167
5130: PUSH
5131: LD_INT 143
5133: PUSH
5134: EMPTY
5135: LIST
5136: LIST
5137: PUSH
5138: LD_INT 162
5140: PUSH
5141: LD_INT 116
5143: PUSH
5144: EMPTY
5145: LIST
5146: LIST
5147: PUSH
5148: EMPTY
5149: LIST
5150: LIST
5151: PUSH
5152: LD_INT 129
5154: PUSH
5155: LD_INT 157
5157: PUSH
5158: EMPTY
5159: LIST
5160: LIST
5161: PUSH
5162: LD_INT 200
5164: PUSH
5165: LD_INT 102
5167: PUSH
5168: EMPTY
5169: LIST
5170: LIST
5171: PUSH
5172: EMPTY
5173: LIST
5174: LIST
5175: PUSH
5176: EMPTY
5177: LIST
5178: LIST
5179: PUSH
5180: EMPTY
5181: LIST
5182: LIST
5183: ST_TO_ADDR
// position_spawn_direction := [ 2 , 2 , 3 , 3 , 0 , 0 , 5 , 5 ] ;
5184: LD_ADDR_EXP 34
5188: PUSH
5189: LD_INT 2
5191: PUSH
5192: LD_INT 2
5194: PUSH
5195: LD_INT 3
5197: PUSH
5198: LD_INT 3
5200: PUSH
5201: LD_INT 0
5203: PUSH
5204: LD_INT 0
5206: PUSH
5207: LD_INT 5
5209: PUSH
5210: LD_INT 5
5212: PUSH
5213: EMPTY
5214: LIST
5215: LIST
5216: LIST
5217: LIST
5218: LIST
5219: LIST
5220: LIST
5221: LIST
5222: ST_TO_ADDR
// position_spawn_area := [ INIT_SpawnNW , INIT_SpawnNW , INIT_SpawnNE , INIT_SpawnNE , INIT_SpawnSW , INIT_SpawnSW , INIT_SpawnSE , INIT_SpawnSE ] ;
5223: LD_ADDR_EXP 35
5227: PUSH
5228: LD_INT 1
5230: PUSH
5231: LD_INT 1
5233: PUSH
5234: LD_INT 2
5236: PUSH
5237: LD_INT 2
5239: PUSH
5240: LD_INT 4
5242: PUSH
5243: LD_INT 4
5245: PUSH
5246: LD_INT 3
5248: PUSH
5249: LD_INT 3
5251: PUSH
5252: EMPTY
5253: LIST
5254: LIST
5255: LIST
5256: LIST
5257: LIST
5258: LIST
5259: LIST
5260: LIST
5261: ST_TO_ADDR
// position_drop_zones := [ [ 1 , 50 , [ CrateDropSW , CrateDropSE , CrateDropNW , CrateDropNE ] ] , [ 2 , 60 , [ CrateDropMidSW , CrateDropMidNE ] , [ CrateDropMidNW , CrateDropMidSE ] ] , [ 3 , 70 , [ CrateDropMidN , CrateDropMidS ] ] ] ;
5262: LD_ADDR_EXP 36
5266: PUSH
5267: LD_INT 1
5269: PUSH
5270: LD_INT 50
5272: PUSH
5273: LD_INT 5
5275: PUSH
5276: LD_INT 6
5278: PUSH
5279: LD_INT 7
5281: PUSH
5282: LD_INT 8
5284: PUSH
5285: EMPTY
5286: LIST
5287: LIST
5288: LIST
5289: LIST
5290: PUSH
5291: EMPTY
5292: LIST
5293: LIST
5294: LIST
5295: PUSH
5296: LD_INT 2
5298: PUSH
5299: LD_INT 60
5301: PUSH
5302: LD_INT 9
5304: PUSH
5305: LD_INT 13
5307: PUSH
5308: EMPTY
5309: LIST
5310: LIST
5311: PUSH
5312: LD_INT 10
5314: PUSH
5315: LD_INT 14
5317: PUSH
5318: EMPTY
5319: LIST
5320: LIST
5321: PUSH
5322: EMPTY
5323: LIST
5324: LIST
5325: LIST
5326: LIST
5327: PUSH
5328: LD_INT 3
5330: PUSH
5331: LD_INT 70
5333: PUSH
5334: LD_INT 11
5336: PUSH
5337: LD_INT 12
5339: PUSH
5340: EMPTY
5341: LIST
5342: LIST
5343: PUSH
5344: EMPTY
5345: LIST
5346: LIST
5347: LIST
5348: PUSH
5349: EMPTY
5350: LIST
5351: LIST
5352: LIST
5353: ST_TO_ADDR
// fluctuation_base_crates := [ 0 0$12 , 0 0$9 , 0 0$6 , 0 0$2 ] ;
5354: LD_ADDR_EXP 37
5358: PUSH
5359: LD_INT 420
5361: PUSH
5362: LD_INT 315
5364: PUSH
5365: LD_INT 210
5367: PUSH
5368: LD_INT 70
5370: PUSH
5371: EMPTY
5372: LIST
5373: LIST
5374: LIST
5375: LIST
5376: ST_TO_ADDR
// fluctuation_base_humans := [ 0 , 1 1$30 , 1 1$00 , 0 0$30 ] ;
5377: LD_ADDR_EXP 38
5381: PUSH
5382: LD_INT 0
5384: PUSH
5385: LD_INT 3150
5387: PUSH
5388: LD_INT 2100
5390: PUSH
5391: LD_INT 1050
5393: PUSH
5394: EMPTY
5395: LIST
5396: LIST
5397: LIST
5398: LIST
5399: ST_TO_ADDR
// fluctuation_modifier_crates := 0 ;
5400: LD_ADDR_EXP 39
5404: PUSH
5405: LD_INT 0
5407: ST_TO_ADDR
// fluctuation_modifier_humans := 0 ;
5408: LD_ADDR_EXP 40
5412: PUSH
5413: LD_INT 0
5415: ST_TO_ADDR
// current_spawn_rate := 0 ;
5416: LD_ADDR_EXP 41
5420: PUSH
5421: LD_INT 0
5423: ST_TO_ADDR
// past_spawn_rate := 0 ;
5424: LD_ADDR_EXP 42
5428: PUSH
5429: LD_INT 0
5431: ST_TO_ADDR
// side_reinforcement_amount := [ 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 ] ;
5432: LD_ADDR_EXP 56
5436: PUSH
5437: LD_INT 1
5439: PUSH
5440: LD_INT 1
5442: PUSH
5443: LD_INT 1
5445: PUSH
5446: LD_INT 1
5448: PUSH
5449: LD_INT 1
5451: PUSH
5452: LD_INT 1
5454: PUSH
5455: LD_INT 1
5457: PUSH
5458: LD_INT 1
5460: PUSH
5461: EMPTY
5462: LIST
5463: LIST
5464: LIST
5465: LIST
5466: LIST
5467: LIST
5468: LIST
5469: LIST
5470: ST_TO_ADDR
// side_reinforcement_cap := [ 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 ] ;
5471: LD_ADDR_EXP 57
5475: PUSH
5476: LD_INT 3
5478: PUSH
5479: LD_INT 3
5481: PUSH
5482: LD_INT 3
5484: PUSH
5485: LD_INT 3
5487: PUSH
5488: LD_INT 3
5490: PUSH
5491: LD_INT 3
5493: PUSH
5494: LD_INT 3
5496: PUSH
5497: LD_INT 3
5499: PUSH
5500: EMPTY
5501: LIST
5502: LIST
5503: LIST
5504: LIST
5505: LIST
5506: LIST
5507: LIST
5508: LIST
5509: ST_TO_ADDR
// team_siberite_stocked := [ 0 , 0 ] ;
5510: LD_ADDR_EXP 60
5514: PUSH
5515: LD_INT 0
5517: PUSH
5518: LD_INT 0
5520: PUSH
5521: EMPTY
5522: LIST
5523: LIST
5524: ST_TO_ADDR
// team_transfer_zones := [ [ TransferNW , TransferNE ] , [ TransferSW , TransferSE ] ] ;
5525: LD_ADDR_EXP 61
5529: PUSH
5530: LD_INT 15
5532: PUSH
5533: LD_INT 16
5535: PUSH
5536: EMPTY
5537: LIST
5538: LIST
5539: PUSH
5540: LD_INT 18
5542: PUSH
5543: LD_INT 17
5545: PUSH
5546: EMPTY
5547: LIST
5548: LIST
5549: PUSH
5550: EMPTY
5551: LIST
5552: LIST
5553: ST_TO_ADDR
// transfer_zone_direction := [ [ 3 , 4 ] , [ 1 , 5 ] ] ;
5554: LD_ADDR_EXP 62
5558: PUSH
5559: LD_INT 3
5561: PUSH
5562: LD_INT 4
5564: PUSH
5565: EMPTY
5566: LIST
5567: LIST
5568: PUSH
5569: LD_INT 1
5571: PUSH
5572: LD_INT 5
5574: PUSH
5575: EMPTY
5576: LIST
5577: LIST
5578: PUSH
5579: EMPTY
5580: LIST
5581: LIST
5582: ST_TO_ADDR
// side_chosen_zone := [ 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 ] ;
5583: LD_ADDR_EXP 63
5587: PUSH
5588: LD_INT 1
5590: PUSH
5591: LD_INT 1
5593: PUSH
5594: LD_INT 1
5596: PUSH
5597: LD_INT 1
5599: PUSH
5600: LD_INT 1
5602: PUSH
5603: LD_INT 1
5605: PUSH
5606: LD_INT 1
5608: PUSH
5609: LD_INT 1
5611: PUSH
5612: EMPTY
5613: LIST
5614: LIST
5615: LIST
5616: LIST
5617: LIST
5618: LIST
5619: LIST
5620: LIST
5621: ST_TO_ADDR
// side_zone_locked := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5622: LD_ADDR_EXP 64
5626: PUSH
5627: LD_INT 0
5629: PUSH
5630: LD_INT 0
5632: PUSH
5633: LD_INT 0
5635: PUSH
5636: LD_INT 0
5638: PUSH
5639: LD_INT 0
5641: PUSH
5642: LD_INT 0
5644: PUSH
5645: LD_INT 0
5647: PUSH
5648: LD_INT 0
5650: PUSH
5651: EMPTY
5652: LIST
5653: LIST
5654: LIST
5655: LIST
5656: LIST
5657: LIST
5658: LIST
5659: LIST
5660: ST_TO_ADDR
// side_pending_order := [ [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] ] ;
5661: LD_ADDR_EXP 58
5665: PUSH
5666: LD_INT 0
5668: PUSH
5669: LD_INT 0
5671: PUSH
5672: LD_INT 0
5674: PUSH
5675: EMPTY
5676: LIST
5677: LIST
5678: LIST
5679: PUSH
5680: LD_INT 0
5682: PUSH
5683: LD_INT 0
5685: PUSH
5686: LD_INT 0
5688: PUSH
5689: EMPTY
5690: LIST
5691: LIST
5692: LIST
5693: PUSH
5694: LD_INT 0
5696: PUSH
5697: LD_INT 0
5699: PUSH
5700: LD_INT 0
5702: PUSH
5703: EMPTY
5704: LIST
5705: LIST
5706: LIST
5707: PUSH
5708: LD_INT 0
5710: PUSH
5711: LD_INT 0
5713: PUSH
5714: LD_INT 0
5716: PUSH
5717: EMPTY
5718: LIST
5719: LIST
5720: LIST
5721: PUSH
5722: LD_INT 0
5724: PUSH
5725: LD_INT 0
5727: PUSH
5728: LD_INT 0
5730: PUSH
5731: EMPTY
5732: LIST
5733: LIST
5734: LIST
5735: PUSH
5736: LD_INT 0
5738: PUSH
5739: LD_INT 0
5741: PUSH
5742: LD_INT 0
5744: PUSH
5745: EMPTY
5746: LIST
5747: LIST
5748: LIST
5749: PUSH
5750: LD_INT 0
5752: PUSH
5753: LD_INT 0
5755: PUSH
5756: LD_INT 0
5758: PUSH
5759: EMPTY
5760: LIST
5761: LIST
5762: LIST
5763: PUSH
5764: LD_INT 0
5766: PUSH
5767: LD_INT 0
5769: PUSH
5770: LD_INT 0
5772: PUSH
5773: EMPTY
5774: LIST
5775: LIST
5776: LIST
5777: PUSH
5778: EMPTY
5779: LIST
5780: LIST
5781: LIST
5782: LIST
5783: LIST
5784: LIST
5785: LIST
5786: LIST
5787: ST_TO_ADDR
// side_order_type := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5788: LD_ADDR_EXP 67
5792: PUSH
5793: LD_INT 0
5795: PUSH
5796: LD_INT 0
5798: PUSH
5799: LD_INT 0
5801: PUSH
5802: LD_INT 0
5804: PUSH
5805: LD_INT 0
5807: PUSH
5808: LD_INT 0
5810: PUSH
5811: LD_INT 0
5813: PUSH
5814: LD_INT 0
5816: PUSH
5817: EMPTY
5818: LIST
5819: LIST
5820: LIST
5821: LIST
5822: LIST
5823: LIST
5824: LIST
5825: LIST
5826: ST_TO_ADDR
// side_units_outside := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
5827: LD_ADDR_EXP 66
5831: PUSH
5832: EMPTY
5833: PUSH
5834: EMPTY
5835: PUSH
5836: EMPTY
5837: PUSH
5838: EMPTY
5839: PUSH
5840: EMPTY
5841: PUSH
5842: EMPTY
5843: PUSH
5844: EMPTY
5845: PUSH
5846: EMPTY
5847: PUSH
5848: EMPTY
5849: LIST
5850: LIST
5851: LIST
5852: LIST
5853: LIST
5854: LIST
5855: LIST
5856: LIST
5857: ST_TO_ADDR
// side_transfer_pending := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5858: LD_ADDR_EXP 69
5862: PUSH
5863: LD_INT 0
5865: PUSH
5866: LD_INT 0
5868: PUSH
5869: LD_INT 0
5871: PUSH
5872: LD_INT 0
5874: PUSH
5875: LD_INT 0
5877: PUSH
5878: LD_INT 0
5880: PUSH
5881: LD_INT 0
5883: PUSH
5884: LD_INT 0
5886: PUSH
5887: EMPTY
5888: LIST
5889: LIST
5890: LIST
5891: LIST
5892: LIST
5893: LIST
5894: LIST
5895: LIST
5896: ST_TO_ADDR
// side_resources_remaining := [ [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] ] ;
5897: LD_ADDR_EXP 68
5901: PUSH
5902: LD_INT 0
5904: PUSH
5905: LD_INT 0
5907: PUSH
5908: LD_INT 0
5910: PUSH
5911: EMPTY
5912: LIST
5913: LIST
5914: LIST
5915: PUSH
5916: LD_INT 0
5918: PUSH
5919: LD_INT 0
5921: PUSH
5922: LD_INT 0
5924: PUSH
5925: EMPTY
5926: LIST
5927: LIST
5928: LIST
5929: PUSH
5930: LD_INT 0
5932: PUSH
5933: LD_INT 0
5935: PUSH
5936: LD_INT 0
5938: PUSH
5939: EMPTY
5940: LIST
5941: LIST
5942: LIST
5943: PUSH
5944: LD_INT 0
5946: PUSH
5947: LD_INT 0
5949: PUSH
5950: LD_INT 0
5952: PUSH
5953: EMPTY
5954: LIST
5955: LIST
5956: LIST
5957: PUSH
5958: LD_INT 0
5960: PUSH
5961: LD_INT 0
5963: PUSH
5964: LD_INT 0
5966: PUSH
5967: EMPTY
5968: LIST
5969: LIST
5970: LIST
5971: PUSH
5972: LD_INT 0
5974: PUSH
5975: LD_INT 0
5977: PUSH
5978: LD_INT 0
5980: PUSH
5981: EMPTY
5982: LIST
5983: LIST
5984: LIST
5985: PUSH
5986: LD_INT 0
5988: PUSH
5989: LD_INT 0
5991: PUSH
5992: LD_INT 0
5994: PUSH
5995: EMPTY
5996: LIST
5997: LIST
5998: LIST
5999: PUSH
6000: LD_INT 0
6002: PUSH
6003: LD_INT 0
6005: PUSH
6006: LD_INT 0
6008: PUSH
6009: EMPTY
6010: LIST
6011: LIST
6012: LIST
6013: PUSH
6014: EMPTY
6015: LIST
6016: LIST
6017: LIST
6018: LIST
6019: LIST
6020: LIST
6021: LIST
6022: LIST
6023: ST_TO_ADDR
// for i = 1 to Teams do
6024: LD_ADDR_VAR 0 2
6028: PUSH
6029: DOUBLE
6030: LD_INT 1
6032: DEC
6033: ST_TO_ADDR
6034: LD_EXP 6
6038: PUSH
6039: FOR_TO
6040: IFFALSE 6067
// team_siberite_stocked := Replace ( team_siberite_stocked , i , 0 ) ;
6042: LD_ADDR_EXP 60
6046: PUSH
6047: LD_EXP 60
6051: PPUSH
6052: LD_VAR 0 2
6056: PPUSH
6057: LD_INT 0
6059: PPUSH
6060: CALL_OW 1
6064: ST_TO_ADDR
6065: GO 6039
6067: POP
6068: POP
// end ; end_of_file
6069: LD_VAR 0 1
6073: RET
// export function length ( _array ) ; var _x ; begin
6074: LD_INT 0
6076: PPUSH
6077: PPUSH
// Result := 0 ;
6078: LD_ADDR_VAR 0 2
6082: PUSH
6083: LD_INT 0
6085: ST_TO_ADDR
// for _x in _array do
6086: LD_ADDR_VAR 0 3
6090: PUSH
6091: LD_VAR 0 1
6095: PUSH
6096: FOR_IN
6097: IFFALSE 6115
// begin Result := Result + 1 ;
6099: LD_ADDR_VAR 0 2
6103: PUSH
6104: LD_VAR 0 2
6108: PUSH
6109: LD_INT 1
6111: PLUS
6112: ST_TO_ADDR
// end ;
6113: GO 6096
6115: POP
6116: POP
// end ;
6117: LD_VAR 0 2
6121: RET
// export function mp_sides_comps ; var c , i ; begin
6122: LD_INT 0
6124: PPUSH
6125: PPUSH
6126: PPUSH
// c = [ ] ;
6127: LD_ADDR_VAR 0 2
6131: PUSH
6132: EMPTY
6133: ST_TO_ADDR
// for i = 1 to 8 do
6134: LD_ADDR_VAR 0 3
6138: PUSH
6139: DOUBLE
6140: LD_INT 1
6142: DEC
6143: ST_TO_ADDR
6144: LD_INT 8
6146: PUSH
6147: FOR_TO
6148: IFFALSE 6173
// c = c ^ Multiplayer_GetPlayerIsComp ( i ) ;
6150: LD_ADDR_VAR 0 2
6154: PUSH
6155: LD_VAR 0 2
6159: PUSH
6160: LD_VAR 0 3
6164: PPUSH
6165: CALL_OW 532
6169: ADD
6170: ST_TO_ADDR
6171: GO 6147
6173: POP
6174: POP
// result = c ;
6175: LD_ADDR_VAR 0 1
6179: PUSH
6180: LD_VAR 0 2
6184: ST_TO_ADDR
// end ;
6185: LD_VAR 0 1
6189: RET
// export function PrepareCharacters ( side , direction , loadout ) ; begin
6190: LD_INT 0
6192: PPUSH
// InitHc ( ) ;
6193: CALL_OW 19
// InitUc ( ) ;
6197: CALL_OW 18
// if loadout [ 1 ] and Multiplayer then
6201: LD_VAR 0 3
6205: PUSH
6206: LD_INT 1
6208: ARRAY
6209: PUSH
6210: LD_OWVAR 4
6214: AND
6215: IFFALSE 6271
// begin hc_name := mp_sides_players_names [ side ] ;
6217: LD_ADDR_OWVAR 26
6221: PUSH
6222: LD_OWVAR 19
6226: PUSH
6227: LD_VAR 0 1
6231: ARRAY
6232: ST_TO_ADDR
// hc_gallery := MULTIAVATARS ;
6233: LD_ADDR_OWVAR 33
6237: PUSH
6238: LD_STRING MULTIAVATARS
6240: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( side ) ;
6241: LD_ADDR_OWVAR 34
6245: PUSH
6246: LD_VAR 0 1
6250: PPUSH
6251: CALL_OW 525
6255: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( side ) ;
6256: LD_ADDR_OWVAR 27
6260: PUSH
6261: LD_VAR 0 1
6265: PPUSH
6266: CALL_OW 526
6270: ST_TO_ADDR
// end ; uc_side := side ;
6271: LD_ADDR_OWVAR 20
6275: PUSH
6276: LD_VAR 0 1
6280: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
6281: LD_ADDR_OWVAR 21
6285: PUSH
6286: LD_EXP 3
6290: PUSH
6291: LD_VAR 0 1
6295: ARRAY
6296: ST_TO_ADDR
// uc_direction := direction [ Side_Positions [ side ] ] ;
6297: LD_ADDR_OWVAR 24
6301: PUSH
6302: LD_VAR 0 2
6306: PUSH
6307: LD_EXP 2
6311: PUSH
6312: LD_VAR 0 1
6316: ARRAY
6317: ARRAY
6318: ST_TO_ADDR
// hc_class := loadout [ 2 ] ;
6319: LD_ADDR_OWVAR 28
6323: PUSH
6324: LD_VAR 0 3
6328: PUSH
6329: LD_INT 2
6331: ARRAY
6332: ST_TO_ADDR
// hc_attr := loadout [ 3 ] ;
6333: LD_ADDR_OWVAR 29
6337: PUSH
6338: LD_VAR 0 3
6342: PUSH
6343: LD_INT 3
6345: ARRAY
6346: ST_TO_ADDR
// hc_basic_skills := loadout [ 4 ] ;
6347: LD_ADDR_OWVAR 30
6351: PUSH
6352: LD_VAR 0 3
6356: PUSH
6357: LD_INT 4
6359: ARRAY
6360: ST_TO_ADDR
// hc_skills := loadout [ 5 ] ;
6361: LD_ADDR_OWVAR 31
6365: PUSH
6366: LD_VAR 0 3
6370: PUSH
6371: LD_INT 5
6373: ARRAY
6374: ST_TO_ADDR
// hc_importance := loadout [ 6 ] ;
6375: LD_ADDR_OWVAR 32
6379: PUSH
6380: LD_VAR 0 3
6384: PUSH
6385: LD_INT 6
6387: ARRAY
6388: ST_TO_ADDR
// Result := CreateHuman ;
6389: LD_ADDR_VAR 0 4
6393: PUSH
6394: CALL_OW 44
6398: ST_TO_ADDR
// end ;
6399: LD_VAR 0 4
6403: RET
// export function PrepareVehicles ( side , direction ) ; begin
6404: LD_INT 0
6406: PPUSH
// InitUc ( ) ;
6407: CALL_OW 18
// InitVc ( ) ;
6411: CALL_OW 20
// uc_direction := direction [ Side_Positions [ side ] ] ;
6415: LD_ADDR_OWVAR 24
6419: PUSH
6420: LD_VAR 0 2
6424: PUSH
6425: LD_EXP 2
6429: PUSH
6430: LD_VAR 0 1
6434: ARRAY
6435: ARRAY
6436: ST_TO_ADDR
// uc_side := side ;
6437: LD_ADDR_OWVAR 20
6441: PUSH
6442: LD_VAR 0 1
6446: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
6447: LD_ADDR_OWVAR 21
6451: PUSH
6452: LD_EXP 3
6456: PUSH
6457: LD_VAR 0 1
6461: ARRAY
6462: ST_TO_ADDR
// vc_control := 1 ;
6463: LD_ADDR_OWVAR 38
6467: PUSH
6468: LD_INT 1
6470: ST_TO_ADDR
// vc_engine := 1 ;
6471: LD_ADDR_OWVAR 39
6475: PUSH
6476: LD_INT 1
6478: ST_TO_ADDR
// vc_fuel_battery := 85 ;
6479: LD_ADDR_OWVAR 41
6483: PUSH
6484: LD_INT 85
6486: ST_TO_ADDR
// case Side_Nations [ side ] of 1 :
6487: LD_EXP 3
6491: PUSH
6492: LD_VAR 0 1
6496: ARRAY
6497: PUSH
6498: LD_INT 1
6500: DOUBLE
6501: EQUAL
6502: IFTRUE 6506
6504: GO 6525
6506: POP
// begin vc_chassis := 2 ;
6507: LD_ADDR_OWVAR 37
6511: PUSH
6512: LD_INT 2
6514: ST_TO_ADDR
// vc_weapon := 12 ;
6515: LD_ADDR_OWVAR 40
6519: PUSH
6520: LD_INT 12
6522: ST_TO_ADDR
// end ; 2 :
6523: GO 6580
6525: LD_INT 2
6527: DOUBLE
6528: EQUAL
6529: IFTRUE 6533
6531: GO 6552
6533: POP
// begin vc_chassis := 13 ;
6534: LD_ADDR_OWVAR 37
6538: PUSH
6539: LD_INT 13
6541: ST_TO_ADDR
// vc_weapon := 32 ;
6542: LD_ADDR_OWVAR 40
6546: PUSH
6547: LD_INT 32
6549: ST_TO_ADDR
// end ; 3 :
6550: GO 6580
6552: LD_INT 3
6554: DOUBLE
6555: EQUAL
6556: IFTRUE 6560
6558: GO 6579
6560: POP
// begin vc_chassis := 21 ;
6561: LD_ADDR_OWVAR 37
6565: PUSH
6566: LD_INT 21
6568: ST_TO_ADDR
// vc_weapon := 51 ;
6569: LD_ADDR_OWVAR 40
6573: PUSH
6574: LD_INT 51
6576: ST_TO_ADDR
// end ; end ;
6577: GO 6580
6579: POP
// Result := CreateVehicle ;
6580: LD_ADDR_VAR 0 3
6584: PUSH
6585: CALL_OW 45
6589: ST_TO_ADDR
// end ;
6590: LD_VAR 0 3
6594: RET
// export function DidPlayerLose ( side ) ; var depots , colour ; begin
6595: LD_INT 0
6597: PPUSH
6598: PPUSH
6599: PPUSH
// if side_soldiers [ side ] = 0 then
6600: LD_EXP 46
6604: PUSH
6605: LD_VAR 0 1
6609: ARRAY
6610: PUSH
6611: LD_INT 0
6613: EQUAL
6614: IFFALSE 6801
// begin depots := FilterAllUnits ( [ [ f_side , side ] , [ f_type , 3 ] , [ f_btype , 0 ] , [ f_or ] , [ f_btype , 1 ] ] ) ;
6616: LD_ADDR_VAR 0 3
6620: PUSH
6621: LD_INT 22
6623: PUSH
6624: LD_VAR 0 1
6628: PUSH
6629: EMPTY
6630: LIST
6631: LIST
6632: PUSH
6633: LD_INT 21
6635: PUSH
6636: LD_INT 3
6638: PUSH
6639: EMPTY
6640: LIST
6641: LIST
6642: PUSH
6643: LD_INT 30
6645: PUSH
6646: LD_INT 0
6648: PUSH
6649: EMPTY
6650: LIST
6651: LIST
6652: PUSH
6653: LD_INT 2
6655: PUSH
6656: EMPTY
6657: LIST
6658: PUSH
6659: LD_INT 30
6661: PUSH
6662: LD_INT 1
6664: PUSH
6665: EMPTY
6666: LIST
6667: LIST
6668: PUSH
6669: EMPTY
6670: LIST
6671: LIST
6672: LIST
6673: LIST
6674: LIST
6675: PPUSH
6676: CALL_OW 69
6680: ST_TO_ADDR
// if depots + 0 = 0 then
6681: LD_VAR 0 3
6685: PUSH
6686: LD_INT 0
6688: PLUS
6689: PUSH
6690: LD_INT 0
6692: EQUAL
6693: IFFALSE 6801
// begin side_isalive := Replace ( side_isalive , side , 0 ) ;
6695: LD_ADDR_EXP 53
6699: PUSH
6700: LD_EXP 53
6704: PPUSH
6705: LD_VAR 0 1
6709: PPUSH
6710: LD_INT 0
6712: PPUSH
6713: CALL_OW 1
6717: ST_TO_ADDR
// RaiseSailEvent ( 66 ) ;
6718: LD_INT 66
6720: PPUSH
6721: CALL_OW 427
// if side = Your_Side then
6725: LD_VAR 0 1
6729: PUSH
6730: LD_OWVAR 2
6734: EQUAL
6735: IFFALSE 6750
// begin ToLua ( LUA_Lost(); ) ;
6737: LD_STRING LUA_Lost();
6739: PPUSH
6740: CALL_OW 559
// Multiplayer_Loose_Message ( ) ;
6744: CALL_OW 521
// end else
6748: GO 6758
// colour := 0 ;
6750: LD_ADDR_VAR 0 4
6754: PUSH
6755: LD_INT 0
6757: ST_TO_ADDR
// ToLua ( LUA_UpdateSpecInterface( & side & , & colour & , & side_tech_lvl [ side ] & ); ) ;
6758: LD_STRING LUA_UpdateSpecInterface(
6760: PUSH
6761: LD_VAR 0 1
6765: STR
6766: PUSH
6767: LD_STRING ,
6769: STR
6770: PUSH
6771: LD_VAR 0 4
6775: STR
6776: PUSH
6777: LD_STRING ,
6779: STR
6780: PUSH
6781: LD_EXP 31
6785: PUSH
6786: LD_VAR 0 1
6790: ARRAY
6791: STR
6792: PUSH
6793: LD_STRING );
6795: STR
6796: PPUSH
6797: CALL_OW 559
// end ; end ; end ;
6801: LD_VAR 0 2
6805: RET
// export function CheckPlayerPresence ; var i , colour ; begin
6806: LD_INT 0
6808: PPUSH
6809: PPUSH
6810: PPUSH
// for i = 1 to 8 do
6811: LD_ADDR_VAR 0 2
6815: PUSH
6816: DOUBLE
6817: LD_INT 1
6819: DEC
6820: ST_TO_ADDR
6821: LD_INT 8
6823: PUSH
6824: FOR_TO
6825: IFFALSE 6940
// begin if not MultiplayerSideAlive ( i ) and side_isalive [ i ] then
6827: LD_VAR 0 2
6831: PPUSH
6832: CALL_OW 108
6836: NOT
6837: PUSH
6838: LD_EXP 53
6842: PUSH
6843: LD_VAR 0 2
6847: ARRAY
6848: AND
6849: IFFALSE 6938
// begin side_isalive := Replace ( side_isalive , i , 0 ) ;
6851: LD_ADDR_EXP 53
6855: PUSH
6856: LD_EXP 53
6860: PPUSH
6861: LD_VAR 0 2
6865: PPUSH
6866: LD_INT 0
6868: PPUSH
6869: CALL_OW 1
6873: ST_TO_ADDR
// RaiseSailEvent ( 66 ) ;
6874: LD_INT 66
6876: PPUSH
6877: CALL_OW 427
// if IAmSpec then
6881: CALL_OW 531
6885: IFFALSE 6938
// begin colour := 0 ;
6887: LD_ADDR_VAR 0 3
6891: PUSH
6892: LD_INT 0
6894: ST_TO_ADDR
// ToLua ( LUA_UpdateSpecInterface( & i & , & colour & , & side_tech_lvl [ i ] & ); ) ;
6895: LD_STRING LUA_UpdateSpecInterface(
6897: PUSH
6898: LD_VAR 0 2
6902: STR
6903: PUSH
6904: LD_STRING ,
6906: STR
6907: PUSH
6908: LD_VAR 0 3
6912: STR
6913: PUSH
6914: LD_STRING ,
6916: STR
6917: PUSH
6918: LD_EXP 31
6922: PUSH
6923: LD_VAR 0 2
6927: ARRAY
6928: STR
6929: PUSH
6930: LD_STRING );
6932: STR
6933: PPUSH
6934: CALL_OW 559
// end ; end ; end ;
6938: GO 6824
6940: POP
6941: POP
// end ;
6942: LD_VAR 0 1
6946: RET
// function TechUnlock ( techs , side , state ) ; var i ; begin
6947: LD_INT 0
6949: PPUSH
6950: PPUSH
// for i in techs do
6951: LD_ADDR_VAR 0 5
6955: PUSH
6956: LD_VAR 0 1
6960: PUSH
6961: FOR_IN
6962: IFFALSE 6985
// SetTech ( i , side , state ) ;
6964: LD_VAR 0 5
6968: PPUSH
6969: LD_VAR 0 2
6973: PPUSH
6974: LD_VAR 0 3
6978: PPUSH
6979: CALL_OW 322
6983: GO 6961
6985: POP
6986: POP
// end ;
6987: LD_VAR 0 4
6991: RET
// function BuildingUnlock ( buildings , side , state ) ; var i ; begin
6992: LD_INT 0
6994: PPUSH
6995: PPUSH
// for i in buildings do
6996: LD_ADDR_VAR 0 5
7000: PUSH
7001: LD_VAR 0 1
7005: PUSH
7006: FOR_IN
7007: IFFALSE 7030
// SetRestrict ( i , side , state ) ;
7009: LD_VAR 0 5
7013: PPUSH
7014: LD_VAR 0 2
7018: PPUSH
7019: LD_VAR 0 3
7023: PPUSH
7024: CALL_OW 324
7028: GO 7006
7030: POP
7031: POP
// end ;
7032: LD_VAR 0 4
7036: RET
// export function DisableAllTechs ( side ) ; var techs , buildings ; begin
7037: LD_INT 0
7039: PPUSH
7040: PPUSH
7041: PPUSH
// techs := [ 35 , 45 , 46 , 47 , 1 , 2 , 11 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 12 , 13 , 10 , 14 , 15 , 18 , 16 , 17 , 20 , 19 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 36 , 70 , 69 , 39 , 34 , 40 , 71 , 41 , 42 , 43 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 63 , 64 , 65 , 66 , 67 , 68 ] ;
7042: LD_ADDR_VAR 0 3
7046: PUSH
7047: LD_INT 35
7049: PUSH
7050: LD_INT 45
7052: PUSH
7053: LD_INT 46
7055: PUSH
7056: LD_INT 47
7058: PUSH
7059: LD_INT 1
7061: PUSH
7062: LD_INT 2
7064: PUSH
7065: LD_INT 11
7067: PUSH
7068: LD_INT 3
7070: PUSH
7071: LD_INT 4
7073: PUSH
7074: LD_INT 5
7076: PUSH
7077: LD_INT 6
7079: PUSH
7080: LD_INT 7
7082: PUSH
7083: LD_INT 8
7085: PUSH
7086: LD_INT 9
7088: PUSH
7089: LD_INT 12
7091: PUSH
7092: LD_INT 13
7094: PUSH
7095: LD_INT 10
7097: PUSH
7098: LD_INT 14
7100: PUSH
7101: LD_INT 15
7103: PUSH
7104: LD_INT 18
7106: PUSH
7107: LD_INT 16
7109: PUSH
7110: LD_INT 17
7112: PUSH
7113: LD_INT 20
7115: PUSH
7116: LD_INT 19
7118: PUSH
7119: LD_INT 21
7121: PUSH
7122: LD_INT 22
7124: PUSH
7125: LD_INT 23
7127: PUSH
7128: LD_INT 24
7130: PUSH
7131: LD_INT 25
7133: PUSH
7134: LD_INT 26
7136: PUSH
7137: LD_INT 28
7139: PUSH
7140: LD_INT 29
7142: PUSH
7143: LD_INT 30
7145: PUSH
7146: LD_INT 31
7148: PUSH
7149: LD_INT 37
7151: PUSH
7152: LD_INT 38
7154: PUSH
7155: LD_INT 32
7157: PUSH
7158: LD_INT 27
7160: PUSH
7161: LD_INT 33
7163: PUSH
7164: LD_INT 36
7166: PUSH
7167: LD_INT 70
7169: PUSH
7170: LD_INT 69
7172: PUSH
7173: LD_INT 39
7175: PUSH
7176: LD_INT 34
7178: PUSH
7179: LD_INT 40
7181: PUSH
7182: LD_INT 71
7184: PUSH
7185: LD_INT 41
7187: PUSH
7188: LD_INT 42
7190: PUSH
7191: LD_INT 43
7193: PUSH
7194: LD_INT 44
7196: PUSH
7197: LD_INT 48
7199: PUSH
7200: LD_INT 49
7202: PUSH
7203: LD_INT 50
7205: PUSH
7206: LD_INT 51
7208: PUSH
7209: LD_INT 52
7211: PUSH
7212: LD_INT 53
7214: PUSH
7215: LD_INT 54
7217: PUSH
7218: LD_INT 55
7220: PUSH
7221: LD_INT 56
7223: PUSH
7224: LD_INT 57
7226: PUSH
7227: LD_INT 58
7229: PUSH
7230: LD_INT 59
7232: PUSH
7233: LD_INT 60
7235: PUSH
7236: LD_INT 61
7238: PUSH
7239: LD_INT 62
7241: PUSH
7242: LD_INT 63
7244: PUSH
7245: LD_INT 64
7247: PUSH
7248: LD_INT 65
7250: PUSH
7251: LD_INT 66
7253: PUSH
7254: LD_INT 67
7256: PUSH
7257: LD_INT 68
7259: PUSH
7260: EMPTY
7261: LIST
7262: LIST
7263: LIST
7264: LIST
7265: LIST
7266: LIST
7267: LIST
7268: LIST
7269: LIST
7270: LIST
7271: LIST
7272: LIST
7273: LIST
7274: LIST
7275: LIST
7276: LIST
7277: LIST
7278: LIST
7279: LIST
7280: LIST
7281: LIST
7282: LIST
7283: LIST
7284: LIST
7285: LIST
7286: LIST
7287: LIST
7288: LIST
7289: LIST
7290: LIST
7291: LIST
7292: LIST
7293: LIST
7294: LIST
7295: LIST
7296: LIST
7297: LIST
7298: LIST
7299: LIST
7300: LIST
7301: LIST
7302: LIST
7303: LIST
7304: LIST
7305: LIST
7306: LIST
7307: LIST
7308: LIST
7309: LIST
7310: LIST
7311: LIST
7312: LIST
7313: LIST
7314: LIST
7315: LIST
7316: LIST
7317: LIST
7318: LIST
7319: LIST
7320: LIST
7321: LIST
7322: LIST
7323: LIST
7324: LIST
7325: LIST
7326: LIST
7327: LIST
7328: LIST
7329: LIST
7330: LIST
7331: LIST
7332: ST_TO_ADDR
// buildings := [ 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 , 37 , 38 , 39 ] ;
7333: LD_ADDR_VAR 0 4
7337: PUSH
7338: LD_INT 0
7340: PUSH
7341: LD_INT 1
7343: PUSH
7344: LD_INT 2
7346: PUSH
7347: LD_INT 3
7349: PUSH
7350: LD_INT 4
7352: PUSH
7353: LD_INT 5
7355: PUSH
7356: LD_INT 6
7358: PUSH
7359: LD_INT 7
7361: PUSH
7362: LD_INT 8
7364: PUSH
7365: LD_INT 9
7367: PUSH
7368: LD_INT 10
7370: PUSH
7371: LD_INT 11
7373: PUSH
7374: LD_INT 12
7376: PUSH
7377: LD_INT 13
7379: PUSH
7380: LD_INT 14
7382: PUSH
7383: LD_INT 15
7385: PUSH
7386: LD_INT 16
7388: PUSH
7389: LD_INT 17
7391: PUSH
7392: LD_INT 18
7394: PUSH
7395: LD_INT 19
7397: PUSH
7398: LD_INT 20
7400: PUSH
7401: LD_INT 21
7403: PUSH
7404: LD_INT 22
7406: PUSH
7407: LD_INT 23
7409: PUSH
7410: LD_INT 24
7412: PUSH
7413: LD_INT 25
7415: PUSH
7416: LD_INT 26
7418: PUSH
7419: LD_INT 27
7421: PUSH
7422: LD_INT 28
7424: PUSH
7425: LD_INT 29
7427: PUSH
7428: LD_INT 30
7430: PUSH
7431: LD_INT 31
7433: PUSH
7434: LD_INT 32
7436: PUSH
7437: LD_INT 33
7439: PUSH
7440: LD_INT 34
7442: PUSH
7443: LD_INT 35
7445: PUSH
7446: LD_INT 36
7448: PUSH
7449: LD_INT 37
7451: PUSH
7452: LD_INT 38
7454: PUSH
7455: LD_INT 39
7457: PUSH
7458: EMPTY
7459: LIST
7460: LIST
7461: LIST
7462: LIST
7463: LIST
7464: LIST
7465: LIST
7466: LIST
7467: LIST
7468: LIST
7469: LIST
7470: LIST
7471: LIST
7472: LIST
7473: LIST
7474: LIST
7475: LIST
7476: LIST
7477: LIST
7478: LIST
7479: LIST
7480: LIST
7481: LIST
7482: LIST
7483: LIST
7484: LIST
7485: LIST
7486: LIST
7487: LIST
7488: LIST
7489: LIST
7490: LIST
7491: LIST
7492: LIST
7493: LIST
7494: LIST
7495: LIST
7496: LIST
7497: LIST
7498: LIST
7499: ST_TO_ADDR
// TechUnlock ( techs , side , 0 ) ;
7500: LD_VAR 0 3
7504: PPUSH
7505: LD_VAR 0 1
7509: PPUSH
7510: LD_INT 0
7512: PPUSH
7513: CALL 6947 0 3
// BuildingUnlock ( buildings , side , 0 ) ;
7517: LD_VAR 0 4
7521: PPUSH
7522: LD_VAR 0 1
7526: PPUSH
7527: LD_INT 0
7529: PPUSH
7530: CALL 6992 0 3
// end ;
7534: LD_VAR 0 2
7538: RET
// export function TechUpgrade ( tier , nation , side ) ; var techs , buildings , reinforcement , i ; begin
7539: LD_INT 0
7541: PPUSH
7542: PPUSH
7543: PPUSH
7544: PPUSH
7545: PPUSH
// techs := [ ] ;
7546: LD_ADDR_VAR 0 5
7550: PUSH
7551: EMPTY
7552: ST_TO_ADDR
// buildings := [ ] ;
7553: LD_ADDR_VAR 0 6
7557: PUSH
7558: EMPTY
7559: ST_TO_ADDR
// case tier of 0 :
7560: LD_VAR 0 1
7564: PUSH
7565: LD_INT 0
7567: DOUBLE
7568: EQUAL
7569: IFTRUE 7573
7571: GO 7917
7573: POP
// begin case nation of 1 :
7574: LD_VAR 0 2
7578: PUSH
7579: LD_INT 1
7581: DOUBLE
7582: EQUAL
7583: IFTRUE 7587
7585: GO 7692
7587: POP
// begin techs := [ 35 , 45 , 46 , 47 , 69 , 48 , 51 ] ;
7588: LD_ADDR_VAR 0 5
7592: PUSH
7593: LD_INT 35
7595: PUSH
7596: LD_INT 45
7598: PUSH
7599: LD_INT 46
7601: PUSH
7602: LD_INT 47
7604: PUSH
7605: LD_INT 69
7607: PUSH
7608: LD_INT 48
7610: PUSH
7611: LD_INT 51
7613: PUSH
7614: EMPTY
7615: LIST
7616: LIST
7617: LIST
7618: LIST
7619: LIST
7620: LIST
7621: LIST
7622: ST_TO_ADDR
// buildings := [ 0 , 2 , 3 , 4 , 6 , 7 , 8 , 10 , 16 , 19 , 26 , 27 , 29 , 31 , 32 ] ;
7623: LD_ADDR_VAR 0 6
7627: PUSH
7628: LD_INT 0
7630: PUSH
7631: LD_INT 2
7633: PUSH
7634: LD_INT 3
7636: PUSH
7637: LD_INT 4
7639: PUSH
7640: LD_INT 6
7642: PUSH
7643: LD_INT 7
7645: PUSH
7646: LD_INT 8
7648: PUSH
7649: LD_INT 10
7651: PUSH
7652: LD_INT 16
7654: PUSH
7655: LD_INT 19
7657: PUSH
7658: LD_INT 26
7660: PUSH
7661: LD_INT 27
7663: PUSH
7664: LD_INT 29
7666: PUSH
7667: LD_INT 31
7669: PUSH
7670: LD_INT 32
7672: PUSH
7673: EMPTY
7674: LIST
7675: LIST
7676: LIST
7677: LIST
7678: LIST
7679: LIST
7680: LIST
7681: LIST
7682: LIST
7683: LIST
7684: LIST
7685: LIST
7686: LIST
7687: LIST
7688: LIST
7689: ST_TO_ADDR
// end ; 2 :
7690: GO 7907
7692: LD_INT 2
7694: DOUBLE
7695: EQUAL
7696: IFTRUE 7700
7698: GO 7805
7700: POP
// begin techs := [ 35 , 45 , 46 , 47 , 69 , 48 , 51 ] ;
7701: LD_ADDR_VAR 0 5
7705: PUSH
7706: LD_INT 35
7708: PUSH
7709: LD_INT 45
7711: PUSH
7712: LD_INT 46
7714: PUSH
7715: LD_INT 47
7717: PUSH
7718: LD_INT 69
7720: PUSH
7721: LD_INT 48
7723: PUSH
7724: LD_INT 51
7726: PUSH
7727: EMPTY
7728: LIST
7729: LIST
7730: LIST
7731: LIST
7732: LIST
7733: LIST
7734: LIST
7735: ST_TO_ADDR
// buildings := [ 0 , 2 , 3 , 4 , 6 , 7 , 8 , 10 , 16 , 23 , 26 , 27 , 29 , 31 , 32 ] ;
7736: LD_ADDR_VAR 0 6
7740: PUSH
7741: LD_INT 0
7743: PUSH
7744: LD_INT 2
7746: PUSH
7747: LD_INT 3
7749: PUSH
7750: LD_INT 4
7752: PUSH
7753: LD_INT 6
7755: PUSH
7756: LD_INT 7
7758: PUSH
7759: LD_INT 8
7761: PUSH
7762: LD_INT 10
7764: PUSH
7765: LD_INT 16
7767: PUSH
7768: LD_INT 23
7770: PUSH
7771: LD_INT 26
7773: PUSH
7774: LD_INT 27
7776: PUSH
7777: LD_INT 29
7779: PUSH
7780: LD_INT 31
7782: PUSH
7783: LD_INT 32
7785: PUSH
7786: EMPTY
7787: LIST
7788: LIST
7789: LIST
7790: LIST
7791: LIST
7792: LIST
7793: LIST
7794: LIST
7795: LIST
7796: LIST
7797: LIST
7798: LIST
7799: LIST
7800: LIST
7801: LIST
7802: ST_TO_ADDR
// end ; 3 :
7803: GO 7907
7805: LD_INT 3
7807: DOUBLE
7808: EQUAL
7809: IFTRUE 7813
7811: GO 7906
7813: POP
// begin techs := [ 46 , 47 , 69 , 48 , 51 ] ;
7814: LD_ADDR_VAR 0 5
7818: PUSH
7819: LD_INT 46
7821: PUSH
7822: LD_INT 47
7824: PUSH
7825: LD_INT 69
7827: PUSH
7828: LD_INT 48
7830: PUSH
7831: LD_INT 51
7833: PUSH
7834: EMPTY
7835: LIST
7836: LIST
7837: LIST
7838: LIST
7839: LIST
7840: ST_TO_ADDR
// buildings := [ 0 , 2 , 3 , 4 , 6 , 7 , 8 , 10 , 16 , 19 , 26 , 29 , 31 , 32 ] ;
7841: LD_ADDR_VAR 0 6
7845: PUSH
7846: LD_INT 0
7848: PUSH
7849: LD_INT 2
7851: PUSH
7852: LD_INT 3
7854: PUSH
7855: LD_INT 4
7857: PUSH
7858: LD_INT 6
7860: PUSH
7861: LD_INT 7
7863: PUSH
7864: LD_INT 8
7866: PUSH
7867: LD_INT 10
7869: PUSH
7870: LD_INT 16
7872: PUSH
7873: LD_INT 19
7875: PUSH
7876: LD_INT 26
7878: PUSH
7879: LD_INT 29
7881: PUSH
7882: LD_INT 31
7884: PUSH
7885: LD_INT 32
7887: PUSH
7888: EMPTY
7889: LIST
7890: LIST
7891: LIST
7892: LIST
7893: LIST
7894: LIST
7895: LIST
7896: LIST
7897: LIST
7898: LIST
7899: LIST
7900: LIST
7901: LIST
7902: LIST
7903: ST_TO_ADDR
// end ; end ;
7904: GO 7907
7906: POP
// reinforcement := 3 ;
7907: LD_ADDR_VAR 0 7
7911: PUSH
7912: LD_INT 3
7914: ST_TO_ADDR
// end ; 1 :
7915: GO 10761
7917: LD_INT 1
7919: DOUBLE
7920: EQUAL
7921: IFTRUE 7925
7923: GO 8401
7925: POP
// begin case nation of 1 :
7926: LD_VAR 0 2
7930: PUSH
7931: LD_INT 1
7933: DOUBLE
7934: EQUAL
7935: IFTRUE 7939
7937: GO 8088
7939: POP
// begin techs := [ 35 , 45 , 46 , 47 , 6 , 7 , 20 , 69 , 39 , 48 , 49 , 51 , 52 , 60 ] ;
7940: LD_ADDR_VAR 0 5
7944: PUSH
7945: LD_INT 35
7947: PUSH
7948: LD_INT 45
7950: PUSH
7951: LD_INT 46
7953: PUSH
7954: LD_INT 47
7956: PUSH
7957: LD_INT 6
7959: PUSH
7960: LD_INT 7
7962: PUSH
7963: LD_INT 20
7965: PUSH
7966: LD_INT 69
7968: PUSH
7969: LD_INT 39
7971: PUSH
7972: LD_INT 48
7974: PUSH
7975: LD_INT 49
7977: PUSH
7978: LD_INT 51
7980: PUSH
7981: LD_INT 52
7983: PUSH
7984: LD_INT 60
7986: PUSH
7987: EMPTY
7988: LIST
7989: LIST
7990: LIST
7991: LIST
7992: LIST
7993: LIST
7994: LIST
7995: LIST
7996: LIST
7997: LIST
7998: LIST
7999: LIST
8000: LIST
8001: LIST
8002: ST_TO_ADDR
// buildings := [ 0 , 2 , 3 , 4 , 6 , 7 , 8 , 10 , 15 , 16 , 17 , 19 , 20 , 26 , 27 , 29 , 30 , 31 , 32 ] ;
8003: LD_ADDR_VAR 0 6
8007: PUSH
8008: LD_INT 0
8010: PUSH
8011: LD_INT 2
8013: PUSH
8014: LD_INT 3
8016: PUSH
8017: LD_INT 4
8019: PUSH
8020: LD_INT 6
8022: PUSH
8023: LD_INT 7
8025: PUSH
8026: LD_INT 8
8028: PUSH
8029: LD_INT 10
8031: PUSH
8032: LD_INT 15
8034: PUSH
8035: LD_INT 16
8037: PUSH
8038: LD_INT 17
8040: PUSH
8041: LD_INT 19
8043: PUSH
8044: LD_INT 20
8046: PUSH
8047: LD_INT 26
8049: PUSH
8050: LD_INT 27
8052: PUSH
8053: LD_INT 29
8055: PUSH
8056: LD_INT 30
8058: PUSH
8059: LD_INT 31
8061: PUSH
8062: LD_INT 32
8064: PUSH
8065: EMPTY
8066: LIST
8067: LIST
8068: LIST
8069: LIST
8070: LIST
8071: LIST
8072: LIST
8073: LIST
8074: LIST
8075: LIST
8076: LIST
8077: LIST
8078: LIST
8079: LIST
8080: LIST
8081: LIST
8082: LIST
8083: LIST
8084: LIST
8085: ST_TO_ADDR
// end ; 2 :
8086: GO 8391
8088: LD_INT 2
8090: DOUBLE
8091: EQUAL
8092: IFTRUE 8096
8094: GO 8253
8096: POP
// begin techs := [ 35 , 45 , 46 , 47 , 6 , 7 , 20 , 70 , 69 , 39 , 48 , 49 , 51 , 52 , 60 ] ;
8097: LD_ADDR_VAR 0 5
8101: PUSH
8102: LD_INT 35
8104: PUSH
8105: LD_INT 45
8107: PUSH
8108: LD_INT 46
8110: PUSH
8111: LD_INT 47
8113: PUSH
8114: LD_INT 6
8116: PUSH
8117: LD_INT 7
8119: PUSH
8120: LD_INT 20
8122: PUSH
8123: LD_INT 70
8125: PUSH
8126: LD_INT 69
8128: PUSH
8129: LD_INT 39
8131: PUSH
8132: LD_INT 48
8134: PUSH
8135: LD_INT 49
8137: PUSH
8138: LD_INT 51
8140: PUSH
8141: LD_INT 52
8143: PUSH
8144: LD_INT 60
8146: PUSH
8147: EMPTY
8148: LIST
8149: LIST
8150: LIST
8151: LIST
8152: LIST
8153: LIST
8154: LIST
8155: LIST
8156: LIST
8157: LIST
8158: LIST
8159: LIST
8160: LIST
8161: LIST
8162: LIST
8163: ST_TO_ADDR
// buildings := [ 0 , 2 , 3 , 4 , 6 , 7 , 8 , 10 , 15 , 16 , 17 , 20 , 23 , 26 , 27 , 29 , 30 , 31 , 32 , 42 ] ;
8164: LD_ADDR_VAR 0 6
8168: PUSH
8169: LD_INT 0
8171: PUSH
8172: LD_INT 2
8174: PUSH
8175: LD_INT 3
8177: PUSH
8178: LD_INT 4
8180: PUSH
8181: LD_INT 6
8183: PUSH
8184: LD_INT 7
8186: PUSH
8187: LD_INT 8
8189: PUSH
8190: LD_INT 10
8192: PUSH
8193: LD_INT 15
8195: PUSH
8196: LD_INT 16
8198: PUSH
8199: LD_INT 17
8201: PUSH
8202: LD_INT 20
8204: PUSH
8205: LD_INT 23
8207: PUSH
8208: LD_INT 26
8210: PUSH
8211: LD_INT 27
8213: PUSH
8214: LD_INT 29
8216: PUSH
8217: LD_INT 30
8219: PUSH
8220: LD_INT 31
8222: PUSH
8223: LD_INT 32
8225: PUSH
8226: LD_INT 42
8228: PUSH
8229: EMPTY
8230: LIST
8231: LIST
8232: LIST
8233: LIST
8234: LIST
8235: LIST
8236: LIST
8237: LIST
8238: LIST
8239: LIST
8240: LIST
8241: LIST
8242: LIST
8243: LIST
8244: LIST
8245: LIST
8246: LIST
8247: LIST
8248: LIST
8249: LIST
8250: ST_TO_ADDR
// end ; 3 :
8251: GO 8391
8253: LD_INT 3
8255: DOUBLE
8256: EQUAL
8257: IFTRUE 8261
8259: GO 8390
8261: POP
// begin techs := [ 46 , 47 , 9 , 20 , 69 , 39 , 48 , 49 , 51 , 52 , 57 ] ;
8262: LD_ADDR_VAR 0 5
8266: PUSH
8267: LD_INT 46
8269: PUSH
8270: LD_INT 47
8272: PUSH
8273: LD_INT 9
8275: PUSH
8276: LD_INT 20
8278: PUSH
8279: LD_INT 69
8281: PUSH
8282: LD_INT 39
8284: PUSH
8285: LD_INT 48
8287: PUSH
8288: LD_INT 49
8290: PUSH
8291: LD_INT 51
8293: PUSH
8294: LD_INT 52
8296: PUSH
8297: LD_INT 57
8299: PUSH
8300: EMPTY
8301: LIST
8302: LIST
8303: LIST
8304: LIST
8305: LIST
8306: LIST
8307: LIST
8308: LIST
8309: LIST
8310: LIST
8311: LIST
8312: ST_TO_ADDR
// buildings := [ 0 , 2 , 3 , 4 , 6 , 7 , 8 , 10 , 12 , 16 , 17 , 19 , 26 , 29 , 30 , 31 , 32 ] ;
8313: LD_ADDR_VAR 0 6
8317: PUSH
8318: LD_INT 0
8320: PUSH
8321: LD_INT 2
8323: PUSH
8324: LD_INT 3
8326: PUSH
8327: LD_INT 4
8329: PUSH
8330: LD_INT 6
8332: PUSH
8333: LD_INT 7
8335: PUSH
8336: LD_INT 8
8338: PUSH
8339: LD_INT 10
8341: PUSH
8342: LD_INT 12
8344: PUSH
8345: LD_INT 16
8347: PUSH
8348: LD_INT 17
8350: PUSH
8351: LD_INT 19
8353: PUSH
8354: LD_INT 26
8356: PUSH
8357: LD_INT 29
8359: PUSH
8360: LD_INT 30
8362: PUSH
8363: LD_INT 31
8365: PUSH
8366: LD_INT 32
8368: PUSH
8369: EMPTY
8370: LIST
8371: LIST
8372: LIST
8373: LIST
8374: LIST
8375: LIST
8376: LIST
8377: LIST
8378: LIST
8379: LIST
8380: LIST
8381: LIST
8382: LIST
8383: LIST
8384: LIST
8385: LIST
8386: LIST
8387: ST_TO_ADDR
// end ; end ;
8388: GO 8391
8390: POP
// reinforcement := 3 ;
8391: LD_ADDR_VAR 0 7
8395: PUSH
8396: LD_INT 3
8398: ST_TO_ADDR
// end ; 2 :
8399: GO 10761
8401: LD_INT 2
8403: DOUBLE
8404: EQUAL
8405: IFTRUE 8409
8407: GO 9025
8409: POP
// begin case nation of 1 :
8410: LD_VAR 0 2
8414: PUSH
8415: LD_INT 1
8417: DOUBLE
8418: EQUAL
8419: IFTRUE 8423
8421: GO 8600
8423: POP
// begin techs := [ 35 , 45 , 46 , 47 , 6 , 7 , 12 , 15 , 20 , 69 , 39 , 48 , 49 , 50 , 51 , 52 , 60 , 61 ] ;
8424: LD_ADDR_VAR 0 5
8428: PUSH
8429: LD_INT 35
8431: PUSH
8432: LD_INT 45
8434: PUSH
8435: LD_INT 46
8437: PUSH
8438: LD_INT 47
8440: PUSH
8441: LD_INT 6
8443: PUSH
8444: LD_INT 7
8446: PUSH
8447: LD_INT 12
8449: PUSH
8450: LD_INT 15
8452: PUSH
8453: LD_INT 20
8455: PUSH
8456: LD_INT 69
8458: PUSH
8459: LD_INT 39
8461: PUSH
8462: LD_INT 48
8464: PUSH
8465: LD_INT 49
8467: PUSH
8468: LD_INT 50
8470: PUSH
8471: LD_INT 51
8473: PUSH
8474: LD_INT 52
8476: PUSH
8477: LD_INT 60
8479: PUSH
8480: LD_INT 61
8482: PUSH
8483: EMPTY
8484: LIST
8485: LIST
8486: LIST
8487: LIST
8488: LIST
8489: LIST
8490: LIST
8491: LIST
8492: LIST
8493: LIST
8494: LIST
8495: LIST
8496: LIST
8497: LIST
8498: LIST
8499: LIST
8500: LIST
8501: LIST
8502: ST_TO_ADDR
// buildings := [ 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 10 , 15 , 16 , 17 , 19 , 20 , 26 , 27 , 29 , 30 , 31 , 32 , 36 ] ;
8503: LD_ADDR_VAR 0 6
8507: PUSH
8508: LD_INT 0
8510: PUSH
8511: LD_INT 1
8513: PUSH
8514: LD_INT 2
8516: PUSH
8517: LD_INT 3
8519: PUSH
8520: LD_INT 4
8522: PUSH
8523: LD_INT 5
8525: PUSH
8526: LD_INT 6
8528: PUSH
8529: LD_INT 7
8531: PUSH
8532: LD_INT 8
8534: PUSH
8535: LD_INT 10
8537: PUSH
8538: LD_INT 15
8540: PUSH
8541: LD_INT 16
8543: PUSH
8544: LD_INT 17
8546: PUSH
8547: LD_INT 19
8549: PUSH
8550: LD_INT 20
8552: PUSH
8553: LD_INT 26
8555: PUSH
8556: LD_INT 27
8558: PUSH
8559: LD_INT 29
8561: PUSH
8562: LD_INT 30
8564: PUSH
8565: LD_INT 31
8567: PUSH
8568: LD_INT 32
8570: PUSH
8571: LD_INT 36
8573: PUSH
8574: EMPTY
8575: LIST
8576: LIST
8577: LIST
8578: LIST
8579: LIST
8580: LIST
8581: LIST
8582: LIST
8583: LIST
8584: LIST
8585: LIST
8586: LIST
8587: LIST
8588: LIST
8589: LIST
8590: LIST
8591: LIST
8592: LIST
8593: LIST
8594: LIST
8595: LIST
8596: LIST
8597: ST_TO_ADDR
// end ; 2 :
8598: GO 9015
8600: LD_INT 2
8602: DOUBLE
8603: EQUAL
8604: IFTRUE 8608
8606: GO 8805
8608: POP
// begin techs := [ 35 , 45 , 46 , 47 , 5 , 6 , 7 , 15 , 17 , 20 , 70 , 69 , 39 , 41 , 42 , 48 , 49 , 50 , 51 , 52 , 60 , 61 , 66 ] ;
8609: LD_ADDR_VAR 0 5
8613: PUSH
8614: LD_INT 35
8616: PUSH
8617: LD_INT 45
8619: PUSH
8620: LD_INT 46
8622: PUSH
8623: LD_INT 47
8625: PUSH
8626: LD_INT 5
8628: PUSH
8629: LD_INT 6
8631: PUSH
8632: LD_INT 7
8634: PUSH
8635: LD_INT 15
8637: PUSH
8638: LD_INT 17
8640: PUSH
8641: LD_INT 20
8643: PUSH
8644: LD_INT 70
8646: PUSH
8647: LD_INT 69
8649: PUSH
8650: LD_INT 39
8652: PUSH
8653: LD_INT 41
8655: PUSH
8656: LD_INT 42
8658: PUSH
8659: LD_INT 48
8661: PUSH
8662: LD_INT 49
8664: PUSH
8665: LD_INT 50
8667: PUSH
8668: LD_INT 51
8670: PUSH
8671: LD_INT 52
8673: PUSH
8674: LD_INT 60
8676: PUSH
8677: LD_INT 61
8679: PUSH
8680: LD_INT 66
8682: PUSH
8683: EMPTY
8684: LIST
8685: LIST
8686: LIST
8687: LIST
8688: LIST
8689: LIST
8690: LIST
8691: LIST
8692: LIST
8693: LIST
8694: LIST
8695: LIST
8696: LIST
8697: LIST
8698: LIST
8699: LIST
8700: LIST
8701: LIST
8702: LIST
8703: LIST
8704: LIST
8705: LIST
8706: LIST
8707: ST_TO_ADDR
// buildings := [ 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 10 , 13 , 15 , 16 , 17 , 20 , 23 , 26 , 27 , 29 , 30 , 31 , 32 ] ;
8708: LD_ADDR_VAR 0 6
8712: PUSH
8713: LD_INT 0
8715: PUSH
8716: LD_INT 1
8718: PUSH
8719: LD_INT 2
8721: PUSH
8722: LD_INT 3
8724: PUSH
8725: LD_INT 4
8727: PUSH
8728: LD_INT 5
8730: PUSH
8731: LD_INT 6
8733: PUSH
8734: LD_INT 7
8736: PUSH
8737: LD_INT 8
8739: PUSH
8740: LD_INT 10
8742: PUSH
8743: LD_INT 13
8745: PUSH
8746: LD_INT 15
8748: PUSH
8749: LD_INT 16
8751: PUSH
8752: LD_INT 17
8754: PUSH
8755: LD_INT 20
8757: PUSH
8758: LD_INT 23
8760: PUSH
8761: LD_INT 26
8763: PUSH
8764: LD_INT 27
8766: PUSH
8767: LD_INT 29
8769: PUSH
8770: LD_INT 30
8772: PUSH
8773: LD_INT 31
8775: PUSH
8776: LD_INT 32
8778: PUSH
8779: EMPTY
8780: LIST
8781: LIST
8782: LIST
8783: LIST
8784: LIST
8785: LIST
8786: LIST
8787: LIST
8788: LIST
8789: LIST
8790: LIST
8791: LIST
8792: LIST
8793: LIST
8794: LIST
8795: LIST
8796: LIST
8797: LIST
8798: LIST
8799: LIST
8800: LIST
8801: LIST
8802: ST_TO_ADDR
// end ; 3 :
8803: GO 9015
8805: LD_INT 3
8807: DOUBLE
8808: EQUAL
8809: IFTRUE 8813
8811: GO 9014
8813: POP
// begin techs := [ 46 , 47 , 9 , 20 , 21 , 22 , 30 , 32 , 27 , 69 , 39 , 44 , 48 , 49 , 50 , 51 , 52 , 54 , 57 , 58 , 63 ] ;
8814: LD_ADDR_VAR 0 5
8818: PUSH
8819: LD_INT 46
8821: PUSH
8822: LD_INT 47
8824: PUSH
8825: LD_INT 9
8827: PUSH
8828: LD_INT 20
8830: PUSH
8831: LD_INT 21
8833: PUSH
8834: LD_INT 22
8836: PUSH
8837: LD_INT 30
8839: PUSH
8840: LD_INT 32
8842: PUSH
8843: LD_INT 27
8845: PUSH
8846: LD_INT 69
8848: PUSH
8849: LD_INT 39
8851: PUSH
8852: LD_INT 44
8854: PUSH
8855: LD_INT 48
8857: PUSH
8858: LD_INT 49
8860: PUSH
8861: LD_INT 50
8863: PUSH
8864: LD_INT 51
8866: PUSH
8867: LD_INT 52
8869: PUSH
8870: LD_INT 54
8872: PUSH
8873: LD_INT 57
8875: PUSH
8876: LD_INT 58
8878: PUSH
8879: LD_INT 63
8881: PUSH
8882: EMPTY
8883: LIST
8884: LIST
8885: LIST
8886: LIST
8887: LIST
8888: LIST
8889: LIST
8890: LIST
8891: LIST
8892: LIST
8893: LIST
8894: LIST
8895: LIST
8896: LIST
8897: LIST
8898: LIST
8899: LIST
8900: LIST
8901: LIST
8902: LIST
8903: LIST
8904: ST_TO_ADDR
// buildings := [ 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 10 , 11 , 12 , 14 , 16 , 17 , 19 , 21 , 24 , 26 , 28 , 29 , 30 , 31 , 32 , 33 ] ;
8905: LD_ADDR_VAR 0 6
8909: PUSH
8910: LD_INT 0
8912: PUSH
8913: LD_INT 1
8915: PUSH
8916: LD_INT 2
8918: PUSH
8919: LD_INT 3
8921: PUSH
8922: LD_INT 4
8924: PUSH
8925: LD_INT 5
8927: PUSH
8928: LD_INT 6
8930: PUSH
8931: LD_INT 7
8933: PUSH
8934: LD_INT 8
8936: PUSH
8937: LD_INT 10
8939: PUSH
8940: LD_INT 11
8942: PUSH
8943: LD_INT 12
8945: PUSH
8946: LD_INT 14
8948: PUSH
8949: LD_INT 16
8951: PUSH
8952: LD_INT 17
8954: PUSH
8955: LD_INT 19
8957: PUSH
8958: LD_INT 21
8960: PUSH
8961: LD_INT 24
8963: PUSH
8964: LD_INT 26
8966: PUSH
8967: LD_INT 28
8969: PUSH
8970: LD_INT 29
8972: PUSH
8973: LD_INT 30
8975: PUSH
8976: LD_INT 31
8978: PUSH
8979: LD_INT 32
8981: PUSH
8982: LD_INT 33
8984: PUSH
8985: EMPTY
8986: LIST
8987: LIST
8988: LIST
8989: LIST
8990: LIST
8991: LIST
8992: LIST
8993: LIST
8994: LIST
8995: LIST
8996: LIST
8997: LIST
8998: LIST
8999: LIST
9000: LIST
9001: LIST
9002: LIST
9003: LIST
9004: LIST
9005: LIST
9006: LIST
9007: LIST
9008: LIST
9009: LIST
9010: LIST
9011: ST_TO_ADDR
// end ; end ;
9012: GO 9015
9014: POP
// reinforcement := 4 ;
9015: LD_ADDR_VAR 0 7
9019: PUSH
9020: LD_INT 4
9022: ST_TO_ADDR
// end ; 3 :
9023: GO 10761
9025: LD_INT 3
9027: DOUBLE
9028: EQUAL
9029: IFTRUE 9033
9031: GO 9857
9033: POP
// begin case nation of 1 :
9034: LD_VAR 0 2
9038: PUSH
9039: LD_INT 1
9041: DOUBLE
9042: EQUAL
9043: IFTRUE 9047
9045: GO 9316
9047: POP
// begin techs := [ 35 , 45 , 46 , 47 , 6 , 7 , 12 , 13 , 10 , 15 , 16 , 20 , 21 , 22 , 32 , 27 , 69 , 39 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 57 , 58 , 59 , 60 , 61 , 62 ] ;
9048: LD_ADDR_VAR 0 5
9052: PUSH
9053: LD_INT 35
9055: PUSH
9056: LD_INT 45
9058: PUSH
9059: LD_INT 46
9061: PUSH
9062: LD_INT 47
9064: PUSH
9065: LD_INT 6
9067: PUSH
9068: LD_INT 7
9070: PUSH
9071: LD_INT 12
9073: PUSH
9074: LD_INT 13
9076: PUSH
9077: LD_INT 10
9079: PUSH
9080: LD_INT 15
9082: PUSH
9083: LD_INT 16
9085: PUSH
9086: LD_INT 20
9088: PUSH
9089: LD_INT 21
9091: PUSH
9092: LD_INT 22
9094: PUSH
9095: LD_INT 32
9097: PUSH
9098: LD_INT 27
9100: PUSH
9101: LD_INT 69
9103: PUSH
9104: LD_INT 39
9106: PUSH
9107: LD_INT 40
9109: PUSH
9110: LD_INT 48
9112: PUSH
9113: LD_INT 49
9115: PUSH
9116: LD_INT 50
9118: PUSH
9119: LD_INT 51
9121: PUSH
9122: LD_INT 52
9124: PUSH
9125: LD_INT 53
9127: PUSH
9128: LD_INT 54
9130: PUSH
9131: LD_INT 55
9133: PUSH
9134: LD_INT 57
9136: PUSH
9137: LD_INT 58
9139: PUSH
9140: LD_INT 59
9142: PUSH
9143: LD_INT 60
9145: PUSH
9146: LD_INT 61
9148: PUSH
9149: LD_INT 62
9151: PUSH
9152: EMPTY
9153: LIST
9154: LIST
9155: LIST
9156: LIST
9157: LIST
9158: LIST
9159: LIST
9160: LIST
9161: LIST
9162: LIST
9163: LIST
9164: LIST
9165: LIST
9166: LIST
9167: LIST
9168: LIST
9169: LIST
9170: LIST
9171: LIST
9172: LIST
9173: LIST
9174: LIST
9175: LIST
9176: LIST
9177: LIST
9178: LIST
9179: LIST
9180: LIST
9181: LIST
9182: LIST
9183: LIST
9184: LIST
9185: LIST
9186: ST_TO_ADDR
// buildings := [ 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 10 , 11 , 12 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 36 ] ;
9187: LD_ADDR_VAR 0 6
9191: PUSH
9192: LD_INT 0
9194: PUSH
9195: LD_INT 1
9197: PUSH
9198: LD_INT 2
9200: PUSH
9201: LD_INT 3
9203: PUSH
9204: LD_INT 4
9206: PUSH
9207: LD_INT 5
9209: PUSH
9210: LD_INT 6
9212: PUSH
9213: LD_INT 7
9215: PUSH
9216: LD_INT 8
9218: PUSH
9219: LD_INT 10
9221: PUSH
9222: LD_INT 11
9224: PUSH
9225: LD_INT 12
9227: PUSH
9228: LD_INT 15
9230: PUSH
9231: LD_INT 16
9233: PUSH
9234: LD_INT 17
9236: PUSH
9237: LD_INT 18
9239: PUSH
9240: LD_INT 19
9242: PUSH
9243: LD_INT 20
9245: PUSH
9246: LD_INT 21
9248: PUSH
9249: LD_INT 24
9251: PUSH
9252: LD_INT 25
9254: PUSH
9255: LD_INT 26
9257: PUSH
9258: LD_INT 27
9260: PUSH
9261: LD_INT 28
9263: PUSH
9264: LD_INT 29
9266: PUSH
9267: LD_INT 30
9269: PUSH
9270: LD_INT 31
9272: PUSH
9273: LD_INT 32
9275: PUSH
9276: LD_INT 33
9278: PUSH
9279: LD_INT 36
9281: PUSH
9282: EMPTY
9283: LIST
9284: LIST
9285: LIST
9286: LIST
9287: LIST
9288: LIST
9289: LIST
9290: LIST
9291: LIST
9292: LIST
9293: LIST
9294: LIST
9295: LIST
9296: LIST
9297: LIST
9298: LIST
9299: LIST
9300: LIST
9301: LIST
9302: LIST
9303: LIST
9304: LIST
9305: LIST
9306: LIST
9307: LIST
9308: LIST
9309: LIST
9310: LIST
9311: LIST
9312: LIST
9313: ST_TO_ADDR
// end ; 2 :
9314: GO 9847
9316: LD_INT 2
9318: DOUBLE
9319: EQUAL
9320: IFTRUE 9324
9322: GO 9589
9324: POP
// begin techs := [ 35 , 45 , 46 , 47 , 5 , 6 , 7 , 8 , 15 , 18 , 17 , 20 , 21 , 22 , 26 , 70 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 60 , 61 , 62 , 66 , 67 , 68 ] ;
9325: LD_ADDR_VAR 0 5
9329: PUSH
9330: LD_INT 35
9332: PUSH
9333: LD_INT 45
9335: PUSH
9336: LD_INT 46
9338: PUSH
9339: LD_INT 47
9341: PUSH
9342: LD_INT 5
9344: PUSH
9345: LD_INT 6
9347: PUSH
9348: LD_INT 7
9350: PUSH
9351: LD_INT 8
9353: PUSH
9354: LD_INT 15
9356: PUSH
9357: LD_INT 18
9359: PUSH
9360: LD_INT 17
9362: PUSH
9363: LD_INT 20
9365: PUSH
9366: LD_INT 21
9368: PUSH
9369: LD_INT 22
9371: PUSH
9372: LD_INT 26
9374: PUSH
9375: LD_INT 70
9377: PUSH
9378: LD_INT 69
9380: PUSH
9381: LD_INT 39
9383: PUSH
9384: LD_INT 40
9386: PUSH
9387: LD_INT 41
9389: PUSH
9390: LD_INT 42
9392: PUSH
9393: LD_INT 43
9395: PUSH
9396: LD_INT 48
9398: PUSH
9399: LD_INT 49
9401: PUSH
9402: LD_INT 50
9404: PUSH
9405: LD_INT 51
9407: PUSH
9408: LD_INT 52
9410: PUSH
9411: LD_INT 53
9413: PUSH
9414: LD_INT 54
9416: PUSH
9417: LD_INT 55
9419: PUSH
9420: LD_INT 60
9422: PUSH
9423: LD_INT 61
9425: PUSH
9426: LD_INT 62
9428: PUSH
9429: LD_INT 66
9431: PUSH
9432: LD_INT 67
9434: PUSH
9435: LD_INT 68
9437: PUSH
9438: EMPTY
9439: LIST
9440: LIST
9441: LIST
9442: LIST
9443: LIST
9444: LIST
9445: LIST
9446: LIST
9447: LIST
9448: LIST
9449: LIST
9450: LIST
9451: LIST
9452: LIST
9453: LIST
9454: LIST
9455: LIST
9456: LIST
9457: LIST
9458: LIST
9459: LIST
9460: LIST
9461: LIST
9462: LIST
9463: LIST
9464: LIST
9465: LIST
9466: LIST
9467: LIST
9468: LIST
9469: LIST
9470: LIST
9471: LIST
9472: LIST
9473: LIST
9474: LIST
9475: ST_TO_ADDR
// buildings := [ 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 10 , 11 , 13 , 15 , 16 , 17 , 18 , 20 , 21 , 23 , 26 , 27 , 28 , 29 , 30 , 31 , 32 ] ;
9476: LD_ADDR_VAR 0 6
9480: PUSH
9481: LD_INT 0
9483: PUSH
9484: LD_INT 1
9486: PUSH
9487: LD_INT 2
9489: PUSH
9490: LD_INT 3
9492: PUSH
9493: LD_INT 4
9495: PUSH
9496: LD_INT 5
9498: PUSH
9499: LD_INT 6
9501: PUSH
9502: LD_INT 7
9504: PUSH
9505: LD_INT 8
9507: PUSH
9508: LD_INT 10
9510: PUSH
9511: LD_INT 11
9513: PUSH
9514: LD_INT 13
9516: PUSH
9517: LD_INT 15
9519: PUSH
9520: LD_INT 16
9522: PUSH
9523: LD_INT 17
9525: PUSH
9526: LD_INT 18
9528: PUSH
9529: LD_INT 20
9531: PUSH
9532: LD_INT 21
9534: PUSH
9535: LD_INT 23
9537: PUSH
9538: LD_INT 26
9540: PUSH
9541: LD_INT 27
9543: PUSH
9544: LD_INT 28
9546: PUSH
9547: LD_INT 29
9549: PUSH
9550: LD_INT 30
9552: PUSH
9553: LD_INT 31
9555: PUSH
9556: LD_INT 32
9558: PUSH
9559: EMPTY
9560: LIST
9561: LIST
9562: LIST
9563: LIST
9564: LIST
9565: LIST
9566: LIST
9567: LIST
9568: LIST
9569: LIST
9570: LIST
9571: LIST
9572: LIST
9573: LIST
9574: LIST
9575: LIST
9576: LIST
9577: LIST
9578: LIST
9579: LIST
9580: LIST
9581: LIST
9582: LIST
9583: LIST
9584: LIST
9585: LIST
9586: ST_TO_ADDR
// end ; 3 :
9587: GO 9847
9589: LD_INT 3
9591: DOUBLE
9592: EQUAL
9593: IFTRUE 9597
9595: GO 9846
9597: POP
// begin techs := [ 46 , 47 , 9 , 20 , 19 , 21 , 22 , 28 , 29 , 30 , 37 , 32 , 27 , 69 , 39 , 34 , 40 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 ] ;
9598: LD_ADDR_VAR 0 5
9602: PUSH
9603: LD_INT 46
9605: PUSH
9606: LD_INT 47
9608: PUSH
9609: LD_INT 9
9611: PUSH
9612: LD_INT 20
9614: PUSH
9615: LD_INT 19
9617: PUSH
9618: LD_INT 21
9620: PUSH
9621: LD_INT 22
9623: PUSH
9624: LD_INT 28
9626: PUSH
9627: LD_INT 29
9629: PUSH
9630: LD_INT 30
9632: PUSH
9633: LD_INT 37
9635: PUSH
9636: LD_INT 32
9638: PUSH
9639: LD_INT 27
9641: PUSH
9642: LD_INT 69
9644: PUSH
9645: LD_INT 39
9647: PUSH
9648: LD_INT 34
9650: PUSH
9651: LD_INT 40
9653: PUSH
9654: LD_INT 44
9656: PUSH
9657: LD_INT 48
9659: PUSH
9660: LD_INT 49
9662: PUSH
9663: LD_INT 50
9665: PUSH
9666: LD_INT 51
9668: PUSH
9669: LD_INT 52
9671: PUSH
9672: LD_INT 53
9674: PUSH
9675: LD_INT 54
9677: PUSH
9678: LD_INT 55
9680: PUSH
9681: LD_INT 56
9683: PUSH
9684: LD_INT 57
9686: PUSH
9687: LD_INT 58
9689: PUSH
9690: LD_INT 59
9692: PUSH
9693: LD_INT 63
9695: PUSH
9696: LD_INT 64
9698: PUSH
9699: EMPTY
9700: LIST
9701: LIST
9702: LIST
9703: LIST
9704: LIST
9705: LIST
9706: LIST
9707: LIST
9708: LIST
9709: LIST
9710: LIST
9711: LIST
9712: LIST
9713: LIST
9714: LIST
9715: LIST
9716: LIST
9717: LIST
9718: LIST
9719: LIST
9720: LIST
9721: LIST
9722: LIST
9723: LIST
9724: LIST
9725: LIST
9726: LIST
9727: LIST
9728: LIST
9729: LIST
9730: LIST
9731: LIST
9732: ST_TO_ADDR
// buildings := [ 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 10 , 11 , 12 , 14 , 16 , 17 , 18 , 19 , 21 , 24 , 26 , 28 , 29 , 30 , 31 , 32 , 33 ] ;
9733: LD_ADDR_VAR 0 6
9737: PUSH
9738: LD_INT 0
9740: PUSH
9741: LD_INT 1
9743: PUSH
9744: LD_INT 2
9746: PUSH
9747: LD_INT 3
9749: PUSH
9750: LD_INT 4
9752: PUSH
9753: LD_INT 5
9755: PUSH
9756: LD_INT 6
9758: PUSH
9759: LD_INT 7
9761: PUSH
9762: LD_INT 8
9764: PUSH
9765: LD_INT 10
9767: PUSH
9768: LD_INT 11
9770: PUSH
9771: LD_INT 12
9773: PUSH
9774: LD_INT 14
9776: PUSH
9777: LD_INT 16
9779: PUSH
9780: LD_INT 17
9782: PUSH
9783: LD_INT 18
9785: PUSH
9786: LD_INT 19
9788: PUSH
9789: LD_INT 21
9791: PUSH
9792: LD_INT 24
9794: PUSH
9795: LD_INT 26
9797: PUSH
9798: LD_INT 28
9800: PUSH
9801: LD_INT 29
9803: PUSH
9804: LD_INT 30
9806: PUSH
9807: LD_INT 31
9809: PUSH
9810: LD_INT 32
9812: PUSH
9813: LD_INT 33
9815: PUSH
9816: EMPTY
9817: LIST
9818: LIST
9819: LIST
9820: LIST
9821: LIST
9822: LIST
9823: LIST
9824: LIST
9825: LIST
9826: LIST
9827: LIST
9828: LIST
9829: LIST
9830: LIST
9831: LIST
9832: LIST
9833: LIST
9834: LIST
9835: LIST
9836: LIST
9837: LIST
9838: LIST
9839: LIST
9840: LIST
9841: LIST
9842: LIST
9843: ST_TO_ADDR
// end ; end ;
9844: GO 9847
9846: POP
// reinforcement := 4 ;
9847: LD_ADDR_VAR 0 7
9851: PUSH
9852: LD_INT 4
9854: ST_TO_ADDR
// end ; 4 :
9855: GO 10761
9857: LD_INT 4
9859: DOUBLE
9860: EQUAL
9861: IFTRUE 9865
9863: GO 10760
9865: POP
// begin case nation of 1 :
9866: LD_VAR 0 2
9870: PUSH
9871: LD_INT 1
9873: DOUBLE
9874: EQUAL
9875: IFTRUE 9879
9877: GO 10168
9879: POP
// begin techs := [ 35 , 45 , 46 , 47 , 6 , 7 , 12 , 13 , 10 , 14 , 15 , 16 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 ] ;
9880: LD_ADDR_VAR 0 5
9884: PUSH
9885: LD_INT 35
9887: PUSH
9888: LD_INT 45
9890: PUSH
9891: LD_INT 46
9893: PUSH
9894: LD_INT 47
9896: PUSH
9897: LD_INT 6
9899: PUSH
9900: LD_INT 7
9902: PUSH
9903: LD_INT 12
9905: PUSH
9906: LD_INT 13
9908: PUSH
9909: LD_INT 10
9911: PUSH
9912: LD_INT 14
9914: PUSH
9915: LD_INT 15
9917: PUSH
9918: LD_INT 16
9920: PUSH
9921: LD_INT 20
9923: PUSH
9924: LD_INT 21
9926: PUSH
9927: LD_INT 22
9929: PUSH
9930: LD_INT 25
9932: PUSH
9933: LD_INT 32
9935: PUSH
9936: LD_INT 27
9938: PUSH
9939: LD_INT 36
9941: PUSH
9942: LD_INT 69
9944: PUSH
9945: LD_INT 39
9947: PUSH
9948: LD_INT 34
9950: PUSH
9951: LD_INT 40
9953: PUSH
9954: LD_INT 48
9956: PUSH
9957: LD_INT 49
9959: PUSH
9960: LD_INT 50
9962: PUSH
9963: LD_INT 51
9965: PUSH
9966: LD_INT 52
9968: PUSH
9969: LD_INT 53
9971: PUSH
9972: LD_INT 54
9974: PUSH
9975: LD_INT 55
9977: PUSH
9978: LD_INT 56
9980: PUSH
9981: LD_INT 57
9983: PUSH
9984: LD_INT 58
9986: PUSH
9987: LD_INT 59
9989: PUSH
9990: LD_INT 60
9992: PUSH
9993: LD_INT 61
9995: PUSH
9996: LD_INT 62
9998: PUSH
9999: EMPTY
10000: LIST
10001: LIST
10002: LIST
10003: LIST
10004: LIST
10005: LIST
10006: LIST
10007: LIST
10008: LIST
10009: LIST
10010: LIST
10011: LIST
10012: LIST
10013: LIST
10014: LIST
10015: LIST
10016: LIST
10017: LIST
10018: LIST
10019: LIST
10020: LIST
10021: LIST
10022: LIST
10023: LIST
10024: LIST
10025: LIST
10026: LIST
10027: LIST
10028: LIST
10029: LIST
10030: LIST
10031: LIST
10032: LIST
10033: LIST
10034: LIST
10035: LIST
10036: LIST
10037: LIST
10038: ST_TO_ADDR
// buildings := [ 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 10 , 11 , 12 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 36 ] ;
10039: LD_ADDR_VAR 0 6
10043: PUSH
10044: LD_INT 0
10046: PUSH
10047: LD_INT 1
10049: PUSH
10050: LD_INT 2
10052: PUSH
10053: LD_INT 3
10055: PUSH
10056: LD_INT 4
10058: PUSH
10059: LD_INT 5
10061: PUSH
10062: LD_INT 6
10064: PUSH
10065: LD_INT 7
10067: PUSH
10068: LD_INT 8
10070: PUSH
10071: LD_INT 10
10073: PUSH
10074: LD_INT 11
10076: PUSH
10077: LD_INT 12
10079: PUSH
10080: LD_INT 15
10082: PUSH
10083: LD_INT 16
10085: PUSH
10086: LD_INT 17
10088: PUSH
10089: LD_INT 18
10091: PUSH
10092: LD_INT 19
10094: PUSH
10095: LD_INT 20
10097: PUSH
10098: LD_INT 21
10100: PUSH
10101: LD_INT 24
10103: PUSH
10104: LD_INT 25
10106: PUSH
10107: LD_INT 26
10109: PUSH
10110: LD_INT 27
10112: PUSH
10113: LD_INT 28
10115: PUSH
10116: LD_INT 29
10118: PUSH
10119: LD_INT 30
10121: PUSH
10122: LD_INT 31
10124: PUSH
10125: LD_INT 32
10127: PUSH
10128: LD_INT 33
10130: PUSH
10131: LD_INT 36
10133: PUSH
10134: EMPTY
10135: LIST
10136: LIST
10137: LIST
10138: LIST
10139: LIST
10140: LIST
10141: LIST
10142: LIST
10143: LIST
10144: LIST
10145: LIST
10146: LIST
10147: LIST
10148: LIST
10149: LIST
10150: LIST
10151: LIST
10152: LIST
10153: LIST
10154: LIST
10155: LIST
10156: LIST
10157: LIST
10158: LIST
10159: LIST
10160: LIST
10161: LIST
10162: LIST
10163: LIST
10164: LIST
10165: ST_TO_ADDR
// end ; 2 :
10166: GO 10743
10168: LD_INT 2
10170: DOUBLE
10171: EQUAL
10172: IFTRUE 10176
10174: GO 10449
10176: POP
// begin techs := [ 35 , 45 , 46 , 47 , 5 , 6 , 7 , 8 , 15 , 18 , 17 , 20 , 21 , 22 , 25 , 26 , 70 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 ] ;
10177: LD_ADDR_VAR 0 5
10181: PUSH
10182: LD_INT 35
10184: PUSH
10185: LD_INT 45
10187: PUSH
10188: LD_INT 46
10190: PUSH
10191: LD_INT 47
10193: PUSH
10194: LD_INT 5
10196: PUSH
10197: LD_INT 6
10199: PUSH
10200: LD_INT 7
10202: PUSH
10203: LD_INT 8
10205: PUSH
10206: LD_INT 15
10208: PUSH
10209: LD_INT 18
10211: PUSH
10212: LD_INT 17
10214: PUSH
10215: LD_INT 20
10217: PUSH
10218: LD_INT 21
10220: PUSH
10221: LD_INT 22
10223: PUSH
10224: LD_INT 25
10226: PUSH
10227: LD_INT 26
10229: PUSH
10230: LD_INT 70
10232: PUSH
10233: LD_INT 69
10235: PUSH
10236: LD_INT 39
10238: PUSH
10239: LD_INT 40
10241: PUSH
10242: LD_INT 41
10244: PUSH
10245: LD_INT 42
10247: PUSH
10248: LD_INT 43
10250: PUSH
10251: LD_INT 48
10253: PUSH
10254: LD_INT 49
10256: PUSH
10257: LD_INT 50
10259: PUSH
10260: LD_INT 51
10262: PUSH
10263: LD_INT 52
10265: PUSH
10266: LD_INT 53
10268: PUSH
10269: LD_INT 54
10271: PUSH
10272: LD_INT 55
10274: PUSH
10275: LD_INT 56
10277: PUSH
10278: LD_INT 60
10280: PUSH
10281: LD_INT 61
10283: PUSH
10284: LD_INT 62
10286: PUSH
10287: LD_INT 66
10289: PUSH
10290: LD_INT 67
10292: PUSH
10293: LD_INT 68
10295: PUSH
10296: EMPTY
10297: LIST
10298: LIST
10299: LIST
10300: LIST
10301: LIST
10302: LIST
10303: LIST
10304: LIST
10305: LIST
10306: LIST
10307: LIST
10308: LIST
10309: LIST
10310: LIST
10311: LIST
10312: LIST
10313: LIST
10314: LIST
10315: LIST
10316: LIST
10317: LIST
10318: LIST
10319: LIST
10320: LIST
10321: LIST
10322: LIST
10323: LIST
10324: LIST
10325: LIST
10326: LIST
10327: LIST
10328: LIST
10329: LIST
10330: LIST
10331: LIST
10332: LIST
10333: LIST
10334: LIST
10335: ST_TO_ADDR
// buildings := [ 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 10 , 11 , 13 , 15 , 16 , 17 , 18 , 20 , 21 , 23 , 26 , 27 , 28 , 29 , 30 , 31 , 32 ] ;
10336: LD_ADDR_VAR 0 6
10340: PUSH
10341: LD_INT 0
10343: PUSH
10344: LD_INT 1
10346: PUSH
10347: LD_INT 2
10349: PUSH
10350: LD_INT 3
10352: PUSH
10353: LD_INT 4
10355: PUSH
10356: LD_INT 5
10358: PUSH
10359: LD_INT 6
10361: PUSH
10362: LD_INT 7
10364: PUSH
10365: LD_INT 8
10367: PUSH
10368: LD_INT 10
10370: PUSH
10371: LD_INT 11
10373: PUSH
10374: LD_INT 13
10376: PUSH
10377: LD_INT 15
10379: PUSH
10380: LD_INT 16
10382: PUSH
10383: LD_INT 17
10385: PUSH
10386: LD_INT 18
10388: PUSH
10389: LD_INT 20
10391: PUSH
10392: LD_INT 21
10394: PUSH
10395: LD_INT 23
10397: PUSH
10398: LD_INT 26
10400: PUSH
10401: LD_INT 27
10403: PUSH
10404: LD_INT 28
10406: PUSH
10407: LD_INT 29
10409: PUSH
10410: LD_INT 30
10412: PUSH
10413: LD_INT 31
10415: PUSH
10416: LD_INT 32
10418: PUSH
10419: EMPTY
10420: LIST
10421: LIST
10422: LIST
10423: LIST
10424: LIST
10425: LIST
10426: LIST
10427: LIST
10428: LIST
10429: LIST
10430: LIST
10431: LIST
10432: LIST
10433: LIST
10434: LIST
10435: LIST
10436: LIST
10437: LIST
10438: LIST
10439: LIST
10440: LIST
10441: LIST
10442: LIST
10443: LIST
10444: LIST
10445: LIST
10446: ST_TO_ADDR
// end ; 3 :
10447: GO 10743
10449: LD_INT 3
10451: DOUBLE
10452: EQUAL
10453: IFTRUE 10457
10455: GO 10742
10457: POP
// begin techs := [ 46 , 47 , 9 , 20 , 19 , 21 , 22 , 23 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 ] ;
10458: LD_ADDR_VAR 0 5
10462: PUSH
10463: LD_INT 46
10465: PUSH
10466: LD_INT 47
10468: PUSH
10469: LD_INT 9
10471: PUSH
10472: LD_INT 20
10474: PUSH
10475: LD_INT 19
10477: PUSH
10478: LD_INT 21
10480: PUSH
10481: LD_INT 22
10483: PUSH
10484: LD_INT 23
10486: PUSH
10487: LD_INT 25
10489: PUSH
10490: LD_INT 28
10492: PUSH
10493: LD_INT 29
10495: PUSH
10496: LD_INT 30
10498: PUSH
10499: LD_INT 31
10501: PUSH
10502: LD_INT 37
10504: PUSH
10505: LD_INT 38
10507: PUSH
10508: LD_INT 32
10510: PUSH
10511: LD_INT 27
10513: PUSH
10514: LD_INT 33
10516: PUSH
10517: LD_INT 69
10519: PUSH
10520: LD_INT 39
10522: PUSH
10523: LD_INT 34
10525: PUSH
10526: LD_INT 40
10528: PUSH
10529: LD_INT 71
10531: PUSH
10532: LD_INT 44
10534: PUSH
10535: LD_INT 48
10537: PUSH
10538: LD_INT 49
10540: PUSH
10541: LD_INT 50
10543: PUSH
10544: LD_INT 51
10546: PUSH
10547: LD_INT 52
10549: PUSH
10550: LD_INT 53
10552: PUSH
10553: LD_INT 54
10555: PUSH
10556: LD_INT 55
10558: PUSH
10559: LD_INT 56
10561: PUSH
10562: LD_INT 57
10564: PUSH
10565: LD_INT 58
10567: PUSH
10568: LD_INT 59
10570: PUSH
10571: LD_INT 63
10573: PUSH
10574: LD_INT 64
10576: PUSH
10577: LD_INT 65
10579: PUSH
10580: EMPTY
10581: LIST
10582: LIST
10583: LIST
10584: LIST
10585: LIST
10586: LIST
10587: LIST
10588: LIST
10589: LIST
10590: LIST
10591: LIST
10592: LIST
10593: LIST
10594: LIST
10595: LIST
10596: LIST
10597: LIST
10598: LIST
10599: LIST
10600: LIST
10601: LIST
10602: LIST
10603: LIST
10604: LIST
10605: LIST
10606: LIST
10607: LIST
10608: LIST
10609: LIST
10610: LIST
10611: LIST
10612: LIST
10613: LIST
10614: LIST
10615: LIST
10616: LIST
10617: LIST
10618: LIST
10619: LIST
10620: ST_TO_ADDR
// buildings := [ 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 10 , 11 , 12 , 14 , 16 , 17 , 18 , 19 , 21 , 24 , 26 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 37 ] ;
10621: LD_ADDR_VAR 0 6
10625: PUSH
10626: LD_INT 0
10628: PUSH
10629: LD_INT 1
10631: PUSH
10632: LD_INT 2
10634: PUSH
10635: LD_INT 3
10637: PUSH
10638: LD_INT 4
10640: PUSH
10641: LD_INT 5
10643: PUSH
10644: LD_INT 6
10646: PUSH
10647: LD_INT 7
10649: PUSH
10650: LD_INT 8
10652: PUSH
10653: LD_INT 10
10655: PUSH
10656: LD_INT 11
10658: PUSH
10659: LD_INT 12
10661: PUSH
10662: LD_INT 14
10664: PUSH
10665: LD_INT 16
10667: PUSH
10668: LD_INT 17
10670: PUSH
10671: LD_INT 18
10673: PUSH
10674: LD_INT 19
10676: PUSH
10677: LD_INT 21
10679: PUSH
10680: LD_INT 24
10682: PUSH
10683: LD_INT 26
10685: PUSH
10686: LD_INT 28
10688: PUSH
10689: LD_INT 29
10691: PUSH
10692: LD_INT 30
10694: PUSH
10695: LD_INT 31
10697: PUSH
10698: LD_INT 32
10700: PUSH
10701: LD_INT 33
10703: PUSH
10704: LD_INT 34
10706: PUSH
10707: LD_INT 37
10709: PUSH
10710: EMPTY
10711: LIST
10712: LIST
10713: LIST
10714: LIST
10715: LIST
10716: LIST
10717: LIST
10718: LIST
10719: LIST
10720: LIST
10721: LIST
10722: LIST
10723: LIST
10724: LIST
10725: LIST
10726: LIST
10727: LIST
10728: LIST
10729: LIST
10730: LIST
10731: LIST
10732: LIST
10733: LIST
10734: LIST
10735: LIST
10736: LIST
10737: LIST
10738: LIST
10739: ST_TO_ADDR
// end ; end ;
10740: GO 10743
10742: POP
// reinforcement := 5 ;
10743: LD_ADDR_VAR 0 7
10747: PUSH
10748: LD_INT 5
10750: ST_TO_ADDR
// ToLua ( LUA_SideTechMax(); ) ;
10751: LD_STRING LUA_SideTechMax();
10753: PPUSH
10754: CALL_OW 559
// end ; end ;
10758: GO 10761
10760: POP
// side_reinforcement_cap := Replace ( side_reinforcement_cap , side , reinforcement ) ;
10761: LD_ADDR_EXP 57
10765: PUSH
10766: LD_EXP 57
10770: PPUSH
10771: LD_VAR 0 3
10775: PPUSH
10776: LD_VAR 0 7
10780: PPUSH
10781: CALL_OW 1
10785: ST_TO_ADDR
// TechUnlock ( techs , side , 1 ) ;
10786: LD_VAR 0 5
10790: PPUSH
10791: LD_VAR 0 3
10795: PPUSH
10796: LD_INT 1
10798: PPUSH
10799: CALL 6947 0 3
// BuildingUnlock ( buildings , side , 1 ) ;
10803: LD_VAR 0 6
10807: PPUSH
10808: LD_VAR 0 3
10812: PPUSH
10813: LD_INT 1
10815: PPUSH
10816: CALL 6992 0 3
// end ;
10820: LD_VAR 0 4
10824: RET
// export function FillUpVehicles ( vehicle , crates , oil , siberite ) ; var occupied ; begin
10825: LD_INT 0
10827: PPUSH
10828: PPUSH
// if crates >= 100 then
10829: LD_VAR 0 2
10833: PUSH
10834: LD_INT 100
10836: GREATEREQUAL
10837: IFFALSE 10870
// begin AddCargo ( vehicle , mat_cans , 100 ) ;
10839: LD_VAR 0 1
10843: PPUSH
10844: LD_INT 1
10846: PPUSH
10847: LD_INT 100
10849: PPUSH
10850: CALL_OW 291
// crates := crates - 100 ;
10854: LD_ADDR_VAR 0 2
10858: PUSH
10859: LD_VAR 0 2
10863: PUSH
10864: LD_INT 100
10866: MINUS
10867: ST_TO_ADDR
// end else
10868: GO 11071
// begin AddCargo ( vehicle , mat_cans , crates ) ;
10870: LD_VAR 0 1
10874: PPUSH
10875: LD_INT 1
10877: PPUSH
10878: LD_VAR 0 2
10882: PPUSH
10883: CALL_OW 291
// occupied := crates ;
10887: LD_ADDR_VAR 0 6
10891: PUSH
10892: LD_VAR 0 2
10896: ST_TO_ADDR
// crates := 0 ;
10897: LD_ADDR_VAR 0 2
10901: PUSH
10902: LD_INT 0
10904: ST_TO_ADDR
// if oil >= 100 then
10905: LD_VAR 0 3
10909: PUSH
10910: LD_INT 100
10912: GREATEREQUAL
10913: IFFALSE 10958
// begin AddCargo ( vehicle , mat_oil , 100 - occupied ) ;
10915: LD_VAR 0 1
10919: PPUSH
10920: LD_INT 2
10922: PPUSH
10923: LD_INT 100
10925: PUSH
10926: LD_VAR 0 6
10930: MINUS
10931: PPUSH
10932: CALL_OW 291
// oil := oil - 100 + occupied ;
10936: LD_ADDR_VAR 0 3
10940: PUSH
10941: LD_VAR 0 3
10945: PUSH
10946: LD_INT 100
10948: MINUS
10949: PUSH
10950: LD_VAR 0 6
10954: PLUS
10955: ST_TO_ADDR
// end else
10956: GO 11071
// begin AddCargo ( vehicle , mat_oil , oil ) ;
10958: LD_VAR 0 1
10962: PPUSH
10963: LD_INT 2
10965: PPUSH
10966: LD_VAR 0 3
10970: PPUSH
10971: CALL_OW 291
// occupied := oil ;
10975: LD_ADDR_VAR 0 6
10979: PUSH
10980: LD_VAR 0 3
10984: ST_TO_ADDR
// oil := 0 ;
10985: LD_ADDR_VAR 0 3
10989: PUSH
10990: LD_INT 0
10992: ST_TO_ADDR
// if siberite >= 100 then
10993: LD_VAR 0 4
10997: PUSH
10998: LD_INT 100
11000: GREATEREQUAL
11001: IFFALSE 11046
// begin AddCargo ( vehicle , mat_siberit , 100 - occupied ) ;
11003: LD_VAR 0 1
11007: PPUSH
11008: LD_INT 3
11010: PPUSH
11011: LD_INT 100
11013: PUSH
11014: LD_VAR 0 6
11018: MINUS
11019: PPUSH
11020: CALL_OW 291
// siberite := siberite - 100 + occupied ;
11024: LD_ADDR_VAR 0 4
11028: PUSH
11029: LD_VAR 0 4
11033: PUSH
11034: LD_INT 100
11036: MINUS
11037: PUSH
11038: LD_VAR 0 6
11042: PLUS
11043: ST_TO_ADDR
// end else
11044: GO 11071
// begin AddCargo ( vehicle , mat_siberit , siberite ) ;
11046: LD_VAR 0 1
11050: PPUSH
11051: LD_INT 3
11053: PPUSH
11054: LD_VAR 0 4
11058: PPUSH
11059: CALL_OW 291
// siberite := 0 ;
11063: LD_ADDR_VAR 0 4
11067: PUSH
11068: LD_INT 0
11070: ST_TO_ADDR
// end ; end ; end ; result := [ vehicle , crates , oil , siberite ] ;
11071: LD_ADDR_VAR 0 5
11075: PUSH
11076: LD_VAR 0 1
11080: PUSH
11081: LD_VAR 0 2
11085: PUSH
11086: LD_VAR 0 3
11090: PUSH
11091: LD_VAR 0 4
11095: PUSH
11096: EMPTY
11097: LIST
11098: LIST
11099: LIST
11100: LIST
11101: ST_TO_ADDR
// end ;
11102: LD_VAR 0 5
11106: RET
// export function RotateUnit ( in_direction , rotation ) ; var r ; begin
11107: LD_INT 0
11109: PPUSH
11110: PPUSH
// rotation := rotation mod 6 ;
11111: LD_ADDR_VAR 0 2
11115: PUSH
11116: LD_VAR 0 2
11120: PUSH
11121: LD_INT 6
11123: MOD
11124: ST_TO_ADDR
// r := in_direction + rotation ;
11125: LD_ADDR_VAR 0 4
11129: PUSH
11130: LD_VAR 0 1
11134: PUSH
11135: LD_VAR 0 2
11139: PLUS
11140: ST_TO_ADDR
// if r >= 6 then
11141: LD_VAR 0 4
11145: PUSH
11146: LD_INT 6
11148: GREATEREQUAL
11149: IFFALSE 11165
// rotation := rotation - 6 ;
11151: LD_ADDR_VAR 0 2
11155: PUSH
11156: LD_VAR 0 2
11160: PUSH
11161: LD_INT 6
11163: MINUS
11164: ST_TO_ADDR
// if r <= 1 then
11165: LD_VAR 0 4
11169: PUSH
11170: LD_INT 1
11172: LESSEQUAL
11173: IFFALSE 11189
// rotation := rotation + 6 ;
11175: LD_ADDR_VAR 0 2
11179: PUSH
11180: LD_VAR 0 2
11184: PUSH
11185: LD_INT 6
11187: PLUS
11188: ST_TO_ADDR
// result := in_direction + rotation ;
11189: LD_ADDR_VAR 0 3
11193: PUSH
11194: LD_VAR 0 1
11198: PUSH
11199: LD_VAR 0 2
11203: PLUS
11204: ST_TO_ADDR
// end ; end_of_file
11205: LD_VAR 0 3
11209: RET
// on BuildingStarted ( b , u ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
11210: LD_VAR 0 1
11214: PPUSH
11215: CALL_OW 266
11219: PUSH
11220: LD_INT 0
11222: PUSH
11223: LD_INT 1
11225: PUSH
11226: EMPTY
11227: LIST
11228: LIST
11229: IN
11230: IFFALSE 11365
// begin SetBName ( b , @ & GetSide ( b ) ) ;
11232: LD_VAR 0 1
11236: PPUSH
11237: LD_STRING @
11239: PUSH
11240: LD_VAR 0 1
11244: PPUSH
11245: CALL_OW 255
11249: STR
11250: PPUSH
11251: CALL_OW 500
// if GetSide ( b ) = Your_Side then
11255: LD_VAR 0 1
11259: PPUSH
11260: CALL_OW 255
11264: PUSH
11265: LD_OWVAR 2
11269: EQUAL
11270: IFFALSE 11337
// if FilterAllUnits ( [ [ f_side , b ] , [ f_btype , b_depot ] , [ f_or ] , [ f_btype , b_warehouse ] ] ) + 0 = 0 then
11272: LD_INT 22
11274: PUSH
11275: LD_VAR 0 1
11279: PUSH
11280: EMPTY
11281: LIST
11282: LIST
11283: PUSH
11284: LD_INT 30
11286: PUSH
11287: LD_INT 0
11289: PUSH
11290: EMPTY
11291: LIST
11292: LIST
11293: PUSH
11294: LD_INT 2
11296: PUSH
11297: EMPTY
11298: LIST
11299: PUSH
11300: LD_INT 30
11302: PUSH
11303: LD_INT 1
11305: PUSH
11306: EMPTY
11307: LIST
11308: LIST
11309: PUSH
11310: EMPTY
11311: LIST
11312: LIST
11313: LIST
11314: LIST
11315: PPUSH
11316: CALL_OW 69
11320: PUSH
11321: LD_INT 0
11323: PLUS
11324: PUSH
11325: LD_INT 0
11327: EQUAL
11328: IFFALSE 11337
// ToLua ( LUA_IsDepot(); ) ;
11330: LD_STRING LUA_IsDepot();
11332: PPUSH
11333: CALL_OW 559
// if side_tech_lvl [ GetSide ( b ) ] = 4 then
11337: LD_EXP 31
11341: PUSH
11342: LD_VAR 0 1
11346: PPUSH
11347: CALL_OW 255
11351: ARRAY
11352: PUSH
11353: LD_INT 4
11355: EQUAL
11356: IFFALSE 11365
// ToLua ( LUA_SideTechMax() ) ;
11358: LD_STRING LUA_SideTechMax()
11360: PPUSH
11361: CALL_OW 559
// end ; end ;
11365: PPOPN 2
11367: END
// on BuildingCaptured ( b , o , e ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
11368: LD_VAR 0 1
11372: PPUSH
11373: CALL_OW 266
11377: PUSH
11378: LD_INT 0
11380: PUSH
11381: LD_INT 1
11383: PUSH
11384: EMPTY
11385: LIST
11386: LIST
11387: IN
11388: IFFALSE 11571
// begin SetBName ( b , @ & GetSide ( b ) ) ;
11390: LD_VAR 0 1
11394: PPUSH
11395: LD_STRING @
11397: PUSH
11398: LD_VAR 0 1
11402: PPUSH
11403: CALL_OW 255
11407: STR
11408: PPUSH
11409: CALL_OW 500
// if FilterAllUnits ( [ [ f_side , b ] , [ f_btype , b_depot ] , [ f_or ] , [ f_btype , b_warehouse ] ] ) + 0 = 0 then
11413: LD_INT 22
11415: PUSH
11416: LD_VAR 0 1
11420: PUSH
11421: EMPTY
11422: LIST
11423: LIST
11424: PUSH
11425: LD_INT 30
11427: PUSH
11428: LD_INT 0
11430: PUSH
11431: EMPTY
11432: LIST
11433: LIST
11434: PUSH
11435: LD_INT 2
11437: PUSH
11438: EMPTY
11439: LIST
11440: PUSH
11441: LD_INT 30
11443: PUSH
11444: LD_INT 1
11446: PUSH
11447: EMPTY
11448: LIST
11449: LIST
11450: PUSH
11451: EMPTY
11452: LIST
11453: LIST
11454: LIST
11455: LIST
11456: PPUSH
11457: CALL_OW 69
11461: PUSH
11462: LD_INT 0
11464: PLUS
11465: PUSH
11466: LD_INT 0
11468: EQUAL
11469: IFFALSE 11478
// ToLua ( LUA_IsDepot(); ) ;
11471: LD_STRING LUA_IsDepot();
11473: PPUSH
11474: CALL_OW 559
// if side_tech_lvl [ GetSide ( b ) ] = 4 then
11478: LD_EXP 31
11482: PUSH
11483: LD_VAR 0 1
11487: PPUSH
11488: CALL_OW 255
11492: ARRAY
11493: PUSH
11494: LD_INT 4
11496: EQUAL
11497: IFFALSE 11506
// ToLua ( LUA_SideTechMax() ) ;
11499: LD_STRING LUA_SideTechMax()
11501: PPUSH
11502: CALL_OW 559
// if FilterAllUnits ( [ [ f_side , o ] , [ f_btype , b_depot ] , [ f_or ] , [ f_btype , b_warehouse ] ] ) + 0 = 0 then
11506: LD_INT 22
11508: PUSH
11509: LD_VAR 0 2
11513: PUSH
11514: EMPTY
11515: LIST
11516: LIST
11517: PUSH
11518: LD_INT 30
11520: PUSH
11521: LD_INT 0
11523: PUSH
11524: EMPTY
11525: LIST
11526: LIST
11527: PUSH
11528: LD_INT 2
11530: PUSH
11531: EMPTY
11532: LIST
11533: PUSH
11534: LD_INT 30
11536: PUSH
11537: LD_INT 1
11539: PUSH
11540: EMPTY
11541: LIST
11542: LIST
11543: PUSH
11544: EMPTY
11545: LIST
11546: LIST
11547: LIST
11548: LIST
11549: PPUSH
11550: CALL_OW 69
11554: PUSH
11555: LD_INT 0
11557: PLUS
11558: PUSH
11559: LD_INT 0
11561: EQUAL
11562: IFFALSE 11571
// ToLua ( LUA_NoDepot(); ) ;
11564: LD_STRING LUA_NoDepot();
11566: PPUSH
11567: CALL_OW 559
// end ; end ;
11571: PPOPN 3
11573: END
// on UnitDestroyed ( i ) do var side ;
11574: LD_INT 0
11576: PPUSH
// begin if GetType ( i ) = 1 then
11577: LD_VAR 0 1
11581: PPUSH
11582: CALL_OW 247
11586: PUSH
11587: LD_INT 1
11589: EQUAL
11590: IFFALSE 11653
// begin side := GetSide ( i ) ;
11592: LD_ADDR_VAR 0 2
11596: PUSH
11597: LD_VAR 0 1
11601: PPUSH
11602: CALL_OW 255
11606: ST_TO_ADDR
// side_soldiers := Replace ( side_soldiers , side , side_soldiers [ side ] diff i ) ;
11607: LD_ADDR_EXP 46
11611: PUSH
11612: LD_EXP 46
11616: PPUSH
11617: LD_VAR 0 2
11621: PPUSH
11622: LD_EXP 46
11626: PUSH
11627: LD_VAR 0 2
11631: ARRAY
11632: PUSH
11633: LD_VAR 0 1
11637: DIFF
11638: PPUSH
11639: CALL_OW 1
11643: ST_TO_ADDR
// DidPlayerLose ( side ) ;
11644: LD_VAR 0 2
11648: PPUSH
11649: CALL 6595 0 1
// end ; if GetBType ( i ) in [ b_depot , b_warehouse ] then
11653: LD_VAR 0 1
11657: PPUSH
11658: CALL_OW 266
11662: PUSH
11663: LD_INT 0
11665: PUSH
11666: LD_INT 1
11668: PUSH
11669: EMPTY
11670: LIST
11671: LIST
11672: IN
11673: IFFALSE 11740
// if FilterAllUnits ( [ [ f_side , i ] , [ f_btype , b_depot ] , [ f_or ] , [ f_btype , b_warehouse ] ] ) + 0 = 0 then
11675: LD_INT 22
11677: PUSH
11678: LD_VAR 0 1
11682: PUSH
11683: EMPTY
11684: LIST
11685: LIST
11686: PUSH
11687: LD_INT 30
11689: PUSH
11690: LD_INT 0
11692: PUSH
11693: EMPTY
11694: LIST
11695: LIST
11696: PUSH
11697: LD_INT 2
11699: PUSH
11700: EMPTY
11701: LIST
11702: PUSH
11703: LD_INT 30
11705: PUSH
11706: LD_INT 1
11708: PUSH
11709: EMPTY
11710: LIST
11711: LIST
11712: PUSH
11713: EMPTY
11714: LIST
11715: LIST
11716: LIST
11717: LIST
11718: PPUSH
11719: CALL_OW 69
11723: PUSH
11724: LD_INT 0
11726: PLUS
11727: PUSH
11728: LD_INT 0
11730: EQUAL
11731: IFFALSE 11740
// ToLua ( LUA_NoDepot(); ) ;
11733: LD_STRING LUA_NoDepot();
11735: PPUSH
11736: CALL_OW 559
// end ;
11740: PPOPN 2
11742: END
// on SailEvent ( ID ) do var i , j , lost ;
11743: LD_INT 0
11745: PPUSH
11746: PPUSH
11747: PPUSH
// begin case ID of 66 :
11748: LD_VAR 0 1
11752: PUSH
11753: LD_INT 66
11755: DOUBLE
11756: EQUAL
11757: IFTRUE 11761
11759: GO 11907
11761: POP
// begin for i = 1 to Teams do
11762: LD_ADDR_VAR 0 2
11766: PUSH
11767: DOUBLE
11768: LD_INT 1
11770: DEC
11771: ST_TO_ADDR
11772: LD_EXP 6
11776: PUSH
11777: FOR_TO
11778: IFFALSE 11903
// begin lost := 0 ;
11780: LD_ADDR_VAR 0 4
11784: PUSH
11785: LD_INT 0
11787: ST_TO_ADDR
// for j in Teams [ i ] do
11788: LD_ADDR_VAR 0 3
11792: PUSH
11793: LD_EXP 6
11797: PUSH
11798: LD_VAR 0 2
11802: ARRAY
11803: PUSH
11804: FOR_IN
11805: IFFALSE 11839
// if side_isalive [ j ] = 0 then
11807: LD_EXP 53
11811: PUSH
11812: LD_VAR 0 3
11816: ARRAY
11817: PUSH
11818: LD_INT 0
11820: EQUAL
11821: IFFALSE 11837
// lost := lost + 1 ;
11823: LD_ADDR_VAR 0 4
11827: PUSH
11828: LD_VAR 0 4
11832: PUSH
11833: LD_INT 1
11835: PLUS
11836: ST_TO_ADDR
11837: GO 11804
11839: POP
11840: POP
// if lost = Teams [ i ] + 0 then
11841: LD_VAR 0 4
11845: PUSH
11846: LD_EXP 6
11850: PUSH
11851: LD_VAR 0 2
11855: ARRAY
11856: PUSH
11857: LD_INT 0
11859: PLUS
11860: EQUAL
11861: IFFALSE 11899
// if IAmSpec or Your_Side in Teams [ i ] then
11863: CALL_OW 531
11867: PUSH
11868: LD_OWVAR 2
11872: PUSH
11873: LD_EXP 6
11877: PUSH
11878: LD_VAR 0 2
11882: ARRAY
11883: IN
11884: OR
11885: IFFALSE 11893
// YouLostInMultiplayer else
11887: CALL_OW 107
11891: GO 11897
// YouWinInMultiplayer else
11893: CALL_OW 106
11897: GO 11901
// continue end ;
11899: GO 11777
11901: GO 11777
11903: POP
11904: POP
// end ; 67 :
11905: GO 11998
11907: LD_INT 67
11909: DOUBLE
11910: EQUAL
11911: IFTRUE 11915
11913: GO 11997
11915: POP
// begin if not victory_cond = 0 then
11916: LD_EXP 27
11920: PUSH
11921: LD_INT 0
11923: EQUAL
11924: NOT
11925: IFFALSE 11995
// begin for i = 1 to Teams do
11927: LD_ADDR_VAR 0 2
11931: PUSH
11932: DOUBLE
11933: LD_INT 1
11935: DEC
11936: ST_TO_ADDR
11937: LD_EXP 6
11941: PUSH
11942: FOR_TO
11943: IFFALSE 11993
// begin if team_siberite_stocked [ i ] >= victory_cond then
11945: LD_EXP 60
11949: PUSH
11950: LD_VAR 0 2
11954: ARRAY
11955: PUSH
11956: LD_EXP 27
11960: GREATEREQUAL
11961: IFFALSE 11991
// if Your_Side in Teams [ i ] then
11963: LD_OWVAR 2
11967: PUSH
11968: LD_EXP 6
11972: PUSH
11973: LD_VAR 0 2
11977: ARRAY
11978: IN
11979: IFFALSE 11987
// YouWinInMultiplayer else
11981: CALL_OW 106
11985: GO 11991
// YouLostInMultiplayer ;
11987: CALL_OW 107
// end ;
11991: GO 11942
11993: POP
11994: POP
// end ; end ; end ;
11995: GO 11998
11997: POP
// end ;
11998: PPOPN 4
12000: END
// on CustomCommand ( side , ComID , order , reserved1 , reserved2 , reserved3 ) do var i ;
12001: LD_INT 0
12003: PPUSH
// begin case ComID of 201 :
12004: LD_VAR 0 2
12008: PUSH
12009: LD_INT 201
12011: DOUBLE
12012: EQUAL
12013: IFTRUE 12017
12015: GO 12147
12017: POP
// begin if side = Your_Side then
12018: LD_VAR 0 1
12022: PUSH
12023: LD_OWVAR 2
12027: EQUAL
12028: IFFALSE 12145
// ToLua ( LUA_UpdateUpgradeCost( & cost_per_upgrade [ side_tech_lvl [ side ] + 1 ] [ reinforce_cost ] [ 1 ] & , & cost_per_upgrade [ side_tech_lvl [ side ] + 1 ] [ reinforce_cost ] [ 2 ] & , & cost_per_upgrade [ side_tech_lvl [ side ] + 1 ] [ reinforce_cost ] [ 3 ] & ); ) ;
12030: LD_STRING LUA_UpdateUpgradeCost(
12032: PUSH
12033: LD_EXP 55
12037: PUSH
12038: LD_EXP 31
12042: PUSH
12043: LD_VAR 0 1
12047: ARRAY
12048: PUSH
12049: LD_INT 1
12051: PLUS
12052: ARRAY
12053: PUSH
12054: LD_EXP 28
12058: ARRAY
12059: PUSH
12060: LD_INT 1
12062: ARRAY
12063: STR
12064: PUSH
12065: LD_STRING ,
12067: STR
12068: PUSH
12069: LD_EXP 55
12073: PUSH
12074: LD_EXP 31
12078: PUSH
12079: LD_VAR 0 1
12083: ARRAY
12084: PUSH
12085: LD_INT 1
12087: PLUS
12088: ARRAY
12089: PUSH
12090: LD_EXP 28
12094: ARRAY
12095: PUSH
12096: LD_INT 2
12098: ARRAY
12099: STR
12100: PUSH
12101: LD_STRING ,
12103: STR
12104: PUSH
12105: LD_EXP 55
12109: PUSH
12110: LD_EXP 31
12114: PUSH
12115: LD_VAR 0 1
12119: ARRAY
12120: PUSH
12121: LD_INT 1
12123: PLUS
12124: ARRAY
12125: PUSH
12126: LD_EXP 28
12130: ARRAY
12131: PUSH
12132: LD_INT 3
12134: ARRAY
12135: STR
12136: PUSH
12137: LD_STRING );
12139: STR
12140: PPUSH
12141: CALL_OW 559
// end ; 202 :
12145: GO 15411
12147: LD_INT 202
12149: DOUBLE
12150: EQUAL
12151: IFTRUE 12155
12153: GO 12304
12155: POP
// begin if side_reinforcement_amount [ side ] < 0 or side_reinforcement_amount [ side ] > side_reinforcement_cap [ side ] then
12156: LD_EXP 56
12160: PUSH
12161: LD_VAR 0 1
12165: ARRAY
12166: PUSH
12167: LD_INT 0
12169: LESS
12170: PUSH
12171: LD_EXP 56
12175: PUSH
12176: LD_VAR 0 1
12180: ARRAY
12181: PUSH
12182: LD_EXP 57
12186: PUSH
12187: LD_VAR 0 1
12191: ARRAY
12192: GREATER
12193: OR
12194: IFFALSE 12219
// side_reinforcement_amount := Replace ( side_reinforcement_amount , side , 1 ) ;
12196: LD_ADDR_EXP 56
12200: PUSH
12201: LD_EXP 56
12205: PPUSH
12206: LD_VAR 0 1
12210: PPUSH
12211: LD_INT 1
12213: PPUSH
12214: CALL_OW 1
12218: ST_TO_ADDR
// if side = Your_Side then
12219: LD_VAR 0 1
12223: PUSH
12224: LD_OWVAR 2
12228: EQUAL
12229: IFFALSE 12302
// ToLua ( LUA_UpdateReinforceCost( & side_reinforcement_amount [ side ] & * & cost_per_human [ reinforce_cost ] & , & 0 & , & 0 & , & side_reinforcement_amount [ side ] & ); ) ;
12231: LD_STRING LUA_UpdateReinforceCost(
12233: PUSH
12234: LD_EXP 56
12238: PUSH
12239: LD_VAR 0 1
12243: ARRAY
12244: STR
12245: PUSH
12246: LD_STRING *
12248: STR
12249: PUSH
12250: LD_EXP 54
12254: PUSH
12255: LD_EXP 28
12259: ARRAY
12260: STR
12261: PUSH
12262: LD_STRING ,
12264: STR
12265: PUSH
12266: LD_INT 0
12268: STR
12269: PUSH
12270: LD_STRING ,
12272: STR
12273: PUSH
12274: LD_INT 0
12276: STR
12277: PUSH
12278: LD_STRING ,
12280: STR
12281: PUSH
12282: LD_EXP 56
12286: PUSH
12287: LD_VAR 0 1
12291: ARRAY
12292: STR
12293: PUSH
12294: LD_STRING );
12296: STR
12297: PPUSH
12298: CALL_OW 559
// end ; 2020 :
12302: GO 15411
12304: LD_INT 2020
12306: DOUBLE
12307: EQUAL
12308: IFTRUE 12312
12310: GO 12449
12312: POP
// begin if side_reinforcement_amount [ side ] > 1 then
12313: LD_EXP 56
12317: PUSH
12318: LD_VAR 0 1
12322: ARRAY
12323: PUSH
12324: LD_INT 1
12326: GREATER
12327: IFFALSE 12364
// side_reinforcement_amount := Replace ( side_reinforcement_amount , side , side_reinforcement_amount [ side ] - 1 ) ;
12329: LD_ADDR_EXP 56
12333: PUSH
12334: LD_EXP 56
12338: PPUSH
12339: LD_VAR 0 1
12343: PPUSH
12344: LD_EXP 56
12348: PUSH
12349: LD_VAR 0 1
12353: ARRAY
12354: PUSH
12355: LD_INT 1
12357: MINUS
12358: PPUSH
12359: CALL_OW 1
12363: ST_TO_ADDR
// if side = Your_Side then
12364: LD_VAR 0 1
12368: PUSH
12369: LD_OWVAR 2
12373: EQUAL
12374: IFFALSE 12447
// ToLua ( LUA_UpdateReinforceCost( & side_reinforcement_amount [ side ] & * & cost_per_human [ reinforce_cost ] & , & 0 & , & 0 & , & side_reinforcement_amount [ side ] & ); ) ;
12376: LD_STRING LUA_UpdateReinforceCost(
12378: PUSH
12379: LD_EXP 56
12383: PUSH
12384: LD_VAR 0 1
12388: ARRAY
12389: STR
12390: PUSH
12391: LD_STRING *
12393: STR
12394: PUSH
12395: LD_EXP 54
12399: PUSH
12400: LD_EXP 28
12404: ARRAY
12405: STR
12406: PUSH
12407: LD_STRING ,
12409: STR
12410: PUSH
12411: LD_INT 0
12413: STR
12414: PUSH
12415: LD_STRING ,
12417: STR
12418: PUSH
12419: LD_INT 0
12421: STR
12422: PUSH
12423: LD_STRING ,
12425: STR
12426: PUSH
12427: LD_EXP 56
12431: PUSH
12432: LD_VAR 0 1
12436: ARRAY
12437: STR
12438: PUSH
12439: LD_STRING );
12441: STR
12442: PPUSH
12443: CALL_OW 559
// end ; 2021 :
12447: GO 15411
12449: LD_INT 2021
12451: DOUBLE
12452: EQUAL
12453: IFTRUE 12457
12455: GO 12602
12457: POP
// begin if side_reinforcement_amount [ side ] < side_reinforcement_cap [ side ] then
12458: LD_EXP 56
12462: PUSH
12463: LD_VAR 0 1
12467: ARRAY
12468: PUSH
12469: LD_EXP 57
12473: PUSH
12474: LD_VAR 0 1
12478: ARRAY
12479: LESS
12480: IFFALSE 12517
// side_reinforcement_amount := Replace ( side_reinforcement_amount , side , side_reinforcement_amount [ side ] + 1 ) ;
12482: LD_ADDR_EXP 56
12486: PUSH
12487: LD_EXP 56
12491: PPUSH
12492: LD_VAR 0 1
12496: PPUSH
12497: LD_EXP 56
12501: PUSH
12502: LD_VAR 0 1
12506: ARRAY
12507: PUSH
12508: LD_INT 1
12510: PLUS
12511: PPUSH
12512: CALL_OW 1
12516: ST_TO_ADDR
// if side = Your_Side then
12517: LD_VAR 0 1
12521: PUSH
12522: LD_OWVAR 2
12526: EQUAL
12527: IFFALSE 12600
// ToLua ( LUA_UpdateReinforceCost( & side_reinforcement_amount [ side ] & * & cost_per_human [ reinforce_cost ] & , & 0 & , & 0 & , & side_reinforcement_amount [ side ] & ); ) ;
12529: LD_STRING LUA_UpdateReinforceCost(
12531: PUSH
12532: LD_EXP 56
12536: PUSH
12537: LD_VAR 0 1
12541: ARRAY
12542: STR
12543: PUSH
12544: LD_STRING *
12546: STR
12547: PUSH
12548: LD_EXP 54
12552: PUSH
12553: LD_EXP 28
12557: ARRAY
12558: STR
12559: PUSH
12560: LD_STRING ,
12562: STR
12563: PUSH
12564: LD_INT 0
12566: STR
12567: PUSH
12568: LD_STRING ,
12570: STR
12571: PUSH
12572: LD_INT 0
12574: STR
12575: PUSH
12576: LD_STRING ,
12578: STR
12579: PUSH
12580: LD_EXP 56
12584: PUSH
12585: LD_VAR 0 1
12589: ARRAY
12590: STR
12591: PUSH
12592: LD_STRING );
12594: STR
12595: PPUSH
12596: CALL_OW 559
// end ; 203 :
12600: GO 15411
12602: LD_INT 203
12604: DOUBLE
12605: EQUAL
12606: IFTRUE 12610
12608: GO 12664
12610: POP
// begin if side = Your_Side then
12611: LD_VAR 0 1
12615: PUSH
12616: LD_OWVAR 2
12620: EQUAL
12621: IFFALSE 12662
// ToLua ( LUA_UpdateSiberiteSent( & team_siberite_stocked [ Side_Teams [ side ] ] & , & victory_cond & ); ) ;
12623: LD_STRING LUA_UpdateSiberiteSent(
12625: PUSH
12626: LD_EXP 60
12630: PUSH
12631: LD_EXP 5
12635: PUSH
12636: LD_VAR 0 1
12640: ARRAY
12641: ARRAY
12642: STR
12643: PUSH
12644: LD_STRING ,
12646: STR
12647: PUSH
12648: LD_EXP 27
12652: STR
12653: PUSH
12654: LD_STRING );
12656: STR
12657: PPUSH
12658: CALL_OW 559
// end ; 204 :
12662: GO 15411
12664: LD_INT 204
12666: DOUBLE
12667: EQUAL
12668: IFTRUE 12672
12670: GO 13689
12672: POP
// begin case order of 1 :
12673: LD_VAR 0 3
12677: PUSH
12678: LD_INT 1
12680: DOUBLE
12681: EQUAL
12682: IFTRUE 12686
12684: GO 12986
12686: POP
// begin side_pending_order := Replace ( side_pending_order , side , Replace ( side_pending_order [ side ] , 1 , side_reinforcement_amount [ side ] * cost_per_human [ reinforce_cost ] ) ) ;
12687: LD_ADDR_EXP 58
12691: PUSH
12692: LD_EXP 58
12696: PPUSH
12697: LD_VAR 0 1
12701: PPUSH
12702: LD_EXP 58
12706: PUSH
12707: LD_VAR 0 1
12711: ARRAY
12712: PPUSH
12713: LD_INT 1
12715: PPUSH
12716: LD_EXP 56
12720: PUSH
12721: LD_VAR 0 1
12725: ARRAY
12726: PUSH
12727: LD_EXP 54
12731: PUSH
12732: LD_EXP 28
12736: ARRAY
12737: MUL
12738: PPUSH
12739: CALL_OW 1
12743: PPUSH
12744: CALL_OW 1
12748: ST_TO_ADDR
// side_pending_order := Replace ( side_pending_order , side , Replace ( side_pending_order [ side ] , 2 , 0 ) ) ;
12749: LD_ADDR_EXP 58
12753: PUSH
12754: LD_EXP 58
12758: PPUSH
12759: LD_VAR 0 1
12763: PPUSH
12764: LD_EXP 58
12768: PUSH
12769: LD_VAR 0 1
12773: ARRAY
12774: PPUSH
12775: LD_INT 2
12777: PPUSH
12778: LD_INT 0
12780: PPUSH
12781: CALL_OW 1
12785: PPUSH
12786: CALL_OW 1
12790: ST_TO_ADDR
// side_pending_order := Replace ( side_pending_order , side , Replace ( side_pending_order [ side ] , 3 , 0 ) ) ;
12791: LD_ADDR_EXP 58
12795: PUSH
12796: LD_EXP 58
12800: PPUSH
12801: LD_VAR 0 1
12805: PPUSH
12806: LD_EXP 58
12810: PUSH
12811: LD_VAR 0 1
12815: ARRAY
12816: PPUSH
12817: LD_INT 3
12819: PPUSH
12820: LD_INT 0
12822: PPUSH
12823: CALL_OW 1
12827: PPUSH
12828: CALL_OW 1
12832: ST_TO_ADDR
// if side = Your_Side then
12833: LD_VAR 0 1
12837: PUSH
12838: LD_OWVAR 2
12842: EQUAL
12843: IFFALSE 12984
// begin ToLua ( LUA_UpdateTransferResources( & side_pending_order [ side ] [ 1 ] & , & side_pending_order [ side ] [ 2 ] & , & side_pending_order [ side ] [ 3 ] & , & 0 & , & 0 & ); ) ;
12845: LD_STRING LUA_UpdateTransferResources(
12847: PUSH
12848: LD_EXP 58
12852: PUSH
12853: LD_VAR 0 1
12857: ARRAY
12858: PUSH
12859: LD_INT 1
12861: ARRAY
12862: STR
12863: PUSH
12864: LD_STRING ,
12866: STR
12867: PUSH
12868: LD_EXP 58
12872: PUSH
12873: LD_VAR 0 1
12877: ARRAY
12878: PUSH
12879: LD_INT 2
12881: ARRAY
12882: STR
12883: PUSH
12884: LD_STRING ,
12886: STR
12887: PUSH
12888: LD_EXP 58
12892: PUSH
12893: LD_VAR 0 1
12897: ARRAY
12898: PUSH
12899: LD_INT 3
12901: ARRAY
12902: STR
12903: PUSH
12904: LD_STRING ,
12906: STR
12907: PUSH
12908: LD_INT 0
12910: STR
12911: PUSH
12912: LD_STRING ,
12914: STR
12915: PUSH
12916: LD_INT 0
12918: STR
12919: PUSH
12920: LD_STRING );
12922: STR
12923: PPUSH
12924: CALL_OW 559
// ToLua ( LUA_OrderIssued(); ) ;
12928: LD_STRING LUA_OrderIssued();
12930: PPUSH
12931: CALL_OW 559
// ToLua ( LUA_UpdateTransferResources( & 0 & , & 0 & , & 0 & , & 0 & , & order & ); ) ;
12935: LD_STRING LUA_UpdateTransferResources(
12937: PUSH
12938: LD_INT 0
12940: STR
12941: PUSH
12942: LD_STRING ,
12944: STR
12945: PUSH
12946: LD_INT 0
12948: STR
12949: PUSH
12950: LD_STRING ,
12952: STR
12953: PUSH
12954: LD_INT 0
12956: STR
12957: PUSH
12958: LD_STRING ,
12960: STR
12961: PUSH
12962: LD_INT 0
12964: STR
12965: PUSH
12966: LD_STRING ,
12968: STR
12969: PUSH
12970: LD_VAR 0 3
12974: STR
12975: PUSH
12976: LD_STRING );
12978: STR
12979: PPUSH
12980: CALL_OW 559
// end ; end ; 2 :
12984: GO 13578
12986: LD_INT 2
12988: DOUBLE
12989: EQUAL
12990: IFTRUE 12994
12992: GO 13358
12994: POP
// begin side_pending_order := Replace ( side_pending_order , side , Replace ( side_pending_order [ side ] , 1 , cost_per_upgrade [ side_tech_lvl [ side ] + 1 ] [ reinforce_cost ] [ 1 ] ) ) ;
12995: LD_ADDR_EXP 58
12999: PUSH
13000: LD_EXP 58
13004: PPUSH
13005: LD_VAR 0 1
13009: PPUSH
13010: LD_EXP 58
13014: PUSH
13015: LD_VAR 0 1
13019: ARRAY
13020: PPUSH
13021: LD_INT 1
13023: PPUSH
13024: LD_EXP 55
13028: PUSH
13029: LD_EXP 31
13033: PUSH
13034: LD_VAR 0 1
13038: ARRAY
13039: PUSH
13040: LD_INT 1
13042: PLUS
13043: ARRAY
13044: PUSH
13045: LD_EXP 28
13049: ARRAY
13050: PUSH
13051: LD_INT 1
13053: ARRAY
13054: PPUSH
13055: CALL_OW 1
13059: PPUSH
13060: CALL_OW 1
13064: ST_TO_ADDR
// side_pending_order := Replace ( side_pending_order , side , Replace ( side_pending_order [ side ] , 2 , cost_per_upgrade [ side_tech_lvl [ side ] + 1 ] [ reinforce_cost ] [ 2 ] ) ) ;
13065: LD_ADDR_EXP 58
13069: PUSH
13070: LD_EXP 58
13074: PPUSH
13075: LD_VAR 0 1
13079: PPUSH
13080: LD_EXP 58
13084: PUSH
13085: LD_VAR 0 1
13089: ARRAY
13090: PPUSH
13091: LD_INT 2
13093: PPUSH
13094: LD_EXP 55
13098: PUSH
13099: LD_EXP 31
13103: PUSH
13104: LD_VAR 0 1
13108: ARRAY
13109: PUSH
13110: LD_INT 1
13112: PLUS
13113: ARRAY
13114: PUSH
13115: LD_EXP 28
13119: ARRAY
13120: PUSH
13121: LD_INT 2
13123: ARRAY
13124: PPUSH
13125: CALL_OW 1
13129: PPUSH
13130: CALL_OW 1
13134: ST_TO_ADDR
// side_pending_order := Replace ( side_pending_order , side , Replace ( side_pending_order [ side ] , 3 , cost_per_upgrade [ side_tech_lvl [ side ] + 1 ] [ reinforce_cost ] [ 3 ] ) ) ;
13135: LD_ADDR_EXP 58
13139: PUSH
13140: LD_EXP 58
13144: PPUSH
13145: LD_VAR 0 1
13149: PPUSH
13150: LD_EXP 58
13154: PUSH
13155: LD_VAR 0 1
13159: ARRAY
13160: PPUSH
13161: LD_INT 3
13163: PPUSH
13164: LD_EXP 55
13168: PUSH
13169: LD_EXP 31
13173: PUSH
13174: LD_VAR 0 1
13178: ARRAY
13179: PUSH
13180: LD_INT 1
13182: PLUS
13183: ARRAY
13184: PUSH
13185: LD_EXP 28
13189: ARRAY
13190: PUSH
13191: LD_INT 3
13193: ARRAY
13194: PPUSH
13195: CALL_OW 1
13199: PPUSH
13200: CALL_OW 1
13204: ST_TO_ADDR
// if side = Your_Side then
13205: LD_VAR 0 1
13209: PUSH
13210: LD_OWVAR 2
13214: EQUAL
13215: IFFALSE 13356
// begin ToLua ( LUA_UpdateTransferResources( & side_pending_order [ side ] [ 1 ] & , & side_pending_order [ side ] [ 2 ] & , & side_pending_order [ side ] [ 3 ] & , & 0 & , & 0 & ); ) ;
13217: LD_STRING LUA_UpdateTransferResources(
13219: PUSH
13220: LD_EXP 58
13224: PUSH
13225: LD_VAR 0 1
13229: ARRAY
13230: PUSH
13231: LD_INT 1
13233: ARRAY
13234: STR
13235: PUSH
13236: LD_STRING ,
13238: STR
13239: PUSH
13240: LD_EXP 58
13244: PUSH
13245: LD_VAR 0 1
13249: ARRAY
13250: PUSH
13251: LD_INT 2
13253: ARRAY
13254: STR
13255: PUSH
13256: LD_STRING ,
13258: STR
13259: PUSH
13260: LD_EXP 58
13264: PUSH
13265: LD_VAR 0 1
13269: ARRAY
13270: PUSH
13271: LD_INT 3
13273: ARRAY
13274: STR
13275: PUSH
13276: LD_STRING ,
13278: STR
13279: PUSH
13280: LD_INT 0
13282: STR
13283: PUSH
13284: LD_STRING ,
13286: STR
13287: PUSH
13288: LD_INT 0
13290: STR
13291: PUSH
13292: LD_STRING );
13294: STR
13295: PPUSH
13296: CALL_OW 559
// ToLua ( LUA_OrderIssued(); ) ;
13300: LD_STRING LUA_OrderIssued();
13302: PPUSH
13303: CALL_OW 559
// ToLua ( LUA_UpdateTransferResources( & 0 & , & 0 & , & 0 & , & 0 & , & order & ); ) ;
13307: LD_STRING LUA_UpdateTransferResources(
13309: PUSH
13310: LD_INT 0
13312: STR
13313: PUSH
13314: LD_STRING ,
13316: STR
13317: PUSH
13318: LD_INT 0
13320: STR
13321: PUSH
13322: LD_STRING ,
13324: STR
13325: PUSH
13326: LD_INT 0
13328: STR
13329: PUSH
13330: LD_STRING ,
13332: STR
13333: PUSH
13334: LD_INT 0
13336: STR
13337: PUSH
13338: LD_STRING ,
13340: STR
13341: PUSH
13342: LD_VAR 0 3
13346: STR
13347: PUSH
13348: LD_STRING );
13350: STR
13351: PPUSH
13352: CALL_OW 559
// end ; end ; 3 :
13356: GO 13578
13358: LD_INT 3
13360: DOUBLE
13361: EQUAL
13362: IFTRUE 13366
13364: GO 13577
13366: POP
// begin side_pending_order := Replace ( side_pending_order , side , Replace ( side_pending_order [ side ] , 1 , 0 ) ) ;
13367: LD_ADDR_EXP 58
13371: PUSH
13372: LD_EXP 58
13376: PPUSH
13377: LD_VAR 0 1
13381: PPUSH
13382: LD_EXP 58
13386: PUSH
13387: LD_VAR 0 1
13391: ARRAY
13392: PPUSH
13393: LD_INT 1
13395: PPUSH
13396: LD_INT 0
13398: PPUSH
13399: CALL_OW 1
13403: PPUSH
13404: CALL_OW 1
13408: ST_TO_ADDR
// side_pending_order := Replace ( side_pending_order , side , Replace ( side_pending_order [ side ] , 2 , 0 ) ) ;
13409: LD_ADDR_EXP 58
13413: PUSH
13414: LD_EXP 58
13418: PPUSH
13419: LD_VAR 0 1
13423: PPUSH
13424: LD_EXP 58
13428: PUSH
13429: LD_VAR 0 1
13433: ARRAY
13434: PPUSH
13435: LD_INT 2
13437: PPUSH
13438: LD_INT 0
13440: PPUSH
13441: CALL_OW 1
13445: PPUSH
13446: CALL_OW 1
13450: ST_TO_ADDR
// side_pending_order := Replace ( side_pending_order , side , Replace ( side_pending_order [ side ] , 3 , 10 ) ) ;
13451: LD_ADDR_EXP 58
13455: PUSH
13456: LD_EXP 58
13460: PPUSH
13461: LD_VAR 0 1
13465: PPUSH
13466: LD_EXP 58
13470: PUSH
13471: LD_VAR 0 1
13475: ARRAY
13476: PPUSH
13477: LD_INT 3
13479: PPUSH
13480: LD_INT 10
13482: PPUSH
13483: CALL_OW 1
13487: PPUSH
13488: CALL_OW 1
13492: ST_TO_ADDR
// if side = Your_Side then
13493: LD_VAR 0 1
13497: PUSH
13498: LD_OWVAR 2
13502: EQUAL
13503: IFFALSE 13575
// begin ToLua ( LUA_UpdateTransferResources( & 0 & , & 0 & , & team_siberite_stocked [ Side_Teams [ side ] ] & , & victory_cond & , & 0 & ); ) ;
13505: LD_STRING LUA_UpdateTransferResources(
13507: PUSH
13508: LD_INT 0
13510: STR
13511: PUSH
13512: LD_STRING ,
13514: STR
13515: PUSH
13516: LD_INT 0
13518: STR
13519: PUSH
13520: LD_STRING ,
13522: STR
13523: PUSH
13524: LD_EXP 60
13528: PUSH
13529: LD_EXP 5
13533: PUSH
13534: LD_VAR 0 1
13538: ARRAY
13539: ARRAY
13540: STR
13541: PUSH
13542: LD_STRING ,
13544: STR
13545: PUSH
13546: LD_EXP 27
13550: STR
13551: PUSH
13552: LD_STRING ,
13554: STR
13555: PUSH
13556: LD_INT 0
13558: STR
13559: PUSH
13560: LD_STRING );
13562: STR
13563: PPUSH
13564: CALL_OW 559
// ToLua ( LUA_OrderIssued(); ) ;
13568: LD_STRING LUA_OrderIssued();
13570: PPUSH
13571: CALL_OW 559
// end ; end ; end ;
13575: GO 13578
13577: POP
// ToLua ( LUA_CannotSendShipment(); ) ;
13578: LD_STRING LUA_CannotSendShipment();
13580: PPUSH
13581: CALL_OW 559
// ToLua ( LUA_UpdateTransferZone( & team_transfer_zones [ Side_Teams [ side ] ] [ side_chosen_zone [ side ] ] & ) ) ;
13585: LD_STRING LUA_UpdateTransferZone(
13587: PUSH
13588: LD_EXP 61
13592: PUSH
13593: LD_EXP 5
13597: PUSH
13598: LD_VAR 0 1
13602: ARRAY
13603: ARRAY
13604: PUSH
13605: LD_EXP 63
13609: PUSH
13610: LD_VAR 0 1
13614: ARRAY
13615: ARRAY
13616: STR
13617: PUSH
13618: LD_STRING )
13620: STR
13621: PPUSH
13622: CALL_OW 559
// SetAreaMapShow ( team_transfer_zones [ Side_Teams [ side ] ] [ side_chosen_zone [ side ] ] , 1 ) ;
13626: LD_EXP 61
13630: PUSH
13631: LD_EXP 5
13635: PUSH
13636: LD_VAR 0 1
13640: ARRAY
13641: ARRAY
13642: PUSH
13643: LD_EXP 63
13647: PUSH
13648: LD_VAR 0 1
13652: ARRAY
13653: ARRAY
13654: PPUSH
13655: LD_INT 1
13657: PPUSH
13658: CALL_OW 424
// side_order_type := Replace ( side_order_type , side , order ) ;
13662: LD_ADDR_EXP 67
13666: PUSH
13667: LD_EXP 67
13671: PPUSH
13672: LD_VAR 0 1
13676: PPUSH
13677: LD_VAR 0 3
13681: PPUSH
13682: CALL_OW 1
13686: ST_TO_ADDR
// end ; 2040 :
13687: GO 15411
13689: LD_INT 2040
13691: DOUBLE
13692: EQUAL
13693: IFTRUE 13697
13695: GO 13783
13697: POP
// begin ToLua ( LUA_UpdateTransferZone( & team_transfer_zones [ Side_Teams [ side ] ] [ side_chosen_zone [ side ] ] & ) ) ;
13698: LD_STRING LUA_UpdateTransferZone(
13700: PUSH
13701: LD_EXP 61
13705: PUSH
13706: LD_EXP 5
13710: PUSH
13711: LD_VAR 0 1
13715: ARRAY
13716: ARRAY
13717: PUSH
13718: LD_EXP 63
13722: PUSH
13723: LD_VAR 0 1
13727: ARRAY
13728: ARRAY
13729: STR
13730: PUSH
13731: LD_STRING )
13733: STR
13734: PPUSH
13735: CALL_OW 559
// side_zone_locked := Replace ( side_zone_locked , side , 1 ) ;
13739: LD_ADDR_EXP 64
13743: PUSH
13744: LD_EXP 64
13748: PPUSH
13749: LD_VAR 0 1
13753: PPUSH
13754: LD_INT 1
13756: PPUSH
13757: CALL_OW 1
13761: ST_TO_ADDR
// if side = Your_Side then
13762: LD_VAR 0 1
13766: PUSH
13767: LD_OWVAR 2
13771: EQUAL
13772: IFFALSE 13781
// ToLua ( LUA_ChosenTransferZone(); ) ;
13774: LD_STRING LUA_ChosenTransferZone();
13776: PPUSH
13777: CALL_OW 559
// end ; 2041 :
13781: GO 15411
13783: LD_INT 2041
13785: DOUBLE
13786: EQUAL
13787: IFTRUE 13791
13789: GO 14092
13791: POP
// begin if side = Your_Side then
13792: LD_VAR 0 1
13796: PUSH
13797: LD_OWVAR 2
13801: EQUAL
13802: IFFALSE 13840
// SetAreaMapShow ( team_transfer_zones [ Side_Teams [ side ] ] [ side_chosen_zone [ side ] ] , 0 ) ;
13804: LD_EXP 61
13808: PUSH
13809: LD_EXP 5
13813: PUSH
13814: LD_VAR 0 1
13818: ARRAY
13819: ARRAY
13820: PUSH
13821: LD_EXP 63
13825: PUSH
13826: LD_VAR 0 1
13830: ARRAY
13831: ARRAY
13832: PPUSH
13833: LD_INT 0
13835: PPUSH
13836: CALL_OW 424
// side_chosen_zone := Replace ( side_chosen_zone , side , side_chosen_zone [ side ] - 1 ) ;
13840: LD_ADDR_EXP 63
13844: PUSH
13845: LD_EXP 63
13849: PPUSH
13850: LD_VAR 0 1
13854: PPUSH
13855: LD_EXP 63
13859: PUSH
13860: LD_VAR 0 1
13864: ARRAY
13865: PUSH
13866: LD_INT 1
13868: MINUS
13869: PPUSH
13870: CALL_OW 1
13874: ST_TO_ADDR
// if side_chosen_zone [ side ] < 1 then
13875: LD_EXP 63
13879: PUSH
13880: LD_VAR 0 1
13884: ARRAY
13885: PUSH
13886: LD_INT 1
13888: LESS
13889: IFFALSE 13932
// side_chosen_zone := Replace ( side_chosen_zone , side , team_transfer_zones [ Side_Teams [ side ] ] + 0 ) ;
13891: LD_ADDR_EXP 63
13895: PUSH
13896: LD_EXP 63
13900: PPUSH
13901: LD_VAR 0 1
13905: PPUSH
13906: LD_EXP 61
13910: PUSH
13911: LD_EXP 5
13915: PUSH
13916: LD_VAR 0 1
13920: ARRAY
13921: ARRAY
13922: PUSH
13923: LD_INT 0
13925: PLUS
13926: PPUSH
13927: CALL_OW 1
13931: ST_TO_ADDR
// if side_chosen_zone [ side ] > team_transfer_zones [ Side_Teams [ side ] ] + 0 then
13932: LD_EXP 63
13936: PUSH
13937: LD_VAR 0 1
13941: ARRAY
13942: PUSH
13943: LD_EXP 61
13947: PUSH
13948: LD_EXP 5
13952: PUSH
13953: LD_VAR 0 1
13957: ARRAY
13958: ARRAY
13959: PUSH
13960: LD_INT 0
13962: PLUS
13963: GREATER
13964: IFFALSE 13989
// side_chosen_zone := Replace ( side_chosen_zone , side , 1 ) ;
13966: LD_ADDR_EXP 63
13970: PUSH
13971: LD_EXP 63
13975: PPUSH
13976: LD_VAR 0 1
13980: PPUSH
13981: LD_INT 1
13983: PPUSH
13984: CALL_OW 1
13988: ST_TO_ADDR
// if side = Your_Side then
13989: LD_VAR 0 1
13993: PUSH
13994: LD_OWVAR 2
13998: EQUAL
13999: IFFALSE 14042
// ToLua ( LUA_UpdateTransferZone( & team_transfer_zones [ Side_Teams [ side ] ] [ side_chosen_zone [ side ] ] & ) ) ;
14001: LD_STRING LUA_UpdateTransferZone(
14003: PUSH
14004: LD_EXP 61
14008: PUSH
14009: LD_EXP 5
14013: PUSH
14014: LD_VAR 0 1
14018: ARRAY
14019: ARRAY
14020: PUSH
14021: LD_EXP 63
14025: PUSH
14026: LD_VAR 0 1
14030: ARRAY
14031: ARRAY
14032: STR
14033: PUSH
14034: LD_STRING )
14036: STR
14037: PPUSH
14038: CALL_OW 559
// if side = Your_Side then
14042: LD_VAR 0 1
14046: PUSH
14047: LD_OWVAR 2
14051: EQUAL
14052: IFFALSE 14090
// SetAreaMapShow ( team_transfer_zones [ Side_Teams [ side ] ] [ side_chosen_zone [ side ] ] , 1 ) ;
14054: LD_EXP 61
14058: PUSH
14059: LD_EXP 5
14063: PUSH
14064: LD_VAR 0 1
14068: ARRAY
14069: ARRAY
14070: PUSH
14071: LD_EXP 63
14075: PUSH
14076: LD_VAR 0 1
14080: ARRAY
14081: ARRAY
14082: PPUSH
14083: LD_INT 1
14085: PPUSH
14086: CALL_OW 424
// end ; 2042 :
14090: GO 15411
14092: LD_INT 2042
14094: DOUBLE
14095: EQUAL
14096: IFTRUE 14100
14098: GO 14401
14100: POP
// begin if side = Your_Side then
14101: LD_VAR 0 1
14105: PUSH
14106: LD_OWVAR 2
14110: EQUAL
14111: IFFALSE 14149
// SetAreaMapShow ( team_transfer_zones [ Side_Teams [ side ] ] [ side_chosen_zone [ side ] ] , 0 ) ;
14113: LD_EXP 61
14117: PUSH
14118: LD_EXP 5
14122: PUSH
14123: LD_VAR 0 1
14127: ARRAY
14128: ARRAY
14129: PUSH
14130: LD_EXP 63
14134: PUSH
14135: LD_VAR 0 1
14139: ARRAY
14140: ARRAY
14141: PPUSH
14142: LD_INT 0
14144: PPUSH
14145: CALL_OW 424
// side_chosen_zone := Replace ( side_chosen_zone , side , side_chosen_zone [ side ] + 1 ) ;
14149: LD_ADDR_EXP 63
14153: PUSH
14154: LD_EXP 63
14158: PPUSH
14159: LD_VAR 0 1
14163: PPUSH
14164: LD_EXP 63
14168: PUSH
14169: LD_VAR 0 1
14173: ARRAY
14174: PUSH
14175: LD_INT 1
14177: PLUS
14178: PPUSH
14179: CALL_OW 1
14183: ST_TO_ADDR
// if side_chosen_zone [ side ] < 1 then
14184: LD_EXP 63
14188: PUSH
14189: LD_VAR 0 1
14193: ARRAY
14194: PUSH
14195: LD_INT 1
14197: LESS
14198: IFFALSE 14241
// side_chosen_zone := Replace ( side_chosen_zone , side , team_transfer_zones [ Side_Teams [ side ] ] + 0 ) ;
14200: LD_ADDR_EXP 63
14204: PUSH
14205: LD_EXP 63
14209: PPUSH
14210: LD_VAR 0 1
14214: PPUSH
14215: LD_EXP 61
14219: PUSH
14220: LD_EXP 5
14224: PUSH
14225: LD_VAR 0 1
14229: ARRAY
14230: ARRAY
14231: PUSH
14232: LD_INT 0
14234: PLUS
14235: PPUSH
14236: CALL_OW 1
14240: ST_TO_ADDR
// if side_chosen_zone [ side ] > team_transfer_zones [ Side_Teams [ side ] ] + 0 then
14241: LD_EXP 63
14245: PUSH
14246: LD_VAR 0 1
14250: ARRAY
14251: PUSH
14252: LD_EXP 61
14256: PUSH
14257: LD_EXP 5
14261: PUSH
14262: LD_VAR 0 1
14266: ARRAY
14267: ARRAY
14268: PUSH
14269: LD_INT 0
14271: PLUS
14272: GREATER
14273: IFFALSE 14298
// side_chosen_zone := Replace ( side_chosen_zone , side , 1 ) ;
14275: LD_ADDR_EXP 63
14279: PUSH
14280: LD_EXP 63
14284: PPUSH
14285: LD_VAR 0 1
14289: PPUSH
14290: LD_INT 1
14292: PPUSH
14293: CALL_OW 1
14297: ST_TO_ADDR
// if side = Your_Side then
14298: LD_VAR 0 1
14302: PUSH
14303: LD_OWVAR 2
14307: EQUAL
14308: IFFALSE 14351
// ToLua ( LUA_UpdateTransferZone( & team_transfer_zones [ Side_Teams [ side ] ] [ side_chosen_zone [ side ] ] & ) ) ;
14310: LD_STRING LUA_UpdateTransferZone(
14312: PUSH
14313: LD_EXP 61
14317: PUSH
14318: LD_EXP 5
14322: PUSH
14323: LD_VAR 0 1
14327: ARRAY
14328: ARRAY
14329: PUSH
14330: LD_EXP 63
14334: PUSH
14335: LD_VAR 0 1
14339: ARRAY
14340: ARRAY
14341: STR
14342: PUSH
14343: LD_STRING )
14345: STR
14346: PPUSH
14347: CALL_OW 559
// if side = Your_Side then
14351: LD_VAR 0 1
14355: PUSH
14356: LD_OWVAR 2
14360: EQUAL
14361: IFFALSE 14399
// SetAreaMapShow ( team_transfer_zones [ Side_Teams [ side ] ] [ side_chosen_zone [ side ] ] , 1 ) ;
14363: LD_EXP 61
14367: PUSH
14368: LD_EXP 5
14372: PUSH
14373: LD_VAR 0 1
14377: ARRAY
14378: ARRAY
14379: PUSH
14380: LD_EXP 63
14384: PUSH
14385: LD_VAR 0 1
14389: ARRAY
14390: ARRAY
14391: PPUSH
14392: LD_INT 1
14394: PPUSH
14395: CALL_OW 424
// end ; 205 :
14399: GO 15411
14401: LD_INT 205
14403: DOUBLE
14404: EQUAL
14405: IFTRUE 14409
14407: GO 15007
14409: POP
// begin side_units_outside := Replace ( side_units_outside , side , FilterUnitsInArea ( team_transfer_zones [ Side_Teams [ side ] ] [ side_chosen_zone [ side ] ] , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , 12 ] , [ f_weapon , 32 ] , [ f_weapon , 51 ] ] , [ f_or , [ f_and , [ f_control , 2 ] , [ f_linked ] ] , [ f_and , [ f_control , 1 ] , [ f_occupied ] ] , [ f_control , 3 ] ] ] ) ) ;
14410: LD_ADDR_EXP 66
14414: PUSH
14415: LD_EXP 66
14419: PPUSH
14420: LD_VAR 0 1
14424: PPUSH
14425: LD_EXP 61
14429: PUSH
14430: LD_EXP 5
14434: PUSH
14435: LD_VAR 0 1
14439: ARRAY
14440: ARRAY
14441: PUSH
14442: LD_EXP 63
14446: PUSH
14447: LD_VAR 0 1
14451: ARRAY
14452: ARRAY
14453: PPUSH
14454: LD_INT 22
14456: PUSH
14457: LD_VAR 0 1
14461: PUSH
14462: EMPTY
14463: LIST
14464: LIST
14465: PUSH
14466: LD_INT 21
14468: PUSH
14469: LD_INT 2
14471: PUSH
14472: EMPTY
14473: LIST
14474: LIST
14475: PUSH
14476: LD_INT 2
14478: PUSH
14479: LD_INT 34
14481: PUSH
14482: LD_INT 12
14484: PUSH
14485: EMPTY
14486: LIST
14487: LIST
14488: PUSH
14489: LD_INT 34
14491: PUSH
14492: LD_INT 32
14494: PUSH
14495: EMPTY
14496: LIST
14497: LIST
14498: PUSH
14499: LD_INT 34
14501: PUSH
14502: LD_INT 51
14504: PUSH
14505: EMPTY
14506: LIST
14507: LIST
14508: PUSH
14509: EMPTY
14510: LIST
14511: LIST
14512: LIST
14513: LIST
14514: PUSH
14515: LD_INT 2
14517: PUSH
14518: LD_INT 1
14520: PUSH
14521: LD_INT 33
14523: PUSH
14524: LD_INT 2
14526: PUSH
14527: EMPTY
14528: LIST
14529: LIST
14530: PUSH
14531: LD_INT 61
14533: PUSH
14534: EMPTY
14535: LIST
14536: PUSH
14537: EMPTY
14538: LIST
14539: LIST
14540: LIST
14541: PUSH
14542: LD_INT 1
14544: PUSH
14545: LD_INT 33
14547: PUSH
14548: LD_INT 1
14550: PUSH
14551: EMPTY
14552: LIST
14553: LIST
14554: PUSH
14555: LD_INT 59
14557: PUSH
14558: EMPTY
14559: LIST
14560: PUSH
14561: EMPTY
14562: LIST
14563: LIST
14564: LIST
14565: PUSH
14566: LD_INT 33
14568: PUSH
14569: LD_INT 3
14571: PUSH
14572: EMPTY
14573: LIST
14574: LIST
14575: PUSH
14576: EMPTY
14577: LIST
14578: LIST
14579: LIST
14580: LIST
14581: PUSH
14582: EMPTY
14583: LIST
14584: LIST
14585: LIST
14586: LIST
14587: PPUSH
14588: CALL_OW 70
14592: PPUSH
14593: CALL_OW 1
14597: ST_TO_ADDR
// for i in side_units_outside [ side ] do
14598: LD_ADDR_VAR 0 7
14602: PUSH
14603: LD_EXP 66
14607: PUSH
14608: LD_VAR 0 1
14612: ARRAY
14613: PUSH
14614: FOR_IN
14615: IFFALSE 14628
// RemoveUnit ( i ) ;
14617: LD_VAR 0 7
14621: PPUSH
14622: CALL_OW 64
14626: GO 14614
14628: POP
14629: POP
// side_resources_remaining := Replace ( side_resources_remaining , side , Replace ( side_resources_remaining [ side ] , 1 , side_resources_delivered [ side ] [ 1 ] - side_pending_order [ side ] [ 1 ] ) ) ;
14630: LD_ADDR_EXP 68
14634: PUSH
14635: LD_EXP 68
14639: PPUSH
14640: LD_VAR 0 1
14644: PPUSH
14645: LD_EXP 68
14649: PUSH
14650: LD_VAR 0 1
14654: ARRAY
14655: PPUSH
14656: LD_INT 1
14658: PPUSH
14659: LD_EXP 59
14663: PUSH
14664: LD_VAR 0 1
14668: ARRAY
14669: PUSH
14670: LD_INT 1
14672: ARRAY
14673: PUSH
14674: LD_EXP 58
14678: PUSH
14679: LD_VAR 0 1
14683: ARRAY
14684: PUSH
14685: LD_INT 1
14687: ARRAY
14688: MINUS
14689: PPUSH
14690: CALL_OW 1
14694: PPUSH
14695: CALL_OW 1
14699: ST_TO_ADDR
// side_resources_remaining := Replace ( side_resources_remaining , side , Replace ( side_resources_remaining [ side ] , 2 , side_resources_delivered [ side ] [ 2 ] - side_pending_order [ side ] [ 2 ] ) ) ;
14700: LD_ADDR_EXP 68
14704: PUSH
14705: LD_EXP 68
14709: PPUSH
14710: LD_VAR 0 1
14714: PPUSH
14715: LD_EXP 68
14719: PUSH
14720: LD_VAR 0 1
14724: ARRAY
14725: PPUSH
14726: LD_INT 2
14728: PPUSH
14729: LD_EXP 59
14733: PUSH
14734: LD_VAR 0 1
14738: ARRAY
14739: PUSH
14740: LD_INT 2
14742: ARRAY
14743: PUSH
14744: LD_EXP 58
14748: PUSH
14749: LD_VAR 0 1
14753: ARRAY
14754: PUSH
14755: LD_INT 2
14757: ARRAY
14758: MINUS
14759: PPUSH
14760: CALL_OW 1
14764: PPUSH
14765: CALL_OW 1
14769: ST_TO_ADDR
// side_resources_remaining := Replace ( side_resources_remaining , side , Replace ( side_resources_remaining [ side ] , 3 , side_resources_delivered [ side ] [ 3 ] - side_pending_order [ side ] [ 3 ] ) ) ;
14770: LD_ADDR_EXP 68
14774: PUSH
14775: LD_EXP 68
14779: PPUSH
14780: LD_VAR 0 1
14784: PPUSH
14785: LD_EXP 68
14789: PUSH
14790: LD_VAR 0 1
14794: ARRAY
14795: PPUSH
14796: LD_INT 3
14798: PPUSH
14799: LD_EXP 59
14803: PUSH
14804: LD_VAR 0 1
14808: ARRAY
14809: PUSH
14810: LD_INT 3
14812: ARRAY
14813: PUSH
14814: LD_EXP 58
14818: PUSH
14819: LD_VAR 0 1
14823: ARRAY
14824: PUSH
14825: LD_INT 3
14827: ARRAY
14828: MINUS
14829: PPUSH
14830: CALL_OW 1
14834: PPUSH
14835: CALL_OW 1
14839: ST_TO_ADDR
// if side_order_type [ side ] = 3 then
14840: LD_EXP 67
14844: PUSH
14845: LD_VAR 0 1
14849: ARRAY
14850: PUSH
14851: LD_INT 3
14853: EQUAL
14854: IFFALSE 14898
// side_resources_remaining := Replace ( side_resources_remaining , side , Replace ( side_resources_remaining [ side ] , 3 , 0 ) ) ;
14856: LD_ADDR_EXP 68
14860: PUSH
14861: LD_EXP 68
14865: PPUSH
14866: LD_VAR 0 1
14870: PPUSH
14871: LD_EXP 68
14875: PUSH
14876: LD_VAR 0 1
14880: ARRAY
14881: PPUSH
14882: LD_INT 3
14884: PPUSH
14885: LD_INT 0
14887: PPUSH
14888: CALL_OW 1
14892: PPUSH
14893: CALL_OW 1
14897: ST_TO_ADDR
// side_transfer_clocks := Replace ( side_transfer_clocks , side , tick + 3 3$0 ) ;
14898: LD_ADDR_EXP 65
14902: PUSH
14903: LD_EXP 65
14907: PPUSH
14908: LD_VAR 0 1
14912: PPUSH
14913: LD_OWVAR 1
14917: PUSH
14918: LD_INT 6300
14920: PLUS
14921: PPUSH
14922: CALL_OW 1
14926: ST_TO_ADDR
// side_transfer_pending := Replace ( side_transfer_pending , side , 1 ) ;
14927: LD_ADDR_EXP 69
14931: PUSH
14932: LD_EXP 69
14936: PPUSH
14937: LD_VAR 0 1
14941: PPUSH
14942: LD_INT 1
14944: PPUSH
14945: CALL_OW 1
14949: ST_TO_ADDR
// if side = Your_Side then
14950: LD_VAR 0 1
14954: PUSH
14955: LD_OWVAR 2
14959: EQUAL
14960: IFFALSE 15005
// begin SetAreaMapShow ( team_transfer_zones [ Side_Teams [ side ] ] [ side_chosen_zone [ side ] ] , 0 ) ;
14962: LD_EXP 61
14966: PUSH
14967: LD_EXP 5
14971: PUSH
14972: LD_VAR 0 1
14976: ARRAY
14977: ARRAY
14978: PUSH
14979: LD_EXP 63
14983: PUSH
14984: LD_VAR 0 1
14988: ARRAY
14989: ARRAY
14990: PPUSH
14991: LD_INT 0
14993: PPUSH
14994: CALL_OW 424
// ToLua ( LUA_WaitingTransfer(); ) ;
14998: LD_STRING LUA_WaitingTransfer();
15000: PPUSH
15001: CALL_OW 559
// end ; end ; 301 :
15005: GO 15411
15007: LD_INT 301
15009: DOUBLE
15010: EQUAL
15011: IFTRUE 15015
15013: GO 15410
15015: POP
// begin side_pending_order := Replace ( side_pending_order , side , Replace ( side_pending_order [ side ] , 1 , 0 ) ) ;
15016: LD_ADDR_EXP 58
15020: PUSH
15021: LD_EXP 58
15025: PPUSH
15026: LD_VAR 0 1
15030: PPUSH
15031: LD_EXP 58
15035: PUSH
15036: LD_VAR 0 1
15040: ARRAY
15041: PPUSH
15042: LD_INT 1
15044: PPUSH
15045: LD_INT 0
15047: PPUSH
15048: CALL_OW 1
15052: PPUSH
15053: CALL_OW 1
15057: ST_TO_ADDR
// side_pending_order := Replace ( side_pending_order , side , Replace ( side_pending_order [ side ] , 2 , 0 ) ) ;
15058: LD_ADDR_EXP 58
15062: PUSH
15063: LD_EXP 58
15067: PPUSH
15068: LD_VAR 0 1
15072: PPUSH
15073: LD_EXP 58
15077: PUSH
15078: LD_VAR 0 1
15082: ARRAY
15083: PPUSH
15084: LD_INT 2
15086: PPUSH
15087: LD_INT 0
15089: PPUSH
15090: CALL_OW 1
15094: PPUSH
15095: CALL_OW 1
15099: ST_TO_ADDR
// side_pending_order := Replace ( side_pending_order , side , Replace ( side_pending_order [ side ] , 3 , 0 ) ) ;
15100: LD_ADDR_EXP 58
15104: PUSH
15105: LD_EXP 58
15109: PPUSH
15110: LD_VAR 0 1
15114: PPUSH
15115: LD_EXP 58
15119: PUSH
15120: LD_VAR 0 1
15124: ARRAY
15125: PPUSH
15126: LD_INT 3
15128: PPUSH
15129: LD_INT 0
15131: PPUSH
15132: CALL_OW 1
15136: PPUSH
15137: CALL_OW 1
15141: ST_TO_ADDR
// side_zone_locked := Replace ( side_zone_locked , side , 0 ) ;
15142: LD_ADDR_EXP 64
15146: PUSH
15147: LD_EXP 64
15151: PPUSH
15152: LD_VAR 0 1
15156: PPUSH
15157: LD_INT 0
15159: PPUSH
15160: CALL_OW 1
15164: ST_TO_ADDR
// side_transfer_clocks := Replace ( side_transfer_clocks , side , 0 0$0 ) ;
15165: LD_ADDR_EXP 65
15169: PUSH
15170: LD_EXP 65
15174: PPUSH
15175: LD_VAR 0 1
15179: PPUSH
15180: LD_INT 0
15182: PPUSH
15183: CALL_OW 1
15187: ST_TO_ADDR
// side_resources_remaining := Replace ( side_resources_remaining , side , Replace ( side_resources_remaining [ side ] , 1 , 0 ) ) ;
15188: LD_ADDR_EXP 68
15192: PUSH
15193: LD_EXP 68
15197: PPUSH
15198: LD_VAR 0 1
15202: PPUSH
15203: LD_EXP 68
15207: PUSH
15208: LD_VAR 0 1
15212: ARRAY
15213: PPUSH
15214: LD_INT 1
15216: PPUSH
15217: LD_INT 0
15219: PPUSH
15220: CALL_OW 1
15224: PPUSH
15225: CALL_OW 1
15229: ST_TO_ADDR
// side_resources_remaining := Replace ( side_resources_remaining , side , Replace ( side_resources_remaining [ side ] , 2 , 0 ) ) ;
15230: LD_ADDR_EXP 68
15234: PUSH
15235: LD_EXP 68
15239: PPUSH
15240: LD_VAR 0 1
15244: PPUSH
15245: LD_EXP 68
15249: PUSH
15250: LD_VAR 0 1
15254: ARRAY
15255: PPUSH
15256: LD_INT 2
15258: PPUSH
15259: LD_INT 0
15261: PPUSH
15262: CALL_OW 1
15266: PPUSH
15267: CALL_OW 1
15271: ST_TO_ADDR
// side_resources_remaining := Replace ( side_resources_remaining , side , Replace ( side_resources_remaining [ side ] , 3 , 0 ) ) ;
15272: LD_ADDR_EXP 68
15276: PUSH
15277: LD_EXP 68
15281: PPUSH
15282: LD_VAR 0 1
15286: PPUSH
15287: LD_EXP 68
15291: PUSH
15292: LD_VAR 0 1
15296: ARRAY
15297: PPUSH
15298: LD_INT 3
15300: PPUSH
15301: LD_INT 0
15303: PPUSH
15304: CALL_OW 1
15308: PPUSH
15309: CALL_OW 1
15313: ST_TO_ADDR
// side_units_outside := Replace ( side_units_outside , side , 0 ) ;
15314: LD_ADDR_EXP 66
15318: PUSH
15319: LD_EXP 66
15323: PPUSH
15324: LD_VAR 0 1
15328: PPUSH
15329: LD_INT 0
15331: PPUSH
15332: CALL_OW 1
15336: ST_TO_ADDR
// side_transfer_pending := Replace ( side_transfer_pending , side , 0 ) ;
15337: LD_ADDR_EXP 69
15341: PUSH
15342: LD_EXP 69
15346: PPUSH
15347: LD_VAR 0 1
15351: PPUSH
15352: LD_INT 0
15354: PPUSH
15355: CALL_OW 1
15359: ST_TO_ADDR
// if side = Your_Side then
15360: LD_VAR 0 1
15364: PUSH
15365: LD_OWVAR 2
15369: EQUAL
15370: IFFALSE 15408
// SetAreaMapShow ( team_transfer_zones [ Side_Teams [ side ] ] [ side_chosen_zone [ side ] ] , 0 ) ;
15372: LD_EXP 61
15376: PUSH
15377: LD_EXP 5
15381: PUSH
15382: LD_VAR 0 1
15386: ARRAY
15387: ARRAY
15388: PUSH
15389: LD_EXP 63
15393: PUSH
15394: LD_VAR 0 1
15398: ARRAY
15399: ARRAY
15400: PPUSH
15401: LD_INT 0
15403: PPUSH
15404: CALL_OW 424
// end ; end ;
15408: GO 15411
15410: POP
// end ; end_of_file
15411: PPOPN 7
15413: END
// export function CYCLIC_CrateSpawn ; var i , j , k , amount ; begin
15414: LD_INT 0
15416: PPUSH
15417: PPUSH
15418: PPUSH
15419: PPUSH
15420: PPUSH
// for i = 1 to position_drop_zones do
15421: LD_ADDR_VAR 0 2
15425: PUSH
15426: DOUBLE
15427: LD_INT 1
15429: DEC
15430: ST_TO_ADDR
15431: LD_EXP 36
15435: PUSH
15436: FOR_TO
15437: IFFALSE 15587
// begin amount := Rand ( position_drop_zones [ i ] [ 1 ] , 5 ) ;
15439: LD_ADDR_VAR 0 5
15443: PUSH
15444: LD_EXP 36
15448: PUSH
15449: LD_VAR 0 2
15453: ARRAY
15454: PUSH
15455: LD_INT 1
15457: ARRAY
15458: PPUSH
15459: LD_INT 5
15461: PPUSH
15462: CALL_OW 12
15466: ST_TO_ADDR
// for j = 3 to position_drop_zones [ i ] do
15467: LD_ADDR_VAR 0 3
15471: PUSH
15472: DOUBLE
15473: LD_INT 3
15475: DEC
15476: ST_TO_ADDR
15477: LD_EXP 36
15481: PUSH
15482: LD_VAR 0 2
15486: ARRAY
15487: PUSH
15488: FOR_TO
15489: IFFALSE 15583
// if Prob ( position_drop_zones [ i ] [ 2 ] ) then
15491: LD_EXP 36
15495: PUSH
15496: LD_VAR 0 2
15500: ARRAY
15501: PUSH
15502: LD_INT 2
15504: ARRAY
15505: PPUSH
15506: CALL_OW 13
15510: IFFALSE 15581
// for k = 1 to position_drop_zones [ i ] [ j ] do
15512: LD_ADDR_VAR 0 4
15516: PUSH
15517: DOUBLE
15518: LD_INT 1
15520: DEC
15521: ST_TO_ADDR
15522: LD_EXP 36
15526: PUSH
15527: LD_VAR 0 2
15531: ARRAY
15532: PUSH
15533: LD_VAR 0 3
15537: ARRAY
15538: PUSH
15539: FOR_TO
15540: IFFALSE 15579
// CreateCratesArea ( amount , position_drop_zones [ i ] [ j ] [ k ] , true ) ;
15542: LD_VAR 0 5
15546: PPUSH
15547: LD_EXP 36
15551: PUSH
15552: LD_VAR 0 2
15556: ARRAY
15557: PUSH
15558: LD_VAR 0 3
15562: ARRAY
15563: PUSH
15564: LD_VAR 0 4
15568: ARRAY
15569: PPUSH
15570: LD_INT 1
15572: PPUSH
15573: CALL_OW 55
15577: GO 15539
15579: POP
15580: POP
15581: GO 15488
15583: POP
15584: POP
// end ;
15585: GO 15436
15587: POP
15588: POP
// end ;
15589: LD_VAR 0 1
15593: RET
// export function CYCLIC_HumanSpawn ; var i , j , entity , areas , outside , side , arguments , human ; begin
15594: LD_INT 0
15596: PPUSH
15597: PPUSH
15598: PPUSH
15599: PPUSH
15600: PPUSH
15601: PPUSH
15602: PPUSH
15603: PPUSH
15604: PPUSH
// side_soldier_count := [ [ 1 , 0 ] , [ 2 , 0 ] , [ 3 , 0 ] , [ 4 , 0 ] , [ 5 , 0 ] , [ 6 , 0 ] , [ 7 , 0 ] , [ 8 , 0 ] ] ;
15605: LD_ADDR_EXP 47
15609: PUSH
15610: LD_INT 1
15612: PUSH
15613: LD_INT 0
15615: PUSH
15616: EMPTY
15617: LIST
15618: LIST
15619: PUSH
15620: LD_INT 2
15622: PUSH
15623: LD_INT 0
15625: PUSH
15626: EMPTY
15627: LIST
15628: LIST
15629: PUSH
15630: LD_INT 3
15632: PUSH
15633: LD_INT 0
15635: PUSH
15636: EMPTY
15637: LIST
15638: LIST
15639: PUSH
15640: LD_INT 4
15642: PUSH
15643: LD_INT 0
15645: PUSH
15646: EMPTY
15647: LIST
15648: LIST
15649: PUSH
15650: LD_INT 5
15652: PUSH
15653: LD_INT 0
15655: PUSH
15656: EMPTY
15657: LIST
15658: LIST
15659: PUSH
15660: LD_INT 6
15662: PUSH
15663: LD_INT 0
15665: PUSH
15666: EMPTY
15667: LIST
15668: LIST
15669: PUSH
15670: LD_INT 7
15672: PUSH
15673: LD_INT 0
15675: PUSH
15676: EMPTY
15677: LIST
15678: LIST
15679: PUSH
15680: LD_INT 8
15682: PUSH
15683: LD_INT 0
15685: PUSH
15686: EMPTY
15687: LIST
15688: LIST
15689: PUSH
15690: EMPTY
15691: LIST
15692: LIST
15693: LIST
15694: LIST
15695: LIST
15696: LIST
15697: LIST
15698: LIST
15699: ST_TO_ADDR
// arguments := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
15700: LD_ADDR_VAR 0 8
15704: PUSH
15705: LD_INT 0
15707: PUSH
15708: LD_INT 0
15710: PUSH
15711: LD_INT 0
15713: PUSH
15714: LD_INT 0
15716: PUSH
15717: LD_INT 0
15719: PUSH
15720: LD_INT 0
15722: PUSH
15723: LD_INT 0
15725: PUSH
15726: LD_INT 0
15728: PUSH
15729: EMPTY
15730: LIST
15731: LIST
15732: LIST
15733: LIST
15734: LIST
15735: LIST
15736: LIST
15737: LIST
15738: ST_TO_ADDR
// new_character_EON := [ 0 , Rand ( 1 , 4 ) , [ Rand ( 8 , 12 ) , Rand ( 8 , 12 ) ] , [ 0 , 0 , 0 , 0 ] , [ Rand ( 0 , experience ) , Rand ( 0 , experience ) , Rand ( 0 , experience ) , Rand ( 0 , experience ) ] , 0 ] ;
15739: LD_ADDR_EXP 44
15743: PUSH
15744: LD_INT 0
15746: PUSH
15747: LD_INT 1
15749: PPUSH
15750: LD_INT 4
15752: PPUSH
15753: CALL_OW 12
15757: PUSH
15758: LD_INT 8
15760: PPUSH
15761: LD_INT 12
15763: PPUSH
15764: CALL_OW 12
15768: PUSH
15769: LD_INT 8
15771: PPUSH
15772: LD_INT 12
15774: PPUSH
15775: CALL_OW 12
15779: PUSH
15780: EMPTY
15781: LIST
15782: LIST
15783: PUSH
15784: LD_INT 0
15786: PUSH
15787: LD_INT 0
15789: PUSH
15790: LD_INT 0
15792: PUSH
15793: LD_INT 0
15795: PUSH
15796: EMPTY
15797: LIST
15798: LIST
15799: LIST
15800: LIST
15801: PUSH
15802: LD_INT 0
15804: PPUSH
15805: LD_EXP 20
15809: PPUSH
15810: CALL_OW 12
15814: PUSH
15815: LD_INT 0
15817: PPUSH
15818: LD_EXP 20
15822: PPUSH
15823: CALL_OW 12
15827: PUSH
15828: LD_INT 0
15830: PPUSH
15831: LD_EXP 20
15835: PPUSH
15836: CALL_OW 12
15840: PUSH
15841: LD_INT 0
15843: PPUSH
15844: LD_EXP 20
15848: PPUSH
15849: CALL_OW 12
15853: PUSH
15854: EMPTY
15855: LIST
15856: LIST
15857: LIST
15858: LIST
15859: PUSH
15860: LD_INT 0
15862: PUSH
15863: EMPTY
15864: LIST
15865: LIST
15866: LIST
15867: LIST
15868: LIST
15869: LIST
15870: ST_TO_ADDR
// for i = 8 downto 1 do
15871: LD_ADDR_VAR 0 2
15875: PUSH
15876: DOUBLE
15877: LD_INT 8
15879: INC
15880: ST_TO_ADDR
15881: LD_INT 1
15883: PUSH
15884: FOR_DOWNTO
15885: IFFALSE 15978
// begin side_soldier_count := Replace ( side_soldier_count , i , Replace ( side_soldier_count [ i ] , 2 , side_soldiers [ i ] + 0 ) ) ;
15887: LD_ADDR_EXP 47
15891: PUSH
15892: LD_EXP 47
15896: PPUSH
15897: LD_VAR 0 2
15901: PPUSH
15902: LD_EXP 47
15906: PUSH
15907: LD_VAR 0 2
15911: ARRAY
15912: PPUSH
15913: LD_INT 2
15915: PPUSH
15916: LD_EXP 46
15920: PUSH
15921: LD_VAR 0 2
15925: ARRAY
15926: PUSH
15927: LD_INT 0
15929: PLUS
15930: PPUSH
15931: CALL_OW 1
15935: PPUSH
15936: CALL_OW 1
15940: ST_TO_ADDR
// arguments := Replace ( arguments , i , side_soldiers [ i ] + 0 ) ;
15941: LD_ADDR_VAR 0 8
15945: PUSH
15946: LD_VAR 0 8
15950: PPUSH
15951: LD_VAR 0 2
15955: PPUSH
15956: LD_EXP 46
15960: PUSH
15961: LD_VAR 0 2
15965: ARRAY
15966: PUSH
15967: LD_INT 0
15969: PLUS
15970: PPUSH
15971: CALL_OW 1
15975: ST_TO_ADDR
// end ;
15976: GO 15884
15978: POP
15979: POP
// for i = 8 downto 1 do
15980: LD_ADDR_VAR 0 2
15984: PUSH
15985: DOUBLE
15986: LD_INT 8
15988: INC
15989: ST_TO_ADDR
15990: LD_INT 1
15992: PUSH
15993: FOR_DOWNTO
15994: IFFALSE 16051
// if not side_isalive [ i ] then
15996: LD_EXP 53
16000: PUSH
16001: LD_VAR 0 2
16005: ARRAY
16006: NOT
16007: IFFALSE 16049
// begin side_soldier_count := Delete ( side_soldier_count , i ) ;
16009: LD_ADDR_EXP 47
16013: PUSH
16014: LD_EXP 47
16018: PPUSH
16019: LD_VAR 0 2
16023: PPUSH
16024: CALL_OW 3
16028: ST_TO_ADDR
// arguments := Delete ( arguments , i ) ;
16029: LD_ADDR_VAR 0 8
16033: PUSH
16034: LD_VAR 0 8
16038: PPUSH
16039: LD_VAR 0 2
16043: PPUSH
16044: CALL_OW 3
16048: ST_TO_ADDR
// end ;
16049: GO 15993
16051: POP
16052: POP
// side_soldier_count := SortListByListAsc ( side_soldier_count , arguments ) ;
16053: LD_ADDR_EXP 47
16057: PUSH
16058: LD_EXP 47
16062: PPUSH
16063: LD_VAR 0 8
16067: PPUSH
16068: CALL_OW 76
16072: ST_TO_ADDR
// for i = side_soldier_count + 0 downto 1 do
16073: LD_ADDR_VAR 0 2
16077: PUSH
16078: DOUBLE
16079: LD_EXP 47
16083: PUSH
16084: LD_INT 0
16086: PLUS
16087: INC
16088: ST_TO_ADDR
16089: LD_INT 1
16091: PUSH
16092: FOR_DOWNTO
16093: IFFALSE 16147
// begin if side_soldier_count [ i ] [ 2 ] > side_soldier_count [ 1 ] [ 2 ] then
16095: LD_EXP 47
16099: PUSH
16100: LD_VAR 0 2
16104: ARRAY
16105: PUSH
16106: LD_INT 2
16108: ARRAY
16109: PUSH
16110: LD_EXP 47
16114: PUSH
16115: LD_INT 1
16117: ARRAY
16118: PUSH
16119: LD_INT 2
16121: ARRAY
16122: GREATER
16123: IFFALSE 16145
// side_soldier_count := Delete ( side_soldier_count , i ) ;
16125: LD_ADDR_EXP 47
16129: PUSH
16130: LD_EXP 47
16134: PPUSH
16135: LD_VAR 0 2
16139: PPUSH
16140: CALL_OW 3
16144: ST_TO_ADDR
// end ;
16145: GO 16092
16147: POP
16148: POP
// side := side_soldier_count [ Rand ( 1 , side_soldier_count ) ] [ 1 ] ;
16149: LD_ADDR_VAR 0 7
16153: PUSH
16154: LD_EXP 47
16158: PUSH
16159: LD_INT 1
16161: PPUSH
16162: LD_EXP 47
16166: PPUSH
16167: CALL_OW 12
16171: ARRAY
16172: PUSH
16173: LD_INT 1
16175: ARRAY
16176: ST_TO_ADDR
// if side_soldiers [ side ] > 0 then
16177: LD_EXP 46
16181: PUSH
16182: LD_VAR 0 7
16186: ARRAY
16187: PUSH
16188: LD_INT 0
16190: GREATER
16191: IFFALSE 16231
// entity := side_soldiers [ side ] [ Rand ( 1 , side_soldiers [ side ] ) ] else
16193: LD_ADDR_VAR 0 4
16197: PUSH
16198: LD_EXP 46
16202: PUSH
16203: LD_VAR 0 7
16207: ARRAY
16208: PUSH
16209: LD_INT 1
16211: PPUSH
16212: LD_EXP 46
16216: PUSH
16217: LD_VAR 0 7
16221: ARRAY
16222: PPUSH
16223: CALL_OW 12
16227: ARRAY
16228: ST_TO_ADDR
16229: GO 16320
// begin entity := FilterAllUnits ( [ [ f_side , side ] , [ f_type , 3 ] , [ f_btype , 0 ] , [ f_or ] , [ f_btype , 1 ] ] ) ;
16231: LD_ADDR_VAR 0 4
16235: PUSH
16236: LD_INT 22
16238: PUSH
16239: LD_VAR 0 7
16243: PUSH
16244: EMPTY
16245: LIST
16246: LIST
16247: PUSH
16248: LD_INT 21
16250: PUSH
16251: LD_INT 3
16253: PUSH
16254: EMPTY
16255: LIST
16256: LIST
16257: PUSH
16258: LD_INT 30
16260: PUSH
16261: LD_INT 0
16263: PUSH
16264: EMPTY
16265: LIST
16266: LIST
16267: PUSH
16268: LD_INT 2
16270: PUSH
16271: EMPTY
16272: LIST
16273: PUSH
16274: LD_INT 30
16276: PUSH
16277: LD_INT 1
16279: PUSH
16280: EMPTY
16281: LIST
16282: LIST
16283: PUSH
16284: EMPTY
16285: LIST
16286: LIST
16287: LIST
16288: LIST
16289: LIST
16290: PPUSH
16291: CALL_OW 69
16295: ST_TO_ADDR
// entity := entity [ Rand ( 1 , entity ) ] ;
16296: LD_ADDR_VAR 0 4
16300: PUSH
16301: LD_VAR 0 4
16305: PUSH
16306: LD_INT 1
16308: PPUSH
16309: LD_VAR 0 4
16313: PPUSH
16314: CALL_OW 12
16318: ARRAY
16319: ST_TO_ADDR
// end ; outside := 0 ;
16320: LD_ADDR_VAR 0 6
16324: PUSH
16325: LD_INT 0
16327: ST_TO_ADDR
// areas := 0 ;
16328: LD_ADDR_VAR 0 5
16332: PUSH
16333: LD_INT 0
16335: ST_TO_ADDR
// for i = 1 to position_drop_zones do
16336: LD_ADDR_VAR 0 2
16340: PUSH
16341: DOUBLE
16342: LD_INT 1
16344: DEC
16345: ST_TO_ADDR
16346: LD_EXP 36
16350: PUSH
16351: FOR_TO
16352: IFFALSE 16644
// for j = 1 to position_drop_zones [ i ] [ 3 ] do
16354: LD_ADDR_VAR 0 3
16358: PUSH
16359: DOUBLE
16360: LD_INT 1
16362: DEC
16363: ST_TO_ADDR
16364: LD_EXP 36
16368: PUSH
16369: LD_VAR 0 2
16373: ARRAY
16374: PUSH
16375: LD_INT 3
16377: ARRAY
16378: PUSH
16379: FOR_TO
16380: IFFALSE 16640
// begin areas := areas + 1 ;
16382: LD_ADDR_VAR 0 5
16386: PUSH
16387: LD_VAR 0 5
16391: PUSH
16392: LD_INT 1
16394: PLUS
16395: ST_TO_ADDR
// if IsInArea ( entity , position_drop_zones [ i ] [ 3 ] [ j ] ) then
16396: LD_VAR 0 4
16400: PPUSH
16401: LD_EXP 36
16405: PUSH
16406: LD_VAR 0 2
16410: ARRAY
16411: PUSH
16412: LD_INT 3
16414: ARRAY
16415: PUSH
16416: LD_VAR 0 3
16420: ARRAY
16421: PPUSH
16422: CALL_OW 308
16426: IFFALSE 16624
// begin human := PrepareCharacters ( side , [ Rand ( 0 , 5 ) , Rand ( 0 , 5 ) , Rand ( 0 , 5 ) , Rand ( 0 , 5 ) , Rand ( 0 , 5 ) , Rand ( 0 , 5 ) , Rand ( 0 , 5 ) , Rand ( 0 , 5 ) ] , new_character_EON ) ;
16428: LD_ADDR_VAR 0 9
16432: PUSH
16433: LD_VAR 0 7
16437: PPUSH
16438: LD_INT 0
16440: PPUSH
16441: LD_INT 5
16443: PPUSH
16444: CALL_OW 12
16448: PUSH
16449: LD_INT 0
16451: PPUSH
16452: LD_INT 5
16454: PPUSH
16455: CALL_OW 12
16459: PUSH
16460: LD_INT 0
16462: PPUSH
16463: LD_INT 5
16465: PPUSH
16466: CALL_OW 12
16470: PUSH
16471: LD_INT 0
16473: PPUSH
16474: LD_INT 5
16476: PPUSH
16477: CALL_OW 12
16481: PUSH
16482: LD_INT 0
16484: PPUSH
16485: LD_INT 5
16487: PPUSH
16488: CALL_OW 12
16492: PUSH
16493: LD_INT 0
16495: PPUSH
16496: LD_INT 5
16498: PPUSH
16499: CALL_OW 12
16503: PUSH
16504: LD_INT 0
16506: PPUSH
16507: LD_INT 5
16509: PPUSH
16510: CALL_OW 12
16514: PUSH
16515: LD_INT 0
16517: PPUSH
16518: LD_INT 5
16520: PPUSH
16521: CALL_OW 12
16525: PUSH
16526: EMPTY
16527: LIST
16528: LIST
16529: LIST
16530: LIST
16531: LIST
16532: LIST
16533: LIST
16534: LIST
16535: PPUSH
16536: LD_EXP 44
16540: PPUSH
16541: CALL 6190 0 3
16545: ST_TO_ADDR
// PlaceUnitArea ( human , position_drop_zones [ i ] [ 3 ] [ j ] , true ) ;
16546: LD_VAR 0 9
16550: PPUSH
16551: LD_EXP 36
16555: PUSH
16556: LD_VAR 0 2
16560: ARRAY
16561: PUSH
16562: LD_INT 3
16564: ARRAY
16565: PUSH
16566: LD_VAR 0 3
16570: ARRAY
16571: PPUSH
16572: LD_INT 1
16574: PPUSH
16575: CALL_OW 49
// side_soldiers := Replace ( side_soldiers , side , side_soldiers [ side ] ^ human ) ;
16579: LD_ADDR_EXP 46
16583: PUSH
16584: LD_EXP 46
16588: PPUSH
16589: LD_VAR 0 7
16593: PPUSH
16594: LD_EXP 46
16598: PUSH
16599: LD_VAR 0 7
16603: ARRAY
16604: PUSH
16605: LD_VAR 0 9
16609: ADD
16610: PPUSH
16611: CALL_OW 1
16615: ST_TO_ADDR
// exit ;
16616: POP
16617: POP
16618: POP
16619: POP
16620: GO 16892
// end else
16622: GO 16638
// begin outside := outside + 1 ;
16624: LD_ADDR_VAR 0 6
16628: PUSH
16629: LD_VAR 0 6
16633: PUSH
16634: LD_INT 1
16636: PLUS
16637: ST_TO_ADDR
// end ; end ;
16638: GO 16379
16640: POP
16641: POP
16642: GO 16351
16644: POP
16645: POP
// if areas = outside then
16646: LD_VAR 0 5
16650: PUSH
16651: LD_VAR 0 6
16655: EQUAL
16656: IFFALSE 16892
// begin i := Rand ( 1 , position_drop_zones ) ;
16658: LD_ADDR_VAR 0 2
16662: PUSH
16663: LD_INT 1
16665: PPUSH
16666: LD_EXP 36
16670: PPUSH
16671: CALL_OW 12
16675: ST_TO_ADDR
// j := Rand ( 1 , position_drop_zones [ i ] [ 3 ] ) ;
16676: LD_ADDR_VAR 0 3
16680: PUSH
16681: LD_INT 1
16683: PPUSH
16684: LD_EXP 36
16688: PUSH
16689: LD_VAR 0 2
16693: ARRAY
16694: PUSH
16695: LD_INT 3
16697: ARRAY
16698: PPUSH
16699: CALL_OW 12
16703: ST_TO_ADDR
// human := PrepareCharacters ( side , [ Rand ( 0 , 5 ) , Rand ( 0 , 5 ) , Rand ( 0 , 5 ) , Rand ( 0 , 5 ) , Rand ( 0 , 5 ) , Rand ( 0 , 5 ) , Rand ( 0 , 5 ) , Rand ( 0 , 5 ) ] , new_character_EON ) ;
16704: LD_ADDR_VAR 0 9
16708: PUSH
16709: LD_VAR 0 7
16713: PPUSH
16714: LD_INT 0
16716: PPUSH
16717: LD_INT 5
16719: PPUSH
16720: CALL_OW 12
16724: PUSH
16725: LD_INT 0
16727: PPUSH
16728: LD_INT 5
16730: PPUSH
16731: CALL_OW 12
16735: PUSH
16736: LD_INT 0
16738: PPUSH
16739: LD_INT 5
16741: PPUSH
16742: CALL_OW 12
16746: PUSH
16747: LD_INT 0
16749: PPUSH
16750: LD_INT 5
16752: PPUSH
16753: CALL_OW 12
16757: PUSH
16758: LD_INT 0
16760: PPUSH
16761: LD_INT 5
16763: PPUSH
16764: CALL_OW 12
16768: PUSH
16769: LD_INT 0
16771: PPUSH
16772: LD_INT 5
16774: PPUSH
16775: CALL_OW 12
16779: PUSH
16780: LD_INT 0
16782: PPUSH
16783: LD_INT 5
16785: PPUSH
16786: CALL_OW 12
16790: PUSH
16791: LD_INT 0
16793: PPUSH
16794: LD_INT 5
16796: PPUSH
16797: CALL_OW 12
16801: PUSH
16802: EMPTY
16803: LIST
16804: LIST
16805: LIST
16806: LIST
16807: LIST
16808: LIST
16809: LIST
16810: LIST
16811: PPUSH
16812: LD_EXP 44
16816: PPUSH
16817: CALL 6190 0 3
16821: ST_TO_ADDR
// PlaceUnitArea ( human , position_drop_zones [ i ] [ 3 ] [ j ] , true ) ;
16822: LD_VAR 0 9
16826: PPUSH
16827: LD_EXP 36
16831: PUSH
16832: LD_VAR 0 2
16836: ARRAY
16837: PUSH
16838: LD_INT 3
16840: ARRAY
16841: PUSH
16842: LD_VAR 0 3
16846: ARRAY
16847: PPUSH
16848: LD_INT 1
16850: PPUSH
16851: CALL_OW 49
// side_soldiers := Replace ( side_soldiers , side , side_soldiers [ side ] ^ human ) ;
16855: LD_ADDR_EXP 46
16859: PUSH
16860: LD_EXP 46
16864: PPUSH
16865: LD_VAR 0 7
16869: PPUSH
16870: LD_EXP 46
16874: PUSH
16875: LD_VAR 0 7
16879: ARRAY
16880: PUSH
16881: LD_VAR 0 9
16885: ADD
16886: PPUSH
16887: CALL_OW 1
16891: ST_TO_ADDR
// end ; end ;
16892: LD_VAR 0 1
16896: RET
// export function CYCLIC_Fluctuation ; var change ; begin
16897: LD_INT 0
16899: PPUSH
16900: PPUSH
// current_spawn_rate := Rand ( - 5 , 5 ) ;
16901: LD_ADDR_EXP 41
16905: PUSH
16906: LD_INT 5
16908: NEG
16909: PPUSH
16910: LD_INT 5
16912: PPUSH
16913: CALL_OW 12
16917: ST_TO_ADDR
// fluctuation_modifier_crates := fluctuation_base_crates * current_spawn_rate ;
16918: LD_ADDR_EXP 39
16922: PUSH
16923: LD_EXP 37
16927: PUSH
16928: LD_EXP 41
16932: MUL
16933: ST_TO_ADDR
// fluctuation_modifier_humans := fluctuation_base_humans * current_spawn_rate ;
16934: LD_ADDR_EXP 40
16938: PUSH
16939: LD_EXP 38
16943: PUSH
16944: LD_EXP 41
16948: MUL
16949: ST_TO_ADDR
// change := current_spawn_rate - past_spawn_rate ;
16950: LD_ADDR_VAR 0 2
16954: PUSH
16955: LD_EXP 41
16959: PUSH
16960: LD_EXP 42
16964: MINUS
16965: ST_TO_ADDR
// case change of - 10 .. - 6 :
16966: LD_VAR 0 2
16970: PUSH
16971: LD_INT 10
16973: NEG
16974: DOUBLE
16975: GREATEREQUAL
16976: IFFALSE 16985
16978: LD_INT 6
16980: NEG
16981: DOUBLE
16982: LESSEQUAL
16983: IFTRUE 16987
16985: GO 16990
16987: POP
// begin end ; - 5 .. - 1 :
16988: GO 17055
16990: LD_INT 5
16992: NEG
16993: DOUBLE
16994: GREATEREQUAL
16995: IFFALSE 17004
16997: LD_INT 1
16999: NEG
17000: DOUBLE
17001: LESSEQUAL
17002: IFTRUE 17006
17004: GO 17009
17006: POP
// begin end ; 0 :
17007: GO 17055
17009: LD_INT 0
17011: DOUBLE
17012: EQUAL
17013: IFTRUE 17017
17015: GO 17020
17017: POP
// begin end ; 1 .. 5 :
17018: GO 17055
17020: LD_INT 1
17022: DOUBLE
17023: GREATEREQUAL
17024: IFFALSE 17032
17026: LD_INT 5
17028: DOUBLE
17029: LESSEQUAL
17030: IFTRUE 17034
17032: GO 17037
17034: POP
// begin end ; 6 .. 10 :
17035: GO 17055
17037: LD_INT 6
17039: DOUBLE
17040: GREATEREQUAL
17041: IFFALSE 17049
17043: LD_INT 10
17045: DOUBLE
17046: LESSEQUAL
17047: IFTRUE 17051
17049: GO 17054
17051: POP
// begin end ; end ;
17052: GO 17055
17054: POP
// past_spawn_rate := current_spawn_rate ;
17055: LD_ADDR_EXP 42
17059: PUSH
17060: LD_EXP 41
17064: ST_TO_ADDR
// end ;
17065: LD_VAR 0 1
17069: RET
// export function CYCLIC_CheckTransportsInZones ; var i , cargo_bays ; begin
17070: LD_INT 0
17072: PPUSH
17073: PPUSH
17074: PPUSH
// for i = 1 to 8 do
17075: LD_ADDR_VAR 0 2
17079: PUSH
17080: DOUBLE
17081: LD_INT 1
17083: DEC
17084: ST_TO_ADDR
17085: LD_INT 8
17087: PUSH
17088: FOR_TO
17089: IFFALSE 17861
// begin side_resources_delivered := Replace ( side_resources_delivered , i , [ 0 , 0 , 0 ] ) ;
17091: LD_ADDR_EXP 59
17095: PUSH
17096: LD_EXP 59
17100: PPUSH
17101: LD_VAR 0 2
17105: PPUSH
17106: LD_INT 0
17108: PUSH
17109: LD_INT 0
17111: PUSH
17112: LD_INT 0
17114: PUSH
17115: EMPTY
17116: LIST
17117: LIST
17118: LIST
17119: PPUSH
17120: CALL_OW 1
17124: ST_TO_ADDR
// if not side_zone_locked [ i ] = 0 then
17125: LD_EXP 64
17129: PUSH
17130: LD_VAR 0 2
17134: ARRAY
17135: PUSH
17136: LD_INT 0
17138: EQUAL
17139: NOT
17140: IFFALSE 17859
// begin cargo_bays := FilterUnitsInArea ( team_transfer_zones [ Side_Teams [ i ] ] [ side_chosen_zone [ i ] ] , [ [ f_side , i ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , 12 ] , [ f_weapon , 32 ] , [ f_weapon , 51 ] ] , [ f_or , [ f_and , [ f_control , 2 ] , [ f_linked ] ] , [ f_and , [ f_control , 1 ] , [ f_occupied ] ] , [ f_control , 3 ] ] ] ) ;
17142: LD_ADDR_VAR 0 3
17146: PUSH
17147: LD_EXP 61
17151: PUSH
17152: LD_EXP 5
17156: PUSH
17157: LD_VAR 0 2
17161: ARRAY
17162: ARRAY
17163: PUSH
17164: LD_EXP 63
17168: PUSH
17169: LD_VAR 0 2
17173: ARRAY
17174: ARRAY
17175: PPUSH
17176: LD_INT 22
17178: PUSH
17179: LD_VAR 0 2
17183: PUSH
17184: EMPTY
17185: LIST
17186: LIST
17187: PUSH
17188: LD_INT 21
17190: PUSH
17191: LD_INT 2
17193: PUSH
17194: EMPTY
17195: LIST
17196: LIST
17197: PUSH
17198: LD_INT 2
17200: PUSH
17201: LD_INT 34
17203: PUSH
17204: LD_INT 12
17206: PUSH
17207: EMPTY
17208: LIST
17209: LIST
17210: PUSH
17211: LD_INT 34
17213: PUSH
17214: LD_INT 32
17216: PUSH
17217: EMPTY
17218: LIST
17219: LIST
17220: PUSH
17221: LD_INT 34
17223: PUSH
17224: LD_INT 51
17226: PUSH
17227: EMPTY
17228: LIST
17229: LIST
17230: PUSH
17231: EMPTY
17232: LIST
17233: LIST
17234: LIST
17235: LIST
17236: PUSH
17237: LD_INT 2
17239: PUSH
17240: LD_INT 1
17242: PUSH
17243: LD_INT 33
17245: PUSH
17246: LD_INT 2
17248: PUSH
17249: EMPTY
17250: LIST
17251: LIST
17252: PUSH
17253: LD_INT 61
17255: PUSH
17256: EMPTY
17257: LIST
17258: PUSH
17259: EMPTY
17260: LIST
17261: LIST
17262: LIST
17263: PUSH
17264: LD_INT 1
17266: PUSH
17267: LD_INT 33
17269: PUSH
17270: LD_INT 1
17272: PUSH
17273: EMPTY
17274: LIST
17275: LIST
17276: PUSH
17277: LD_INT 59
17279: PUSH
17280: EMPTY
17281: LIST
17282: PUSH
17283: EMPTY
17284: LIST
17285: LIST
17286: LIST
17287: PUSH
17288: LD_INT 33
17290: PUSH
17291: LD_INT 3
17293: PUSH
17294: EMPTY
17295: LIST
17296: LIST
17297: PUSH
17298: EMPTY
17299: LIST
17300: LIST
17301: LIST
17302: LIST
17303: PUSH
17304: EMPTY
17305: LIST
17306: LIST
17307: LIST
17308: LIST
17309: PPUSH
17310: CALL_OW 70
17314: ST_TO_ADDR
// if not cargo_bays = [ ] then
17315: LD_VAR 0 3
17319: PUSH
17320: EMPTY
17321: EQUAL
17322: NOT
17323: IFFALSE 17481
// begin side_resources_delivered := Replace ( side_resources_delivered , i , Replace ( side_resources_delivered [ i ] , 1 , GetCargo ( cargo_bays , mat_cans ) ) ) ;
17325: LD_ADDR_EXP 59
17329: PUSH
17330: LD_EXP 59
17334: PPUSH
17335: LD_VAR 0 2
17339: PPUSH
17340: LD_EXP 59
17344: PUSH
17345: LD_VAR 0 2
17349: ARRAY
17350: PPUSH
17351: LD_INT 1
17353: PPUSH
17354: LD_VAR 0 3
17358: PPUSH
17359: LD_INT 1
17361: PPUSH
17362: CALL_OW 289
17366: PPUSH
17367: CALL_OW 1
17371: PPUSH
17372: CALL_OW 1
17376: ST_TO_ADDR
// side_resources_delivered := Replace ( side_resources_delivered , i , Replace ( side_resources_delivered [ i ] , 2 , GetCargo ( cargo_bays , mat_oil ) ) ) ;
17377: LD_ADDR_EXP 59
17381: PUSH
17382: LD_EXP 59
17386: PPUSH
17387: LD_VAR 0 2
17391: PPUSH
17392: LD_EXP 59
17396: PUSH
17397: LD_VAR 0 2
17401: ARRAY
17402: PPUSH
17403: LD_INT 2
17405: PPUSH
17406: LD_VAR 0 3
17410: PPUSH
17411: LD_INT 2
17413: PPUSH
17414: CALL_OW 289
17418: PPUSH
17419: CALL_OW 1
17423: PPUSH
17424: CALL_OW 1
17428: ST_TO_ADDR
// side_resources_delivered := Replace ( side_resources_delivered , i , Replace ( side_resources_delivered [ i ] , 3 , GetCargo ( cargo_bays , mat_siberit ) ) ) ;
17429: LD_ADDR_EXP 59
17433: PUSH
17434: LD_EXP 59
17438: PPUSH
17439: LD_VAR 0 2
17443: PPUSH
17444: LD_EXP 59
17448: PUSH
17449: LD_VAR 0 2
17453: ARRAY
17454: PPUSH
17455: LD_INT 3
17457: PPUSH
17458: LD_VAR 0 3
17462: PPUSH
17463: LD_INT 3
17465: PPUSH
17466: CALL_OW 289
17470: PPUSH
17471: CALL_OW 1
17475: PPUSH
17476: CALL_OW 1
17480: ST_TO_ADDR
// end ; if i = Your_Side and ( side_order_type [ i ] = 1 or side_order_type [ i ] = 2 ) then
17481: LD_VAR 0 2
17485: PUSH
17486: LD_OWVAR 2
17490: EQUAL
17491: PUSH
17492: LD_EXP 67
17496: PUSH
17497: LD_VAR 0 2
17501: ARRAY
17502: PUSH
17503: LD_INT 1
17505: EQUAL
17506: PUSH
17507: LD_EXP 67
17511: PUSH
17512: LD_VAR 0 2
17516: ARRAY
17517: PUSH
17518: LD_INT 2
17520: EQUAL
17521: OR
17522: AND
17523: IFFALSE 17616
// ToLua ( LUA_UpdateTransferResources( & side_resources_delivered [ i ] [ 1 ] & , & side_resources_delivered [ i ] [ 2 ] & , & side_resources_delivered [ i ] [ 3 ] & , & 0 & , & side_order_type [ i ] & ); ) ;
17525: LD_STRING LUA_UpdateTransferResources(
17527: PUSH
17528: LD_EXP 59
17532: PUSH
17533: LD_VAR 0 2
17537: ARRAY
17538: PUSH
17539: LD_INT 1
17541: ARRAY
17542: STR
17543: PUSH
17544: LD_STRING ,
17546: STR
17547: PUSH
17548: LD_EXP 59
17552: PUSH
17553: LD_VAR 0 2
17557: ARRAY
17558: PUSH
17559: LD_INT 2
17561: ARRAY
17562: STR
17563: PUSH
17564: LD_STRING ,
17566: STR
17567: PUSH
17568: LD_EXP 59
17572: PUSH
17573: LD_VAR 0 2
17577: ARRAY
17578: PUSH
17579: LD_INT 3
17581: ARRAY
17582: STR
17583: PUSH
17584: LD_STRING ,
17586: STR
17587: PUSH
17588: LD_INT 0
17590: STR
17591: PUSH
17592: LD_STRING ,
17594: STR
17595: PUSH
17596: LD_EXP 67
17600: PUSH
17601: LD_VAR 0 2
17605: ARRAY
17606: STR
17607: PUSH
17608: LD_STRING );
17610: STR
17611: PPUSH
17612: CALL_OW 559
// if i = Your_Side and side_order_type [ i ] = 3 then
17616: LD_VAR 0 2
17620: PUSH
17621: LD_OWVAR 2
17625: EQUAL
17626: PUSH
17627: LD_EXP 67
17631: PUSH
17632: LD_VAR 0 2
17636: ARRAY
17637: PUSH
17638: LD_INT 3
17640: EQUAL
17641: AND
17642: IFFALSE 17735
// ToLua ( LUA_UpdateTransferResources( & 0 & , & 0 & , & side_resources_delivered [ i ] [ 3 ] & + & team_siberite_stocked [ Side_Teams [ i ] ] & , & victory_cond & , & side_order_type [ i ] & ); ) ;
17644: LD_STRING LUA_UpdateTransferResources(
17646: PUSH
17647: LD_INT 0
17649: STR
17650: PUSH
17651: LD_STRING ,
17653: STR
17654: PUSH
17655: LD_INT 0
17657: STR
17658: PUSH
17659: LD_STRING ,
17661: STR
17662: PUSH
17663: LD_EXP 59
17667: PUSH
17668: LD_VAR 0 2
17672: ARRAY
17673: PUSH
17674: LD_INT 3
17676: ARRAY
17677: STR
17678: PUSH
17679: LD_STRING +
17681: STR
17682: PUSH
17683: LD_EXP 60
17687: PUSH
17688: LD_EXP 5
17692: PUSH
17693: LD_VAR 0 2
17697: ARRAY
17698: ARRAY
17699: STR
17700: PUSH
17701: LD_STRING ,
17703: STR
17704: PUSH
17705: LD_EXP 27
17709: STR
17710: PUSH
17711: LD_STRING ,
17713: STR
17714: PUSH
17715: LD_EXP 67
17719: PUSH
17720: LD_VAR 0 2
17724: ARRAY
17725: STR
17726: PUSH
17727: LD_STRING );
17729: STR
17730: PPUSH
17731: CALL_OW 559
// if side_resources_delivered [ i ] [ 1 ] >= side_pending_order [ i ] [ 1 ] and side_resources_delivered [ i ] [ 2 ] >= side_pending_order [ i ] [ 2 ] and side_resources_delivered [ i ] [ 3 ] >= side_pending_order [ i ] [ 3 ] and i = Your_Side then
17735: LD_EXP 59
17739: PUSH
17740: LD_VAR 0 2
17744: ARRAY
17745: PUSH
17746: LD_INT 1
17748: ARRAY
17749: PUSH
17750: LD_EXP 58
17754: PUSH
17755: LD_VAR 0 2
17759: ARRAY
17760: PUSH
17761: LD_INT 1
17763: ARRAY
17764: GREATEREQUAL
17765: PUSH
17766: LD_EXP 59
17770: PUSH
17771: LD_VAR 0 2
17775: ARRAY
17776: PUSH
17777: LD_INT 2
17779: ARRAY
17780: PUSH
17781: LD_EXP 58
17785: PUSH
17786: LD_VAR 0 2
17790: ARRAY
17791: PUSH
17792: LD_INT 2
17794: ARRAY
17795: GREATEREQUAL
17796: AND
17797: PUSH
17798: LD_EXP 59
17802: PUSH
17803: LD_VAR 0 2
17807: ARRAY
17808: PUSH
17809: LD_INT 3
17811: ARRAY
17812: PUSH
17813: LD_EXP 58
17817: PUSH
17818: LD_VAR 0 2
17822: ARRAY
17823: PUSH
17824: LD_INT 3
17826: ARRAY
17827: GREATEREQUAL
17828: AND
17829: PUSH
17830: LD_VAR 0 2
17834: PUSH
17835: LD_OWVAR 2
17839: EQUAL
17840: AND
17841: IFFALSE 17852
// ToLua ( LUA_CanSendShipment(); ) else
17843: LD_STRING LUA_CanSendShipment();
17845: PPUSH
17846: CALL_OW 559
17850: GO 17859
// ToLua ( LUA_CannotSendShipment(); ) ;
17852: LD_STRING LUA_CannotSendShipment();
17854: PPUSH
17855: CALL_OW 559
// end ; end ;
17859: GO 17088
17861: POP
17862: POP
// end ;
17863: LD_VAR 0 1
17867: RET
// export function CYCLIC_FinalizeTransfer ( side , in1 , in2 , in3 ) ; var human , i , bulk , crates , oil , siberite ; begin
17868: LD_INT 0
17870: PPUSH
17871: PPUSH
17872: PPUSH
17873: PPUSH
17874: PPUSH
17875: PPUSH
17876: PPUSH
// SetCargo ( side_units_outside [ side ] , mat_cans , 0 ) ;
17877: LD_EXP 66
17881: PUSH
17882: LD_VAR 0 1
17886: ARRAY
17887: PPUSH
17888: LD_INT 1
17890: PPUSH
17891: LD_INT 0
17893: PPUSH
17894: CALL_OW 290
// crates := in1 ;
17898: LD_ADDR_VAR 0 9
17902: PUSH
17903: LD_VAR 0 2
17907: ST_TO_ADDR
// oil := in2 ;
17908: LD_ADDR_VAR 0 10
17912: PUSH
17913: LD_VAR 0 3
17917: ST_TO_ADDR
// siberite := in3 ;
17918: LD_ADDR_VAR 0 11
17922: PUSH
17923: LD_VAR 0 4
17927: ST_TO_ADDR
// case side_order_type [ side ] of 1 :
17928: LD_EXP 67
17932: PUSH
17933: LD_VAR 0 1
17937: ARRAY
17938: PUSH
17939: LD_INT 1
17941: DOUBLE
17942: EQUAL
17943: IFTRUE 17947
17945: GO 18392
17947: POP
// begin for i = 1 to side_reinforcement_amount [ side ] do
17948: LD_ADDR_VAR 0 7
17952: PUSH
17953: DOUBLE
17954: LD_INT 1
17956: DEC
17957: ST_TO_ADDR
17958: LD_EXP 56
17962: PUSH
17963: LD_VAR 0 1
17967: ARRAY
17968: PUSH
17969: FOR_TO
17970: IFFALSE 18239
// begin new_character_reinforcements := [ 0 , 1 , [ Rand ( 8 , 12 ) , Rand ( 8 , 12 ) ] , [ 0 , 0 , 0 , 0 ] , [ Rand ( 0 , experience ) , Rand ( 0 , experience ) , Rand ( 0 , experience ) , Rand ( 0 , experience ) ] , 0 ] ;
17972: LD_ADDR_EXP 45
17976: PUSH
17977: LD_INT 0
17979: PUSH
17980: LD_INT 1
17982: PUSH
17983: LD_INT 8
17985: PPUSH
17986: LD_INT 12
17988: PPUSH
17989: CALL_OW 12
17993: PUSH
17994: LD_INT 8
17996: PPUSH
17997: LD_INT 12
17999: PPUSH
18000: CALL_OW 12
18004: PUSH
18005: EMPTY
18006: LIST
18007: LIST
18008: PUSH
18009: LD_INT 0
18011: PUSH
18012: LD_INT 0
18014: PUSH
18015: LD_INT 0
18017: PUSH
18018: LD_INT 0
18020: PUSH
18021: EMPTY
18022: LIST
18023: LIST
18024: LIST
18025: LIST
18026: PUSH
18027: LD_INT 0
18029: PPUSH
18030: LD_EXP 20
18034: PPUSH
18035: CALL_OW 12
18039: PUSH
18040: LD_INT 0
18042: PPUSH
18043: LD_EXP 20
18047: PPUSH
18048: CALL_OW 12
18052: PUSH
18053: LD_INT 0
18055: PPUSH
18056: LD_EXP 20
18060: PPUSH
18061: CALL_OW 12
18065: PUSH
18066: LD_INT 0
18068: PPUSH
18069: LD_EXP 20
18073: PPUSH
18074: CALL_OW 12
18078: PUSH
18079: EMPTY
18080: LIST
18081: LIST
18082: LIST
18083: LIST
18084: PUSH
18085: LD_INT 0
18087: PUSH
18088: EMPTY
18089: LIST
18090: LIST
18091: LIST
18092: LIST
18093: LIST
18094: LIST
18095: ST_TO_ADDR
// human := PrepareCharacters ( side , [ Rand ( 0 , 5 ) , Rand ( 0 , 5 ) , Rand ( 0 , 5 ) , Rand ( 0 , 5 ) , Rand ( 0 , 5 ) , Rand ( 0 , 5 ) , Rand ( 0 , 5 ) , Rand ( 0 , 5 ) ] , new_character_reinforcements ) ;
18096: LD_ADDR_VAR 0 6
18100: PUSH
18101: LD_VAR 0 1
18105: PPUSH
18106: LD_INT 0
18108: PPUSH
18109: LD_INT 5
18111: PPUSH
18112: CALL_OW 12
18116: PUSH
18117: LD_INT 0
18119: PPUSH
18120: LD_INT 5
18122: PPUSH
18123: CALL_OW 12
18127: PUSH
18128: LD_INT 0
18130: PPUSH
18131: LD_INT 5
18133: PPUSH
18134: CALL_OW 12
18138: PUSH
18139: LD_INT 0
18141: PPUSH
18142: LD_INT 5
18144: PPUSH
18145: CALL_OW 12
18149: PUSH
18150: LD_INT 0
18152: PPUSH
18153: LD_INT 5
18155: PPUSH
18156: CALL_OW 12
18160: PUSH
18161: LD_INT 0
18163: PPUSH
18164: LD_INT 5
18166: PPUSH
18167: CALL_OW 12
18171: PUSH
18172: LD_INT 0
18174: PPUSH
18175: LD_INT 5
18177: PPUSH
18178: CALL_OW 12
18182: PUSH
18183: LD_INT 0
18185: PPUSH
18186: LD_INT 5
18188: PPUSH
18189: CALL_OW 12
18193: PUSH
18194: EMPTY
18195: LIST
18196: LIST
18197: LIST
18198: LIST
18199: LIST
18200: LIST
18201: LIST
18202: LIST
18203: PPUSH
18204: LD_EXP 45
18208: PPUSH
18209: CALL 6190 0 3
18213: ST_TO_ADDR
// PlaceUnitArea ( human , side_chosen_zone [ side ] , false ) ;
18214: LD_VAR 0 6
18218: PPUSH
18219: LD_EXP 63
18223: PUSH
18224: LD_VAR 0 1
18228: ARRAY
18229: PPUSH
18230: LD_INT 0
18232: PPUSH
18233: CALL_OW 49
// end ;
18237: GO 17969
18239: POP
18240: POP
// for i in side_units_outside [ side ] do
18241: LD_ADDR_VAR 0 7
18245: PUSH
18246: LD_EXP 66
18250: PUSH
18251: LD_VAR 0 1
18255: ARRAY
18256: PUSH
18257: FOR_IN
18258: IFFALSE 18388
// begin bulk := FillUpVehicles ( i , crates , oil , siberite ) ;
18260: LD_ADDR_VAR 0 8
18264: PUSH
18265: LD_VAR 0 7
18269: PPUSH
18270: LD_VAR 0 9
18274: PPUSH
18275: LD_VAR 0 10
18279: PPUSH
18280: LD_VAR 0 11
18284: PPUSH
18285: CALL 10825 0 4
18289: ST_TO_ADDR
// crates := bulk [ 2 ] ;
18290: LD_ADDR_VAR 0 9
18294: PUSH
18295: LD_VAR 0 8
18299: PUSH
18300: LD_INT 2
18302: ARRAY
18303: ST_TO_ADDR
// oil := bulk [ 3 ] ;
18304: LD_ADDR_VAR 0 10
18308: PUSH
18309: LD_VAR 0 8
18313: PUSH
18314: LD_INT 3
18316: ARRAY
18317: ST_TO_ADDR
// siberite := bulk [ 4 ] ;
18318: LD_ADDR_VAR 0 11
18322: PUSH
18323: LD_VAR 0 8
18327: PUSH
18328: LD_INT 4
18330: ARRAY
18331: ST_TO_ADDR
// SetDir ( i , RotateUnit ( GetDir ( i ) , 3 ) ) ;
18332: LD_VAR 0 7
18336: PPUSH
18337: LD_VAR 0 7
18341: PPUSH
18342: CALL_OW 254
18346: PPUSH
18347: LD_INT 3
18349: PPUSH
18350: CALL 11107 0 2
18354: PPUSH
18355: CALL_OW 233
// PlaceUnitArea ( bulk [ 1 ] , side_chosen_zone [ side ] , false ) ;
18359: LD_VAR 0 8
18363: PUSH
18364: LD_INT 1
18366: ARRAY
18367: PPUSH
18368: LD_EXP 63
18372: PUSH
18373: LD_VAR 0 1
18377: ARRAY
18378: PPUSH
18379: LD_INT 0
18381: PPUSH
18382: CALL_OW 49
// end ;
18386: GO 18257
18388: POP
18389: POP
// end ; 2 :
18390: GO 18947
18392: LD_INT 2
18394: DOUBLE
18395: EQUAL
18396: IFTRUE 18400
18398: GO 18712
18400: POP
// begin side_tech_lvl := Replace ( side_tech_lvl , side , side_tech_lvl [ side ] + 1 ) ;
18401: LD_ADDR_EXP 31
18405: PUSH
18406: LD_EXP 31
18410: PPUSH
18411: LD_VAR 0 1
18415: PPUSH
18416: LD_EXP 31
18420: PUSH
18421: LD_VAR 0 1
18425: ARRAY
18426: PUSH
18427: LD_INT 1
18429: PLUS
18430: PPUSH
18431: CALL_OW 1
18435: ST_TO_ADDR
// TechUpgrade ( side_tech_lvl [ side ] , Side_Nations [ side ] , side ) ;
18436: LD_EXP 31
18440: PUSH
18441: LD_VAR 0 1
18445: ARRAY
18446: PPUSH
18447: LD_EXP 3
18451: PUSH
18452: LD_VAR 0 1
18456: ARRAY
18457: PPUSH
18458: LD_VAR 0 1
18462: PPUSH
18463: CALL 7539 0 3
// if side = Your_Side then
18467: LD_VAR 0 1
18471: PUSH
18472: LD_OWVAR 2
18476: EQUAL
18477: IFFALSE 18512
// ToLua ( LUA_UpdateSideInterface( & side & , & side_tech_lvl [ side ] & ); ) ;
18479: LD_STRING LUA_UpdateSideInterface(
18481: PUSH
18482: LD_VAR 0 1
18486: STR
18487: PUSH
18488: LD_STRING ,
18490: STR
18491: PUSH
18492: LD_EXP 31
18496: PUSH
18497: LD_VAR 0 1
18501: ARRAY
18502: STR
18503: PUSH
18504: LD_STRING );
18506: STR
18507: PPUSH
18508: CALL_OW 559
// if IAmSpec then
18512: CALL_OW 531
18516: IFFALSE 18561
// ToLua ( LUA_UpdateSpecInterface( & side & , & side & , & side_tech_lvl [ side ] & ); ) ;
18518: LD_STRING LUA_UpdateSpecInterface(
18520: PUSH
18521: LD_VAR 0 1
18525: STR
18526: PUSH
18527: LD_STRING ,
18529: STR
18530: PUSH
18531: LD_VAR 0 1
18535: STR
18536: PUSH
18537: LD_STRING ,
18539: STR
18540: PUSH
18541: LD_EXP 31
18545: PUSH
18546: LD_VAR 0 1
18550: ARRAY
18551: STR
18552: PUSH
18553: LD_STRING );
18555: STR
18556: PPUSH
18557: CALL_OW 559
// for i in side_units_outside [ side ] do
18561: LD_ADDR_VAR 0 7
18565: PUSH
18566: LD_EXP 66
18570: PUSH
18571: LD_VAR 0 1
18575: ARRAY
18576: PUSH
18577: FOR_IN
18578: IFFALSE 18708
// begin bulk := FillUpVehicles ( i , crates , oil , siberite ) ;
18580: LD_ADDR_VAR 0 8
18584: PUSH
18585: LD_VAR 0 7
18589: PPUSH
18590: LD_VAR 0 9
18594: PPUSH
18595: LD_VAR 0 10
18599: PPUSH
18600: LD_VAR 0 11
18604: PPUSH
18605: CALL 10825 0 4
18609: ST_TO_ADDR
// crates := bulk [ 2 ] ;
18610: LD_ADDR_VAR 0 9
18614: PUSH
18615: LD_VAR 0 8
18619: PUSH
18620: LD_INT 2
18622: ARRAY
18623: ST_TO_ADDR
// oil := bulk [ 3 ] ;
18624: LD_ADDR_VAR 0 10
18628: PUSH
18629: LD_VAR 0 8
18633: PUSH
18634: LD_INT 3
18636: ARRAY
18637: ST_TO_ADDR
// siberite := bulk [ 4 ] ;
18638: LD_ADDR_VAR 0 11
18642: PUSH
18643: LD_VAR 0 8
18647: PUSH
18648: LD_INT 4
18650: ARRAY
18651: ST_TO_ADDR
// SetDir ( i , RotateUnit ( GetDir ( i ) , 3 ) ) ;
18652: LD_VAR 0 7
18656: PPUSH
18657: LD_VAR 0 7
18661: PPUSH
18662: CALL_OW 254
18666: PPUSH
18667: LD_INT 3
18669: PPUSH
18670: CALL 11107 0 2
18674: PPUSH
18675: CALL_OW 233
// PlaceUnitArea ( bulk [ 1 ] , side_chosen_zone [ side ] , false ) ;
18679: LD_VAR 0 8
18683: PUSH
18684: LD_INT 1
18686: ARRAY
18687: PPUSH
18688: LD_EXP 63
18692: PUSH
18693: LD_VAR 0 1
18697: ARRAY
18698: PPUSH
18699: LD_INT 0
18701: PPUSH
18702: CALL_OW 49
// end ;
18706: GO 18577
18708: POP
18709: POP
// end ; 3 :
18710: GO 18947
18712: LD_INT 3
18714: DOUBLE
18715: EQUAL
18716: IFTRUE 18720
18718: GO 18946
18720: POP
// begin team_siberite_stocked := Replace ( team_siberite_stocked , Side_Teams [ side ] , team_siberite_stocked [ Side_Teams [ side ] ] + side_resources_delivered [ side ] [ 3 ] ) ;
18721: LD_ADDR_EXP 60
18725: PUSH
18726: LD_EXP 60
18730: PPUSH
18731: LD_EXP 5
18735: PUSH
18736: LD_VAR 0 1
18740: ARRAY
18741: PPUSH
18742: LD_EXP 60
18746: PUSH
18747: LD_EXP 5
18751: PUSH
18752: LD_VAR 0 1
18756: ARRAY
18757: ARRAY
18758: PUSH
18759: LD_EXP 59
18763: PUSH
18764: LD_VAR 0 1
18768: ARRAY
18769: PUSH
18770: LD_INT 3
18772: ARRAY
18773: PLUS
18774: PPUSH
18775: CALL_OW 1
18779: ST_TO_ADDR
// RaiseSailEvent ( 67 ) ;
18780: LD_INT 67
18782: PPUSH
18783: CALL_OW 427
// siberite := 0 ;
18787: LD_ADDR_VAR 0 11
18791: PUSH
18792: LD_INT 0
18794: ST_TO_ADDR
// for i in side_units_outside [ side ] do
18795: LD_ADDR_VAR 0 7
18799: PUSH
18800: LD_EXP 66
18804: PUSH
18805: LD_VAR 0 1
18809: ARRAY
18810: PUSH
18811: FOR_IN
18812: IFFALSE 18942
// begin bulk := FillUpVehicles ( i , crates , oil , siberite ) ;
18814: LD_ADDR_VAR 0 8
18818: PUSH
18819: LD_VAR 0 7
18823: PPUSH
18824: LD_VAR 0 9
18828: PPUSH
18829: LD_VAR 0 10
18833: PPUSH
18834: LD_VAR 0 11
18838: PPUSH
18839: CALL 10825 0 4
18843: ST_TO_ADDR
// crates := bulk [ 2 ] ;
18844: LD_ADDR_VAR 0 9
18848: PUSH
18849: LD_VAR 0 8
18853: PUSH
18854: LD_INT 2
18856: ARRAY
18857: ST_TO_ADDR
// oil := bulk [ 3 ] ;
18858: LD_ADDR_VAR 0 10
18862: PUSH
18863: LD_VAR 0 8
18867: PUSH
18868: LD_INT 3
18870: ARRAY
18871: ST_TO_ADDR
// siberite := bulk [ 4 ] ;
18872: LD_ADDR_VAR 0 11
18876: PUSH
18877: LD_VAR 0 8
18881: PUSH
18882: LD_INT 4
18884: ARRAY
18885: ST_TO_ADDR
// SetDir ( i , RotateUnit ( GetDir ( i ) , 3 ) ) ;
18886: LD_VAR 0 7
18890: PPUSH
18891: LD_VAR 0 7
18895: PPUSH
18896: CALL_OW 254
18900: PPUSH
18901: LD_INT 3
18903: PPUSH
18904: CALL 11107 0 2
18908: PPUSH
18909: CALL_OW 233
// PlaceUnitArea ( bulk [ 1 ] , side_chosen_zone [ side ] , false ) ;
18913: LD_VAR 0 8
18917: PUSH
18918: LD_INT 1
18920: ARRAY
18921: PPUSH
18922: LD_EXP 63
18926: PUSH
18927: LD_VAR 0 1
18931: ARRAY
18932: PPUSH
18933: LD_INT 0
18935: PPUSH
18936: CALL_OW 49
// end ;
18940: GO 18811
18942: POP
18943: POP
// end ; end ;
18944: GO 18947
18946: POP
// side_transfer_pending := Replace ( side_transfer_pending , side , 0 ) ;
18947: LD_ADDR_EXP 69
18951: PUSH
18952: LD_EXP 69
18956: PPUSH
18957: LD_VAR 0 1
18961: PPUSH
18962: LD_INT 0
18964: PPUSH
18965: CALL_OW 1
18969: ST_TO_ADDR
// ToLua ( LUA_BackToMainSideInterface(); ) ;
18970: LD_STRING LUA_BackToMainSideInterface();
18972: PPUSH
18973: CALL_OW 559
// end ; end_of_file
18977: LD_VAR 0 5
18981: RET
// export ExtraStrings ; export WaitServerStrings ; export function ShowTimer ; var AllStrings ; begin
18982: LD_INT 0
18984: PPUSH
18985: PPUSH
// AllStrings := [ #Multi1x1-Time , tick ] ;
18986: LD_ADDR_VAR 0 2
18990: PUSH
18991: LD_STRING #Multi1x1-Time
18993: PUSH
18994: LD_OWVAR 1
18998: PUSH
18999: EMPTY
19000: LIST
19001: LIST
19002: ST_TO_ADDR
// if WaitServerStrings then
19003: LD_EXP 71
19007: IFFALSE 19025
// AllStrings = AllStrings ^ WaitServerStrings ;
19009: LD_ADDR_VAR 0 2
19013: PUSH
19014: LD_VAR 0 2
19018: PUSH
19019: LD_EXP 71
19023: ADD
19024: ST_TO_ADDR
// if ( ExtraStrings ) then
19025: LD_EXP 70
19029: IFFALSE 19051
// AllStrings := AllStrings ^  ^ ExtraStrings ;
19031: LD_ADDR_VAR 0 2
19035: PUSH
19036: LD_VAR 0 2
19040: PUSH
19041: LD_STRING 
19043: ADD
19044: PUSH
19045: LD_EXP 70
19049: ADD
19050: ST_TO_ADDR
// Display_Strings := AllStrings ;
19051: LD_ADDR_OWVAR 47
19055: PUSH
19056: LD_VAR 0 2
19060: ST_TO_ADDR
// end ; end_of_file
19061: LD_VAR 0 1
19065: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
19066: LD_INT 0
19068: PPUSH
19069: PPUSH
19070: PPUSH
19071: PPUSH
19072: PPUSH
19073: PPUSH
19074: PPUSH
19075: PPUSH
19076: PPUSH
// for i := 1 to 8 do
19077: LD_ADDR_VAR 0 2
19081: PUSH
19082: DOUBLE
19083: LD_INT 1
19085: DEC
19086: ST_TO_ADDR
19087: LD_INT 8
19089: PUSH
19090: FOR_TO
19091: IFFALSE 19475
// begin if Side_Positions [ i ] then
19093: LD_EXP 2
19097: PUSH
19098: LD_VAR 0 2
19102: ARRAY
19103: IFFALSE 19473
// begin people := FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) + 0 ;
19105: LD_ADDR_VAR 0 7
19109: PUSH
19110: LD_INT 22
19112: PUSH
19113: LD_VAR 0 2
19117: PUSH
19118: EMPTY
19119: LIST
19120: LIST
19121: PUSH
19122: LD_INT 21
19124: PUSH
19125: LD_INT 1
19127: PUSH
19128: EMPTY
19129: LIST
19130: LIST
19131: PUSH
19132: EMPTY
19133: LIST
19134: LIST
19135: PPUSH
19136: CALL_OW 69
19140: PUSH
19141: LD_INT 0
19143: PLUS
19144: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19145: LD_ADDR_VAR 0 9
19149: PUSH
19150: LD_INT 22
19152: PUSH
19153: LD_VAR 0 2
19157: PUSH
19158: EMPTY
19159: LIST
19160: LIST
19161: PUSH
19162: LD_INT 2
19164: PUSH
19165: LD_INT 30
19167: PUSH
19168: LD_INT 0
19170: PUSH
19171: EMPTY
19172: LIST
19173: LIST
19174: PUSH
19175: LD_INT 30
19177: PUSH
19178: LD_INT 1
19180: PUSH
19181: EMPTY
19182: LIST
19183: LIST
19184: PUSH
19185: EMPTY
19186: LIST
19187: LIST
19188: LIST
19189: PUSH
19190: EMPTY
19191: LIST
19192: LIST
19193: PPUSH
19194: CALL_OW 69
19198: ST_TO_ADDR
// crates := 0 ;
19199: LD_ADDR_VAR 0 4
19203: PUSH
19204: LD_INT 0
19206: ST_TO_ADDR
// oil := 0 ;
19207: LD_ADDR_VAR 0 5
19211: PUSH
19212: LD_INT 0
19214: ST_TO_ADDR
// sib := 0 ;
19215: LD_ADDR_VAR 0 6
19219: PUSH
19220: LD_INT 0
19222: ST_TO_ADDR
// if bases then
19223: LD_VAR 0 9
19227: IFFALSE 19333
// begin for j in bases do
19229: LD_ADDR_VAR 0 3
19233: PUSH
19234: LD_VAR 0 9
19238: PUSH
19239: FOR_IN
19240: IFFALSE 19331
// begin base := GetBase ( j ) ;
19242: LD_ADDR_VAR 0 8
19246: PUSH
19247: LD_VAR 0 3
19251: PPUSH
19252: CALL_OW 274
19256: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
19257: LD_ADDR_VAR 0 4
19261: PUSH
19262: LD_VAR 0 4
19266: PUSH
19267: LD_VAR 0 8
19271: PPUSH
19272: LD_INT 1
19274: PPUSH
19275: CALL_OW 275
19279: PLUS
19280: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
19281: LD_ADDR_VAR 0 5
19285: PUSH
19286: LD_VAR 0 5
19290: PUSH
19291: LD_VAR 0 8
19295: PPUSH
19296: LD_INT 2
19298: PPUSH
19299: CALL_OW 275
19303: PLUS
19304: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
19305: LD_ADDR_VAR 0 6
19309: PUSH
19310: LD_VAR 0 6
19314: PUSH
19315: LD_VAR 0 8
19319: PPUSH
19320: LD_INT 3
19322: PPUSH
19323: CALL_OW 275
19327: PLUS
19328: ST_TO_ADDR
// end ;
19329: GO 19239
19331: POP
19332: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
19333: LD_STRING setSpecText(
19335: PUSH
19336: LD_VAR 0 2
19340: STR
19341: PUSH
19342: LD_STRING ,
19344: STR
19345: PUSH
19346: LD_INT 2
19348: STR
19349: PUSH
19350: LD_STRING ,
19352: STR
19353: PUSH
19354: LD_VAR 0 4
19358: STR
19359: PUSH
19360: LD_STRING )
19362: STR
19363: PPUSH
19364: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
19368: LD_STRING setSpecText(
19370: PUSH
19371: LD_VAR 0 2
19375: STR
19376: PUSH
19377: LD_STRING ,
19379: STR
19380: PUSH
19381: LD_INT 3
19383: STR
19384: PUSH
19385: LD_STRING ,
19387: STR
19388: PUSH
19389: LD_VAR 0 5
19393: STR
19394: PUSH
19395: LD_STRING )
19397: STR
19398: PPUSH
19399: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
19403: LD_STRING setSpecText(
19405: PUSH
19406: LD_VAR 0 2
19410: STR
19411: PUSH
19412: LD_STRING ,
19414: STR
19415: PUSH
19416: LD_INT 4
19418: STR
19419: PUSH
19420: LD_STRING ,
19422: STR
19423: PUSH
19424: LD_VAR 0 6
19428: STR
19429: PUSH
19430: LD_STRING )
19432: STR
19433: PPUSH
19434: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
19438: LD_STRING setSpecText(
19440: PUSH
19441: LD_VAR 0 2
19445: STR
19446: PUSH
19447: LD_STRING ,
19449: STR
19450: PUSH
19451: LD_INT 5
19453: STR
19454: PUSH
19455: LD_STRING ,
19457: STR
19458: PUSH
19459: LD_VAR 0 7
19463: STR
19464: PUSH
19465: LD_STRING )
19467: STR
19468: PPUSH
19469: CALL_OW 559
// end ; end ;
19473: GO 19090
19475: POP
19476: POP
// end ;
19477: LD_VAR 0 1
19481: RET
// every 0 0$1 do
19482: GO 19484
19484: DISABLE
// begin ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
19485: LD_STRING setSpecLogoNumber(
19487: PUSH
19488: LD_INT 2
19490: STR
19491: PUSH
19492: LD_STRING ,
19494: STR
19495: PUSH
19496: LD_INT 1
19498: STR
19499: PUSH
19500: LD_STRING )
19502: STR
19503: PPUSH
19504: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
19508: LD_STRING setSpecLogoNumber(
19510: PUSH
19511: LD_INT 3
19513: STR
19514: PUSH
19515: LD_STRING ,
19517: STR
19518: PUSH
19519: LD_INT 2
19521: STR
19522: PUSH
19523: LD_STRING )
19525: STR
19526: PPUSH
19527: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
19531: LD_STRING setSpecLogoNumber(
19533: PUSH
19534: LD_INT 4
19536: STR
19537: PUSH
19538: LD_STRING ,
19540: STR
19541: PUSH
19542: LD_INT 3
19544: STR
19545: PUSH
19546: LD_STRING )
19548: STR
19549: PPUSH
19550: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
19554: LD_STRING setSpecLogoNumber(
19556: PUSH
19557: LD_INT 5
19559: STR
19560: PUSH
19561: LD_STRING ,
19563: STR
19564: PUSH
19565: LD_INT 4
19567: STR
19568: PUSH
19569: LD_STRING )
19571: STR
19572: PPUSH
19573: CALL_OW 559
// end ;
19577: END
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
19578: LD_INT 2
19580: PUSH
19581: LD_INT 30
19583: PUSH
19584: LD_INT 0
19586: PUSH
19587: EMPTY
19588: LIST
19589: LIST
19590: PUSH
19591: LD_INT 30
19593: PUSH
19594: LD_INT 1
19596: PUSH
19597: EMPTY
19598: LIST
19599: LIST
19600: PUSH
19601: EMPTY
19602: LIST
19603: LIST
19604: LIST
19605: PPUSH
19606: CALL_OW 69
19610: IFFALSE 19620
19612: GO 19614
19614: DISABLE
// begin enable ;
19615: ENABLE
// UpdateSpectatorBar ;
19616: CALL 19066 0 0
// end ; end_of_file
19620: END
// export function SA_OnSiberiteRocketExploded ( siberite_rocket_vehicle , target_x , target_y , requestSide ) ; begin
19621: LD_INT 0
19623: PPUSH
// if GetSide ( siberite_rocket_vehicle ) = requestSide then
19624: LD_VAR 0 1
19628: PPUSH
19629: CALL_OW 255
19633: PUSH
19634: LD_VAR 0 4
19638: EQUAL
19639: IFFALSE 19658
// begin SetAchievement ( ACH_RAD ) ;
19641: LD_STRING ACH_RAD
19643: PPUSH
19644: CALL_OW 543
// SetAchievementEx ( ACH_NL , 1 ) ;
19648: LD_STRING ACH_NL
19650: PPUSH
19651: LD_INT 1
19653: PPUSH
19654: CALL_OW 564
// end end ;
19658: LD_VAR 0 5
19662: RET
// export function SA_Win ( side ) ; begin
19663: LD_INT 0
19665: PPUSH
// case side of 1 :
19666: LD_VAR 0 1
19670: PUSH
19671: LD_INT 1
19673: DOUBLE
19674: EQUAL
19675: IFTRUE 19679
19677: GO 19692
19679: POP
// SetAchievementEx ( ACH_AH , 1 ) ; 2 :
19680: LD_STRING ACH_AH
19682: PPUSH
19683: LD_INT 1
19685: PPUSH
19686: CALL_OW 564
19690: GO 19855
19692: LD_INT 2
19694: DOUBLE
19695: EQUAL
19696: IFTRUE 19700
19698: GO 19713
19700: POP
// SetAchievementEx ( ACH_E , 1 ) ; 3 :
19701: LD_STRING ACH_E
19703: PPUSH
19704: LD_INT 1
19706: PPUSH
19707: CALL_OW 564
19711: GO 19855
19713: LD_INT 3
19715: DOUBLE
19716: EQUAL
19717: IFTRUE 19721
19719: GO 19734
19721: POP
// SetAchievementEx ( ACH_OOL , 1 ) ; [ 1 , 2 ] :
19722: LD_STRING ACH_OOL
19724: PPUSH
19725: LD_INT 1
19727: PPUSH
19728: CALL_OW 564
19732: GO 19855
19734: LD_INT 1
19736: PUSH
19737: LD_INT 2
19739: PUSH
19740: EMPTY
19741: LIST
19742: LIST
19743: DOUBLE
19744: EQUAL
19745: IFTRUE 19749
19747: GO 19774
19749: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
19750: LD_STRING ACH_AH
19752: PPUSH
19753: LD_REAL  5.00000000000000E-0001
19756: PPUSH
19757: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
19761: LD_STRING ACH_E
19763: PPUSH
19764: LD_REAL  5.00000000000000E-0001
19767: PPUSH
19768: CALL_OW 564
// end ; [ 2 , 3 ] :
19772: GO 19855
19774: LD_INT 2
19776: PUSH
19777: LD_INT 3
19779: PUSH
19780: EMPTY
19781: LIST
19782: LIST
19783: DOUBLE
19784: EQUAL
19785: IFTRUE 19789
19787: GO 19814
19789: POP
// begin SetAchievementEx ( ACH_OOL , 0.5 ) ;
19790: LD_STRING ACH_OOL
19792: PPUSH
19793: LD_REAL  5.00000000000000E-0001
19796: PPUSH
19797: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
19801: LD_STRING ACH_E
19803: PPUSH
19804: LD_REAL  5.00000000000000E-0001
19807: PPUSH
19808: CALL_OW 564
// end ; [ 3 , 1 ] :
19812: GO 19855
19814: LD_INT 3
19816: PUSH
19817: LD_INT 1
19819: PUSH
19820: EMPTY
19821: LIST
19822: LIST
19823: DOUBLE
19824: EQUAL
19825: IFTRUE 19829
19827: GO 19854
19829: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
19830: LD_STRING ACH_AH
19832: PPUSH
19833: LD_REAL  5.00000000000000E-0001
19836: PPUSH
19837: CALL_OW 564
// SetAchievementEx ( ACH_OOL , 0.5 ) ;
19841: LD_STRING ACH_OOL
19843: PPUSH
19844: LD_REAL  5.00000000000000E-0001
19847: PPUSH
19848: CALL_OW 564
// end ; end ;
19852: GO 19855
19854: POP
// end ;
19855: LD_VAR 0 2
19859: RET
