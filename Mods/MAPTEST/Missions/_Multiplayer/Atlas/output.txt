// starting begin mp_selectmsg := true ;
   0: LD_ADDR_OWVAR 13
   4: PUSH
   5: LD_INT 1
   7: ST_TO_ADDR
// INIT_LoadMapParams ;
   8: CALL 4292 0 0
// INIT_LoadGameParams ;
  12: CALL 451 0 0
// INIT_ApplyGameParams ;
  16: CALL 1010 0 0
// INIT_GenerateDeposits ;
  20: CALL 1483 0 0
// INIT_SetUpAllies ;
  24: CALL 2049 0 0
// INIT_SetUpTechs ;
  28: CALL 2251 0 0
// INIT_PrepareSquad ;
  32: CALL 2850 0 0
// INIT_SpawnStartingUnits ;
  36: CALL 3462 0 0
// INIT_CameraFocus ;
  40: CALL 4230 0 0
// INIT_ActivateLUAInterface ;
  44: CALL 2339 0 0
// if Your_Side >= 1 and Your_Side <= 8 then
  48: LD_OWVAR 2
  52: PUSH
  53: LD_INT 1
  55: GREATEREQUAL
  56: PUSH
  57: LD_OWVAR 2
  61: PUSH
  62: LD_INT 8
  64: LESSEQUAL
  65: AND
  66: IFFALSE 84
// music_nat := Side_Nations [ Your_Side ] ;
  68: LD_ADDR_OWVAR 71
  72: PUSH
  73: LD_EXP 3
  77: PUSH
  78: LD_OWVAR 2
  82: ARRAY
  83: ST_TO_ADDR
// end ;
  84: END
// every 0 0$1 do
  85: GO 87
  87: DISABLE
// begin ShowTimer ;
  88: CALL 19606 0 0
// enable ;
  92: ENABLE
// end ;
  93: END
// every 0 0$3 trigger Multiplayer do
  94: LD_OWVAR 4
  98: IFFALSE 108
 100: GO 102
 102: DISABLE
// begin CheckPlayerPresence ;
 103: CALL 7134 0 0
// enable ;
 107: ENABLE
// end ;
 108: END
// every 0 0$1 trigger tick >= CLOCK_fluctuation and spawn_fluctuation <> 0 do
 109: LD_OWVAR 1
 113: PUSH
 114: LD_EXP 52
 118: GREATEREQUAL
 119: PUSH
 120: LD_EXP 24
 124: PUSH
 125: LD_INT 0
 127: NONEQUAL
 128: AND
 129: IFFALSE 155
 131: GO 133
 133: DISABLE
// begin enable ;
 134: ENABLE
// CLOCK_fluctuation := CLOCK_fluctuation + spawn_fluctuation ;
 135: LD_ADDR_EXP 52
 139: PUSH
 140: LD_EXP 52
 144: PUSH
 145: LD_EXP 24
 149: PLUS
 150: ST_TO_ADDR
// CYCLIC_Fluctuation ;
 151: CALL 17327 0 0
// end ;
 155: END
// every 0 0$1 trigger tick >= CLOCK_crate_spawn do
 156: LD_OWVAR 1
 160: PUSH
 161: LD_EXP 50
 165: GREATEREQUAL
 166: IFFALSE 198
 168: GO 170
 170: DISABLE
// begin enable ;
 171: ENABLE
// CLOCK_crate_spawn := CLOCK_crate_spawn + crate_spawn_rate + fluctuation_modifier_crates ;
 172: LD_ADDR_EXP 50
 176: PUSH
 177: LD_EXP 50
 181: PUSH
 182: LD_EXP 22
 186: PLUS
 187: PUSH
 188: LD_EXP 39
 192: PLUS
 193: ST_TO_ADDR
// CYCLIC_CrateSpawn ;
 194: CALL 15844 0 0
// end ;
 198: END
// every 0 0$1 trigger tick >= CLOCK_human_spawn and people_spawn_rate <> 0 do
 199: LD_OWVAR 1
 203: PUSH
 204: LD_EXP 51
 208: GREATEREQUAL
 209: PUSH
 210: LD_EXP 23
 214: PUSH
 215: LD_INT 0
 217: NONEQUAL
 218: AND
 219: IFFALSE 251
 221: GO 223
 223: DISABLE
// begin enable ;
 224: ENABLE
// CLOCK_human_spawn := CLOCK_human_spawn + people_spawn_rate + fluctuation_modifier_humans ;
 225: LD_ADDR_EXP 51
 229: PUSH
 230: LD_EXP 51
 234: PUSH
 235: LD_EXP 23
 239: PLUS
 240: PUSH
 241: LD_EXP 40
 245: PLUS
 246: ST_TO_ADDR
// CYCLIC_HumanSpawn ;
 247: CALL 16024 0 0
// end ;
 251: END
// every 0 0$1 trigger 1 in side_zone_locked do
 252: LD_INT 1
 254: PUSH
 255: LD_EXP 64
 259: IN
 260: IFFALSE 270
 262: GO 264
 264: DISABLE
// begin CYCLIC_CheckTransportsInZones ;
 265: CALL 17500 0 0
// enable ;
 269: ENABLE
// end ;
 270: END
// every 0 0$1 trigger 1 in side_transfer_pending do var i , remaining ;
 271: LD_INT 1
 273: PUSH
 274: LD_EXP 69
 278: IN
 279: IFFALSE 448
 281: GO 283
 283: DISABLE
 284: LD_INT 0
 286: PPUSH
 287: PPUSH
// begin for i = 1 to 8 do
 288: LD_ADDR_VAR 0 1
 292: PUSH
 293: DOUBLE
 294: LD_INT 1
 296: DEC
 297: ST_TO_ADDR
 298: LD_INT 8
 300: PUSH
 301: FOR_TO
 302: IFFALSE 445
// begin if side_transfer_pending [ i ] = 1 then
 304: LD_EXP 69
 308: PUSH
 309: LD_VAR 0 1
 313: ARRAY
 314: PUSH
 315: LD_INT 1
 317: EQUAL
 318: IFFALSE 443
// begin remaining := side_transfer_clocks [ i ] - tick ;
 320: LD_ADDR_VAR 0 2
 324: PUSH
 325: LD_EXP 65
 329: PUSH
 330: LD_VAR 0 1
 334: ARRAY
 335: PUSH
 336: LD_OWVAR 1
 340: MINUS
 341: ST_TO_ADDR
// if tick >= side_transfer_clocks [ i ] then
 342: LD_OWVAR 1
 346: PUSH
 347: LD_EXP 65
 351: PUSH
 352: LD_VAR 0 1
 356: ARRAY
 357: GREATEREQUAL
 358: IFFALSE 414
// CYCLIC_FinalizeTransfer ( i , side_resources_remaining [ i ] [ 1 ] , side_resources_remaining [ i ] [ 2 ] , side_resources_remaining [ i ] [ 3 ] ) ;
 360: LD_VAR 0 1
 364: PPUSH
 365: LD_EXP 68
 369: PUSH
 370: LD_VAR 0 1
 374: ARRAY
 375: PUSH
 376: LD_INT 1
 378: ARRAY
 379: PPUSH
 380: LD_EXP 68
 384: PUSH
 385: LD_VAR 0 1
 389: ARRAY
 390: PUSH
 391: LD_INT 2
 393: ARRAY
 394: PPUSH
 395: LD_EXP 68
 399: PUSH
 400: LD_VAR 0 1
 404: ARRAY
 405: PUSH
 406: LD_INT 3
 408: ARRAY
 409: PPUSH
 410: CALL 18323 0 4
// if i = Your_Side then
 414: LD_VAR 0 1
 418: PUSH
 419: LD_OWVAR 2
 423: EQUAL
 424: IFFALSE 443
// ToLua ( LUA_UpdateClock( & remaining & ); ) ;
 426: LD_STRING LUA_UpdateClock(
 428: PUSH
 429: LD_VAR 0 2
 433: STR
 434: PUSH
 435: LD_STRING );
 437: STR
 438: PPUSH
 439: CALL_OW 559
// end ; end ;
 443: GO 301
 445: POP
 446: POP
// enable ;
 447: ENABLE
// end ; end_of_file
 448: PPOPN 2
 450: END
// export function INIT_LoadGameParams ; begin
 451: LD_INT 0
 453: PPUSH
// if Multiplayer then
 454: LD_OWVAR 4
 458: IFFALSE 688
// begin Game_Type := mp_game_type ;
 460: LD_ADDR_EXP 1
 464: PUSH
 465: LD_OWVAR 6
 469: ST_TO_ADDR
// Your_Side := mp_player_side ;
 470: LD_ADDR_OWVAR 2
 474: PUSH
 475: LD_OWVAR 7
 479: ST_TO_ADDR
// Side_Positions := mp_sides_positions ;
 480: LD_ADDR_EXP 2
 484: PUSH
 485: LD_OWVAR 17
 489: ST_TO_ADDR
// Side_Nations := mp_sides_nations ;
 490: LD_ADDR_EXP 3
 494: PUSH
 495: LD_OWVAR 16
 499: ST_TO_ADDR
// Side_Comps := mp_sides_comps ;
 500: LD_ADDR_EXP 4
 504: PUSH
 505: CALL 6450 0 0
 509: ST_TO_ADDR
// Side_Teams := mp_sides_teams ;
 510: LD_ADDR_EXP 5
 514: PUSH
 515: LD_OWVAR 15
 519: ST_TO_ADDR
// Teams := mp_teams ;
 520: LD_ADDR_EXP 6
 524: PUSH
 525: LD_OWVAR 12
 529: ST_TO_ADDR
// Choice_people_num := GetMultiplayerSetting ( 0 ) ;
 530: LD_ADDR_EXP 7
 534: PUSH
 535: LD_INT 0
 537: PPUSH
 538: CALL_OW 426
 542: ST_TO_ADDR
// Choice_experience := GetMultiplayerSetting ( 1 ) ;
 543: LD_ADDR_EXP 8
 547: PUSH
 548: LD_INT 1
 550: PPUSH
 551: CALL_OW 426
 555: ST_TO_ADDR
// Choice_starting_resources := GetMultiplayerSetting ( 2 ) ;
 556: LD_ADDR_EXP 9
 560: PUSH
 561: LD_INT 2
 563: PPUSH
 564: CALL_OW 426
 568: ST_TO_ADDR
// Choice_crate_spawn_rate := GetMultiplayerSetting ( 3 ) ;
 569: LD_ADDR_EXP 10
 573: PUSH
 574: LD_INT 3
 576: PPUSH
 577: CALL_OW 426
 581: ST_TO_ADDR
// Choice_people_spawn_rate := GetMultiplayerSetting ( 4 ) ;
 582: LD_ADDR_EXP 11
 586: PUSH
 587: LD_INT 4
 589: PPUSH
 590: CALL_OW 426
 594: ST_TO_ADDR
// Choice_spawn_fluctuation := GetMultiplayerSetting ( 5 ) ;
 595: LD_ADDR_EXP 12
 599: PUSH
 600: LD_INT 5
 602: PPUSH
 603: CALL_OW 426
 607: ST_TO_ADDR
// Choice_oil_abundance := GetMultiplayerSetting ( 6 ) ;
 608: LD_ADDR_EXP 13
 612: PUSH
 613: LD_INT 6
 615: PPUSH
 616: CALL_OW 426
 620: ST_TO_ADDR
// Choice_sib_abundance := GetMultiplayerSetting ( 7 ) ;
 621: LD_ADDR_EXP 14
 625: PUSH
 626: LD_INT 7
 628: PPUSH
 629: CALL_OW 426
 633: ST_TO_ADDR
// Choice_victory_cond := GetMultiplayerSetting ( 8 ) ;
 634: LD_ADDR_EXP 15
 638: PUSH
 639: LD_INT 8
 641: PPUSH
 642: CALL_OW 426
 646: ST_TO_ADDR
// Choice_reinforce_cost := GetMultiplayerSetting ( 9 ) ;
 647: LD_ADDR_EXP 16
 651: PUSH
 652: LD_INT 9
 654: PPUSH
 655: CALL_OW 426
 659: ST_TO_ADDR
// Choice_black_FoW := GetMultiplayerSetting ( 10 ) ;
 660: LD_ADDR_EXP 17
 664: PUSH
 665: LD_INT 10
 667: PPUSH
 668: CALL_OW 426
 672: ST_TO_ADDR
// Choice_starting_tech_lvl := GetMultiplayerSetting ( 11 ) ;
 673: LD_ADDR_EXP 18
 677: PUSH
 678: LD_INT 11
 680: PPUSH
 681: CALL_OW 426
 685: ST_TO_ADDR
// end else
 686: GO 1005
// begin RandomizeAll ;
 688: CALL_OW 11
// Game_Type := 1 ;
 692: LD_ADDR_EXP 1
 696: PUSH
 697: LD_INT 1
 699: ST_TO_ADDR
// Your_Side := 9 ;
 700: LD_ADDR_OWVAR 2
 704: PUSH
 705: LD_INT 9
 707: ST_TO_ADDR
// Side_Positions := [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] ;
 708: LD_ADDR_EXP 2
 712: PUSH
 713: LD_INT 1
 715: PUSH
 716: LD_INT 2
 718: PUSH
 719: LD_INT 3
 721: PUSH
 722: LD_INT 4
 724: PUSH
 725: LD_INT 5
 727: PUSH
 728: LD_INT 6
 730: PUSH
 731: LD_INT 7
 733: PUSH
 734: LD_INT 8
 736: PUSH
 737: EMPTY
 738: LIST
 739: LIST
 740: LIST
 741: LIST
 742: LIST
 743: LIST
 744: LIST
 745: LIST
 746: ST_TO_ADDR
// Side_Nations := [ 1 , 2 , 3 , 1 , 2 , 3 , 1 , 2 ] ;
 747: LD_ADDR_EXP 3
 751: PUSH
 752: LD_INT 1
 754: PUSH
 755: LD_INT 2
 757: PUSH
 758: LD_INT 3
 760: PUSH
 761: LD_INT 1
 763: PUSH
 764: LD_INT 2
 766: PUSH
 767: LD_INT 3
 769: PUSH
 770: LD_INT 1
 772: PUSH
 773: LD_INT 2
 775: PUSH
 776: EMPTY
 777: LIST
 778: LIST
 779: LIST
 780: LIST
 781: LIST
 782: LIST
 783: LIST
 784: LIST
 785: ST_TO_ADDR
// Side_Comps := [ 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 ] ;
 786: LD_ADDR_EXP 4
 790: PUSH
 791: LD_INT 1
 793: PUSH
 794: LD_INT 1
 796: PUSH
 797: LD_INT 1
 799: PUSH
 800: LD_INT 1
 802: PUSH
 803: LD_INT 1
 805: PUSH
 806: LD_INT 1
 808: PUSH
 809: LD_INT 1
 811: PUSH
 812: LD_INT 1
 814: PUSH
 815: EMPTY
 816: LIST
 817: LIST
 818: LIST
 819: LIST
 820: LIST
 821: LIST
 822: LIST
 823: LIST
 824: ST_TO_ADDR
// Side_Teams := [ 1 , 1 , 1 , 1 , 2 , 2 , 2 , 2 ] ;
 825: LD_ADDR_EXP 5
 829: PUSH
 830: LD_INT 1
 832: PUSH
 833: LD_INT 1
 835: PUSH
 836: LD_INT 1
 838: PUSH
 839: LD_INT 1
 841: PUSH
 842: LD_INT 2
 844: PUSH
 845: LD_INT 2
 847: PUSH
 848: LD_INT 2
 850: PUSH
 851: LD_INT 2
 853: PUSH
 854: EMPTY
 855: LIST
 856: LIST
 857: LIST
 858: LIST
 859: LIST
 860: LIST
 861: LIST
 862: LIST
 863: ST_TO_ADDR
// Teams := [ [ 1 , 2 , 3 , 4 ] , [ 5 , 6 , 7 , 8 ] ] ;
 864: LD_ADDR_EXP 6
 868: PUSH
 869: LD_INT 1
 871: PUSH
 872: LD_INT 2
 874: PUSH
 875: LD_INT 3
 877: PUSH
 878: LD_INT 4
 880: PUSH
 881: EMPTY
 882: LIST
 883: LIST
 884: LIST
 885: LIST
 886: PUSH
 887: LD_INT 5
 889: PUSH
 890: LD_INT 6
 892: PUSH
 893: LD_INT 7
 895: PUSH
 896: LD_INT 8
 898: PUSH
 899: EMPTY
 900: LIST
 901: LIST
 902: LIST
 903: LIST
 904: PUSH
 905: EMPTY
 906: LIST
 907: LIST
 908: ST_TO_ADDR
// Choice_people_num := 2 ;
 909: LD_ADDR_EXP 7
 913: PUSH
 914: LD_INT 2
 916: ST_TO_ADDR
// Choice_experience := 3 ;
 917: LD_ADDR_EXP 8
 921: PUSH
 922: LD_INT 3
 924: ST_TO_ADDR
// Choice_starting_resources := 3 ;
 925: LD_ADDR_EXP 9
 929: PUSH
 930: LD_INT 3
 932: ST_TO_ADDR
// Choice_crate_spawn_rate := 3 ;
 933: LD_ADDR_EXP 10
 937: PUSH
 938: LD_INT 3
 940: ST_TO_ADDR
// Choice_people_spawn_rate := 3 ;
 941: LD_ADDR_EXP 11
 945: PUSH
 946: LD_INT 3
 948: ST_TO_ADDR
// Choice_spawn_fluctuation := 0 ;
 949: LD_ADDR_EXP 12
 953: PUSH
 954: LD_INT 0
 956: ST_TO_ADDR
// Choice_oil_abundance := 0 ;
 957: LD_ADDR_EXP 13
 961: PUSH
 962: LD_INT 0
 964: ST_TO_ADDR
// Choice_sib_abundance := 0 ;
 965: LD_ADDR_EXP 14
 969: PUSH
 970: LD_INT 0
 972: ST_TO_ADDR
// Choice_victory_cond := 0 ;
 973: LD_ADDR_EXP 15
 977: PUSH
 978: LD_INT 0
 980: ST_TO_ADDR
// Choice_reinforce_cost := 1 ;
 981: LD_ADDR_EXP 16
 985: PUSH
 986: LD_INT 1
 988: ST_TO_ADDR
// Choice_black_FoW := 0 ;
 989: LD_ADDR_EXP 17
 993: PUSH
 994: LD_INT 0
 996: ST_TO_ADDR
// Choice_starting_tech_lvl := 0 ;
 997: LD_ADDR_EXP 18
1001: PUSH
1002: LD_INT 0
1004: ST_TO_ADDR
// end ; end ;
1005: LD_VAR 0 1
1009: RET
// export function INIT_ApplyGameParams ; var i ; begin
1010: LD_INT 0
1012: PPUSH
1013: PPUSH
// people_num := people_num [ Choice_people_num + 1 ] ;
1014: LD_ADDR_EXP 19
1018: PUSH
1019: LD_EXP 19
1023: PUSH
1024: LD_EXP 7
1028: PUSH
1029: LD_INT 1
1031: PLUS
1032: ARRAY
1033: ST_TO_ADDR
// experience := experience [ Choice_experience + 1 ] ;
1034: LD_ADDR_EXP 20
1038: PUSH
1039: LD_EXP 20
1043: PUSH
1044: LD_EXP 8
1048: PUSH
1049: LD_INT 1
1051: PLUS
1052: ARRAY
1053: ST_TO_ADDR
// starting_resources := starting_resources [ Choice_starting_resources + 1 ] ;
1054: LD_ADDR_EXP 21
1058: PUSH
1059: LD_EXP 21
1063: PUSH
1064: LD_EXP 9
1068: PUSH
1069: LD_INT 1
1071: PLUS
1072: ARRAY
1073: ST_TO_ADDR
// crate_spawn_rate := crate_spawn_rate [ Choice_crate_spawn_rate + 1 ] ;
1074: LD_ADDR_EXP 22
1078: PUSH
1079: LD_EXP 22
1083: PUSH
1084: LD_EXP 10
1088: PUSH
1089: LD_INT 1
1091: PLUS
1092: ARRAY
1093: ST_TO_ADDR
// people_spawn_rate := people_spawn_rate [ Choice_people_spawn_rate + 1 ] ;
1094: LD_ADDR_EXP 23
1098: PUSH
1099: LD_EXP 23
1103: PUSH
1104: LD_EXP 11
1108: PUSH
1109: LD_INT 1
1111: PLUS
1112: ARRAY
1113: ST_TO_ADDR
// spawn_fluctuation := spawn_fluctuation [ Choice_spawn_fluctuation + 1 ] ;
1114: LD_ADDR_EXP 24
1118: PUSH
1119: LD_EXP 24
1123: PUSH
1124: LD_EXP 12
1128: PUSH
1129: LD_INT 1
1131: PLUS
1132: ARRAY
1133: ST_TO_ADDR
// fluctuation_base_crates := fluctuation_base_crates [ Choice_crate_spawn_rate + 1 ] ;
1134: LD_ADDR_EXP 37
1138: PUSH
1139: LD_EXP 37
1143: PUSH
1144: LD_EXP 10
1148: PUSH
1149: LD_INT 1
1151: PLUS
1152: ARRAY
1153: ST_TO_ADDR
// fluctuation_base_humans := fluctuation_base_humans [ Choice_people_spawn_rate + 1 ] ;
1154: LD_ADDR_EXP 38
1158: PUSH
1159: LD_EXP 38
1163: PUSH
1164: LD_EXP 11
1168: PUSH
1169: LD_INT 1
1171: PLUS
1172: ARRAY
1173: ST_TO_ADDR
// oil_abundance := oil_abundance [ Choice_oil_abundance + 1 ] ;
1174: LD_ADDR_EXP 25
1178: PUSH
1179: LD_EXP 25
1183: PUSH
1184: LD_EXP 13
1188: PUSH
1189: LD_INT 1
1191: PLUS
1192: ARRAY
1193: ST_TO_ADDR
// sib_abundance := sib_abundance [ Choice_sib_abundance + 1 ] ;
1194: LD_ADDR_EXP 26
1198: PUSH
1199: LD_EXP 26
1203: PUSH
1204: LD_EXP 14
1208: PUSH
1209: LD_INT 1
1211: PLUS
1212: ARRAY
1213: ST_TO_ADDR
// victory_cond := victory_cond [ Choice_victory_cond + 1 ] ;
1214: LD_ADDR_EXP 27
1218: PUSH
1219: LD_EXP 27
1223: PUSH
1224: LD_EXP 15
1228: PUSH
1229: LD_INT 1
1231: PLUS
1232: ARRAY
1233: ST_TO_ADDR
// reinforce_cost := reinforce_cost [ Choice_reinforce_cost + 1 ] ;
1234: LD_ADDR_EXP 28
1238: PUSH
1239: LD_EXP 28
1243: PUSH
1244: LD_EXP 16
1248: PUSH
1249: LD_INT 1
1251: PLUS
1252: ARRAY
1253: ST_TO_ADDR
// soldier_limit := people_num [ Choice_people_num + 1 ] ;
1254: LD_ADDR_EXP 48
1258: PUSH
1259: LD_EXP 19
1263: PUSH
1264: LD_EXP 7
1268: PUSH
1269: LD_INT 1
1271: PLUS
1272: ARRAY
1273: ST_TO_ADDR
// black_fow := Choice_black_FoW ;
1274: LD_ADDR_EXP 29
1278: PUSH
1279: LD_EXP 17
1283: ST_TO_ADDR
// starting_tech_lvl := Choice_starting_tech_lvl ;
1284: LD_ADDR_EXP 30
1288: PUSH
1289: LD_EXP 18
1293: ST_TO_ADDR
// CLOCK_crate_spawn := crate_spawn_rate ;
1294: LD_ADDR_EXP 50
1298: PUSH
1299: LD_EXP 22
1303: ST_TO_ADDR
// CLOCK_human_spawn := people_spawn_rate ;
1304: LD_ADDR_EXP 51
1308: PUSH
1309: LD_EXP 23
1313: ST_TO_ADDR
// CLOCK_fluctuation := spawn_fluctuation ;
1314: LD_ADDR_EXP 52
1318: PUSH
1319: LD_EXP 24
1323: ST_TO_ADDR
// for i = 1 to Side_Positions do
1324: LD_ADDR_VAR 0 2
1328: PUSH
1329: DOUBLE
1330: LD_INT 1
1332: DEC
1333: ST_TO_ADDR
1334: LD_EXP 2
1338: PUSH
1339: FOR_TO
1340: IFFALSE 1405
// begin if not Side_Positions [ i ] then
1342: LD_EXP 2
1346: PUSH
1347: LD_VAR 0 2
1351: ARRAY
1352: NOT
1353: IFFALSE 1380
// side_isalive := Replace ( side_isalive , i , 0 ) else
1355: LD_ADDR_EXP 53
1359: PUSH
1360: LD_EXP 53
1364: PPUSH
1365: LD_VAR 0 2
1369: PPUSH
1370: LD_INT 0
1372: PPUSH
1373: CALL_OW 1
1377: ST_TO_ADDR
1378: GO 1403
// side_isalive := Replace ( side_isalive , i , 1 ) ;
1380: LD_ADDR_EXP 53
1384: PUSH
1385: LD_EXP 53
1389: PPUSH
1390: LD_VAR 0 2
1394: PPUSH
1395: LD_INT 1
1397: PPUSH
1398: CALL_OW 1
1402: ST_TO_ADDR
// end ;
1403: GO 1339
1405: POP
1406: POP
// for i = 1 to Teams do
1407: LD_ADDR_VAR 0 2
1411: PUSH
1412: DOUBLE
1413: LD_INT 1
1415: DEC
1416: ST_TO_ADDR
1417: LD_EXP 6
1421: PUSH
1422: FOR_TO
1423: IFFALSE 1450
// team_siberite_stocked := Replace ( team_siberite_stocked , i , 0 ) ;
1425: LD_ADDR_EXP 60
1429: PUSH
1430: LD_EXP 60
1434: PPUSH
1435: LD_VAR 0 2
1439: PPUSH
1440: LD_INT 0
1442: PPUSH
1443: CALL_OW 1
1447: ST_TO_ADDR
1448: GO 1422
1450: POP
1451: POP
// if victory_cond = 0 then
1452: LD_EXP 27
1456: PUSH
1457: LD_INT 0
1459: EQUAL
1460: IFFALSE 1471
// ToLua ( Deathmatch = 1; ) else
1462: LD_STRING Deathmatch = 1;
1464: PPUSH
1465: CALL_OW 559
1469: GO 1478
// ToLua ( Deathmatch = 0; ) ;
1471: LD_STRING Deathmatch = 0;
1473: PPUSH
1474: CALL_OW 559
// end ;
1478: LD_VAR 0 1
1482: RET
// export function INIT_GenerateDeposits ; var x , y , i , j , pool_oil_deposits , pool_siberite_deposits ; begin
1483: LD_INT 0
1485: PPUSH
1486: PPUSH
1487: PPUSH
1488: PPUSH
1489: PPUSH
1490: PPUSH
1491: PPUSH
// pool_oil_deposits := available_oil_deposits ;
1492: LD_ADDR_VAR 0 6
1496: PUSH
1497: LD_EXP 32
1501: ST_TO_ADDR
// pool_siberite_deposits := available_siberite_deposits ;
1502: LD_ADDR_VAR 0 7
1506: PUSH
1507: LD_EXP 33
1511: ST_TO_ADDR
// i := 0 ;
1512: LD_ADDR_VAR 0 4
1516: PUSH
1517: LD_INT 0
1519: ST_TO_ADDR
// while i < oil_abundance do
1520: LD_VAR 0 4
1524: PUSH
1525: LD_EXP 25
1529: LESS
1530: IFFALSE 1778
// begin for j = 1 to pool_oil_deposits do
1532: LD_ADDR_VAR 0 5
1536: PUSH
1537: DOUBLE
1538: LD_INT 1
1540: DEC
1541: ST_TO_ADDR
1542: LD_VAR 0 6
1546: PUSH
1547: FOR_TO
1548: IFFALSE 1774
// begin i := i + 1 ;
1550: LD_ADDR_VAR 0 4
1554: PUSH
1555: LD_VAR 0 4
1559: PUSH
1560: LD_INT 1
1562: PLUS
1563: ST_TO_ADDR
// x := length ( pool_oil_deposits [ j ] ) ;
1564: LD_ADDR_VAR 0 2
1568: PUSH
1569: LD_VAR 0 6
1573: PUSH
1574: LD_VAR 0 5
1578: ARRAY
1579: PPUSH
1580: CALL 6402 0 1
1584: ST_TO_ADDR
// y := Rand ( 1 , x ) ;
1585: LD_ADDR_VAR 0 3
1589: PUSH
1590: LD_INT 1
1592: PPUSH
1593: LD_VAR 0 2
1597: PPUSH
1598: CALL_OW 12
1602: ST_TO_ADDR
// CreateDepositXY ( pool_oil_deposits [ j ] [ y ] [ 1 ] [ 1 ] , pool_oil_deposits [ j ] [ y ] [ 1 ] [ 2 ] , mat_oil ) ;
1603: LD_VAR 0 6
1607: PUSH
1608: LD_VAR 0 5
1612: ARRAY
1613: PUSH
1614: LD_VAR 0 3
1618: ARRAY
1619: PUSH
1620: LD_INT 1
1622: ARRAY
1623: PUSH
1624: LD_INT 1
1626: ARRAY
1627: PPUSH
1628: LD_VAR 0 6
1632: PUSH
1633: LD_VAR 0 5
1637: ARRAY
1638: PUSH
1639: LD_VAR 0 3
1643: ARRAY
1644: PUSH
1645: LD_INT 1
1647: ARRAY
1648: PUSH
1649: LD_INT 2
1651: ARRAY
1652: PPUSH
1653: LD_INT 2
1655: PPUSH
1656: CALL_OW 62
// CreateDepositXY ( pool_oil_deposits [ j ] [ y ] [ 2 ] [ 1 ] , pool_oil_deposits [ j ] [ y ] [ 2 ] [ 2 ] , mat_oil ) ;
1660: LD_VAR 0 6
1664: PUSH
1665: LD_VAR 0 5
1669: ARRAY
1670: PUSH
1671: LD_VAR 0 3
1675: ARRAY
1676: PUSH
1677: LD_INT 2
1679: ARRAY
1680: PUSH
1681: LD_INT 1
1683: ARRAY
1684: PPUSH
1685: LD_VAR 0 6
1689: PUSH
1690: LD_VAR 0 5
1694: ARRAY
1695: PUSH
1696: LD_VAR 0 3
1700: ARRAY
1701: PUSH
1702: LD_INT 2
1704: ARRAY
1705: PUSH
1706: LD_INT 2
1708: ARRAY
1709: PPUSH
1710: LD_INT 2
1712: PPUSH
1713: CALL_OW 62
// pool_oil_deposits := Replace ( pool_oil_deposits , j , Delete ( pool_oil_deposits [ j ] , y ) ) ;
1717: LD_ADDR_VAR 0 6
1721: PUSH
1722: LD_VAR 0 6
1726: PPUSH
1727: LD_VAR 0 5
1731: PPUSH
1732: LD_VAR 0 6
1736: PUSH
1737: LD_VAR 0 5
1741: ARRAY
1742: PPUSH
1743: LD_VAR 0 3
1747: PPUSH
1748: CALL_OW 3
1752: PPUSH
1753: CALL_OW 1
1757: ST_TO_ADDR
// if i >= oil_abundance then
1758: LD_VAR 0 4
1762: PUSH
1763: LD_EXP 25
1767: GREATEREQUAL
1768: IFFALSE 1772
// break ;
1770: GO 1774
// end ;
1772: GO 1547
1774: POP
1775: POP
// end ;
1776: GO 1520
// i := 0 ;
1778: LD_ADDR_VAR 0 4
1782: PUSH
1783: LD_INT 0
1785: ST_TO_ADDR
// while i < sib_abundance do
1786: LD_VAR 0 4
1790: PUSH
1791: LD_EXP 26
1795: LESS
1796: IFFALSE 2044
// begin for j = 1 to pool_siberite_deposits do
1798: LD_ADDR_VAR 0 5
1802: PUSH
1803: DOUBLE
1804: LD_INT 1
1806: DEC
1807: ST_TO_ADDR
1808: LD_VAR 0 7
1812: PUSH
1813: FOR_TO
1814: IFFALSE 2040
// begin i := i + 1 ;
1816: LD_ADDR_VAR 0 4
1820: PUSH
1821: LD_VAR 0 4
1825: PUSH
1826: LD_INT 1
1828: PLUS
1829: ST_TO_ADDR
// x := length ( pool_siberite_deposits [ j ] ) ;
1830: LD_ADDR_VAR 0 2
1834: PUSH
1835: LD_VAR 0 7
1839: PUSH
1840: LD_VAR 0 5
1844: ARRAY
1845: PPUSH
1846: CALL 6402 0 1
1850: ST_TO_ADDR
// y := Rand ( 1 , x ) ;
1851: LD_ADDR_VAR 0 3
1855: PUSH
1856: LD_INT 1
1858: PPUSH
1859: LD_VAR 0 2
1863: PPUSH
1864: CALL_OW 12
1868: ST_TO_ADDR
// CreateDepositXY ( pool_siberite_deposits [ j ] [ y ] [ 1 ] [ 1 ] , pool_siberite_deposits [ j ] [ y ] [ 1 ] [ 2 ] , mat_siberit ) ;
1869: LD_VAR 0 7
1873: PUSH
1874: LD_VAR 0 5
1878: ARRAY
1879: PUSH
1880: LD_VAR 0 3
1884: ARRAY
1885: PUSH
1886: LD_INT 1
1888: ARRAY
1889: PUSH
1890: LD_INT 1
1892: ARRAY
1893: PPUSH
1894: LD_VAR 0 7
1898: PUSH
1899: LD_VAR 0 5
1903: ARRAY
1904: PUSH
1905: LD_VAR 0 3
1909: ARRAY
1910: PUSH
1911: LD_INT 1
1913: ARRAY
1914: PUSH
1915: LD_INT 2
1917: ARRAY
1918: PPUSH
1919: LD_INT 3
1921: PPUSH
1922: CALL_OW 62
// CreateDepositXY ( pool_siberite_deposits [ j ] [ y ] [ 2 ] [ 1 ] , pool_siberite_deposits [ j ] [ y ] [ 2 ] [ 2 ] , mat_siberit ) ;
1926: LD_VAR 0 7
1930: PUSH
1931: LD_VAR 0 5
1935: ARRAY
1936: PUSH
1937: LD_VAR 0 3
1941: ARRAY
1942: PUSH
1943: LD_INT 2
1945: ARRAY
1946: PUSH
1947: LD_INT 1
1949: ARRAY
1950: PPUSH
1951: LD_VAR 0 7
1955: PUSH
1956: LD_VAR 0 5
1960: ARRAY
1961: PUSH
1962: LD_VAR 0 3
1966: ARRAY
1967: PUSH
1968: LD_INT 2
1970: ARRAY
1971: PUSH
1972: LD_INT 2
1974: ARRAY
1975: PPUSH
1976: LD_INT 3
1978: PPUSH
1979: CALL_OW 62
// pool_siberite_deposits := Replace ( pool_siberite_deposits , j , Delete ( pool_siberite_deposits [ j ] , y ) ) ;
1983: LD_ADDR_VAR 0 7
1987: PUSH
1988: LD_VAR 0 7
1992: PPUSH
1993: LD_VAR 0 5
1997: PPUSH
1998: LD_VAR 0 7
2002: PUSH
2003: LD_VAR 0 5
2007: ARRAY
2008: PPUSH
2009: LD_VAR 0 3
2013: PPUSH
2014: CALL_OW 3
2018: PPUSH
2019: CALL_OW 1
2023: ST_TO_ADDR
// if i >= sib_abundance then
2024: LD_VAR 0 4
2028: PUSH
2029: LD_EXP 26
2033: GREATEREQUAL
2034: IFFALSE 2038
// break ;
2036: GO 2040
// end ;
2038: GO 1813
2040: POP
2041: POP
// end ;
2042: GO 1786
// end ;
2044: LD_VAR 0 1
2048: RET
// export function INIT_SetUpAllies ; var i , j ; begin
2049: LD_INT 0
2051: PPUSH
2052: PPUSH
2053: PPUSH
// for i = 1 to 8 do
2054: LD_ADDR_VAR 0 2
2058: PUSH
2059: DOUBLE
2060: LD_INT 1
2062: DEC
2063: ST_TO_ADDR
2064: LD_INT 8
2066: PUSH
2067: FOR_TO
2068: IFFALSE 2158
// for j = 1 to 8 do
2070: LD_ADDR_VAR 0 3
2074: PUSH
2075: DOUBLE
2076: LD_INT 1
2078: DEC
2079: ST_TO_ADDR
2080: LD_INT 8
2082: PUSH
2083: FOR_TO
2084: IFFALSE 2154
// begin if Side_Teams [ i ] = Side_Teams [ j ] then
2086: LD_EXP 5
2090: PUSH
2091: LD_VAR 0 2
2095: ARRAY
2096: PUSH
2097: LD_EXP 5
2101: PUSH
2102: LD_VAR 0 3
2106: ARRAY
2107: EQUAL
2108: IFFALSE 2132
// SetAttitude ( i , j , att_friend , true ) else
2110: LD_VAR 0 2
2114: PPUSH
2115: LD_VAR 0 3
2119: PPUSH
2120: LD_INT 1
2122: PPUSH
2123: LD_INT 1
2125: PPUSH
2126: CALL_OW 80
2130: GO 2152
// SetAttitude ( i , j , att_enemy , true ) ;
2132: LD_VAR 0 2
2136: PPUSH
2137: LD_VAR 0 3
2141: PPUSH
2142: LD_INT 2
2144: PPUSH
2145: LD_INT 1
2147: PPUSH
2148: CALL_OW 80
// end ;
2152: GO 2083
2154: POP
2155: POP
2156: GO 2067
2158: POP
2159: POP
// for i = 1 to 8 do
2160: LD_ADDR_VAR 0 2
2164: PUSH
2165: DOUBLE
2166: LD_INT 1
2168: DEC
2169: ST_TO_ADDR
2170: LD_INT 8
2172: PUSH
2173: FOR_TO
2174: IFFALSE 2198
// ChangeSideFog ( i , Side_Teams [ i ] ) ;
2176: LD_VAR 0 2
2180: PPUSH
2181: LD_EXP 5
2185: PUSH
2186: LD_VAR 0 2
2190: ARRAY
2191: PPUSH
2192: CALL_OW 343
2196: GO 2173
2198: POP
2199: POP
// FogOff ( 0 ) ;
2200: LD_INT 0
2202: PPUSH
2203: CALL_OW 344
// ResetFog ;
2207: CALL_OW 335
// if black_fow then
2211: LD_EXP 29
2215: IFFALSE 2246
// for i = 1 to 8 do
2217: LD_ADDR_VAR 0 2
2221: PUSH
2222: DOUBLE
2223: LD_INT 1
2225: DEC
2226: ST_TO_ADDR
2227: LD_INT 8
2229: PUSH
2230: FOR_TO
2231: IFFALSE 2244
// ClearAllFogForSide ( i ) ;
2233: LD_VAR 0 2
2237: PPUSH
2238: CALL_OW 520
2242: GO 2230
2244: POP
2245: POP
// end ;
2246: LD_VAR 0 1
2250: RET
// export function INIT_SetUpTechs ; var i ; begin
2251: LD_INT 0
2253: PPUSH
2254: PPUSH
// for i = 1 to 8 do
2255: LD_ADDR_VAR 0 2
2259: PUSH
2260: DOUBLE
2261: LD_INT 1
2263: DEC
2264: ST_TO_ADDR
2265: LD_INT 8
2267: PUSH
2268: FOR_TO
2269: IFFALSE 2332
// begin DisableAllTechs ( i ) ;
2271: LD_VAR 0 2
2275: PPUSH
2276: CALL 7369 0 1
// side_tech_lvl := Replace ( side_tech_lvl , i , starting_tech_lvl ) ;
2280: LD_ADDR_EXP 31
2284: PUSH
2285: LD_EXP 31
2289: PPUSH
2290: LD_VAR 0 2
2294: PPUSH
2295: LD_EXP 30
2299: PPUSH
2300: CALL_OW 1
2304: ST_TO_ADDR
// TechUpgrade ( starting_tech_lvl , Side_Nations [ i ] , i ) ;
2305: LD_EXP 30
2309: PPUSH
2310: LD_EXP 3
2314: PUSH
2315: LD_VAR 0 2
2319: ARRAY
2320: PPUSH
2321: LD_VAR 0 2
2325: PPUSH
2326: CALL 7871 0 3
// end ;
2330: GO 2268
2332: POP
2333: POP
// end ;
2334: LD_VAR 0 1
2338: RET
// export function INIT_ActivateLUAInterface ; var colour , tech , i , team , count ; begin
2339: LD_INT 0
2341: PPUSH
2342: PPUSH
2343: PPUSH
2344: PPUSH
2345: PPUSH
2346: PPUSH
// if victory_cond = 0 then
2347: LD_EXP 27
2351: PUSH
2352: LD_INT 0
2354: EQUAL
2355: IFFALSE 2366
// ToLua ( Deathmatch = 1; ) else
2357: LD_STRING Deathmatch = 1;
2359: PPUSH
2360: CALL_OW 559
2364: GO 2373
// ToLua ( Deathmatch = 0; ) ;
2366: LD_STRING Deathmatch = 0;
2368: PPUSH
2369: CALL_OW 559
// if Your_Side in [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] then
2373: LD_OWVAR 2
2377: PUSH
2378: LD_INT 1
2380: PUSH
2381: LD_INT 2
2383: PUSH
2384: LD_INT 3
2386: PUSH
2387: LD_INT 4
2389: PUSH
2390: LD_INT 5
2392: PUSH
2393: LD_INT 6
2395: PUSH
2396: LD_INT 7
2398: PUSH
2399: LD_INT 8
2401: PUSH
2402: EMPTY
2403: LIST
2404: LIST
2405: LIST
2406: LIST
2407: LIST
2408: LIST
2409: LIST
2410: LIST
2411: IN
2412: IFFALSE 2463
// begin ToLua ( LUA_UpdateSideInterface( & Your_Side & , & side_tech_lvl [ Your_Side ] & ); ) ;
2414: LD_STRING LUA_UpdateSideInterface(
2416: PUSH
2417: LD_OWVAR 2
2421: STR
2422: PUSH
2423: LD_STRING ,
2425: STR
2426: PUSH
2427: LD_EXP 31
2431: PUSH
2432: LD_OWVAR 2
2436: ARRAY
2437: STR
2438: PUSH
2439: LD_STRING );
2441: STR
2442: PPUSH
2443: CALL_OW 559
// ToLua ( StartSideInterface(); ) ;
2447: LD_STRING StartSideInterface();
2449: PPUSH
2450: CALL_OW 559
// ToLua ( LUA_NoDepot(); ) ;
2454: LD_STRING LUA_NoDepot();
2456: PPUSH
2457: CALL_OW 559
// end else
2461: GO 2690
// begin count = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
2463: LD_ADDR_VAR 0 6
2467: PUSH
2468: LD_INT 0
2470: PUSH
2471: LD_INT 0
2473: PUSH
2474: LD_INT 0
2476: PUSH
2477: LD_INT 0
2479: PUSH
2480: LD_INT 0
2482: PUSH
2483: LD_INT 0
2485: PUSH
2486: LD_INT 0
2488: PUSH
2489: LD_INT 0
2491: PUSH
2492: EMPTY
2493: LIST
2494: LIST
2495: LIST
2496: LIST
2497: LIST
2498: LIST
2499: LIST
2500: LIST
2501: ST_TO_ADDR
// for i = 1 to 8 do
2502: LD_ADDR_VAR 0 4
2506: PUSH
2507: DOUBLE
2508: LD_INT 1
2510: DEC
2511: ST_TO_ADDR
2512: LD_INT 8
2514: PUSH
2515: FOR_TO
2516: IFFALSE 2681
// begin colour := i ;
2518: LD_ADDR_VAR 0 2
2522: PUSH
2523: LD_VAR 0 4
2527: ST_TO_ADDR
// tech := side_tech_lvl [ i ] ;
2528: LD_ADDR_VAR 0 3
2532: PUSH
2533: LD_EXP 31
2537: PUSH
2538: LD_VAR 0 4
2542: ARRAY
2543: ST_TO_ADDR
// team := Side_Teams [ i ] ;
2544: LD_ADDR_VAR 0 5
2548: PUSH
2549: LD_EXP 5
2553: PUSH
2554: LD_VAR 0 4
2558: ARRAY
2559: ST_TO_ADDR
// if not Side_Positions [ i ] then
2560: LD_EXP 2
2564: PUSH
2565: LD_VAR 0 4
2569: ARRAY
2570: NOT
2571: IFFALSE 2581
// team := 0 ;
2573: LD_ADDR_VAR 0 5
2577: PUSH
2578: LD_INT 0
2580: ST_TO_ADDR
// count := Replace ( count , team , count [ team ] + 1 ) ;
2581: LD_ADDR_VAR 0 6
2585: PUSH
2586: LD_VAR 0 6
2590: PPUSH
2591: LD_VAR 0 5
2595: PPUSH
2596: LD_VAR 0 6
2600: PUSH
2601: LD_VAR 0 5
2605: ARRAY
2606: PUSH
2607: LD_INT 1
2609: PLUS
2610: PPUSH
2611: CALL_OW 1
2615: ST_TO_ADDR
// ToLua ( LUA_RenderSpecLabels( & i & , & team & , & count [ team ] & , & colour & , & tech & ); ) ;
2616: LD_STRING LUA_RenderSpecLabels(
2618: PUSH
2619: LD_VAR 0 4
2623: STR
2624: PUSH
2625: LD_STRING ,
2627: STR
2628: PUSH
2629: LD_VAR 0 5
2633: STR
2634: PUSH
2635: LD_STRING ,
2637: STR
2638: PUSH
2639: LD_VAR 0 6
2643: PUSH
2644: LD_VAR 0 5
2648: ARRAY
2649: STR
2650: PUSH
2651: LD_STRING ,
2653: STR
2654: PUSH
2655: LD_VAR 0 2
2659: STR
2660: PUSH
2661: LD_STRING ,
2663: STR
2664: PUSH
2665: LD_VAR 0 3
2669: STR
2670: PUSH
2671: LD_STRING );
2673: STR
2674: PPUSH
2675: CALL_OW 559
// end ;
2679: GO 2515
2681: POP
2682: POP
// ToLua ( StartSpecInterface(); ) ;
2683: LD_STRING StartSpecInterface();
2685: PPUSH
2686: CALL_OW 559
// end ; if Your_Side in [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] then
2690: LD_OWVAR 2
2694: PUSH
2695: LD_INT 1
2697: PUSH
2698: LD_INT 2
2700: PUSH
2701: LD_INT 3
2703: PUSH
2704: LD_INT 4
2706: PUSH
2707: LD_INT 5
2709: PUSH
2710: LD_INT 6
2712: PUSH
2713: LD_INT 7
2715: PUSH
2716: LD_INT 8
2718: PUSH
2719: EMPTY
2720: LIST
2721: LIST
2722: LIST
2723: LIST
2724: LIST
2725: LIST
2726: LIST
2727: LIST
2728: IN
2729: IFFALSE 2770
// ToLua ( LUA_UpdateSiberiteSent( & team_siberite_stocked [ Side_Teams [ Your_Side ] ] & , & victory_cond & ); ) ;
2731: LD_STRING LUA_UpdateSiberiteSent(
2733: PUSH
2734: LD_EXP 60
2738: PUSH
2739: LD_EXP 5
2743: PUSH
2744: LD_OWVAR 2
2748: ARRAY
2749: ARRAY
2750: STR
2751: PUSH
2752: LD_STRING ,
2754: STR
2755: PUSH
2756: LD_EXP 27
2760: STR
2761: PUSH
2762: LD_STRING );
2764: STR
2765: PPUSH
2766: CALL_OW 559
// if Your_Side = 9 then
2770: LD_OWVAR 2
2774: PUSH
2775: LD_INT 9
2777: EQUAL
2778: IFFALSE 2845
// for i = 1 to Teams do
2780: LD_ADDR_VAR 0 4
2784: PUSH
2785: DOUBLE
2786: LD_INT 1
2788: DEC
2789: ST_TO_ADDR
2790: LD_EXP 6
2794: PUSH
2795: FOR_TO
2796: IFFALSE 2843
// ToLua ( LUA_UpdateSiberiteSpec( & team_siberite_stocked [ i ] & , & victory_cond & , & i & ); ) ;
2798: LD_STRING LUA_UpdateSiberiteSpec(
2800: PUSH
2801: LD_EXP 60
2805: PUSH
2806: LD_VAR 0 4
2810: ARRAY
2811: STR
2812: PUSH
2813: LD_STRING ,
2815: STR
2816: PUSH
2817: LD_EXP 27
2821: STR
2822: PUSH
2823: LD_STRING ,
2825: STR
2826: PUSH
2827: LD_VAR 0 4
2831: STR
2832: PUSH
2833: LD_STRING );
2835: STR
2836: PPUSH
2837: CALL_OW 559
2841: GO 2795
2843: POP
2844: POP
// end ;
2845: LD_VAR 0 1
2849: RET
// export function INIT_PrepareSquad ; var i , j , commander , profession , attributes , basic_skills , skill_levels , importance , stat_array ; begin
2850: LD_INT 0
2852: PPUSH
2853: PPUSH
2854: PPUSH
2855: PPUSH
2856: PPUSH
2857: PPUSH
2858: PPUSH
2859: PPUSH
2860: PPUSH
2861: PPUSH
// stat_array := [ ] ;
2862: LD_ADDR_VAR 0 10
2866: PUSH
2867: EMPTY
2868: ST_TO_ADDR
// for i = 1 to people_num [ 1 ] do
2869: LD_ADDR_VAR 0 2
2873: PUSH
2874: DOUBLE
2875: LD_INT 1
2877: DEC
2878: ST_TO_ADDR
2879: LD_EXP 19
2883: PUSH
2884: LD_INT 1
2886: ARRAY
2887: PUSH
2888: FOR_TO
2889: IFFALSE 3106
// begin commander := 1 ;
2891: LD_ADDR_VAR 0 4
2895: PUSH
2896: LD_INT 1
2898: ST_TO_ADDR
// profession := 1 ;
2899: LD_ADDR_VAR 0 5
2903: PUSH
2904: LD_INT 1
2906: ST_TO_ADDR
// attributes := [ Rand ( 10 , 15 ) , Rand ( 9 , 11 ) ] ;
2907: LD_ADDR_VAR 0 6
2911: PUSH
2912: LD_INT 10
2914: PPUSH
2915: LD_INT 15
2917: PPUSH
2918: CALL_OW 12
2922: PUSH
2923: LD_INT 9
2925: PPUSH
2926: LD_INT 11
2928: PPUSH
2929: CALL_OW 12
2933: PUSH
2934: EMPTY
2935: LIST
2936: LIST
2937: ST_TO_ADDR
// basic_skills := [ Rand ( 1 , 3 ) , 0 , 0 , 0 ] ;
2938: LD_ADDR_VAR 0 7
2942: PUSH
2943: LD_INT 1
2945: PPUSH
2946: LD_INT 3
2948: PPUSH
2949: CALL_OW 12
2953: PUSH
2954: LD_INT 0
2956: PUSH
2957: LD_INT 0
2959: PUSH
2960: LD_INT 0
2962: PUSH
2963: EMPTY
2964: LIST
2965: LIST
2966: LIST
2967: LIST
2968: ST_TO_ADDR
// skill_levels := [ basic_skills [ 1 ] + experience , Rand ( 0 , experience ) , Rand ( 0 , experience ) , Rand ( 0 , experience ) ] ;
2969: LD_ADDR_VAR 0 8
2973: PUSH
2974: LD_VAR 0 7
2978: PUSH
2979: LD_INT 1
2981: ARRAY
2982: PUSH
2983: LD_EXP 20
2987: PLUS
2988: PUSH
2989: LD_INT 0
2991: PPUSH
2992: LD_EXP 20
2996: PPUSH
2997: CALL_OW 12
3001: PUSH
3002: LD_INT 0
3004: PPUSH
3005: LD_EXP 20
3009: PPUSH
3010: CALL_OW 12
3014: PUSH
3015: LD_INT 0
3017: PPUSH
3018: LD_EXP 20
3022: PPUSH
3023: CALL_OW 12
3027: PUSH
3028: EMPTY
3029: LIST
3030: LIST
3031: LIST
3032: LIST
3033: ST_TO_ADDR
// importance := 105 ;
3034: LD_ADDR_VAR 0 9
3038: PUSH
3039: LD_INT 105
3041: ST_TO_ADDR
// stat_array := Replace ( stat_array , stat_array + 1 , [ commander , profession , attributes , basic_skills , skill_levels , importance ] ) ;
3042: LD_ADDR_VAR 0 10
3046: PUSH
3047: LD_VAR 0 10
3051: PPUSH
3052: LD_VAR 0 10
3056: PUSH
3057: LD_INT 1
3059: PLUS
3060: PPUSH
3061: LD_VAR 0 4
3065: PUSH
3066: LD_VAR 0 5
3070: PUSH
3071: LD_VAR 0 6
3075: PUSH
3076: LD_VAR 0 7
3080: PUSH
3081: LD_VAR 0 8
3085: PUSH
3086: LD_VAR 0 9
3090: PUSH
3091: EMPTY
3092: LIST
3093: LIST
3094: LIST
3095: LIST
3096: LIST
3097: LIST
3098: PPUSH
3099: CALL_OW 1
3103: ST_TO_ADDR
// end ;
3104: GO 2888
3106: POP
3107: POP
// for j = 2 to people_num do
3108: LD_ADDR_VAR 0 3
3112: PUSH
3113: DOUBLE
3114: LD_INT 2
3116: DEC
3117: ST_TO_ADDR
3118: LD_EXP 19
3122: PUSH
3123: FOR_TO
3124: IFFALSE 3445
// begin commander := 0 ;
3126: LD_ADDR_VAR 0 4
3130: PUSH
3131: LD_INT 0
3133: ST_TO_ADDR
// attributes := [ Rand ( 8 , 12 ) , Rand ( 8 , 12 ) ] ;
3134: LD_ADDR_VAR 0 6
3138: PUSH
3139: LD_INT 8
3141: PPUSH
3142: LD_INT 12
3144: PPUSH
3145: CALL_OW 12
3149: PUSH
3150: LD_INT 8
3152: PPUSH
3153: LD_INT 12
3155: PPUSH
3156: CALL_OW 12
3160: PUSH
3161: EMPTY
3162: LIST
3163: LIST
3164: ST_TO_ADDR
// importance := 0 ;
3165: LD_ADDR_VAR 0 9
3169: PUSH
3170: LD_INT 0
3172: ST_TO_ADDR
// profession := j - 1 ;
3173: LD_ADDR_VAR 0 5
3177: PUSH
3178: LD_VAR 0 3
3182: PUSH
3183: LD_INT 1
3185: MINUS
3186: ST_TO_ADDR
// for i = 1 to people_num [ j ] do
3187: LD_ADDR_VAR 0 2
3191: PUSH
3192: DOUBLE
3193: LD_INT 1
3195: DEC
3196: ST_TO_ADDR
3197: LD_EXP 19
3201: PUSH
3202: LD_VAR 0 3
3206: ARRAY
3207: PUSH
3208: FOR_TO
3209: IFFALSE 3441
// begin basic_skills := [ 0 , 0 , 0 , 0 ] ;
3211: LD_ADDR_VAR 0 7
3215: PUSH
3216: LD_INT 0
3218: PUSH
3219: LD_INT 0
3221: PUSH
3222: LD_INT 0
3224: PUSH
3225: LD_INT 0
3227: PUSH
3228: EMPTY
3229: LIST
3230: LIST
3231: LIST
3232: LIST
3233: ST_TO_ADDR
// skill_levels := [ Rand ( 0 , experience ) , Rand ( 0 , experience ) , Rand ( 0 , experience ) , Rand ( 0 , experience ) ] ;
3234: LD_ADDR_VAR 0 8
3238: PUSH
3239: LD_INT 0
3241: PPUSH
3242: LD_EXP 20
3246: PPUSH
3247: CALL_OW 12
3251: PUSH
3252: LD_INT 0
3254: PPUSH
3255: LD_EXP 20
3259: PPUSH
3260: CALL_OW 12
3264: PUSH
3265: LD_INT 0
3267: PPUSH
3268: LD_EXP 20
3272: PPUSH
3273: CALL_OW 12
3277: PUSH
3278: LD_INT 0
3280: PPUSH
3281: LD_EXP 20
3285: PPUSH
3286: CALL_OW 12
3290: PUSH
3291: EMPTY
3292: LIST
3293: LIST
3294: LIST
3295: LIST
3296: ST_TO_ADDR
// basic_skills := Replace ( basic_skills , j - 1 , Rand ( 0 , 2 ) ) ;
3297: LD_ADDR_VAR 0 7
3301: PUSH
3302: LD_VAR 0 7
3306: PPUSH
3307: LD_VAR 0 3
3311: PUSH
3312: LD_INT 1
3314: MINUS
3315: PPUSH
3316: LD_INT 0
3318: PPUSH
3319: LD_INT 2
3321: PPUSH
3322: CALL_OW 12
3326: PPUSH
3327: CALL_OW 1
3331: ST_TO_ADDR
// skill_levels := Replace ( skill_levels , j - 1 , basic_skills [ j - 1 ] + experience ) ;
3332: LD_ADDR_VAR 0 8
3336: PUSH
3337: LD_VAR 0 8
3341: PPUSH
3342: LD_VAR 0 3
3346: PUSH
3347: LD_INT 1
3349: MINUS
3350: PPUSH
3351: LD_VAR 0 7
3355: PUSH
3356: LD_VAR 0 3
3360: PUSH
3361: LD_INT 1
3363: MINUS
3364: ARRAY
3365: PUSH
3366: LD_EXP 20
3370: PLUS
3371: PPUSH
3372: CALL_OW 1
3376: ST_TO_ADDR
// stat_array := Replace ( stat_array , stat_array + 1 , [ commander , profession , attributes , basic_skills , skill_levels , importance ] ) ;
3377: LD_ADDR_VAR 0 10
3381: PUSH
3382: LD_VAR 0 10
3386: PPUSH
3387: LD_VAR 0 10
3391: PUSH
3392: LD_INT 1
3394: PLUS
3395: PPUSH
3396: LD_VAR 0 4
3400: PUSH
3401: LD_VAR 0 5
3405: PUSH
3406: LD_VAR 0 6
3410: PUSH
3411: LD_VAR 0 7
3415: PUSH
3416: LD_VAR 0 8
3420: PUSH
3421: LD_VAR 0 9
3425: PUSH
3426: EMPTY
3427: LIST
3428: LIST
3429: LIST
3430: LIST
3431: LIST
3432: LIST
3433: PPUSH
3434: CALL_OW 1
3438: ST_TO_ADDR
// end ;
3439: GO 3208
3441: POP
3442: POP
// end ;
3443: GO 3123
3445: POP
3446: POP
// composition := stat_array ;
3447: LD_ADDR_EXP 43
3451: PUSH
3452: LD_VAR 0 10
3456: ST_TO_ADDR
// end ;
3457: LD_VAR 0 1
3461: RET
// export function INIT_SpawnStartingUnits ; var i , j , human , vehicle , crates , oil , siberite , cargo_capacity , vehicle_amount , bulk ; begin
3462: LD_INT 0
3464: PPUSH
3465: PPUSH
3466: PPUSH
3467: PPUSH
3468: PPUSH
3469: PPUSH
3470: PPUSH
3471: PPUSH
3472: PPUSH
3473: PPUSH
3474: PPUSH
// side_soldiers := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
3475: LD_ADDR_EXP 46
3479: PUSH
3480: EMPTY
3481: PUSH
3482: EMPTY
3483: PUSH
3484: EMPTY
3485: PUSH
3486: EMPTY
3487: PUSH
3488: EMPTY
3489: PUSH
3490: EMPTY
3491: PUSH
3492: EMPTY
3493: PUSH
3494: EMPTY
3495: PUSH
3496: EMPTY
3497: LIST
3498: LIST
3499: LIST
3500: LIST
3501: LIST
3502: LIST
3503: LIST
3504: LIST
3505: ST_TO_ADDR
// side_vehicles := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
3506: LD_ADDR_EXP 49
3510: PUSH
3511: EMPTY
3512: PUSH
3513: EMPTY
3514: PUSH
3515: EMPTY
3516: PUSH
3517: EMPTY
3518: PUSH
3519: EMPTY
3520: PUSH
3521: EMPTY
3522: PUSH
3523: EMPTY
3524: PUSH
3525: EMPTY
3526: PUSH
3527: EMPTY
3528: LIST
3529: LIST
3530: LIST
3531: LIST
3532: LIST
3533: LIST
3534: LIST
3535: LIST
3536: ST_TO_ADDR
// vehicle_amount := 0 ;
3537: LD_ADDR_VAR 0 10
3541: PUSH
3542: LD_INT 0
3544: ST_TO_ADDR
// crates := starting_resources [ 1 ] ;
3545: LD_ADDR_VAR 0 6
3549: PUSH
3550: LD_EXP 21
3554: PUSH
3555: LD_INT 1
3557: ARRAY
3558: ST_TO_ADDR
// oil := starting_resources [ 2 ] ;
3559: LD_ADDR_VAR 0 7
3563: PUSH
3564: LD_EXP 21
3568: PUSH
3569: LD_INT 2
3571: ARRAY
3572: ST_TO_ADDR
// siberite := starting_resources [ 3 ] ;
3573: LD_ADDR_VAR 0 8
3577: PUSH
3578: LD_EXP 21
3582: PUSH
3583: LD_INT 3
3585: ARRAY
3586: ST_TO_ADDR
// cargo_capacity := crates + oil + siberite ;
3587: LD_ADDR_VAR 0 9
3591: PUSH
3592: LD_VAR 0 6
3596: PUSH
3597: LD_VAR 0 7
3601: PLUS
3602: PUSH
3603: LD_VAR 0 8
3607: PLUS
3608: ST_TO_ADDR
// if cargo_capacity > 0 then
3609: LD_VAR 0 9
3613: PUSH
3614: LD_INT 0
3616: GREATER
3617: IFFALSE 3659
// begin while cargo_capacity > 0 do
3619: LD_VAR 0 9
3623: PUSH
3624: LD_INT 0
3626: GREATER
3627: IFFALSE 3659
// begin vehicle_amount := vehicle_amount + 1 ;
3629: LD_ADDR_VAR 0 10
3633: PUSH
3634: LD_VAR 0 10
3638: PUSH
3639: LD_INT 1
3641: PLUS
3642: ST_TO_ADDR
// cargo_capacity := cargo_capacity - 100 ;
3643: LD_ADDR_VAR 0 9
3647: PUSH
3648: LD_VAR 0 9
3652: PUSH
3653: LD_INT 100
3655: MINUS
3656: ST_TO_ADDR
// end ;
3657: GO 3619
// end ; for i = 1 to 8 do
3659: LD_ADDR_VAR 0 2
3663: PUSH
3664: DOUBLE
3665: LD_INT 1
3667: DEC
3668: ST_TO_ADDR
3669: LD_INT 8
3671: PUSH
3672: FOR_TO
3673: IFFALSE 4223
// begin if not side_isalive [ i ] then
3675: LD_EXP 53
3679: PUSH
3680: LD_VAR 0 2
3684: ARRAY
3685: NOT
3686: IFFALSE 3690
// continue ;
3688: GO 3672
// for j = 1 to composition do
3690: LD_ADDR_VAR 0 3
3694: PUSH
3695: DOUBLE
3696: LD_INT 1
3698: DEC
3699: ST_TO_ADDR
3700: LD_EXP 43
3704: PUSH
3705: FOR_TO
3706: IFFALSE 3778
// begin human := PrepareCharacters ( i , position_spawn_direction , composition [ j ] ) ;
3708: LD_ADDR_VAR 0 4
3712: PUSH
3713: LD_VAR 0 2
3717: PPUSH
3718: LD_EXP 34
3722: PPUSH
3723: LD_EXP 43
3727: PUSH
3728: LD_VAR 0 3
3732: ARRAY
3733: PPUSH
3734: CALL 6518 0 3
3738: ST_TO_ADDR
// side_soldiers := Replace ( side_soldiers , i , side_soldiers [ i ] ^ human ) ;
3739: LD_ADDR_EXP 46
3743: PUSH
3744: LD_EXP 46
3748: PPUSH
3749: LD_VAR 0 2
3753: PPUSH
3754: LD_EXP 46
3758: PUSH
3759: LD_VAR 0 2
3763: ARRAY
3764: PUSH
3765: LD_VAR 0 4
3769: ADD
3770: PPUSH
3771: CALL_OW 1
3775: ST_TO_ADDR
// end ;
3776: GO 3705
3778: POP
3779: POP
// crates := starting_resources [ 1 ] ;
3780: LD_ADDR_VAR 0 6
3784: PUSH
3785: LD_EXP 21
3789: PUSH
3790: LD_INT 1
3792: ARRAY
3793: ST_TO_ADDR
// oil := starting_resources [ 2 ] ;
3794: LD_ADDR_VAR 0 7
3798: PUSH
3799: LD_EXP 21
3803: PUSH
3804: LD_INT 2
3806: ARRAY
3807: ST_TO_ADDR
// siberite := starting_resources [ 3 ] ;
3808: LD_ADDR_VAR 0 8
3812: PUSH
3813: LD_EXP 21
3817: PUSH
3818: LD_INT 3
3820: ARRAY
3821: ST_TO_ADDR
// for j = 1 to vehicle_amount do
3822: LD_ADDR_VAR 0 3
3826: PUSH
3827: DOUBLE
3828: LD_INT 1
3830: DEC
3831: ST_TO_ADDR
3832: LD_VAR 0 10
3836: PUSH
3837: FOR_TO
3838: IFFALSE 3975
// begin vehicle := PrepareVehicles ( i , position_spawn_direction ) ;
3840: LD_ADDR_VAR 0 5
3844: PUSH
3845: LD_VAR 0 2
3849: PPUSH
3850: LD_EXP 34
3854: PPUSH
3855: CALL 6732 0 2
3859: ST_TO_ADDR
// bulk := FillUpVehicles ( vehicle , crates , oil , siberite ) ;
3860: LD_ADDR_VAR 0 11
3864: PUSH
3865: LD_VAR 0 5
3869: PPUSH
3870: LD_VAR 0 6
3874: PPUSH
3875: LD_VAR 0 7
3879: PPUSH
3880: LD_VAR 0 8
3884: PPUSH
3885: CALL 11157 0 4
3889: ST_TO_ADDR
// crates := bulk [ 2 ] ;
3890: LD_ADDR_VAR 0 6
3894: PUSH
3895: LD_VAR 0 11
3899: PUSH
3900: LD_INT 2
3902: ARRAY
3903: ST_TO_ADDR
// oil := bulk [ 3 ] ;
3904: LD_ADDR_VAR 0 7
3908: PUSH
3909: LD_VAR 0 11
3913: PUSH
3914: LD_INT 3
3916: ARRAY
3917: ST_TO_ADDR
// siberite := bulk [ 4 ] ;
3918: LD_ADDR_VAR 0 8
3922: PUSH
3923: LD_VAR 0 11
3927: PUSH
3928: LD_INT 4
3930: ARRAY
3931: ST_TO_ADDR
// side_vehicles := Replace ( side_vehicles , i , side_vehicles [ i ] ^ bulk [ 1 ] ) ;
3932: LD_ADDR_EXP 49
3936: PUSH
3937: LD_EXP 49
3941: PPUSH
3942: LD_VAR 0 2
3946: PPUSH
3947: LD_EXP 49
3951: PUSH
3952: LD_VAR 0 2
3956: ARRAY
3957: PUSH
3958: LD_VAR 0 11
3962: PUSH
3963: LD_INT 1
3965: ARRAY
3966: ADD
3967: PPUSH
3968: CALL_OW 1
3972: ST_TO_ADDR
// end ;
3973: GO 3837
3975: POP
3976: POP
// for j = 1 to side_vehicles [ i ] do
3977: LD_ADDR_VAR 0 3
3981: PUSH
3982: DOUBLE
3983: LD_INT 1
3985: DEC
3986: ST_TO_ADDR
3987: LD_EXP 49
3991: PUSH
3992: LD_VAR 0 2
3996: ARRAY
3997: PUSH
3998: FOR_TO
3999: IFFALSE 4081
// PlaceHumanInUnit ( side_soldiers [ i ] [ people_num [ 1 ] + people_num [ 2 ] + people_num [ 3 ] + people_num [ 4 ] - j ] , side_vehicles [ i ] [ j ] ) ;
4001: LD_EXP 46
4005: PUSH
4006: LD_VAR 0 2
4010: ARRAY
4011: PUSH
4012: LD_EXP 19
4016: PUSH
4017: LD_INT 1
4019: ARRAY
4020: PUSH
4021: LD_EXP 19
4025: PUSH
4026: LD_INT 2
4028: ARRAY
4029: PLUS
4030: PUSH
4031: LD_EXP 19
4035: PUSH
4036: LD_INT 3
4038: ARRAY
4039: PLUS
4040: PUSH
4041: LD_EXP 19
4045: PUSH
4046: LD_INT 4
4048: ARRAY
4049: PLUS
4050: PUSH
4051: LD_VAR 0 3
4055: MINUS
4056: ARRAY
4057: PPUSH
4058: LD_EXP 49
4062: PUSH
4063: LD_VAR 0 2
4067: ARRAY
4068: PUSH
4069: LD_VAR 0 3
4073: ARRAY
4074: PPUSH
4075: CALL_OW 52
4079: GO 3998
4081: POP
4082: POP
// for j = 1 to side_soldiers [ i ] do
4083: LD_ADDR_VAR 0 3
4087: PUSH
4088: DOUBLE
4089: LD_INT 1
4091: DEC
4092: ST_TO_ADDR
4093: LD_EXP 46
4097: PUSH
4098: LD_VAR 0 2
4102: ARRAY
4103: PUSH
4104: FOR_TO
4105: IFFALSE 4150
// PlaceUnitArea ( side_soldiers [ i ] [ j ] , position_spawn_area [ Side_Positions [ i ] ] , false ) ;
4107: LD_EXP 46
4111: PUSH
4112: LD_VAR 0 2
4116: ARRAY
4117: PUSH
4118: LD_VAR 0 3
4122: ARRAY
4123: PPUSH
4124: LD_EXP 35
4128: PUSH
4129: LD_EXP 2
4133: PUSH
4134: LD_VAR 0 2
4138: ARRAY
4139: ARRAY
4140: PPUSH
4141: LD_INT 0
4143: PPUSH
4144: CALL_OW 49
4148: GO 4104
4150: POP
4151: POP
// for j = 1 to side_vehicles [ i ] do
4152: LD_ADDR_VAR 0 3
4156: PUSH
4157: DOUBLE
4158: LD_INT 1
4160: DEC
4161: ST_TO_ADDR
4162: LD_EXP 49
4166: PUSH
4167: LD_VAR 0 2
4171: ARRAY
4172: PUSH
4173: FOR_TO
4174: IFFALSE 4219
// PlaceUnitArea ( side_vehicles [ i ] [ j ] , position_spawn_area [ Side_Positions [ i ] ] , false ) ;
4176: LD_EXP 49
4180: PUSH
4181: LD_VAR 0 2
4185: ARRAY
4186: PUSH
4187: LD_VAR 0 3
4191: ARRAY
4192: PPUSH
4193: LD_EXP 35
4197: PUSH
4198: LD_EXP 2
4202: PUSH
4203: LD_VAR 0 2
4207: ARRAY
4208: ARRAY
4209: PPUSH
4210: LD_INT 0
4212: PPUSH
4213: CALL_OW 49
4217: GO 4173
4219: POP
4220: POP
// end ;
4221: GO 3672
4223: POP
4224: POP
// end ;
4225: LD_VAR 0 1
4229: RET
// export function INIT_CameraFocus ; begin
4230: LD_INT 0
4232: PPUSH
// if Your_Side >= 1 and Your_Side <= 8 then
4233: LD_OWVAR 2
4237: PUSH
4238: LD_INT 1
4240: GREATEREQUAL
4241: PUSH
4242: LD_OWVAR 2
4246: PUSH
4247: LD_INT 8
4249: LESSEQUAL
4250: AND
4251: IFFALSE 4270
// CenterNowOnUnits ( side_soldiers [ Your_Side ] ) else
4253: LD_EXP 46
4257: PUSH
4258: LD_OWVAR 2
4262: ARRAY
4263: PPUSH
4264: CALL_OW 87
4268: GO 4287
// begin CenterNowOnXY ( 164 , 129 ) ;
4270: LD_INT 164
4272: PPUSH
4273: LD_INT 129
4275: PPUSH
4276: CALL_OW 86
// FogOff ( 1 ) ;
4280: LD_INT 1
4282: PPUSH
4283: CALL_OW 344
// end ; end ; end_of_file
4287: LD_VAR 0 1
4291: RET
// export Game_Type , Side_Positions , Side_Nations , Side_Comps , Side_Teams , Teams , Choice_people_num , Choice_experience , Choice_starting_resources , Choice_crate_spawn_rate , Choice_people_spawn_rate , Choice_spawn_fluctuation , Choice_oil_abundance , Choice_sib_abundance , Choice_victory_cond , Choice_reinforce_cost , Choice_black_FoW , Choice_starting_tech_lvl , people_num , experience , starting_resources , crate_spawn_rate , people_spawn_rate , spawn_fluctuation , oil_abundance , sib_abundance , victory_cond , reinforce_cost , black_fow , starting_tech_lvl , side_tech_lvl , available_oil_deposits , available_siberite_deposits , position_spawn_direction , position_spawn_area , position_drop_zones , fluctuation_base_crates , fluctuation_base_humans , fluctuation_modifier_crates , fluctuation_modifier_humans , current_spawn_rate , past_spawn_rate , composition , new_character_EON , new_character_reinforcements , side_soldiers , side_soldier_count , soldier_limit , side_vehicles , CLOCK_crate_spawn , CLOCK_human_spawn , CLOCK_fluctuation , side_isalive , cost_per_human , cost_per_upgrade , side_reinforcement_amount , side_reinforcement_cap , side_pending_order , side_resources_delivered , team_siberite_stocked , team_transfer_zones , transfer_zone_direction , side_chosen_zone , side_zone_locked , side_transfer_clocks , side_units_outside , side_order_type , side_resources_remaining , side_transfer_pending ; export function INIT_LoadMapParams ; var i ; begin
4292: LD_INT 0
4294: PPUSH
4295: PPUSH
// people_num := [ [ 1 , 1 , 1 , 1 , 1 ] , [ 1 , 2 , 2 , 2 , 2 ] , [ 1 , 3 , 3 , 3 , 3 ] , [ 1 , 4 , 4 , 4 , 4 ] ] ;
4296: LD_ADDR_EXP 19
4300: PUSH
4301: LD_INT 1
4303: PUSH
4304: LD_INT 1
4306: PUSH
4307: LD_INT 1
4309: PUSH
4310: LD_INT 1
4312: PUSH
4313: LD_INT 1
4315: PUSH
4316: EMPTY
4317: LIST
4318: LIST
4319: LIST
4320: LIST
4321: LIST
4322: PUSH
4323: LD_INT 1
4325: PUSH
4326: LD_INT 2
4328: PUSH
4329: LD_INT 2
4331: PUSH
4332: LD_INT 2
4334: PUSH
4335: LD_INT 2
4337: PUSH
4338: EMPTY
4339: LIST
4340: LIST
4341: LIST
4342: LIST
4343: LIST
4344: PUSH
4345: LD_INT 1
4347: PUSH
4348: LD_INT 3
4350: PUSH
4351: LD_INT 3
4353: PUSH
4354: LD_INT 3
4356: PUSH
4357: LD_INT 3
4359: PUSH
4360: EMPTY
4361: LIST
4362: LIST
4363: LIST
4364: LIST
4365: LIST
4366: PUSH
4367: LD_INT 1
4369: PUSH
4370: LD_INT 4
4372: PUSH
4373: LD_INT 4
4375: PUSH
4376: LD_INT 4
4378: PUSH
4379: LD_INT 4
4381: PUSH
4382: EMPTY
4383: LIST
4384: LIST
4385: LIST
4386: LIST
4387: LIST
4388: PUSH
4389: EMPTY
4390: LIST
4391: LIST
4392: LIST
4393: LIST
4394: ST_TO_ADDR
// experience := [ 1 , 2 , 4 , 5 ] ;
4395: LD_ADDR_EXP 20
4399: PUSH
4400: LD_INT 1
4402: PUSH
4403: LD_INT 2
4405: PUSH
4406: LD_INT 4
4408: PUSH
4409: LD_INT 5
4411: PUSH
4412: EMPTY
4413: LIST
4414: LIST
4415: LIST
4416: LIST
4417: ST_TO_ADDR
// starting_resources := [ [ 0 , 0 , 0 ] , [ 50 , 30 , 0 ] , [ 100 , 30 , 0 ] , [ 150 , 50 , 0 ] ] ;
4418: LD_ADDR_EXP 21
4422: PUSH
4423: LD_INT 0
4425: PUSH
4426: LD_INT 0
4428: PUSH
4429: LD_INT 0
4431: PUSH
4432: EMPTY
4433: LIST
4434: LIST
4435: LIST
4436: PUSH
4437: LD_INT 50
4439: PUSH
4440: LD_INT 30
4442: PUSH
4443: LD_INT 0
4445: PUSH
4446: EMPTY
4447: LIST
4448: LIST
4449: LIST
4450: PUSH
4451: LD_INT 100
4453: PUSH
4454: LD_INT 30
4456: PUSH
4457: LD_INT 0
4459: PUSH
4460: EMPTY
4461: LIST
4462: LIST
4463: LIST
4464: PUSH
4465: LD_INT 150
4467: PUSH
4468: LD_INT 50
4470: PUSH
4471: LD_INT 0
4473: PUSH
4474: EMPTY
4475: LIST
4476: LIST
4477: LIST
4478: PUSH
4479: EMPTY
4480: LIST
4481: LIST
4482: LIST
4483: LIST
4484: ST_TO_ADDR
// crate_spawn_rate := [ 2 2$00 , 1 1$30 , 1 1$00 , 0 0$30 ] ;
4485: LD_ADDR_EXP 22
4489: PUSH
4490: LD_INT 4200
4492: PUSH
4493: LD_INT 3150
4495: PUSH
4496: LD_INT 2100
4498: PUSH
4499: LD_INT 1050
4501: PUSH
4502: EMPTY
4503: LIST
4504: LIST
4505: LIST
4506: LIST
4507: ST_TO_ADDR
// people_spawn_rate := [ 0 , 15 15$0 , 10 10$0 , 5 5$0 ] ;
4508: LD_ADDR_EXP 23
4512: PUSH
4513: LD_INT 0
4515: PUSH
4516: LD_INT 31500
4518: PUSH
4519: LD_INT 21000
4521: PUSH
4522: LD_INT 10500
4524: PUSH
4525: EMPTY
4526: LIST
4527: LIST
4528: LIST
4529: LIST
4530: ST_TO_ADDR
// spawn_fluctuation := [ 0 , 5 5$0 , 2 2$30 ] ;
4531: LD_ADDR_EXP 24
4535: PUSH
4536: LD_INT 0
4538: PUSH
4539: LD_INT 10500
4541: PUSH
4542: LD_INT 5250
4544: PUSH
4545: EMPTY
4546: LIST
4547: LIST
4548: LIST
4549: ST_TO_ADDR
// oil_abundance := [ 4 , 6 , 8 ] ;
4550: LD_ADDR_EXP 25
4554: PUSH
4555: LD_INT 4
4557: PUSH
4558: LD_INT 6
4560: PUSH
4561: LD_INT 8
4563: PUSH
4564: EMPTY
4565: LIST
4566: LIST
4567: LIST
4568: ST_TO_ADDR
// sib_abundance := [ 2 , 3 , 4 ] ;
4569: LD_ADDR_EXP 26
4573: PUSH
4574: LD_INT 2
4576: PUSH
4577: LD_INT 3
4579: PUSH
4580: LD_INT 4
4582: PUSH
4583: EMPTY
4584: LIST
4585: LIST
4586: LIST
4587: ST_TO_ADDR
// victory_cond := [ 0 , 400 , 800 , 1200 ] ;
4588: LD_ADDR_EXP 27
4592: PUSH
4593: LD_INT 0
4595: PUSH
4596: LD_INT 400
4598: PUSH
4599: LD_INT 800
4601: PUSH
4602: LD_INT 1200
4604: PUSH
4605: EMPTY
4606: LIST
4607: LIST
4608: LIST
4609: LIST
4610: ST_TO_ADDR
// reinforce_cost := [ 1 , 2 , 3 , 4 ] ;
4611: LD_ADDR_EXP 28
4615: PUSH
4616: LD_INT 1
4618: PUSH
4619: LD_INT 2
4621: PUSH
4622: LD_INT 3
4624: PUSH
4625: LD_INT 4
4627: PUSH
4628: EMPTY
4629: LIST
4630: LIST
4631: LIST
4632: LIST
4633: ST_TO_ADDR
// cost_per_human := [ 50 , 70 , 100 , 150 ] ;
4634: LD_ADDR_EXP 54
4638: PUSH
4639: LD_INT 50
4641: PUSH
4642: LD_INT 70
4644: PUSH
4645: LD_INT 100
4647: PUSH
4648: LD_INT 150
4650: PUSH
4651: EMPTY
4652: LIST
4653: LIST
4654: LIST
4655: LIST
4656: ST_TO_ADDR
// cost_per_upgrade := [ [ [ 70 , 30 , 0 ] , [ 100 , 50 , 0 ] , [ 150 , 50 , 0 ] , [ 200 , 100 , 0 ] ] , [ [ 100 , 30 , 0 ] , [ 150 , 50 , 0 ] , [ 200 , 50 , 0 ] , [ 250 , 100 , 0 ] ] , [ [ 130 , 30 , 10 ] , [ 200 , 50 , 20 ] , [ 250 , 50 , 20 ] , [ 300 , 100 , 50 ] ] , [ [ 150 , 0 , 30 ] , [ 250 , 0 , 50 ] , [ 300 , 0 , 70 ] , [ 350 , 0 , 100 ] ] ] ;
4657: LD_ADDR_EXP 55
4661: PUSH
4662: LD_INT 70
4664: PUSH
4665: LD_INT 30
4667: PUSH
4668: LD_INT 0
4670: PUSH
4671: EMPTY
4672: LIST
4673: LIST
4674: LIST
4675: PUSH
4676: LD_INT 100
4678: PUSH
4679: LD_INT 50
4681: PUSH
4682: LD_INT 0
4684: PUSH
4685: EMPTY
4686: LIST
4687: LIST
4688: LIST
4689: PUSH
4690: LD_INT 150
4692: PUSH
4693: LD_INT 50
4695: PUSH
4696: LD_INT 0
4698: PUSH
4699: EMPTY
4700: LIST
4701: LIST
4702: LIST
4703: PUSH
4704: LD_INT 200
4706: PUSH
4707: LD_INT 100
4709: PUSH
4710: LD_INT 0
4712: PUSH
4713: EMPTY
4714: LIST
4715: LIST
4716: LIST
4717: PUSH
4718: EMPTY
4719: LIST
4720: LIST
4721: LIST
4722: LIST
4723: PUSH
4724: LD_INT 100
4726: PUSH
4727: LD_INT 30
4729: PUSH
4730: LD_INT 0
4732: PUSH
4733: EMPTY
4734: LIST
4735: LIST
4736: LIST
4737: PUSH
4738: LD_INT 150
4740: PUSH
4741: LD_INT 50
4743: PUSH
4744: LD_INT 0
4746: PUSH
4747: EMPTY
4748: LIST
4749: LIST
4750: LIST
4751: PUSH
4752: LD_INT 200
4754: PUSH
4755: LD_INT 50
4757: PUSH
4758: LD_INT 0
4760: PUSH
4761: EMPTY
4762: LIST
4763: LIST
4764: LIST
4765: PUSH
4766: LD_INT 250
4768: PUSH
4769: LD_INT 100
4771: PUSH
4772: LD_INT 0
4774: PUSH
4775: EMPTY
4776: LIST
4777: LIST
4778: LIST
4779: PUSH
4780: EMPTY
4781: LIST
4782: LIST
4783: LIST
4784: LIST
4785: PUSH
4786: LD_INT 130
4788: PUSH
4789: LD_INT 30
4791: PUSH
4792: LD_INT 10
4794: PUSH
4795: EMPTY
4796: LIST
4797: LIST
4798: LIST
4799: PUSH
4800: LD_INT 200
4802: PUSH
4803: LD_INT 50
4805: PUSH
4806: LD_INT 20
4808: PUSH
4809: EMPTY
4810: LIST
4811: LIST
4812: LIST
4813: PUSH
4814: LD_INT 250
4816: PUSH
4817: LD_INT 50
4819: PUSH
4820: LD_INT 20
4822: PUSH
4823: EMPTY
4824: LIST
4825: LIST
4826: LIST
4827: PUSH
4828: LD_INT 300
4830: PUSH
4831: LD_INT 100
4833: PUSH
4834: LD_INT 50
4836: PUSH
4837: EMPTY
4838: LIST
4839: LIST
4840: LIST
4841: PUSH
4842: EMPTY
4843: LIST
4844: LIST
4845: LIST
4846: LIST
4847: PUSH
4848: LD_INT 150
4850: PUSH
4851: LD_INT 0
4853: PUSH
4854: LD_INT 30
4856: PUSH
4857: EMPTY
4858: LIST
4859: LIST
4860: LIST
4861: PUSH
4862: LD_INT 250
4864: PUSH
4865: LD_INT 0
4867: PUSH
4868: LD_INT 50
4870: PUSH
4871: EMPTY
4872: LIST
4873: LIST
4874: LIST
4875: PUSH
4876: LD_INT 300
4878: PUSH
4879: LD_INT 0
4881: PUSH
4882: LD_INT 70
4884: PUSH
4885: EMPTY
4886: LIST
4887: LIST
4888: LIST
4889: PUSH
4890: LD_INT 350
4892: PUSH
4893: LD_INT 0
4895: PUSH
4896: LD_INT 100
4898: PUSH
4899: EMPTY
4900: LIST
4901: LIST
4902: LIST
4903: PUSH
4904: EMPTY
4905: LIST
4906: LIST
4907: LIST
4908: LIST
4909: PUSH
4910: EMPTY
4911: LIST
4912: LIST
4913: LIST
4914: LIST
4915: ST_TO_ADDR
// available_oil_deposits := [ [ [ [ 12 , 17 ] , [ 317 , 242 ] ] , [ [ 46 , 47 ] , [ 283 , 211 ] ] , [ [ 34 , 12 ] , [ 295 , 247 ] ] , [ [ 72 , 48 ] , [ 257 , 211 ] ] , [ [ 95 , 78 ] , [ 235 , 182 ] ] ] , [ [ [ 89 , 28 ] , [ 241 , 232 ] ] , [ [ 118 , 41 ] , [ 211 , 218 ] ] , [ [ 125 , 7 ] , [ 203 , 252 ] ] , [ [ 166 , 80 ] , [ 163 , 179 ] ] ] , [ [ [ 192 , 57 ] , [ 137 , 202 ] ] , [ [ 197 , 6 ] , [ 150 , 253 ] ] , [ [ 214 , 66 ] , [ 115 , 192 ] ] , [ [ 208 , 25 ] , [ 121 , 234 ] ] , [ [ 242 , 89 ] , [ 87 , 170 ] ] ] ] ;
4916: LD_ADDR_EXP 32
4920: PUSH
4921: LD_INT 12
4923: PUSH
4924: LD_INT 17
4926: PUSH
4927: EMPTY
4928: LIST
4929: LIST
4930: PUSH
4931: LD_INT 317
4933: PUSH
4934: LD_INT 242
4936: PUSH
4937: EMPTY
4938: LIST
4939: LIST
4940: PUSH
4941: EMPTY
4942: LIST
4943: LIST
4944: PUSH
4945: LD_INT 46
4947: PUSH
4948: LD_INT 47
4950: PUSH
4951: EMPTY
4952: LIST
4953: LIST
4954: PUSH
4955: LD_INT 283
4957: PUSH
4958: LD_INT 211
4960: PUSH
4961: EMPTY
4962: LIST
4963: LIST
4964: PUSH
4965: EMPTY
4966: LIST
4967: LIST
4968: PUSH
4969: LD_INT 34
4971: PUSH
4972: LD_INT 12
4974: PUSH
4975: EMPTY
4976: LIST
4977: LIST
4978: PUSH
4979: LD_INT 295
4981: PUSH
4982: LD_INT 247
4984: PUSH
4985: EMPTY
4986: LIST
4987: LIST
4988: PUSH
4989: EMPTY
4990: LIST
4991: LIST
4992: PUSH
4993: LD_INT 72
4995: PUSH
4996: LD_INT 48
4998: PUSH
4999: EMPTY
5000: LIST
5001: LIST
5002: PUSH
5003: LD_INT 257
5005: PUSH
5006: LD_INT 211
5008: PUSH
5009: EMPTY
5010: LIST
5011: LIST
5012: PUSH
5013: EMPTY
5014: LIST
5015: LIST
5016: PUSH
5017: LD_INT 95
5019: PUSH
5020: LD_INT 78
5022: PUSH
5023: EMPTY
5024: LIST
5025: LIST
5026: PUSH
5027: LD_INT 235
5029: PUSH
5030: LD_INT 182
5032: PUSH
5033: EMPTY
5034: LIST
5035: LIST
5036: PUSH
5037: EMPTY
5038: LIST
5039: LIST
5040: PUSH
5041: EMPTY
5042: LIST
5043: LIST
5044: LIST
5045: LIST
5046: LIST
5047: PUSH
5048: LD_INT 89
5050: PUSH
5051: LD_INT 28
5053: PUSH
5054: EMPTY
5055: LIST
5056: LIST
5057: PUSH
5058: LD_INT 241
5060: PUSH
5061: LD_INT 232
5063: PUSH
5064: EMPTY
5065: LIST
5066: LIST
5067: PUSH
5068: EMPTY
5069: LIST
5070: LIST
5071: PUSH
5072: LD_INT 118
5074: PUSH
5075: LD_INT 41
5077: PUSH
5078: EMPTY
5079: LIST
5080: LIST
5081: PUSH
5082: LD_INT 211
5084: PUSH
5085: LD_INT 218
5087: PUSH
5088: EMPTY
5089: LIST
5090: LIST
5091: PUSH
5092: EMPTY
5093: LIST
5094: LIST
5095: PUSH
5096: LD_INT 125
5098: PUSH
5099: LD_INT 7
5101: PUSH
5102: EMPTY
5103: LIST
5104: LIST
5105: PUSH
5106: LD_INT 203
5108: PUSH
5109: LD_INT 252
5111: PUSH
5112: EMPTY
5113: LIST
5114: LIST
5115: PUSH
5116: EMPTY
5117: LIST
5118: LIST
5119: PUSH
5120: LD_INT 166
5122: PUSH
5123: LD_INT 80
5125: PUSH
5126: EMPTY
5127: LIST
5128: LIST
5129: PUSH
5130: LD_INT 163
5132: PUSH
5133: LD_INT 179
5135: PUSH
5136: EMPTY
5137: LIST
5138: LIST
5139: PUSH
5140: EMPTY
5141: LIST
5142: LIST
5143: PUSH
5144: EMPTY
5145: LIST
5146: LIST
5147: LIST
5148: LIST
5149: PUSH
5150: LD_INT 192
5152: PUSH
5153: LD_INT 57
5155: PUSH
5156: EMPTY
5157: LIST
5158: LIST
5159: PUSH
5160: LD_INT 137
5162: PUSH
5163: LD_INT 202
5165: PUSH
5166: EMPTY
5167: LIST
5168: LIST
5169: PUSH
5170: EMPTY
5171: LIST
5172: LIST
5173: PUSH
5174: LD_INT 197
5176: PUSH
5177: LD_INT 6
5179: PUSH
5180: EMPTY
5181: LIST
5182: LIST
5183: PUSH
5184: LD_INT 150
5186: PUSH
5187: LD_INT 253
5189: PUSH
5190: EMPTY
5191: LIST
5192: LIST
5193: PUSH
5194: EMPTY
5195: LIST
5196: LIST
5197: PUSH
5198: LD_INT 214
5200: PUSH
5201: LD_INT 66
5203: PUSH
5204: EMPTY
5205: LIST
5206: LIST
5207: PUSH
5208: LD_INT 115
5210: PUSH
5211: LD_INT 192
5213: PUSH
5214: EMPTY
5215: LIST
5216: LIST
5217: PUSH
5218: EMPTY
5219: LIST
5220: LIST
5221: PUSH
5222: LD_INT 208
5224: PUSH
5225: LD_INT 25
5227: PUSH
5228: EMPTY
5229: LIST
5230: LIST
5231: PUSH
5232: LD_INT 121
5234: PUSH
5235: LD_INT 234
5237: PUSH
5238: EMPTY
5239: LIST
5240: LIST
5241: PUSH
5242: EMPTY
5243: LIST
5244: LIST
5245: PUSH
5246: LD_INT 242
5248: PUSH
5249: LD_INT 89
5251: PUSH
5252: EMPTY
5253: LIST
5254: LIST
5255: PUSH
5256: LD_INT 87
5258: PUSH
5259: LD_INT 170
5261: PUSH
5262: EMPTY
5263: LIST
5264: LIST
5265: PUSH
5266: EMPTY
5267: LIST
5268: LIST
5269: PUSH
5270: EMPTY
5271: LIST
5272: LIST
5273: LIST
5274: LIST
5275: LIST
5276: PUSH
5277: EMPTY
5278: LIST
5279: LIST
5280: LIST
5281: ST_TO_ADDR
// available_siberite_deposits := [ [ [ [ 61 , 103 ] , [ 268 , 156 ] ] , [ [ 100 , 115 ] , [ 229 , 144 ] ] , [ [ 128 , 105 ] , [ 201 , 154 ] ] , [ [ 113 , 75 ] , [ 216 , 184 ] ] ] , [ [ [ 167 , 143 ] , [ 162 , 116 ] ] , [ [ 129 , 157 ] , [ 200 , 102 ] ] ] ] ;
5282: LD_ADDR_EXP 33
5286: PUSH
5287: LD_INT 61
5289: PUSH
5290: LD_INT 103
5292: PUSH
5293: EMPTY
5294: LIST
5295: LIST
5296: PUSH
5297: LD_INT 268
5299: PUSH
5300: LD_INT 156
5302: PUSH
5303: EMPTY
5304: LIST
5305: LIST
5306: PUSH
5307: EMPTY
5308: LIST
5309: LIST
5310: PUSH
5311: LD_INT 100
5313: PUSH
5314: LD_INT 115
5316: PUSH
5317: EMPTY
5318: LIST
5319: LIST
5320: PUSH
5321: LD_INT 229
5323: PUSH
5324: LD_INT 144
5326: PUSH
5327: EMPTY
5328: LIST
5329: LIST
5330: PUSH
5331: EMPTY
5332: LIST
5333: LIST
5334: PUSH
5335: LD_INT 128
5337: PUSH
5338: LD_INT 105
5340: PUSH
5341: EMPTY
5342: LIST
5343: LIST
5344: PUSH
5345: LD_INT 201
5347: PUSH
5348: LD_INT 154
5350: PUSH
5351: EMPTY
5352: LIST
5353: LIST
5354: PUSH
5355: EMPTY
5356: LIST
5357: LIST
5358: PUSH
5359: LD_INT 113
5361: PUSH
5362: LD_INT 75
5364: PUSH
5365: EMPTY
5366: LIST
5367: LIST
5368: PUSH
5369: LD_INT 216
5371: PUSH
5372: LD_INT 184
5374: PUSH
5375: EMPTY
5376: LIST
5377: LIST
5378: PUSH
5379: EMPTY
5380: LIST
5381: LIST
5382: PUSH
5383: EMPTY
5384: LIST
5385: LIST
5386: LIST
5387: LIST
5388: PUSH
5389: LD_INT 167
5391: PUSH
5392: LD_INT 143
5394: PUSH
5395: EMPTY
5396: LIST
5397: LIST
5398: PUSH
5399: LD_INT 162
5401: PUSH
5402: LD_INT 116
5404: PUSH
5405: EMPTY
5406: LIST
5407: LIST
5408: PUSH
5409: EMPTY
5410: LIST
5411: LIST
5412: PUSH
5413: LD_INT 129
5415: PUSH
5416: LD_INT 157
5418: PUSH
5419: EMPTY
5420: LIST
5421: LIST
5422: PUSH
5423: LD_INT 200
5425: PUSH
5426: LD_INT 102
5428: PUSH
5429: EMPTY
5430: LIST
5431: LIST
5432: PUSH
5433: EMPTY
5434: LIST
5435: LIST
5436: PUSH
5437: EMPTY
5438: LIST
5439: LIST
5440: PUSH
5441: EMPTY
5442: LIST
5443: LIST
5444: ST_TO_ADDR
// position_spawn_direction := [ 2 , 2 , 3 , 3 , 0 , 0 , 5 , 5 ] ;
5445: LD_ADDR_EXP 34
5449: PUSH
5450: LD_INT 2
5452: PUSH
5453: LD_INT 2
5455: PUSH
5456: LD_INT 3
5458: PUSH
5459: LD_INT 3
5461: PUSH
5462: LD_INT 0
5464: PUSH
5465: LD_INT 0
5467: PUSH
5468: LD_INT 5
5470: PUSH
5471: LD_INT 5
5473: PUSH
5474: EMPTY
5475: LIST
5476: LIST
5477: LIST
5478: LIST
5479: LIST
5480: LIST
5481: LIST
5482: LIST
5483: ST_TO_ADDR
// position_spawn_area := [ INIT_SpawnNW , INIT_SpawnNW , INIT_SpawnNE , INIT_SpawnNE , INIT_SpawnSW , INIT_SpawnSW , INIT_SpawnSE , INIT_SpawnSE ] ;
5484: LD_ADDR_EXP 35
5488: PUSH
5489: LD_INT 1
5491: PUSH
5492: LD_INT 1
5494: PUSH
5495: LD_INT 2
5497: PUSH
5498: LD_INT 2
5500: PUSH
5501: LD_INT 4
5503: PUSH
5504: LD_INT 4
5506: PUSH
5507: LD_INT 3
5509: PUSH
5510: LD_INT 3
5512: PUSH
5513: EMPTY
5514: LIST
5515: LIST
5516: LIST
5517: LIST
5518: LIST
5519: LIST
5520: LIST
5521: LIST
5522: ST_TO_ADDR
// position_drop_zones := [ [ 1 , 50 , [ CrateDropSW , CrateDropSE , CrateDropNW , CrateDropNE ] ] , [ 2 , 60 , [ CrateDropMidSW , CrateDropMidNE ] , [ CrateDropMidNW , CrateDropMidSE ] ] , [ 3 , 70 , [ CrateDropMidN , CrateDropMidS ] ] ] ;
5523: LD_ADDR_EXP 36
5527: PUSH
5528: LD_INT 1
5530: PUSH
5531: LD_INT 50
5533: PUSH
5534: LD_INT 5
5536: PUSH
5537: LD_INT 6
5539: PUSH
5540: LD_INT 7
5542: PUSH
5543: LD_INT 8
5545: PUSH
5546: EMPTY
5547: LIST
5548: LIST
5549: LIST
5550: LIST
5551: PUSH
5552: EMPTY
5553: LIST
5554: LIST
5555: LIST
5556: PUSH
5557: LD_INT 2
5559: PUSH
5560: LD_INT 60
5562: PUSH
5563: LD_INT 9
5565: PUSH
5566: LD_INT 13
5568: PUSH
5569: EMPTY
5570: LIST
5571: LIST
5572: PUSH
5573: LD_INT 10
5575: PUSH
5576: LD_INT 14
5578: PUSH
5579: EMPTY
5580: LIST
5581: LIST
5582: PUSH
5583: EMPTY
5584: LIST
5585: LIST
5586: LIST
5587: LIST
5588: PUSH
5589: LD_INT 3
5591: PUSH
5592: LD_INT 70
5594: PUSH
5595: LD_INT 11
5597: PUSH
5598: LD_INT 12
5600: PUSH
5601: EMPTY
5602: LIST
5603: LIST
5604: PUSH
5605: EMPTY
5606: LIST
5607: LIST
5608: LIST
5609: PUSH
5610: EMPTY
5611: LIST
5612: LIST
5613: LIST
5614: ST_TO_ADDR
// fluctuation_base_crates := [ 0 0$12 , 0 0$9 , 0 0$6 , 0 0$2 ] ;
5615: LD_ADDR_EXP 37
5619: PUSH
5620: LD_INT 420
5622: PUSH
5623: LD_INT 315
5625: PUSH
5626: LD_INT 210
5628: PUSH
5629: LD_INT 70
5631: PUSH
5632: EMPTY
5633: LIST
5634: LIST
5635: LIST
5636: LIST
5637: ST_TO_ADDR
// fluctuation_base_humans := [ 0 , 1 1$30 , 1 1$00 , 0 0$30 ] ;
5638: LD_ADDR_EXP 38
5642: PUSH
5643: LD_INT 0
5645: PUSH
5646: LD_INT 3150
5648: PUSH
5649: LD_INT 2100
5651: PUSH
5652: LD_INT 1050
5654: PUSH
5655: EMPTY
5656: LIST
5657: LIST
5658: LIST
5659: LIST
5660: ST_TO_ADDR
// fluctuation_modifier_crates := 0 ;
5661: LD_ADDR_EXP 39
5665: PUSH
5666: LD_INT 0
5668: ST_TO_ADDR
// fluctuation_modifier_humans := 0 ;
5669: LD_ADDR_EXP 40
5673: PUSH
5674: LD_INT 0
5676: ST_TO_ADDR
// current_spawn_rate := 0 ;
5677: LD_ADDR_EXP 41
5681: PUSH
5682: LD_INT 0
5684: ST_TO_ADDR
// past_spawn_rate := 0 ;
5685: LD_ADDR_EXP 42
5689: PUSH
5690: LD_INT 0
5692: ST_TO_ADDR
// side_reinforcement_amount := [ 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 ] ;
5693: LD_ADDR_EXP 56
5697: PUSH
5698: LD_INT 1
5700: PUSH
5701: LD_INT 1
5703: PUSH
5704: LD_INT 1
5706: PUSH
5707: LD_INT 1
5709: PUSH
5710: LD_INT 1
5712: PUSH
5713: LD_INT 1
5715: PUSH
5716: LD_INT 1
5718: PUSH
5719: LD_INT 1
5721: PUSH
5722: EMPTY
5723: LIST
5724: LIST
5725: LIST
5726: LIST
5727: LIST
5728: LIST
5729: LIST
5730: LIST
5731: ST_TO_ADDR
// side_reinforcement_cap := [ 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 ] ;
5732: LD_ADDR_EXP 57
5736: PUSH
5737: LD_INT 3
5739: PUSH
5740: LD_INT 3
5742: PUSH
5743: LD_INT 3
5745: PUSH
5746: LD_INT 3
5748: PUSH
5749: LD_INT 3
5751: PUSH
5752: LD_INT 3
5754: PUSH
5755: LD_INT 3
5757: PUSH
5758: LD_INT 3
5760: PUSH
5761: EMPTY
5762: LIST
5763: LIST
5764: LIST
5765: LIST
5766: LIST
5767: LIST
5768: LIST
5769: LIST
5770: ST_TO_ADDR
// team_transfer_zones := [ [ TransferNW , TransferNE ] , [ TransferSW , TransferSE ] ] ;
5771: LD_ADDR_EXP 61
5775: PUSH
5776: LD_INT 15
5778: PUSH
5779: LD_INT 16
5781: PUSH
5782: EMPTY
5783: LIST
5784: LIST
5785: PUSH
5786: LD_INT 18
5788: PUSH
5789: LD_INT 17
5791: PUSH
5792: EMPTY
5793: LIST
5794: LIST
5795: PUSH
5796: EMPTY
5797: LIST
5798: LIST
5799: ST_TO_ADDR
// transfer_zone_direction := [ [ 3 , 4 ] , [ 1 , 5 ] ] ;
5800: LD_ADDR_EXP 62
5804: PUSH
5805: LD_INT 3
5807: PUSH
5808: LD_INT 4
5810: PUSH
5811: EMPTY
5812: LIST
5813: LIST
5814: PUSH
5815: LD_INT 1
5817: PUSH
5818: LD_INT 5
5820: PUSH
5821: EMPTY
5822: LIST
5823: LIST
5824: PUSH
5825: EMPTY
5826: LIST
5827: LIST
5828: ST_TO_ADDR
// side_chosen_zone := [ 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 ] ;
5829: LD_ADDR_EXP 63
5833: PUSH
5834: LD_INT 1
5836: PUSH
5837: LD_INT 1
5839: PUSH
5840: LD_INT 1
5842: PUSH
5843: LD_INT 1
5845: PUSH
5846: LD_INT 1
5848: PUSH
5849: LD_INT 1
5851: PUSH
5852: LD_INT 1
5854: PUSH
5855: LD_INT 1
5857: PUSH
5858: EMPTY
5859: LIST
5860: LIST
5861: LIST
5862: LIST
5863: LIST
5864: LIST
5865: LIST
5866: LIST
5867: ST_TO_ADDR
// side_zone_locked := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5868: LD_ADDR_EXP 64
5872: PUSH
5873: LD_INT 0
5875: PUSH
5876: LD_INT 0
5878: PUSH
5879: LD_INT 0
5881: PUSH
5882: LD_INT 0
5884: PUSH
5885: LD_INT 0
5887: PUSH
5888: LD_INT 0
5890: PUSH
5891: LD_INT 0
5893: PUSH
5894: LD_INT 0
5896: PUSH
5897: EMPTY
5898: LIST
5899: LIST
5900: LIST
5901: LIST
5902: LIST
5903: LIST
5904: LIST
5905: LIST
5906: ST_TO_ADDR
// side_pending_order := [ [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] ] ;
5907: LD_ADDR_EXP 58
5911: PUSH
5912: LD_INT 0
5914: PUSH
5915: LD_INT 0
5917: PUSH
5918: LD_INT 0
5920: PUSH
5921: EMPTY
5922: LIST
5923: LIST
5924: LIST
5925: PUSH
5926: LD_INT 0
5928: PUSH
5929: LD_INT 0
5931: PUSH
5932: LD_INT 0
5934: PUSH
5935: EMPTY
5936: LIST
5937: LIST
5938: LIST
5939: PUSH
5940: LD_INT 0
5942: PUSH
5943: LD_INT 0
5945: PUSH
5946: LD_INT 0
5948: PUSH
5949: EMPTY
5950: LIST
5951: LIST
5952: LIST
5953: PUSH
5954: LD_INT 0
5956: PUSH
5957: LD_INT 0
5959: PUSH
5960: LD_INT 0
5962: PUSH
5963: EMPTY
5964: LIST
5965: LIST
5966: LIST
5967: PUSH
5968: LD_INT 0
5970: PUSH
5971: LD_INT 0
5973: PUSH
5974: LD_INT 0
5976: PUSH
5977: EMPTY
5978: LIST
5979: LIST
5980: LIST
5981: PUSH
5982: LD_INT 0
5984: PUSH
5985: LD_INT 0
5987: PUSH
5988: LD_INT 0
5990: PUSH
5991: EMPTY
5992: LIST
5993: LIST
5994: LIST
5995: PUSH
5996: LD_INT 0
5998: PUSH
5999: LD_INT 0
6001: PUSH
6002: LD_INT 0
6004: PUSH
6005: EMPTY
6006: LIST
6007: LIST
6008: LIST
6009: PUSH
6010: LD_INT 0
6012: PUSH
6013: LD_INT 0
6015: PUSH
6016: LD_INT 0
6018: PUSH
6019: EMPTY
6020: LIST
6021: LIST
6022: LIST
6023: PUSH
6024: EMPTY
6025: LIST
6026: LIST
6027: LIST
6028: LIST
6029: LIST
6030: LIST
6031: LIST
6032: LIST
6033: ST_TO_ADDR
// side_order_type := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6034: LD_ADDR_EXP 67
6038: PUSH
6039: LD_INT 0
6041: PUSH
6042: LD_INT 0
6044: PUSH
6045: LD_INT 0
6047: PUSH
6048: LD_INT 0
6050: PUSH
6051: LD_INT 0
6053: PUSH
6054: LD_INT 0
6056: PUSH
6057: LD_INT 0
6059: PUSH
6060: LD_INT 0
6062: PUSH
6063: EMPTY
6064: LIST
6065: LIST
6066: LIST
6067: LIST
6068: LIST
6069: LIST
6070: LIST
6071: LIST
6072: ST_TO_ADDR
// side_units_outside := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
6073: LD_ADDR_EXP 66
6077: PUSH
6078: EMPTY
6079: PUSH
6080: EMPTY
6081: PUSH
6082: EMPTY
6083: PUSH
6084: EMPTY
6085: PUSH
6086: EMPTY
6087: PUSH
6088: EMPTY
6089: PUSH
6090: EMPTY
6091: PUSH
6092: EMPTY
6093: PUSH
6094: EMPTY
6095: LIST
6096: LIST
6097: LIST
6098: LIST
6099: LIST
6100: LIST
6101: LIST
6102: LIST
6103: ST_TO_ADDR
// side_transfer_pending := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6104: LD_ADDR_EXP 69
6108: PUSH
6109: LD_INT 0
6111: PUSH
6112: LD_INT 0
6114: PUSH
6115: LD_INT 0
6117: PUSH
6118: LD_INT 0
6120: PUSH
6121: LD_INT 0
6123: PUSH
6124: LD_INT 0
6126: PUSH
6127: LD_INT 0
6129: PUSH
6130: LD_INT 0
6132: PUSH
6133: EMPTY
6134: LIST
6135: LIST
6136: LIST
6137: LIST
6138: LIST
6139: LIST
6140: LIST
6141: LIST
6142: ST_TO_ADDR
// side_resources_remaining := [ [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] ] ;
6143: LD_ADDR_EXP 68
6147: PUSH
6148: LD_INT 0
6150: PUSH
6151: LD_INT 0
6153: PUSH
6154: LD_INT 0
6156: PUSH
6157: EMPTY
6158: LIST
6159: LIST
6160: LIST
6161: PUSH
6162: LD_INT 0
6164: PUSH
6165: LD_INT 0
6167: PUSH
6168: LD_INT 0
6170: PUSH
6171: EMPTY
6172: LIST
6173: LIST
6174: LIST
6175: PUSH
6176: LD_INT 0
6178: PUSH
6179: LD_INT 0
6181: PUSH
6182: LD_INT 0
6184: PUSH
6185: EMPTY
6186: LIST
6187: LIST
6188: LIST
6189: PUSH
6190: LD_INT 0
6192: PUSH
6193: LD_INT 0
6195: PUSH
6196: LD_INT 0
6198: PUSH
6199: EMPTY
6200: LIST
6201: LIST
6202: LIST
6203: PUSH
6204: LD_INT 0
6206: PUSH
6207: LD_INT 0
6209: PUSH
6210: LD_INT 0
6212: PUSH
6213: EMPTY
6214: LIST
6215: LIST
6216: LIST
6217: PUSH
6218: LD_INT 0
6220: PUSH
6221: LD_INT 0
6223: PUSH
6224: LD_INT 0
6226: PUSH
6227: EMPTY
6228: LIST
6229: LIST
6230: LIST
6231: PUSH
6232: LD_INT 0
6234: PUSH
6235: LD_INT 0
6237: PUSH
6238: LD_INT 0
6240: PUSH
6241: EMPTY
6242: LIST
6243: LIST
6244: LIST
6245: PUSH
6246: LD_INT 0
6248: PUSH
6249: LD_INT 0
6251: PUSH
6252: LD_INT 0
6254: PUSH
6255: EMPTY
6256: LIST
6257: LIST
6258: LIST
6259: PUSH
6260: EMPTY
6261: LIST
6262: LIST
6263: LIST
6264: LIST
6265: LIST
6266: LIST
6267: LIST
6268: LIST
6269: ST_TO_ADDR
// side_resources_delivered := [ [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] ] ;
6270: LD_ADDR_EXP 59
6274: PUSH
6275: LD_INT 0
6277: PUSH
6278: LD_INT 0
6280: PUSH
6281: LD_INT 0
6283: PUSH
6284: EMPTY
6285: LIST
6286: LIST
6287: LIST
6288: PUSH
6289: LD_INT 0
6291: PUSH
6292: LD_INT 0
6294: PUSH
6295: LD_INT 0
6297: PUSH
6298: EMPTY
6299: LIST
6300: LIST
6301: LIST
6302: PUSH
6303: LD_INT 0
6305: PUSH
6306: LD_INT 0
6308: PUSH
6309: LD_INT 0
6311: PUSH
6312: EMPTY
6313: LIST
6314: LIST
6315: LIST
6316: PUSH
6317: LD_INT 0
6319: PUSH
6320: LD_INT 0
6322: PUSH
6323: LD_INT 0
6325: PUSH
6326: EMPTY
6327: LIST
6328: LIST
6329: LIST
6330: PUSH
6331: LD_INT 0
6333: PUSH
6334: LD_INT 0
6336: PUSH
6337: LD_INT 0
6339: PUSH
6340: EMPTY
6341: LIST
6342: LIST
6343: LIST
6344: PUSH
6345: LD_INT 0
6347: PUSH
6348: LD_INT 0
6350: PUSH
6351: LD_INT 0
6353: PUSH
6354: EMPTY
6355: LIST
6356: LIST
6357: LIST
6358: PUSH
6359: LD_INT 0
6361: PUSH
6362: LD_INT 0
6364: PUSH
6365: LD_INT 0
6367: PUSH
6368: EMPTY
6369: LIST
6370: LIST
6371: LIST
6372: PUSH
6373: LD_INT 0
6375: PUSH
6376: LD_INT 0
6378: PUSH
6379: LD_INT 0
6381: PUSH
6382: EMPTY
6383: LIST
6384: LIST
6385: LIST
6386: PUSH
6387: EMPTY
6388: LIST
6389: LIST
6390: LIST
6391: LIST
6392: LIST
6393: LIST
6394: LIST
6395: LIST
6396: ST_TO_ADDR
// end ; end_of_file
6397: LD_VAR 0 1
6401: RET
// export function length ( _array ) ; var _x ; begin
6402: LD_INT 0
6404: PPUSH
6405: PPUSH
// Result := 0 ;
6406: LD_ADDR_VAR 0 2
6410: PUSH
6411: LD_INT 0
6413: ST_TO_ADDR
// for _x in _array do
6414: LD_ADDR_VAR 0 3
6418: PUSH
6419: LD_VAR 0 1
6423: PUSH
6424: FOR_IN
6425: IFFALSE 6443
// begin Result := Result + 1 ;
6427: LD_ADDR_VAR 0 2
6431: PUSH
6432: LD_VAR 0 2
6436: PUSH
6437: LD_INT 1
6439: PLUS
6440: ST_TO_ADDR
// end ;
6441: GO 6424
6443: POP
6444: POP
// end ;
6445: LD_VAR 0 2
6449: RET
// export function mp_sides_comps ; var c , i ; begin
6450: LD_INT 0
6452: PPUSH
6453: PPUSH
6454: PPUSH
// c = [ ] ;
6455: LD_ADDR_VAR 0 2
6459: PUSH
6460: EMPTY
6461: ST_TO_ADDR
// for i = 1 to 8 do
6462: LD_ADDR_VAR 0 3
6466: PUSH
6467: DOUBLE
6468: LD_INT 1
6470: DEC
6471: ST_TO_ADDR
6472: LD_INT 8
6474: PUSH
6475: FOR_TO
6476: IFFALSE 6501
// c = c ^ Multiplayer_GetPlayerIsComp ( i ) ;
6478: LD_ADDR_VAR 0 2
6482: PUSH
6483: LD_VAR 0 2
6487: PUSH
6488: LD_VAR 0 3
6492: PPUSH
6493: CALL_OW 532
6497: ADD
6498: ST_TO_ADDR
6499: GO 6475
6501: POP
6502: POP
// result = c ;
6503: LD_ADDR_VAR 0 1
6507: PUSH
6508: LD_VAR 0 2
6512: ST_TO_ADDR
// end ;
6513: LD_VAR 0 1
6517: RET
// export function PrepareCharacters ( side , direction , loadout ) ; begin
6518: LD_INT 0
6520: PPUSH
// InitHc ( ) ;
6521: CALL_OW 19
// InitUc ( ) ;
6525: CALL_OW 18
// if loadout [ 1 ] and Multiplayer then
6529: LD_VAR 0 3
6533: PUSH
6534: LD_INT 1
6536: ARRAY
6537: PUSH
6538: LD_OWVAR 4
6542: AND
6543: IFFALSE 6599
// begin hc_name := mp_sides_players_names [ side ] ;
6545: LD_ADDR_OWVAR 26
6549: PUSH
6550: LD_OWVAR 19
6554: PUSH
6555: LD_VAR 0 1
6559: ARRAY
6560: ST_TO_ADDR
// hc_gallery := MULTIAVATARS ;
6561: LD_ADDR_OWVAR 33
6565: PUSH
6566: LD_STRING MULTIAVATARS
6568: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( side ) ;
6569: LD_ADDR_OWVAR 34
6573: PUSH
6574: LD_VAR 0 1
6578: PPUSH
6579: CALL_OW 525
6583: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( side ) ;
6584: LD_ADDR_OWVAR 27
6588: PUSH
6589: LD_VAR 0 1
6593: PPUSH
6594: CALL_OW 526
6598: ST_TO_ADDR
// end ; uc_side := side ;
6599: LD_ADDR_OWVAR 20
6603: PUSH
6604: LD_VAR 0 1
6608: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
6609: LD_ADDR_OWVAR 21
6613: PUSH
6614: LD_EXP 3
6618: PUSH
6619: LD_VAR 0 1
6623: ARRAY
6624: ST_TO_ADDR
// uc_direction := direction [ Side_Positions [ side ] ] ;
6625: LD_ADDR_OWVAR 24
6629: PUSH
6630: LD_VAR 0 2
6634: PUSH
6635: LD_EXP 2
6639: PUSH
6640: LD_VAR 0 1
6644: ARRAY
6645: ARRAY
6646: ST_TO_ADDR
// hc_class := loadout [ 2 ] ;
6647: LD_ADDR_OWVAR 28
6651: PUSH
6652: LD_VAR 0 3
6656: PUSH
6657: LD_INT 2
6659: ARRAY
6660: ST_TO_ADDR
// hc_attr := loadout [ 3 ] ;
6661: LD_ADDR_OWVAR 29
6665: PUSH
6666: LD_VAR 0 3
6670: PUSH
6671: LD_INT 3
6673: ARRAY
6674: ST_TO_ADDR
// hc_basic_skills := loadout [ 4 ] ;
6675: LD_ADDR_OWVAR 30
6679: PUSH
6680: LD_VAR 0 3
6684: PUSH
6685: LD_INT 4
6687: ARRAY
6688: ST_TO_ADDR
// hc_skills := loadout [ 5 ] ;
6689: LD_ADDR_OWVAR 31
6693: PUSH
6694: LD_VAR 0 3
6698: PUSH
6699: LD_INT 5
6701: ARRAY
6702: ST_TO_ADDR
// hc_importance := loadout [ 6 ] ;
6703: LD_ADDR_OWVAR 32
6707: PUSH
6708: LD_VAR 0 3
6712: PUSH
6713: LD_INT 6
6715: ARRAY
6716: ST_TO_ADDR
// Result := CreateHuman ;
6717: LD_ADDR_VAR 0 4
6721: PUSH
6722: CALL_OW 44
6726: ST_TO_ADDR
// end ;
6727: LD_VAR 0 4
6731: RET
// export function PrepareVehicles ( side , direction ) ; begin
6732: LD_INT 0
6734: PPUSH
// InitUc ( ) ;
6735: CALL_OW 18
// InitVc ( ) ;
6739: CALL_OW 20
// uc_direction := direction [ Side_Positions [ side ] ] ;
6743: LD_ADDR_OWVAR 24
6747: PUSH
6748: LD_VAR 0 2
6752: PUSH
6753: LD_EXP 2
6757: PUSH
6758: LD_VAR 0 1
6762: ARRAY
6763: ARRAY
6764: ST_TO_ADDR
// uc_side := side ;
6765: LD_ADDR_OWVAR 20
6769: PUSH
6770: LD_VAR 0 1
6774: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
6775: LD_ADDR_OWVAR 21
6779: PUSH
6780: LD_EXP 3
6784: PUSH
6785: LD_VAR 0 1
6789: ARRAY
6790: ST_TO_ADDR
// vc_control := 1 ;
6791: LD_ADDR_OWVAR 38
6795: PUSH
6796: LD_INT 1
6798: ST_TO_ADDR
// vc_engine := 1 ;
6799: LD_ADDR_OWVAR 39
6803: PUSH
6804: LD_INT 1
6806: ST_TO_ADDR
// vc_fuel_battery := 85 ;
6807: LD_ADDR_OWVAR 41
6811: PUSH
6812: LD_INT 85
6814: ST_TO_ADDR
// case Side_Nations [ side ] of 1 :
6815: LD_EXP 3
6819: PUSH
6820: LD_VAR 0 1
6824: ARRAY
6825: PUSH
6826: LD_INT 1
6828: DOUBLE
6829: EQUAL
6830: IFTRUE 6834
6832: GO 6853
6834: POP
// begin vc_chassis := 2 ;
6835: LD_ADDR_OWVAR 37
6839: PUSH
6840: LD_INT 2
6842: ST_TO_ADDR
// vc_weapon := 12 ;
6843: LD_ADDR_OWVAR 40
6847: PUSH
6848: LD_INT 12
6850: ST_TO_ADDR
// end ; 2 :
6851: GO 6908
6853: LD_INT 2
6855: DOUBLE
6856: EQUAL
6857: IFTRUE 6861
6859: GO 6880
6861: POP
// begin vc_chassis := 13 ;
6862: LD_ADDR_OWVAR 37
6866: PUSH
6867: LD_INT 13
6869: ST_TO_ADDR
// vc_weapon := 32 ;
6870: LD_ADDR_OWVAR 40
6874: PUSH
6875: LD_INT 32
6877: ST_TO_ADDR
// end ; 3 :
6878: GO 6908
6880: LD_INT 3
6882: DOUBLE
6883: EQUAL
6884: IFTRUE 6888
6886: GO 6907
6888: POP
// begin vc_chassis := 21 ;
6889: LD_ADDR_OWVAR 37
6893: PUSH
6894: LD_INT 21
6896: ST_TO_ADDR
// vc_weapon := 51 ;
6897: LD_ADDR_OWVAR 40
6901: PUSH
6902: LD_INT 51
6904: ST_TO_ADDR
// end ; end ;
6905: GO 6908
6907: POP
// Result := CreateVehicle ;
6908: LD_ADDR_VAR 0 3
6912: PUSH
6913: CALL_OW 45
6917: ST_TO_ADDR
// end ;
6918: LD_VAR 0 3
6922: RET
// export function DidPlayerLose ( side ) ; var depots , colour ; begin
6923: LD_INT 0
6925: PPUSH
6926: PPUSH
6927: PPUSH
// if side_soldiers [ side ] = 0 then
6928: LD_EXP 46
6932: PUSH
6933: LD_VAR 0 1
6937: ARRAY
6938: PUSH
6939: LD_INT 0
6941: EQUAL
6942: IFFALSE 7129
// begin depots := FilterAllUnits ( [ [ f_side , side ] , [ f_type , 3 ] , [ f_btype , 0 ] , [ f_or ] , [ f_btype , 1 ] ] ) ;
6944: LD_ADDR_VAR 0 3
6948: PUSH
6949: LD_INT 22
6951: PUSH
6952: LD_VAR 0 1
6956: PUSH
6957: EMPTY
6958: LIST
6959: LIST
6960: PUSH
6961: LD_INT 21
6963: PUSH
6964: LD_INT 3
6966: PUSH
6967: EMPTY
6968: LIST
6969: LIST
6970: PUSH
6971: LD_INT 30
6973: PUSH
6974: LD_INT 0
6976: PUSH
6977: EMPTY
6978: LIST
6979: LIST
6980: PUSH
6981: LD_INT 2
6983: PUSH
6984: EMPTY
6985: LIST
6986: PUSH
6987: LD_INT 30
6989: PUSH
6990: LD_INT 1
6992: PUSH
6993: EMPTY
6994: LIST
6995: LIST
6996: PUSH
6997: EMPTY
6998: LIST
6999: LIST
7000: LIST
7001: LIST
7002: LIST
7003: PPUSH
7004: CALL_OW 69
7008: ST_TO_ADDR
// if depots + 0 = 0 then
7009: LD_VAR 0 3
7013: PUSH
7014: LD_INT 0
7016: PLUS
7017: PUSH
7018: LD_INT 0
7020: EQUAL
7021: IFFALSE 7129
// begin side_isalive := Replace ( side_isalive , side , 0 ) ;
7023: LD_ADDR_EXP 53
7027: PUSH
7028: LD_EXP 53
7032: PPUSH
7033: LD_VAR 0 1
7037: PPUSH
7038: LD_INT 0
7040: PPUSH
7041: CALL_OW 1
7045: ST_TO_ADDR
// RaiseSailEvent ( 66 ) ;
7046: LD_INT 66
7048: PPUSH
7049: CALL_OW 427
// if side = Your_Side then
7053: LD_VAR 0 1
7057: PUSH
7058: LD_OWVAR 2
7062: EQUAL
7063: IFFALSE 7078
// begin ToLua ( LUA_Lost(); ) ;
7065: LD_STRING LUA_Lost();
7067: PPUSH
7068: CALL_OW 559
// Multiplayer_Loose_Message ( ) ;
7072: CALL_OW 521
// end else
7076: GO 7086
// colour := 0 ;
7078: LD_ADDR_VAR 0 4
7082: PUSH
7083: LD_INT 0
7085: ST_TO_ADDR
// ToLua ( LUA_UpdateSpecInterface( & side & , & colour & , & side_tech_lvl [ side ] & ); ) ;
7086: LD_STRING LUA_UpdateSpecInterface(
7088: PUSH
7089: LD_VAR 0 1
7093: STR
7094: PUSH
7095: LD_STRING ,
7097: STR
7098: PUSH
7099: LD_VAR 0 4
7103: STR
7104: PUSH
7105: LD_STRING ,
7107: STR
7108: PUSH
7109: LD_EXP 31
7113: PUSH
7114: LD_VAR 0 1
7118: ARRAY
7119: STR
7120: PUSH
7121: LD_STRING );
7123: STR
7124: PPUSH
7125: CALL_OW 559
// end ; end ; end ;
7129: LD_VAR 0 2
7133: RET
// export function CheckPlayerPresence ; var i , colour ; begin
7134: LD_INT 0
7136: PPUSH
7137: PPUSH
7138: PPUSH
// for i = 1 to 8 do
7139: LD_ADDR_VAR 0 2
7143: PUSH
7144: DOUBLE
7145: LD_INT 1
7147: DEC
7148: ST_TO_ADDR
7149: LD_INT 8
7151: PUSH
7152: FOR_TO
7153: IFFALSE 7272
// begin if not MultiplayerSideAlive ( i ) and side_isalive [ i ] then
7155: LD_VAR 0 2
7159: PPUSH
7160: CALL_OW 108
7164: NOT
7165: PUSH
7166: LD_EXP 53
7170: PUSH
7171: LD_VAR 0 2
7175: ARRAY
7176: AND
7177: IFFALSE 7270
// begin side_isalive := Replace ( side_isalive , i , 0 ) ;
7179: LD_ADDR_EXP 53
7183: PUSH
7184: LD_EXP 53
7188: PPUSH
7189: LD_VAR 0 2
7193: PPUSH
7194: LD_INT 0
7196: PPUSH
7197: CALL_OW 1
7201: ST_TO_ADDR
// RaiseSailEvent ( 66 ) ;
7202: LD_INT 66
7204: PPUSH
7205: CALL_OW 427
// if Your_Side = 9 then
7209: LD_OWVAR 2
7213: PUSH
7214: LD_INT 9
7216: EQUAL
7217: IFFALSE 7270
// begin colour := 0 ;
7219: LD_ADDR_VAR 0 3
7223: PUSH
7224: LD_INT 0
7226: ST_TO_ADDR
// ToLua ( LUA_UpdateSpecInterface( & i & , & colour & , & side_tech_lvl [ i ] & ); ) ;
7227: LD_STRING LUA_UpdateSpecInterface(
7229: PUSH
7230: LD_VAR 0 2
7234: STR
7235: PUSH
7236: LD_STRING ,
7238: STR
7239: PUSH
7240: LD_VAR 0 3
7244: STR
7245: PUSH
7246: LD_STRING ,
7248: STR
7249: PUSH
7250: LD_EXP 31
7254: PUSH
7255: LD_VAR 0 2
7259: ARRAY
7260: STR
7261: PUSH
7262: LD_STRING );
7264: STR
7265: PPUSH
7266: CALL_OW 559
// end ; end ; end ;
7270: GO 7152
7272: POP
7273: POP
// end ;
7274: LD_VAR 0 1
7278: RET
// function TechUnlock ( techs , side , state ) ; var i ; begin
7279: LD_INT 0
7281: PPUSH
7282: PPUSH
// for i in techs do
7283: LD_ADDR_VAR 0 5
7287: PUSH
7288: LD_VAR 0 1
7292: PUSH
7293: FOR_IN
7294: IFFALSE 7317
// SetTech ( i , side , state ) ;
7296: LD_VAR 0 5
7300: PPUSH
7301: LD_VAR 0 2
7305: PPUSH
7306: LD_VAR 0 3
7310: PPUSH
7311: CALL_OW 322
7315: GO 7293
7317: POP
7318: POP
// end ;
7319: LD_VAR 0 4
7323: RET
// function BuildingUnlock ( buildings , side , state ) ; var i ; begin
7324: LD_INT 0
7326: PPUSH
7327: PPUSH
// for i in buildings do
7328: LD_ADDR_VAR 0 5
7332: PUSH
7333: LD_VAR 0 1
7337: PUSH
7338: FOR_IN
7339: IFFALSE 7362
// SetRestrict ( i , side , state ) ;
7341: LD_VAR 0 5
7345: PPUSH
7346: LD_VAR 0 2
7350: PPUSH
7351: LD_VAR 0 3
7355: PPUSH
7356: CALL_OW 324
7360: GO 7338
7362: POP
7363: POP
// end ;
7364: LD_VAR 0 4
7368: RET
// export function DisableAllTechs ( side ) ; var techs , buildings ; begin
7369: LD_INT 0
7371: PPUSH
7372: PPUSH
7373: PPUSH
// techs := [ 35 , 45 , 46 , 47 , 1 , 2 , 11 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 12 , 13 , 10 , 14 , 15 , 18 , 16 , 17 , 20 , 19 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 36 , 70 , 69 , 39 , 34 , 40 , 71 , 41 , 42 , 43 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 63 , 64 , 65 , 66 , 67 , 68 ] ;
7374: LD_ADDR_VAR 0 3
7378: PUSH
7379: LD_INT 35
7381: PUSH
7382: LD_INT 45
7384: PUSH
7385: LD_INT 46
7387: PUSH
7388: LD_INT 47
7390: PUSH
7391: LD_INT 1
7393: PUSH
7394: LD_INT 2
7396: PUSH
7397: LD_INT 11
7399: PUSH
7400: LD_INT 3
7402: PUSH
7403: LD_INT 4
7405: PUSH
7406: LD_INT 5
7408: PUSH
7409: LD_INT 6
7411: PUSH
7412: LD_INT 7
7414: PUSH
7415: LD_INT 8
7417: PUSH
7418: LD_INT 9
7420: PUSH
7421: LD_INT 12
7423: PUSH
7424: LD_INT 13
7426: PUSH
7427: LD_INT 10
7429: PUSH
7430: LD_INT 14
7432: PUSH
7433: LD_INT 15
7435: PUSH
7436: LD_INT 18
7438: PUSH
7439: LD_INT 16
7441: PUSH
7442: LD_INT 17
7444: PUSH
7445: LD_INT 20
7447: PUSH
7448: LD_INT 19
7450: PUSH
7451: LD_INT 21
7453: PUSH
7454: LD_INT 22
7456: PUSH
7457: LD_INT 23
7459: PUSH
7460: LD_INT 24
7462: PUSH
7463: LD_INT 25
7465: PUSH
7466: LD_INT 26
7468: PUSH
7469: LD_INT 28
7471: PUSH
7472: LD_INT 29
7474: PUSH
7475: LD_INT 30
7477: PUSH
7478: LD_INT 31
7480: PUSH
7481: LD_INT 37
7483: PUSH
7484: LD_INT 38
7486: PUSH
7487: LD_INT 32
7489: PUSH
7490: LD_INT 27
7492: PUSH
7493: LD_INT 33
7495: PUSH
7496: LD_INT 36
7498: PUSH
7499: LD_INT 70
7501: PUSH
7502: LD_INT 69
7504: PUSH
7505: LD_INT 39
7507: PUSH
7508: LD_INT 34
7510: PUSH
7511: LD_INT 40
7513: PUSH
7514: LD_INT 71
7516: PUSH
7517: LD_INT 41
7519: PUSH
7520: LD_INT 42
7522: PUSH
7523: LD_INT 43
7525: PUSH
7526: LD_INT 44
7528: PUSH
7529: LD_INT 48
7531: PUSH
7532: LD_INT 49
7534: PUSH
7535: LD_INT 50
7537: PUSH
7538: LD_INT 51
7540: PUSH
7541: LD_INT 52
7543: PUSH
7544: LD_INT 53
7546: PUSH
7547: LD_INT 54
7549: PUSH
7550: LD_INT 55
7552: PUSH
7553: LD_INT 56
7555: PUSH
7556: LD_INT 57
7558: PUSH
7559: LD_INT 58
7561: PUSH
7562: LD_INT 59
7564: PUSH
7565: LD_INT 60
7567: PUSH
7568: LD_INT 61
7570: PUSH
7571: LD_INT 62
7573: PUSH
7574: LD_INT 63
7576: PUSH
7577: LD_INT 64
7579: PUSH
7580: LD_INT 65
7582: PUSH
7583: LD_INT 66
7585: PUSH
7586: LD_INT 67
7588: PUSH
7589: LD_INT 68
7591: PUSH
7592: EMPTY
7593: LIST
7594: LIST
7595: LIST
7596: LIST
7597: LIST
7598: LIST
7599: LIST
7600: LIST
7601: LIST
7602: LIST
7603: LIST
7604: LIST
7605: LIST
7606: LIST
7607: LIST
7608: LIST
7609: LIST
7610: LIST
7611: LIST
7612: LIST
7613: LIST
7614: LIST
7615: LIST
7616: LIST
7617: LIST
7618: LIST
7619: LIST
7620: LIST
7621: LIST
7622: LIST
7623: LIST
7624: LIST
7625: LIST
7626: LIST
7627: LIST
7628: LIST
7629: LIST
7630: LIST
7631: LIST
7632: LIST
7633: LIST
7634: LIST
7635: LIST
7636: LIST
7637: LIST
7638: LIST
7639: LIST
7640: LIST
7641: LIST
7642: LIST
7643: LIST
7644: LIST
7645: LIST
7646: LIST
7647: LIST
7648: LIST
7649: LIST
7650: LIST
7651: LIST
7652: LIST
7653: LIST
7654: LIST
7655: LIST
7656: LIST
7657: LIST
7658: LIST
7659: LIST
7660: LIST
7661: LIST
7662: LIST
7663: LIST
7664: ST_TO_ADDR
// buildings := [ 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 , 37 , 38 , 39 ] ;
7665: LD_ADDR_VAR 0 4
7669: PUSH
7670: LD_INT 0
7672: PUSH
7673: LD_INT 1
7675: PUSH
7676: LD_INT 2
7678: PUSH
7679: LD_INT 3
7681: PUSH
7682: LD_INT 4
7684: PUSH
7685: LD_INT 5
7687: PUSH
7688: LD_INT 6
7690: PUSH
7691: LD_INT 7
7693: PUSH
7694: LD_INT 8
7696: PUSH
7697: LD_INT 9
7699: PUSH
7700: LD_INT 10
7702: PUSH
7703: LD_INT 11
7705: PUSH
7706: LD_INT 12
7708: PUSH
7709: LD_INT 13
7711: PUSH
7712: LD_INT 14
7714: PUSH
7715: LD_INT 15
7717: PUSH
7718: LD_INT 16
7720: PUSH
7721: LD_INT 17
7723: PUSH
7724: LD_INT 18
7726: PUSH
7727: LD_INT 19
7729: PUSH
7730: LD_INT 20
7732: PUSH
7733: LD_INT 21
7735: PUSH
7736: LD_INT 22
7738: PUSH
7739: LD_INT 23
7741: PUSH
7742: LD_INT 24
7744: PUSH
7745: LD_INT 25
7747: PUSH
7748: LD_INT 26
7750: PUSH
7751: LD_INT 27
7753: PUSH
7754: LD_INT 28
7756: PUSH
7757: LD_INT 29
7759: PUSH
7760: LD_INT 30
7762: PUSH
7763: LD_INT 31
7765: PUSH
7766: LD_INT 32
7768: PUSH
7769: LD_INT 33
7771: PUSH
7772: LD_INT 34
7774: PUSH
7775: LD_INT 35
7777: PUSH
7778: LD_INT 36
7780: PUSH
7781: LD_INT 37
7783: PUSH
7784: LD_INT 38
7786: PUSH
7787: LD_INT 39
7789: PUSH
7790: EMPTY
7791: LIST
7792: LIST
7793: LIST
7794: LIST
7795: LIST
7796: LIST
7797: LIST
7798: LIST
7799: LIST
7800: LIST
7801: LIST
7802: LIST
7803: LIST
7804: LIST
7805: LIST
7806: LIST
7807: LIST
7808: LIST
7809: LIST
7810: LIST
7811: LIST
7812: LIST
7813: LIST
7814: LIST
7815: LIST
7816: LIST
7817: LIST
7818: LIST
7819: LIST
7820: LIST
7821: LIST
7822: LIST
7823: LIST
7824: LIST
7825: LIST
7826: LIST
7827: LIST
7828: LIST
7829: LIST
7830: LIST
7831: ST_TO_ADDR
// TechUnlock ( techs , side , 0 ) ;
7832: LD_VAR 0 3
7836: PPUSH
7837: LD_VAR 0 1
7841: PPUSH
7842: LD_INT 0
7844: PPUSH
7845: CALL 7279 0 3
// BuildingUnlock ( buildings , side , 0 ) ;
7849: LD_VAR 0 4
7853: PPUSH
7854: LD_VAR 0 1
7858: PPUSH
7859: LD_INT 0
7861: PPUSH
7862: CALL 7324 0 3
// end ;
7866: LD_VAR 0 2
7870: RET
// export function TechUpgrade ( tier , nation , side ) ; var techs , buildings , reinforcement , i ; begin
7871: LD_INT 0
7873: PPUSH
7874: PPUSH
7875: PPUSH
7876: PPUSH
7877: PPUSH
// techs := [ ] ;
7878: LD_ADDR_VAR 0 5
7882: PUSH
7883: EMPTY
7884: ST_TO_ADDR
// buildings := [ ] ;
7885: LD_ADDR_VAR 0 6
7889: PUSH
7890: EMPTY
7891: ST_TO_ADDR
// case tier of 0 :
7892: LD_VAR 0 1
7896: PUSH
7897: LD_INT 0
7899: DOUBLE
7900: EQUAL
7901: IFTRUE 7905
7903: GO 8249
7905: POP
// begin case nation of 1 :
7906: LD_VAR 0 2
7910: PUSH
7911: LD_INT 1
7913: DOUBLE
7914: EQUAL
7915: IFTRUE 7919
7917: GO 8024
7919: POP
// begin techs := [ 35 , 45 , 46 , 47 , 69 , 48 , 51 ] ;
7920: LD_ADDR_VAR 0 5
7924: PUSH
7925: LD_INT 35
7927: PUSH
7928: LD_INT 45
7930: PUSH
7931: LD_INT 46
7933: PUSH
7934: LD_INT 47
7936: PUSH
7937: LD_INT 69
7939: PUSH
7940: LD_INT 48
7942: PUSH
7943: LD_INT 51
7945: PUSH
7946: EMPTY
7947: LIST
7948: LIST
7949: LIST
7950: LIST
7951: LIST
7952: LIST
7953: LIST
7954: ST_TO_ADDR
// buildings := [ 0 , 2 , 3 , 4 , 6 , 7 , 8 , 10 , 16 , 19 , 26 , 27 , 29 , 31 , 32 ] ;
7955: LD_ADDR_VAR 0 6
7959: PUSH
7960: LD_INT 0
7962: PUSH
7963: LD_INT 2
7965: PUSH
7966: LD_INT 3
7968: PUSH
7969: LD_INT 4
7971: PUSH
7972: LD_INT 6
7974: PUSH
7975: LD_INT 7
7977: PUSH
7978: LD_INT 8
7980: PUSH
7981: LD_INT 10
7983: PUSH
7984: LD_INT 16
7986: PUSH
7987: LD_INT 19
7989: PUSH
7990: LD_INT 26
7992: PUSH
7993: LD_INT 27
7995: PUSH
7996: LD_INT 29
7998: PUSH
7999: LD_INT 31
8001: PUSH
8002: LD_INT 32
8004: PUSH
8005: EMPTY
8006: LIST
8007: LIST
8008: LIST
8009: LIST
8010: LIST
8011: LIST
8012: LIST
8013: LIST
8014: LIST
8015: LIST
8016: LIST
8017: LIST
8018: LIST
8019: LIST
8020: LIST
8021: ST_TO_ADDR
// end ; 2 :
8022: GO 8239
8024: LD_INT 2
8026: DOUBLE
8027: EQUAL
8028: IFTRUE 8032
8030: GO 8137
8032: POP
// begin techs := [ 35 , 45 , 46 , 47 , 69 , 48 , 51 ] ;
8033: LD_ADDR_VAR 0 5
8037: PUSH
8038: LD_INT 35
8040: PUSH
8041: LD_INT 45
8043: PUSH
8044: LD_INT 46
8046: PUSH
8047: LD_INT 47
8049: PUSH
8050: LD_INT 69
8052: PUSH
8053: LD_INT 48
8055: PUSH
8056: LD_INT 51
8058: PUSH
8059: EMPTY
8060: LIST
8061: LIST
8062: LIST
8063: LIST
8064: LIST
8065: LIST
8066: LIST
8067: ST_TO_ADDR
// buildings := [ 0 , 2 , 3 , 4 , 6 , 7 , 8 , 10 , 16 , 23 , 26 , 27 , 29 , 31 , 32 ] ;
8068: LD_ADDR_VAR 0 6
8072: PUSH
8073: LD_INT 0
8075: PUSH
8076: LD_INT 2
8078: PUSH
8079: LD_INT 3
8081: PUSH
8082: LD_INT 4
8084: PUSH
8085: LD_INT 6
8087: PUSH
8088: LD_INT 7
8090: PUSH
8091: LD_INT 8
8093: PUSH
8094: LD_INT 10
8096: PUSH
8097: LD_INT 16
8099: PUSH
8100: LD_INT 23
8102: PUSH
8103: LD_INT 26
8105: PUSH
8106: LD_INT 27
8108: PUSH
8109: LD_INT 29
8111: PUSH
8112: LD_INT 31
8114: PUSH
8115: LD_INT 32
8117: PUSH
8118: EMPTY
8119: LIST
8120: LIST
8121: LIST
8122: LIST
8123: LIST
8124: LIST
8125: LIST
8126: LIST
8127: LIST
8128: LIST
8129: LIST
8130: LIST
8131: LIST
8132: LIST
8133: LIST
8134: ST_TO_ADDR
// end ; 3 :
8135: GO 8239
8137: LD_INT 3
8139: DOUBLE
8140: EQUAL
8141: IFTRUE 8145
8143: GO 8238
8145: POP
// begin techs := [ 46 , 47 , 69 , 48 , 51 ] ;
8146: LD_ADDR_VAR 0 5
8150: PUSH
8151: LD_INT 46
8153: PUSH
8154: LD_INT 47
8156: PUSH
8157: LD_INT 69
8159: PUSH
8160: LD_INT 48
8162: PUSH
8163: LD_INT 51
8165: PUSH
8166: EMPTY
8167: LIST
8168: LIST
8169: LIST
8170: LIST
8171: LIST
8172: ST_TO_ADDR
// buildings := [ 0 , 2 , 3 , 4 , 6 , 7 , 8 , 10 , 16 , 19 , 26 , 29 , 31 , 32 ] ;
8173: LD_ADDR_VAR 0 6
8177: PUSH
8178: LD_INT 0
8180: PUSH
8181: LD_INT 2
8183: PUSH
8184: LD_INT 3
8186: PUSH
8187: LD_INT 4
8189: PUSH
8190: LD_INT 6
8192: PUSH
8193: LD_INT 7
8195: PUSH
8196: LD_INT 8
8198: PUSH
8199: LD_INT 10
8201: PUSH
8202: LD_INT 16
8204: PUSH
8205: LD_INT 19
8207: PUSH
8208: LD_INT 26
8210: PUSH
8211: LD_INT 29
8213: PUSH
8214: LD_INT 31
8216: PUSH
8217: LD_INT 32
8219: PUSH
8220: EMPTY
8221: LIST
8222: LIST
8223: LIST
8224: LIST
8225: LIST
8226: LIST
8227: LIST
8228: LIST
8229: LIST
8230: LIST
8231: LIST
8232: LIST
8233: LIST
8234: LIST
8235: ST_TO_ADDR
// end ; end ;
8236: GO 8239
8238: POP
// reinforcement := 3 ;
8239: LD_ADDR_VAR 0 7
8243: PUSH
8244: LD_INT 3
8246: ST_TO_ADDR
// end ; 1 :
8247: GO 11093
8249: LD_INT 1
8251: DOUBLE
8252: EQUAL
8253: IFTRUE 8257
8255: GO 8733
8257: POP
// begin case nation of 1 :
8258: LD_VAR 0 2
8262: PUSH
8263: LD_INT 1
8265: DOUBLE
8266: EQUAL
8267: IFTRUE 8271
8269: GO 8420
8271: POP
// begin techs := [ 35 , 45 , 46 , 47 , 6 , 7 , 20 , 69 , 39 , 48 , 49 , 51 , 52 , 60 ] ;
8272: LD_ADDR_VAR 0 5
8276: PUSH
8277: LD_INT 35
8279: PUSH
8280: LD_INT 45
8282: PUSH
8283: LD_INT 46
8285: PUSH
8286: LD_INT 47
8288: PUSH
8289: LD_INT 6
8291: PUSH
8292: LD_INT 7
8294: PUSH
8295: LD_INT 20
8297: PUSH
8298: LD_INT 69
8300: PUSH
8301: LD_INT 39
8303: PUSH
8304: LD_INT 48
8306: PUSH
8307: LD_INT 49
8309: PUSH
8310: LD_INT 51
8312: PUSH
8313: LD_INT 52
8315: PUSH
8316: LD_INT 60
8318: PUSH
8319: EMPTY
8320: LIST
8321: LIST
8322: LIST
8323: LIST
8324: LIST
8325: LIST
8326: LIST
8327: LIST
8328: LIST
8329: LIST
8330: LIST
8331: LIST
8332: LIST
8333: LIST
8334: ST_TO_ADDR
// buildings := [ 0 , 2 , 3 , 4 , 6 , 7 , 8 , 10 , 15 , 16 , 17 , 19 , 20 , 26 , 27 , 29 , 30 , 31 , 32 ] ;
8335: LD_ADDR_VAR 0 6
8339: PUSH
8340: LD_INT 0
8342: PUSH
8343: LD_INT 2
8345: PUSH
8346: LD_INT 3
8348: PUSH
8349: LD_INT 4
8351: PUSH
8352: LD_INT 6
8354: PUSH
8355: LD_INT 7
8357: PUSH
8358: LD_INT 8
8360: PUSH
8361: LD_INT 10
8363: PUSH
8364: LD_INT 15
8366: PUSH
8367: LD_INT 16
8369: PUSH
8370: LD_INT 17
8372: PUSH
8373: LD_INT 19
8375: PUSH
8376: LD_INT 20
8378: PUSH
8379: LD_INT 26
8381: PUSH
8382: LD_INT 27
8384: PUSH
8385: LD_INT 29
8387: PUSH
8388: LD_INT 30
8390: PUSH
8391: LD_INT 31
8393: PUSH
8394: LD_INT 32
8396: PUSH
8397: EMPTY
8398: LIST
8399: LIST
8400: LIST
8401: LIST
8402: LIST
8403: LIST
8404: LIST
8405: LIST
8406: LIST
8407: LIST
8408: LIST
8409: LIST
8410: LIST
8411: LIST
8412: LIST
8413: LIST
8414: LIST
8415: LIST
8416: LIST
8417: ST_TO_ADDR
// end ; 2 :
8418: GO 8723
8420: LD_INT 2
8422: DOUBLE
8423: EQUAL
8424: IFTRUE 8428
8426: GO 8585
8428: POP
// begin techs := [ 35 , 45 , 46 , 47 , 6 , 7 , 20 , 70 , 69 , 39 , 48 , 49 , 51 , 52 , 60 ] ;
8429: LD_ADDR_VAR 0 5
8433: PUSH
8434: LD_INT 35
8436: PUSH
8437: LD_INT 45
8439: PUSH
8440: LD_INT 46
8442: PUSH
8443: LD_INT 47
8445: PUSH
8446: LD_INT 6
8448: PUSH
8449: LD_INT 7
8451: PUSH
8452: LD_INT 20
8454: PUSH
8455: LD_INT 70
8457: PUSH
8458: LD_INT 69
8460: PUSH
8461: LD_INT 39
8463: PUSH
8464: LD_INT 48
8466: PUSH
8467: LD_INT 49
8469: PUSH
8470: LD_INT 51
8472: PUSH
8473: LD_INT 52
8475: PUSH
8476: LD_INT 60
8478: PUSH
8479: EMPTY
8480: LIST
8481: LIST
8482: LIST
8483: LIST
8484: LIST
8485: LIST
8486: LIST
8487: LIST
8488: LIST
8489: LIST
8490: LIST
8491: LIST
8492: LIST
8493: LIST
8494: LIST
8495: ST_TO_ADDR
// buildings := [ 0 , 2 , 3 , 4 , 6 , 7 , 8 , 10 , 15 , 16 , 17 , 20 , 23 , 26 , 27 , 29 , 30 , 31 , 32 , 42 ] ;
8496: LD_ADDR_VAR 0 6
8500: PUSH
8501: LD_INT 0
8503: PUSH
8504: LD_INT 2
8506: PUSH
8507: LD_INT 3
8509: PUSH
8510: LD_INT 4
8512: PUSH
8513: LD_INT 6
8515: PUSH
8516: LD_INT 7
8518: PUSH
8519: LD_INT 8
8521: PUSH
8522: LD_INT 10
8524: PUSH
8525: LD_INT 15
8527: PUSH
8528: LD_INT 16
8530: PUSH
8531: LD_INT 17
8533: PUSH
8534: LD_INT 20
8536: PUSH
8537: LD_INT 23
8539: PUSH
8540: LD_INT 26
8542: PUSH
8543: LD_INT 27
8545: PUSH
8546: LD_INT 29
8548: PUSH
8549: LD_INT 30
8551: PUSH
8552: LD_INT 31
8554: PUSH
8555: LD_INT 32
8557: PUSH
8558: LD_INT 42
8560: PUSH
8561: EMPTY
8562: LIST
8563: LIST
8564: LIST
8565: LIST
8566: LIST
8567: LIST
8568: LIST
8569: LIST
8570: LIST
8571: LIST
8572: LIST
8573: LIST
8574: LIST
8575: LIST
8576: LIST
8577: LIST
8578: LIST
8579: LIST
8580: LIST
8581: LIST
8582: ST_TO_ADDR
// end ; 3 :
8583: GO 8723
8585: LD_INT 3
8587: DOUBLE
8588: EQUAL
8589: IFTRUE 8593
8591: GO 8722
8593: POP
// begin techs := [ 46 , 47 , 9 , 20 , 69 , 39 , 48 , 49 , 51 , 52 , 57 ] ;
8594: LD_ADDR_VAR 0 5
8598: PUSH
8599: LD_INT 46
8601: PUSH
8602: LD_INT 47
8604: PUSH
8605: LD_INT 9
8607: PUSH
8608: LD_INT 20
8610: PUSH
8611: LD_INT 69
8613: PUSH
8614: LD_INT 39
8616: PUSH
8617: LD_INT 48
8619: PUSH
8620: LD_INT 49
8622: PUSH
8623: LD_INT 51
8625: PUSH
8626: LD_INT 52
8628: PUSH
8629: LD_INT 57
8631: PUSH
8632: EMPTY
8633: LIST
8634: LIST
8635: LIST
8636: LIST
8637: LIST
8638: LIST
8639: LIST
8640: LIST
8641: LIST
8642: LIST
8643: LIST
8644: ST_TO_ADDR
// buildings := [ 0 , 2 , 3 , 4 , 6 , 7 , 8 , 10 , 12 , 16 , 17 , 19 , 26 , 29 , 30 , 31 , 32 ] ;
8645: LD_ADDR_VAR 0 6
8649: PUSH
8650: LD_INT 0
8652: PUSH
8653: LD_INT 2
8655: PUSH
8656: LD_INT 3
8658: PUSH
8659: LD_INT 4
8661: PUSH
8662: LD_INT 6
8664: PUSH
8665: LD_INT 7
8667: PUSH
8668: LD_INT 8
8670: PUSH
8671: LD_INT 10
8673: PUSH
8674: LD_INT 12
8676: PUSH
8677: LD_INT 16
8679: PUSH
8680: LD_INT 17
8682: PUSH
8683: LD_INT 19
8685: PUSH
8686: LD_INT 26
8688: PUSH
8689: LD_INT 29
8691: PUSH
8692: LD_INT 30
8694: PUSH
8695: LD_INT 31
8697: PUSH
8698: LD_INT 32
8700: PUSH
8701: EMPTY
8702: LIST
8703: LIST
8704: LIST
8705: LIST
8706: LIST
8707: LIST
8708: LIST
8709: LIST
8710: LIST
8711: LIST
8712: LIST
8713: LIST
8714: LIST
8715: LIST
8716: LIST
8717: LIST
8718: LIST
8719: ST_TO_ADDR
// end ; end ;
8720: GO 8723
8722: POP
// reinforcement := 3 ;
8723: LD_ADDR_VAR 0 7
8727: PUSH
8728: LD_INT 3
8730: ST_TO_ADDR
// end ; 2 :
8731: GO 11093
8733: LD_INT 2
8735: DOUBLE
8736: EQUAL
8737: IFTRUE 8741
8739: GO 9357
8741: POP
// begin case nation of 1 :
8742: LD_VAR 0 2
8746: PUSH
8747: LD_INT 1
8749: DOUBLE
8750: EQUAL
8751: IFTRUE 8755
8753: GO 8932
8755: POP
// begin techs := [ 35 , 45 , 46 , 47 , 6 , 7 , 12 , 15 , 20 , 69 , 39 , 48 , 49 , 50 , 51 , 52 , 60 , 61 ] ;
8756: LD_ADDR_VAR 0 5
8760: PUSH
8761: LD_INT 35
8763: PUSH
8764: LD_INT 45
8766: PUSH
8767: LD_INT 46
8769: PUSH
8770: LD_INT 47
8772: PUSH
8773: LD_INT 6
8775: PUSH
8776: LD_INT 7
8778: PUSH
8779: LD_INT 12
8781: PUSH
8782: LD_INT 15
8784: PUSH
8785: LD_INT 20
8787: PUSH
8788: LD_INT 69
8790: PUSH
8791: LD_INT 39
8793: PUSH
8794: LD_INT 48
8796: PUSH
8797: LD_INT 49
8799: PUSH
8800: LD_INT 50
8802: PUSH
8803: LD_INT 51
8805: PUSH
8806: LD_INT 52
8808: PUSH
8809: LD_INT 60
8811: PUSH
8812: LD_INT 61
8814: PUSH
8815: EMPTY
8816: LIST
8817: LIST
8818: LIST
8819: LIST
8820: LIST
8821: LIST
8822: LIST
8823: LIST
8824: LIST
8825: LIST
8826: LIST
8827: LIST
8828: LIST
8829: LIST
8830: LIST
8831: LIST
8832: LIST
8833: LIST
8834: ST_TO_ADDR
// buildings := [ 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 10 , 15 , 16 , 17 , 19 , 20 , 26 , 27 , 29 , 30 , 31 , 32 , 36 ] ;
8835: LD_ADDR_VAR 0 6
8839: PUSH
8840: LD_INT 0
8842: PUSH
8843: LD_INT 1
8845: PUSH
8846: LD_INT 2
8848: PUSH
8849: LD_INT 3
8851: PUSH
8852: LD_INT 4
8854: PUSH
8855: LD_INT 5
8857: PUSH
8858: LD_INT 6
8860: PUSH
8861: LD_INT 7
8863: PUSH
8864: LD_INT 8
8866: PUSH
8867: LD_INT 10
8869: PUSH
8870: LD_INT 15
8872: PUSH
8873: LD_INT 16
8875: PUSH
8876: LD_INT 17
8878: PUSH
8879: LD_INT 19
8881: PUSH
8882: LD_INT 20
8884: PUSH
8885: LD_INT 26
8887: PUSH
8888: LD_INT 27
8890: PUSH
8891: LD_INT 29
8893: PUSH
8894: LD_INT 30
8896: PUSH
8897: LD_INT 31
8899: PUSH
8900: LD_INT 32
8902: PUSH
8903: LD_INT 36
8905: PUSH
8906: EMPTY
8907: LIST
8908: LIST
8909: LIST
8910: LIST
8911: LIST
8912: LIST
8913: LIST
8914: LIST
8915: LIST
8916: LIST
8917: LIST
8918: LIST
8919: LIST
8920: LIST
8921: LIST
8922: LIST
8923: LIST
8924: LIST
8925: LIST
8926: LIST
8927: LIST
8928: LIST
8929: ST_TO_ADDR
// end ; 2 :
8930: GO 9347
8932: LD_INT 2
8934: DOUBLE
8935: EQUAL
8936: IFTRUE 8940
8938: GO 9137
8940: POP
// begin techs := [ 35 , 45 , 46 , 47 , 5 , 6 , 7 , 15 , 17 , 20 , 70 , 69 , 39 , 41 , 42 , 48 , 49 , 50 , 51 , 52 , 60 , 61 , 66 ] ;
8941: LD_ADDR_VAR 0 5
8945: PUSH
8946: LD_INT 35
8948: PUSH
8949: LD_INT 45
8951: PUSH
8952: LD_INT 46
8954: PUSH
8955: LD_INT 47
8957: PUSH
8958: LD_INT 5
8960: PUSH
8961: LD_INT 6
8963: PUSH
8964: LD_INT 7
8966: PUSH
8967: LD_INT 15
8969: PUSH
8970: LD_INT 17
8972: PUSH
8973: LD_INT 20
8975: PUSH
8976: LD_INT 70
8978: PUSH
8979: LD_INT 69
8981: PUSH
8982: LD_INT 39
8984: PUSH
8985: LD_INT 41
8987: PUSH
8988: LD_INT 42
8990: PUSH
8991: LD_INT 48
8993: PUSH
8994: LD_INT 49
8996: PUSH
8997: LD_INT 50
8999: PUSH
9000: LD_INT 51
9002: PUSH
9003: LD_INT 52
9005: PUSH
9006: LD_INT 60
9008: PUSH
9009: LD_INT 61
9011: PUSH
9012: LD_INT 66
9014: PUSH
9015: EMPTY
9016: LIST
9017: LIST
9018: LIST
9019: LIST
9020: LIST
9021: LIST
9022: LIST
9023: LIST
9024: LIST
9025: LIST
9026: LIST
9027: LIST
9028: LIST
9029: LIST
9030: LIST
9031: LIST
9032: LIST
9033: LIST
9034: LIST
9035: LIST
9036: LIST
9037: LIST
9038: LIST
9039: ST_TO_ADDR
// buildings := [ 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 10 , 13 , 15 , 16 , 17 , 20 , 23 , 26 , 27 , 29 , 30 , 31 , 32 ] ;
9040: LD_ADDR_VAR 0 6
9044: PUSH
9045: LD_INT 0
9047: PUSH
9048: LD_INT 1
9050: PUSH
9051: LD_INT 2
9053: PUSH
9054: LD_INT 3
9056: PUSH
9057: LD_INT 4
9059: PUSH
9060: LD_INT 5
9062: PUSH
9063: LD_INT 6
9065: PUSH
9066: LD_INT 7
9068: PUSH
9069: LD_INT 8
9071: PUSH
9072: LD_INT 10
9074: PUSH
9075: LD_INT 13
9077: PUSH
9078: LD_INT 15
9080: PUSH
9081: LD_INT 16
9083: PUSH
9084: LD_INT 17
9086: PUSH
9087: LD_INT 20
9089: PUSH
9090: LD_INT 23
9092: PUSH
9093: LD_INT 26
9095: PUSH
9096: LD_INT 27
9098: PUSH
9099: LD_INT 29
9101: PUSH
9102: LD_INT 30
9104: PUSH
9105: LD_INT 31
9107: PUSH
9108: LD_INT 32
9110: PUSH
9111: EMPTY
9112: LIST
9113: LIST
9114: LIST
9115: LIST
9116: LIST
9117: LIST
9118: LIST
9119: LIST
9120: LIST
9121: LIST
9122: LIST
9123: LIST
9124: LIST
9125: LIST
9126: LIST
9127: LIST
9128: LIST
9129: LIST
9130: LIST
9131: LIST
9132: LIST
9133: LIST
9134: ST_TO_ADDR
// end ; 3 :
9135: GO 9347
9137: LD_INT 3
9139: DOUBLE
9140: EQUAL
9141: IFTRUE 9145
9143: GO 9346
9145: POP
// begin techs := [ 46 , 47 , 9 , 20 , 21 , 22 , 30 , 32 , 27 , 69 , 39 , 44 , 48 , 49 , 50 , 51 , 52 , 54 , 57 , 58 , 63 ] ;
9146: LD_ADDR_VAR 0 5
9150: PUSH
9151: LD_INT 46
9153: PUSH
9154: LD_INT 47
9156: PUSH
9157: LD_INT 9
9159: PUSH
9160: LD_INT 20
9162: PUSH
9163: LD_INT 21
9165: PUSH
9166: LD_INT 22
9168: PUSH
9169: LD_INT 30
9171: PUSH
9172: LD_INT 32
9174: PUSH
9175: LD_INT 27
9177: PUSH
9178: LD_INT 69
9180: PUSH
9181: LD_INT 39
9183: PUSH
9184: LD_INT 44
9186: PUSH
9187: LD_INT 48
9189: PUSH
9190: LD_INT 49
9192: PUSH
9193: LD_INT 50
9195: PUSH
9196: LD_INT 51
9198: PUSH
9199: LD_INT 52
9201: PUSH
9202: LD_INT 54
9204: PUSH
9205: LD_INT 57
9207: PUSH
9208: LD_INT 58
9210: PUSH
9211: LD_INT 63
9213: PUSH
9214: EMPTY
9215: LIST
9216: LIST
9217: LIST
9218: LIST
9219: LIST
9220: LIST
9221: LIST
9222: LIST
9223: LIST
9224: LIST
9225: LIST
9226: LIST
9227: LIST
9228: LIST
9229: LIST
9230: LIST
9231: LIST
9232: LIST
9233: LIST
9234: LIST
9235: LIST
9236: ST_TO_ADDR
// buildings := [ 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 10 , 11 , 12 , 14 , 16 , 17 , 19 , 21 , 24 , 26 , 28 , 29 , 30 , 31 , 32 , 33 ] ;
9237: LD_ADDR_VAR 0 6
9241: PUSH
9242: LD_INT 0
9244: PUSH
9245: LD_INT 1
9247: PUSH
9248: LD_INT 2
9250: PUSH
9251: LD_INT 3
9253: PUSH
9254: LD_INT 4
9256: PUSH
9257: LD_INT 5
9259: PUSH
9260: LD_INT 6
9262: PUSH
9263: LD_INT 7
9265: PUSH
9266: LD_INT 8
9268: PUSH
9269: LD_INT 10
9271: PUSH
9272: LD_INT 11
9274: PUSH
9275: LD_INT 12
9277: PUSH
9278: LD_INT 14
9280: PUSH
9281: LD_INT 16
9283: PUSH
9284: LD_INT 17
9286: PUSH
9287: LD_INT 19
9289: PUSH
9290: LD_INT 21
9292: PUSH
9293: LD_INT 24
9295: PUSH
9296: LD_INT 26
9298: PUSH
9299: LD_INT 28
9301: PUSH
9302: LD_INT 29
9304: PUSH
9305: LD_INT 30
9307: PUSH
9308: LD_INT 31
9310: PUSH
9311: LD_INT 32
9313: PUSH
9314: LD_INT 33
9316: PUSH
9317: EMPTY
9318: LIST
9319: LIST
9320: LIST
9321: LIST
9322: LIST
9323: LIST
9324: LIST
9325: LIST
9326: LIST
9327: LIST
9328: LIST
9329: LIST
9330: LIST
9331: LIST
9332: LIST
9333: LIST
9334: LIST
9335: LIST
9336: LIST
9337: LIST
9338: LIST
9339: LIST
9340: LIST
9341: LIST
9342: LIST
9343: ST_TO_ADDR
// end ; end ;
9344: GO 9347
9346: POP
// reinforcement := 4 ;
9347: LD_ADDR_VAR 0 7
9351: PUSH
9352: LD_INT 4
9354: ST_TO_ADDR
// end ; 3 :
9355: GO 11093
9357: LD_INT 3
9359: DOUBLE
9360: EQUAL
9361: IFTRUE 9365
9363: GO 10189
9365: POP
// begin case nation of 1 :
9366: LD_VAR 0 2
9370: PUSH
9371: LD_INT 1
9373: DOUBLE
9374: EQUAL
9375: IFTRUE 9379
9377: GO 9648
9379: POP
// begin techs := [ 35 , 45 , 46 , 47 , 6 , 7 , 12 , 13 , 10 , 15 , 16 , 20 , 21 , 22 , 32 , 27 , 69 , 39 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 57 , 58 , 59 , 60 , 61 , 62 ] ;
9380: LD_ADDR_VAR 0 5
9384: PUSH
9385: LD_INT 35
9387: PUSH
9388: LD_INT 45
9390: PUSH
9391: LD_INT 46
9393: PUSH
9394: LD_INT 47
9396: PUSH
9397: LD_INT 6
9399: PUSH
9400: LD_INT 7
9402: PUSH
9403: LD_INT 12
9405: PUSH
9406: LD_INT 13
9408: PUSH
9409: LD_INT 10
9411: PUSH
9412: LD_INT 15
9414: PUSH
9415: LD_INT 16
9417: PUSH
9418: LD_INT 20
9420: PUSH
9421: LD_INT 21
9423: PUSH
9424: LD_INT 22
9426: PUSH
9427: LD_INT 32
9429: PUSH
9430: LD_INT 27
9432: PUSH
9433: LD_INT 69
9435: PUSH
9436: LD_INT 39
9438: PUSH
9439: LD_INT 40
9441: PUSH
9442: LD_INT 48
9444: PUSH
9445: LD_INT 49
9447: PUSH
9448: LD_INT 50
9450: PUSH
9451: LD_INT 51
9453: PUSH
9454: LD_INT 52
9456: PUSH
9457: LD_INT 53
9459: PUSH
9460: LD_INT 54
9462: PUSH
9463: LD_INT 55
9465: PUSH
9466: LD_INT 57
9468: PUSH
9469: LD_INT 58
9471: PUSH
9472: LD_INT 59
9474: PUSH
9475: LD_INT 60
9477: PUSH
9478: LD_INT 61
9480: PUSH
9481: LD_INT 62
9483: PUSH
9484: EMPTY
9485: LIST
9486: LIST
9487: LIST
9488: LIST
9489: LIST
9490: LIST
9491: LIST
9492: LIST
9493: LIST
9494: LIST
9495: LIST
9496: LIST
9497: LIST
9498: LIST
9499: LIST
9500: LIST
9501: LIST
9502: LIST
9503: LIST
9504: LIST
9505: LIST
9506: LIST
9507: LIST
9508: LIST
9509: LIST
9510: LIST
9511: LIST
9512: LIST
9513: LIST
9514: LIST
9515: LIST
9516: LIST
9517: LIST
9518: ST_TO_ADDR
// buildings := [ 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 10 , 11 , 12 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 36 ] ;
9519: LD_ADDR_VAR 0 6
9523: PUSH
9524: LD_INT 0
9526: PUSH
9527: LD_INT 1
9529: PUSH
9530: LD_INT 2
9532: PUSH
9533: LD_INT 3
9535: PUSH
9536: LD_INT 4
9538: PUSH
9539: LD_INT 5
9541: PUSH
9542: LD_INT 6
9544: PUSH
9545: LD_INT 7
9547: PUSH
9548: LD_INT 8
9550: PUSH
9551: LD_INT 10
9553: PUSH
9554: LD_INT 11
9556: PUSH
9557: LD_INT 12
9559: PUSH
9560: LD_INT 15
9562: PUSH
9563: LD_INT 16
9565: PUSH
9566: LD_INT 17
9568: PUSH
9569: LD_INT 18
9571: PUSH
9572: LD_INT 19
9574: PUSH
9575: LD_INT 20
9577: PUSH
9578: LD_INT 21
9580: PUSH
9581: LD_INT 24
9583: PUSH
9584: LD_INT 25
9586: PUSH
9587: LD_INT 26
9589: PUSH
9590: LD_INT 27
9592: PUSH
9593: LD_INT 28
9595: PUSH
9596: LD_INT 29
9598: PUSH
9599: LD_INT 30
9601: PUSH
9602: LD_INT 31
9604: PUSH
9605: LD_INT 32
9607: PUSH
9608: LD_INT 33
9610: PUSH
9611: LD_INT 36
9613: PUSH
9614: EMPTY
9615: LIST
9616: LIST
9617: LIST
9618: LIST
9619: LIST
9620: LIST
9621: LIST
9622: LIST
9623: LIST
9624: LIST
9625: LIST
9626: LIST
9627: LIST
9628: LIST
9629: LIST
9630: LIST
9631: LIST
9632: LIST
9633: LIST
9634: LIST
9635: LIST
9636: LIST
9637: LIST
9638: LIST
9639: LIST
9640: LIST
9641: LIST
9642: LIST
9643: LIST
9644: LIST
9645: ST_TO_ADDR
// end ; 2 :
9646: GO 10179
9648: LD_INT 2
9650: DOUBLE
9651: EQUAL
9652: IFTRUE 9656
9654: GO 9921
9656: POP
// begin techs := [ 35 , 45 , 46 , 47 , 5 , 6 , 7 , 8 , 15 , 18 , 17 , 20 , 21 , 22 , 26 , 70 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 60 , 61 , 62 , 66 , 67 , 68 ] ;
9657: LD_ADDR_VAR 0 5
9661: PUSH
9662: LD_INT 35
9664: PUSH
9665: LD_INT 45
9667: PUSH
9668: LD_INT 46
9670: PUSH
9671: LD_INT 47
9673: PUSH
9674: LD_INT 5
9676: PUSH
9677: LD_INT 6
9679: PUSH
9680: LD_INT 7
9682: PUSH
9683: LD_INT 8
9685: PUSH
9686: LD_INT 15
9688: PUSH
9689: LD_INT 18
9691: PUSH
9692: LD_INT 17
9694: PUSH
9695: LD_INT 20
9697: PUSH
9698: LD_INT 21
9700: PUSH
9701: LD_INT 22
9703: PUSH
9704: LD_INT 26
9706: PUSH
9707: LD_INT 70
9709: PUSH
9710: LD_INT 69
9712: PUSH
9713: LD_INT 39
9715: PUSH
9716: LD_INT 40
9718: PUSH
9719: LD_INT 41
9721: PUSH
9722: LD_INT 42
9724: PUSH
9725: LD_INT 43
9727: PUSH
9728: LD_INT 48
9730: PUSH
9731: LD_INT 49
9733: PUSH
9734: LD_INT 50
9736: PUSH
9737: LD_INT 51
9739: PUSH
9740: LD_INT 52
9742: PUSH
9743: LD_INT 53
9745: PUSH
9746: LD_INT 54
9748: PUSH
9749: LD_INT 55
9751: PUSH
9752: LD_INT 60
9754: PUSH
9755: LD_INT 61
9757: PUSH
9758: LD_INT 62
9760: PUSH
9761: LD_INT 66
9763: PUSH
9764: LD_INT 67
9766: PUSH
9767: LD_INT 68
9769: PUSH
9770: EMPTY
9771: LIST
9772: LIST
9773: LIST
9774: LIST
9775: LIST
9776: LIST
9777: LIST
9778: LIST
9779: LIST
9780: LIST
9781: LIST
9782: LIST
9783: LIST
9784: LIST
9785: LIST
9786: LIST
9787: LIST
9788: LIST
9789: LIST
9790: LIST
9791: LIST
9792: LIST
9793: LIST
9794: LIST
9795: LIST
9796: LIST
9797: LIST
9798: LIST
9799: LIST
9800: LIST
9801: LIST
9802: LIST
9803: LIST
9804: LIST
9805: LIST
9806: LIST
9807: ST_TO_ADDR
// buildings := [ 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 10 , 11 , 13 , 15 , 16 , 17 , 18 , 20 , 21 , 23 , 26 , 27 , 28 , 29 , 30 , 31 , 32 ] ;
9808: LD_ADDR_VAR 0 6
9812: PUSH
9813: LD_INT 0
9815: PUSH
9816: LD_INT 1
9818: PUSH
9819: LD_INT 2
9821: PUSH
9822: LD_INT 3
9824: PUSH
9825: LD_INT 4
9827: PUSH
9828: LD_INT 5
9830: PUSH
9831: LD_INT 6
9833: PUSH
9834: LD_INT 7
9836: PUSH
9837: LD_INT 8
9839: PUSH
9840: LD_INT 10
9842: PUSH
9843: LD_INT 11
9845: PUSH
9846: LD_INT 13
9848: PUSH
9849: LD_INT 15
9851: PUSH
9852: LD_INT 16
9854: PUSH
9855: LD_INT 17
9857: PUSH
9858: LD_INT 18
9860: PUSH
9861: LD_INT 20
9863: PUSH
9864: LD_INT 21
9866: PUSH
9867: LD_INT 23
9869: PUSH
9870: LD_INT 26
9872: PUSH
9873: LD_INT 27
9875: PUSH
9876: LD_INT 28
9878: PUSH
9879: LD_INT 29
9881: PUSH
9882: LD_INT 30
9884: PUSH
9885: LD_INT 31
9887: PUSH
9888: LD_INT 32
9890: PUSH
9891: EMPTY
9892: LIST
9893: LIST
9894: LIST
9895: LIST
9896: LIST
9897: LIST
9898: LIST
9899: LIST
9900: LIST
9901: LIST
9902: LIST
9903: LIST
9904: LIST
9905: LIST
9906: LIST
9907: LIST
9908: LIST
9909: LIST
9910: LIST
9911: LIST
9912: LIST
9913: LIST
9914: LIST
9915: LIST
9916: LIST
9917: LIST
9918: ST_TO_ADDR
// end ; 3 :
9919: GO 10179
9921: LD_INT 3
9923: DOUBLE
9924: EQUAL
9925: IFTRUE 9929
9927: GO 10178
9929: POP
// begin techs := [ 46 , 47 , 9 , 20 , 19 , 21 , 22 , 28 , 29 , 30 , 37 , 32 , 27 , 69 , 39 , 34 , 40 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 ] ;
9930: LD_ADDR_VAR 0 5
9934: PUSH
9935: LD_INT 46
9937: PUSH
9938: LD_INT 47
9940: PUSH
9941: LD_INT 9
9943: PUSH
9944: LD_INT 20
9946: PUSH
9947: LD_INT 19
9949: PUSH
9950: LD_INT 21
9952: PUSH
9953: LD_INT 22
9955: PUSH
9956: LD_INT 28
9958: PUSH
9959: LD_INT 29
9961: PUSH
9962: LD_INT 30
9964: PUSH
9965: LD_INT 37
9967: PUSH
9968: LD_INT 32
9970: PUSH
9971: LD_INT 27
9973: PUSH
9974: LD_INT 69
9976: PUSH
9977: LD_INT 39
9979: PUSH
9980: LD_INT 34
9982: PUSH
9983: LD_INT 40
9985: PUSH
9986: LD_INT 44
9988: PUSH
9989: LD_INT 48
9991: PUSH
9992: LD_INT 49
9994: PUSH
9995: LD_INT 50
9997: PUSH
9998: LD_INT 51
10000: PUSH
10001: LD_INT 52
10003: PUSH
10004: LD_INT 53
10006: PUSH
10007: LD_INT 54
10009: PUSH
10010: LD_INT 55
10012: PUSH
10013: LD_INT 56
10015: PUSH
10016: LD_INT 57
10018: PUSH
10019: LD_INT 58
10021: PUSH
10022: LD_INT 59
10024: PUSH
10025: LD_INT 63
10027: PUSH
10028: LD_INT 64
10030: PUSH
10031: EMPTY
10032: LIST
10033: LIST
10034: LIST
10035: LIST
10036: LIST
10037: LIST
10038: LIST
10039: LIST
10040: LIST
10041: LIST
10042: LIST
10043: LIST
10044: LIST
10045: LIST
10046: LIST
10047: LIST
10048: LIST
10049: LIST
10050: LIST
10051: LIST
10052: LIST
10053: LIST
10054: LIST
10055: LIST
10056: LIST
10057: LIST
10058: LIST
10059: LIST
10060: LIST
10061: LIST
10062: LIST
10063: LIST
10064: ST_TO_ADDR
// buildings := [ 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 10 , 11 , 12 , 14 , 16 , 17 , 18 , 19 , 21 , 24 , 26 , 28 , 29 , 30 , 31 , 32 , 33 ] ;
10065: LD_ADDR_VAR 0 6
10069: PUSH
10070: LD_INT 0
10072: PUSH
10073: LD_INT 1
10075: PUSH
10076: LD_INT 2
10078: PUSH
10079: LD_INT 3
10081: PUSH
10082: LD_INT 4
10084: PUSH
10085: LD_INT 5
10087: PUSH
10088: LD_INT 6
10090: PUSH
10091: LD_INT 7
10093: PUSH
10094: LD_INT 8
10096: PUSH
10097: LD_INT 10
10099: PUSH
10100: LD_INT 11
10102: PUSH
10103: LD_INT 12
10105: PUSH
10106: LD_INT 14
10108: PUSH
10109: LD_INT 16
10111: PUSH
10112: LD_INT 17
10114: PUSH
10115: LD_INT 18
10117: PUSH
10118: LD_INT 19
10120: PUSH
10121: LD_INT 21
10123: PUSH
10124: LD_INT 24
10126: PUSH
10127: LD_INT 26
10129: PUSH
10130: LD_INT 28
10132: PUSH
10133: LD_INT 29
10135: PUSH
10136: LD_INT 30
10138: PUSH
10139: LD_INT 31
10141: PUSH
10142: LD_INT 32
10144: PUSH
10145: LD_INT 33
10147: PUSH
10148: EMPTY
10149: LIST
10150: LIST
10151: LIST
10152: LIST
10153: LIST
10154: LIST
10155: LIST
10156: LIST
10157: LIST
10158: LIST
10159: LIST
10160: LIST
10161: LIST
10162: LIST
10163: LIST
10164: LIST
10165: LIST
10166: LIST
10167: LIST
10168: LIST
10169: LIST
10170: LIST
10171: LIST
10172: LIST
10173: LIST
10174: LIST
10175: ST_TO_ADDR
// end ; end ;
10176: GO 10179
10178: POP
// reinforcement := 4 ;
10179: LD_ADDR_VAR 0 7
10183: PUSH
10184: LD_INT 4
10186: ST_TO_ADDR
// end ; 4 :
10187: GO 11093
10189: LD_INT 4
10191: DOUBLE
10192: EQUAL
10193: IFTRUE 10197
10195: GO 11092
10197: POP
// begin case nation of 1 :
10198: LD_VAR 0 2
10202: PUSH
10203: LD_INT 1
10205: DOUBLE
10206: EQUAL
10207: IFTRUE 10211
10209: GO 10500
10211: POP
// begin techs := [ 35 , 45 , 46 , 47 , 6 , 7 , 12 , 13 , 10 , 14 , 15 , 16 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 ] ;
10212: LD_ADDR_VAR 0 5
10216: PUSH
10217: LD_INT 35
10219: PUSH
10220: LD_INT 45
10222: PUSH
10223: LD_INT 46
10225: PUSH
10226: LD_INT 47
10228: PUSH
10229: LD_INT 6
10231: PUSH
10232: LD_INT 7
10234: PUSH
10235: LD_INT 12
10237: PUSH
10238: LD_INT 13
10240: PUSH
10241: LD_INT 10
10243: PUSH
10244: LD_INT 14
10246: PUSH
10247: LD_INT 15
10249: PUSH
10250: LD_INT 16
10252: PUSH
10253: LD_INT 20
10255: PUSH
10256: LD_INT 21
10258: PUSH
10259: LD_INT 22
10261: PUSH
10262: LD_INT 25
10264: PUSH
10265: LD_INT 32
10267: PUSH
10268: LD_INT 27
10270: PUSH
10271: LD_INT 36
10273: PUSH
10274: LD_INT 69
10276: PUSH
10277: LD_INT 39
10279: PUSH
10280: LD_INT 34
10282: PUSH
10283: LD_INT 40
10285: PUSH
10286: LD_INT 48
10288: PUSH
10289: LD_INT 49
10291: PUSH
10292: LD_INT 50
10294: PUSH
10295: LD_INT 51
10297: PUSH
10298: LD_INT 52
10300: PUSH
10301: LD_INT 53
10303: PUSH
10304: LD_INT 54
10306: PUSH
10307: LD_INT 55
10309: PUSH
10310: LD_INT 56
10312: PUSH
10313: LD_INT 57
10315: PUSH
10316: LD_INT 58
10318: PUSH
10319: LD_INT 59
10321: PUSH
10322: LD_INT 60
10324: PUSH
10325: LD_INT 61
10327: PUSH
10328: LD_INT 62
10330: PUSH
10331: EMPTY
10332: LIST
10333: LIST
10334: LIST
10335: LIST
10336: LIST
10337: LIST
10338: LIST
10339: LIST
10340: LIST
10341: LIST
10342: LIST
10343: LIST
10344: LIST
10345: LIST
10346: LIST
10347: LIST
10348: LIST
10349: LIST
10350: LIST
10351: LIST
10352: LIST
10353: LIST
10354: LIST
10355: LIST
10356: LIST
10357: LIST
10358: LIST
10359: LIST
10360: LIST
10361: LIST
10362: LIST
10363: LIST
10364: LIST
10365: LIST
10366: LIST
10367: LIST
10368: LIST
10369: LIST
10370: ST_TO_ADDR
// buildings := [ 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 10 , 11 , 12 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 36 ] ;
10371: LD_ADDR_VAR 0 6
10375: PUSH
10376: LD_INT 0
10378: PUSH
10379: LD_INT 1
10381: PUSH
10382: LD_INT 2
10384: PUSH
10385: LD_INT 3
10387: PUSH
10388: LD_INT 4
10390: PUSH
10391: LD_INT 5
10393: PUSH
10394: LD_INT 6
10396: PUSH
10397: LD_INT 7
10399: PUSH
10400: LD_INT 8
10402: PUSH
10403: LD_INT 10
10405: PUSH
10406: LD_INT 11
10408: PUSH
10409: LD_INT 12
10411: PUSH
10412: LD_INT 15
10414: PUSH
10415: LD_INT 16
10417: PUSH
10418: LD_INT 17
10420: PUSH
10421: LD_INT 18
10423: PUSH
10424: LD_INT 19
10426: PUSH
10427: LD_INT 20
10429: PUSH
10430: LD_INT 21
10432: PUSH
10433: LD_INT 24
10435: PUSH
10436: LD_INT 25
10438: PUSH
10439: LD_INT 26
10441: PUSH
10442: LD_INT 27
10444: PUSH
10445: LD_INT 28
10447: PUSH
10448: LD_INT 29
10450: PUSH
10451: LD_INT 30
10453: PUSH
10454: LD_INT 31
10456: PUSH
10457: LD_INT 32
10459: PUSH
10460: LD_INT 33
10462: PUSH
10463: LD_INT 36
10465: PUSH
10466: EMPTY
10467: LIST
10468: LIST
10469: LIST
10470: LIST
10471: LIST
10472: LIST
10473: LIST
10474: LIST
10475: LIST
10476: LIST
10477: LIST
10478: LIST
10479: LIST
10480: LIST
10481: LIST
10482: LIST
10483: LIST
10484: LIST
10485: LIST
10486: LIST
10487: LIST
10488: LIST
10489: LIST
10490: LIST
10491: LIST
10492: LIST
10493: LIST
10494: LIST
10495: LIST
10496: LIST
10497: ST_TO_ADDR
// end ; 2 :
10498: GO 11075
10500: LD_INT 2
10502: DOUBLE
10503: EQUAL
10504: IFTRUE 10508
10506: GO 10781
10508: POP
// begin techs := [ 35 , 45 , 46 , 47 , 5 , 6 , 7 , 8 , 15 , 18 , 17 , 20 , 21 , 22 , 25 , 26 , 70 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 ] ;
10509: LD_ADDR_VAR 0 5
10513: PUSH
10514: LD_INT 35
10516: PUSH
10517: LD_INT 45
10519: PUSH
10520: LD_INT 46
10522: PUSH
10523: LD_INT 47
10525: PUSH
10526: LD_INT 5
10528: PUSH
10529: LD_INT 6
10531: PUSH
10532: LD_INT 7
10534: PUSH
10535: LD_INT 8
10537: PUSH
10538: LD_INT 15
10540: PUSH
10541: LD_INT 18
10543: PUSH
10544: LD_INT 17
10546: PUSH
10547: LD_INT 20
10549: PUSH
10550: LD_INT 21
10552: PUSH
10553: LD_INT 22
10555: PUSH
10556: LD_INT 25
10558: PUSH
10559: LD_INT 26
10561: PUSH
10562: LD_INT 70
10564: PUSH
10565: LD_INT 69
10567: PUSH
10568: LD_INT 39
10570: PUSH
10571: LD_INT 40
10573: PUSH
10574: LD_INT 41
10576: PUSH
10577: LD_INT 42
10579: PUSH
10580: LD_INT 43
10582: PUSH
10583: LD_INT 48
10585: PUSH
10586: LD_INT 49
10588: PUSH
10589: LD_INT 50
10591: PUSH
10592: LD_INT 51
10594: PUSH
10595: LD_INT 52
10597: PUSH
10598: LD_INT 53
10600: PUSH
10601: LD_INT 54
10603: PUSH
10604: LD_INT 55
10606: PUSH
10607: LD_INT 56
10609: PUSH
10610: LD_INT 60
10612: PUSH
10613: LD_INT 61
10615: PUSH
10616: LD_INT 62
10618: PUSH
10619: LD_INT 66
10621: PUSH
10622: LD_INT 67
10624: PUSH
10625: LD_INT 68
10627: PUSH
10628: EMPTY
10629: LIST
10630: LIST
10631: LIST
10632: LIST
10633: LIST
10634: LIST
10635: LIST
10636: LIST
10637: LIST
10638: LIST
10639: LIST
10640: LIST
10641: LIST
10642: LIST
10643: LIST
10644: LIST
10645: LIST
10646: LIST
10647: LIST
10648: LIST
10649: LIST
10650: LIST
10651: LIST
10652: LIST
10653: LIST
10654: LIST
10655: LIST
10656: LIST
10657: LIST
10658: LIST
10659: LIST
10660: LIST
10661: LIST
10662: LIST
10663: LIST
10664: LIST
10665: LIST
10666: LIST
10667: ST_TO_ADDR
// buildings := [ 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 10 , 11 , 13 , 15 , 16 , 17 , 18 , 20 , 21 , 23 , 26 , 27 , 28 , 29 , 30 , 31 , 32 ] ;
10668: LD_ADDR_VAR 0 6
10672: PUSH
10673: LD_INT 0
10675: PUSH
10676: LD_INT 1
10678: PUSH
10679: LD_INT 2
10681: PUSH
10682: LD_INT 3
10684: PUSH
10685: LD_INT 4
10687: PUSH
10688: LD_INT 5
10690: PUSH
10691: LD_INT 6
10693: PUSH
10694: LD_INT 7
10696: PUSH
10697: LD_INT 8
10699: PUSH
10700: LD_INT 10
10702: PUSH
10703: LD_INT 11
10705: PUSH
10706: LD_INT 13
10708: PUSH
10709: LD_INT 15
10711: PUSH
10712: LD_INT 16
10714: PUSH
10715: LD_INT 17
10717: PUSH
10718: LD_INT 18
10720: PUSH
10721: LD_INT 20
10723: PUSH
10724: LD_INT 21
10726: PUSH
10727: LD_INT 23
10729: PUSH
10730: LD_INT 26
10732: PUSH
10733: LD_INT 27
10735: PUSH
10736: LD_INT 28
10738: PUSH
10739: LD_INT 29
10741: PUSH
10742: LD_INT 30
10744: PUSH
10745: LD_INT 31
10747: PUSH
10748: LD_INT 32
10750: PUSH
10751: EMPTY
10752: LIST
10753: LIST
10754: LIST
10755: LIST
10756: LIST
10757: LIST
10758: LIST
10759: LIST
10760: LIST
10761: LIST
10762: LIST
10763: LIST
10764: LIST
10765: LIST
10766: LIST
10767: LIST
10768: LIST
10769: LIST
10770: LIST
10771: LIST
10772: LIST
10773: LIST
10774: LIST
10775: LIST
10776: LIST
10777: LIST
10778: ST_TO_ADDR
// end ; 3 :
10779: GO 11075
10781: LD_INT 3
10783: DOUBLE
10784: EQUAL
10785: IFTRUE 10789
10787: GO 11074
10789: POP
// begin techs := [ 46 , 47 , 9 , 20 , 19 , 21 , 22 , 23 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 ] ;
10790: LD_ADDR_VAR 0 5
10794: PUSH
10795: LD_INT 46
10797: PUSH
10798: LD_INT 47
10800: PUSH
10801: LD_INT 9
10803: PUSH
10804: LD_INT 20
10806: PUSH
10807: LD_INT 19
10809: PUSH
10810: LD_INT 21
10812: PUSH
10813: LD_INT 22
10815: PUSH
10816: LD_INT 23
10818: PUSH
10819: LD_INT 25
10821: PUSH
10822: LD_INT 28
10824: PUSH
10825: LD_INT 29
10827: PUSH
10828: LD_INT 30
10830: PUSH
10831: LD_INT 31
10833: PUSH
10834: LD_INT 37
10836: PUSH
10837: LD_INT 38
10839: PUSH
10840: LD_INT 32
10842: PUSH
10843: LD_INT 27
10845: PUSH
10846: LD_INT 33
10848: PUSH
10849: LD_INT 69
10851: PUSH
10852: LD_INT 39
10854: PUSH
10855: LD_INT 34
10857: PUSH
10858: LD_INT 40
10860: PUSH
10861: LD_INT 71
10863: PUSH
10864: LD_INT 44
10866: PUSH
10867: LD_INT 48
10869: PUSH
10870: LD_INT 49
10872: PUSH
10873: LD_INT 50
10875: PUSH
10876: LD_INT 51
10878: PUSH
10879: LD_INT 52
10881: PUSH
10882: LD_INT 53
10884: PUSH
10885: LD_INT 54
10887: PUSH
10888: LD_INT 55
10890: PUSH
10891: LD_INT 56
10893: PUSH
10894: LD_INT 57
10896: PUSH
10897: LD_INT 58
10899: PUSH
10900: LD_INT 59
10902: PUSH
10903: LD_INT 63
10905: PUSH
10906: LD_INT 64
10908: PUSH
10909: LD_INT 65
10911: PUSH
10912: EMPTY
10913: LIST
10914: LIST
10915: LIST
10916: LIST
10917: LIST
10918: LIST
10919: LIST
10920: LIST
10921: LIST
10922: LIST
10923: LIST
10924: LIST
10925: LIST
10926: LIST
10927: LIST
10928: LIST
10929: LIST
10930: LIST
10931: LIST
10932: LIST
10933: LIST
10934: LIST
10935: LIST
10936: LIST
10937: LIST
10938: LIST
10939: LIST
10940: LIST
10941: LIST
10942: LIST
10943: LIST
10944: LIST
10945: LIST
10946: LIST
10947: LIST
10948: LIST
10949: LIST
10950: LIST
10951: LIST
10952: ST_TO_ADDR
// buildings := [ 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 10 , 11 , 12 , 14 , 16 , 17 , 18 , 19 , 21 , 24 , 26 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 37 ] ;
10953: LD_ADDR_VAR 0 6
10957: PUSH
10958: LD_INT 0
10960: PUSH
10961: LD_INT 1
10963: PUSH
10964: LD_INT 2
10966: PUSH
10967: LD_INT 3
10969: PUSH
10970: LD_INT 4
10972: PUSH
10973: LD_INT 5
10975: PUSH
10976: LD_INT 6
10978: PUSH
10979: LD_INT 7
10981: PUSH
10982: LD_INT 8
10984: PUSH
10985: LD_INT 10
10987: PUSH
10988: LD_INT 11
10990: PUSH
10991: LD_INT 12
10993: PUSH
10994: LD_INT 14
10996: PUSH
10997: LD_INT 16
10999: PUSH
11000: LD_INT 17
11002: PUSH
11003: LD_INT 18
11005: PUSH
11006: LD_INT 19
11008: PUSH
11009: LD_INT 21
11011: PUSH
11012: LD_INT 24
11014: PUSH
11015: LD_INT 26
11017: PUSH
11018: LD_INT 28
11020: PUSH
11021: LD_INT 29
11023: PUSH
11024: LD_INT 30
11026: PUSH
11027: LD_INT 31
11029: PUSH
11030: LD_INT 32
11032: PUSH
11033: LD_INT 33
11035: PUSH
11036: LD_INT 34
11038: PUSH
11039: LD_INT 37
11041: PUSH
11042: EMPTY
11043: LIST
11044: LIST
11045: LIST
11046: LIST
11047: LIST
11048: LIST
11049: LIST
11050: LIST
11051: LIST
11052: LIST
11053: LIST
11054: LIST
11055: LIST
11056: LIST
11057: LIST
11058: LIST
11059: LIST
11060: LIST
11061: LIST
11062: LIST
11063: LIST
11064: LIST
11065: LIST
11066: LIST
11067: LIST
11068: LIST
11069: LIST
11070: LIST
11071: ST_TO_ADDR
// end ; end ;
11072: GO 11075
11074: POP
// reinforcement := 5 ;
11075: LD_ADDR_VAR 0 7
11079: PUSH
11080: LD_INT 5
11082: ST_TO_ADDR
// ToLua ( LUA_SideTechMax(); ) ;
11083: LD_STRING LUA_SideTechMax();
11085: PPUSH
11086: CALL_OW 559
// end ; end ;
11090: GO 11093
11092: POP
// side_reinforcement_cap := Replace ( side_reinforcement_cap , side , reinforcement ) ;
11093: LD_ADDR_EXP 57
11097: PUSH
11098: LD_EXP 57
11102: PPUSH
11103: LD_VAR 0 3
11107: PPUSH
11108: LD_VAR 0 7
11112: PPUSH
11113: CALL_OW 1
11117: ST_TO_ADDR
// TechUnlock ( techs , side , 1 ) ;
11118: LD_VAR 0 5
11122: PPUSH
11123: LD_VAR 0 3
11127: PPUSH
11128: LD_INT 1
11130: PPUSH
11131: CALL 7279 0 3
// BuildingUnlock ( buildings , side , 1 ) ;
11135: LD_VAR 0 6
11139: PPUSH
11140: LD_VAR 0 3
11144: PPUSH
11145: LD_INT 1
11147: PPUSH
11148: CALL 7324 0 3
// end ;
11152: LD_VAR 0 4
11156: RET
// export function FillUpVehicles ( vehicle , crates , oil , siberite ) ; var occupied ; begin
11157: LD_INT 0
11159: PPUSH
11160: PPUSH
// if crates >= 100 then
11161: LD_VAR 0 2
11165: PUSH
11166: LD_INT 100
11168: GREATEREQUAL
11169: IFFALSE 11202
// begin AddCargo ( vehicle , mat_cans , 100 ) ;
11171: LD_VAR 0 1
11175: PPUSH
11176: LD_INT 1
11178: PPUSH
11179: LD_INT 100
11181: PPUSH
11182: CALL_OW 291
// crates := crates - 100 ;
11186: LD_ADDR_VAR 0 2
11190: PUSH
11191: LD_VAR 0 2
11195: PUSH
11196: LD_INT 100
11198: MINUS
11199: ST_TO_ADDR
// end else
11200: GO 11403
// begin AddCargo ( vehicle , mat_cans , crates ) ;
11202: LD_VAR 0 1
11206: PPUSH
11207: LD_INT 1
11209: PPUSH
11210: LD_VAR 0 2
11214: PPUSH
11215: CALL_OW 291
// occupied := crates ;
11219: LD_ADDR_VAR 0 6
11223: PUSH
11224: LD_VAR 0 2
11228: ST_TO_ADDR
// crates := 0 ;
11229: LD_ADDR_VAR 0 2
11233: PUSH
11234: LD_INT 0
11236: ST_TO_ADDR
// if oil >= 100 then
11237: LD_VAR 0 3
11241: PUSH
11242: LD_INT 100
11244: GREATEREQUAL
11245: IFFALSE 11290
// begin AddCargo ( vehicle , mat_oil , 100 - occupied ) ;
11247: LD_VAR 0 1
11251: PPUSH
11252: LD_INT 2
11254: PPUSH
11255: LD_INT 100
11257: PUSH
11258: LD_VAR 0 6
11262: MINUS
11263: PPUSH
11264: CALL_OW 291
// oil := oil - 100 + occupied ;
11268: LD_ADDR_VAR 0 3
11272: PUSH
11273: LD_VAR 0 3
11277: PUSH
11278: LD_INT 100
11280: MINUS
11281: PUSH
11282: LD_VAR 0 6
11286: PLUS
11287: ST_TO_ADDR
// end else
11288: GO 11403
// begin AddCargo ( vehicle , mat_oil , oil ) ;
11290: LD_VAR 0 1
11294: PPUSH
11295: LD_INT 2
11297: PPUSH
11298: LD_VAR 0 3
11302: PPUSH
11303: CALL_OW 291
// occupied := oil ;
11307: LD_ADDR_VAR 0 6
11311: PUSH
11312: LD_VAR 0 3
11316: ST_TO_ADDR
// oil := 0 ;
11317: LD_ADDR_VAR 0 3
11321: PUSH
11322: LD_INT 0
11324: ST_TO_ADDR
// if siberite >= 100 then
11325: LD_VAR 0 4
11329: PUSH
11330: LD_INT 100
11332: GREATEREQUAL
11333: IFFALSE 11378
// begin AddCargo ( vehicle , mat_siberit , 100 - occupied ) ;
11335: LD_VAR 0 1
11339: PPUSH
11340: LD_INT 3
11342: PPUSH
11343: LD_INT 100
11345: PUSH
11346: LD_VAR 0 6
11350: MINUS
11351: PPUSH
11352: CALL_OW 291
// siberite := siberite - 100 + occupied ;
11356: LD_ADDR_VAR 0 4
11360: PUSH
11361: LD_VAR 0 4
11365: PUSH
11366: LD_INT 100
11368: MINUS
11369: PUSH
11370: LD_VAR 0 6
11374: PLUS
11375: ST_TO_ADDR
// end else
11376: GO 11403
// begin AddCargo ( vehicle , mat_siberit , siberite ) ;
11378: LD_VAR 0 1
11382: PPUSH
11383: LD_INT 3
11385: PPUSH
11386: LD_VAR 0 4
11390: PPUSH
11391: CALL_OW 291
// siberite := 0 ;
11395: LD_ADDR_VAR 0 4
11399: PUSH
11400: LD_INT 0
11402: ST_TO_ADDR
// end ; end ; end ; result := [ vehicle , crates , oil , siberite ] ;
11403: LD_ADDR_VAR 0 5
11407: PUSH
11408: LD_VAR 0 1
11412: PUSH
11413: LD_VAR 0 2
11417: PUSH
11418: LD_VAR 0 3
11422: PUSH
11423: LD_VAR 0 4
11427: PUSH
11428: EMPTY
11429: LIST
11430: LIST
11431: LIST
11432: LIST
11433: ST_TO_ADDR
// end ;
11434: LD_VAR 0 5
11438: RET
// export function RotateUnit ( in_direction , rotation ) ; var r ; begin
11439: LD_INT 0
11441: PPUSH
11442: PPUSH
// rotation := rotation mod 6 ;
11443: LD_ADDR_VAR 0 2
11447: PUSH
11448: LD_VAR 0 2
11452: PUSH
11453: LD_INT 6
11455: MOD
11456: ST_TO_ADDR
// r := in_direction + rotation ;
11457: LD_ADDR_VAR 0 4
11461: PUSH
11462: LD_VAR 0 1
11466: PUSH
11467: LD_VAR 0 2
11471: PLUS
11472: ST_TO_ADDR
// if r >= 6 then
11473: LD_VAR 0 4
11477: PUSH
11478: LD_INT 6
11480: GREATEREQUAL
11481: IFFALSE 11497
// rotation := rotation - 6 ;
11483: LD_ADDR_VAR 0 2
11487: PUSH
11488: LD_VAR 0 2
11492: PUSH
11493: LD_INT 6
11495: MINUS
11496: ST_TO_ADDR
// if r <= 1 then
11497: LD_VAR 0 4
11501: PUSH
11502: LD_INT 1
11504: LESSEQUAL
11505: IFFALSE 11521
// rotation := rotation + 6 ;
11507: LD_ADDR_VAR 0 2
11511: PUSH
11512: LD_VAR 0 2
11516: PUSH
11517: LD_INT 6
11519: PLUS
11520: ST_TO_ADDR
// result := in_direction + rotation ;
11521: LD_ADDR_VAR 0 3
11525: PUSH
11526: LD_VAR 0 1
11530: PUSH
11531: LD_VAR 0 2
11535: PLUS
11536: ST_TO_ADDR
// end ; end_of_file
11537: LD_VAR 0 3
11541: RET
// on BuildingStarted ( b , u ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
11542: LD_VAR 0 1
11546: PPUSH
11547: CALL_OW 266
11551: PUSH
11552: LD_INT 0
11554: PUSH
11555: LD_INT 1
11557: PUSH
11558: EMPTY
11559: LIST
11560: LIST
11561: IN
11562: IFFALSE 11697
// begin SetBName ( b , @ & GetSide ( b ) ) ;
11564: LD_VAR 0 1
11568: PPUSH
11569: LD_STRING @
11571: PUSH
11572: LD_VAR 0 1
11576: PPUSH
11577: CALL_OW 255
11581: STR
11582: PPUSH
11583: CALL_OW 500
// if GetSide ( b ) = Your_Side then
11587: LD_VAR 0 1
11591: PPUSH
11592: CALL_OW 255
11596: PUSH
11597: LD_OWVAR 2
11601: EQUAL
11602: IFFALSE 11669
// if FilterAllUnits ( [ [ f_side , b ] , [ f_btype , b_depot ] , [ f_or ] , [ f_btype , b_warehouse ] ] ) + 0 = 0 then
11604: LD_INT 22
11606: PUSH
11607: LD_VAR 0 1
11611: PUSH
11612: EMPTY
11613: LIST
11614: LIST
11615: PUSH
11616: LD_INT 30
11618: PUSH
11619: LD_INT 0
11621: PUSH
11622: EMPTY
11623: LIST
11624: LIST
11625: PUSH
11626: LD_INT 2
11628: PUSH
11629: EMPTY
11630: LIST
11631: PUSH
11632: LD_INT 30
11634: PUSH
11635: LD_INT 1
11637: PUSH
11638: EMPTY
11639: LIST
11640: LIST
11641: PUSH
11642: EMPTY
11643: LIST
11644: LIST
11645: LIST
11646: LIST
11647: PPUSH
11648: CALL_OW 69
11652: PUSH
11653: LD_INT 0
11655: PLUS
11656: PUSH
11657: LD_INT 0
11659: EQUAL
11660: IFFALSE 11669
// ToLua ( LUA_IsDepot(); ) ;
11662: LD_STRING LUA_IsDepot();
11664: PPUSH
11665: CALL_OW 559
// if side_tech_lvl [ GetSide ( b ) ] = 4 then
11669: LD_EXP 31
11673: PUSH
11674: LD_VAR 0 1
11678: PPUSH
11679: CALL_OW 255
11683: ARRAY
11684: PUSH
11685: LD_INT 4
11687: EQUAL
11688: IFFALSE 11697
// ToLua ( LUA_SideTechMax() ) ;
11690: LD_STRING LUA_SideTechMax()
11692: PPUSH
11693: CALL_OW 559
// end ; end ;
11697: PPOPN 2
11699: END
// on BuildingCaptured ( b , o , e ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
11700: LD_VAR 0 1
11704: PPUSH
11705: CALL_OW 266
11709: PUSH
11710: LD_INT 0
11712: PUSH
11713: LD_INT 1
11715: PUSH
11716: EMPTY
11717: LIST
11718: LIST
11719: IN
11720: IFFALSE 11903
// begin SetBName ( b , @ & GetSide ( b ) ) ;
11722: LD_VAR 0 1
11726: PPUSH
11727: LD_STRING @
11729: PUSH
11730: LD_VAR 0 1
11734: PPUSH
11735: CALL_OW 255
11739: STR
11740: PPUSH
11741: CALL_OW 500
// if FilterAllUnits ( [ [ f_side , b ] , [ f_btype , b_depot ] , [ f_or ] , [ f_btype , b_warehouse ] ] ) + 0 = 0 then
11745: LD_INT 22
11747: PUSH
11748: LD_VAR 0 1
11752: PUSH
11753: EMPTY
11754: LIST
11755: LIST
11756: PUSH
11757: LD_INT 30
11759: PUSH
11760: LD_INT 0
11762: PUSH
11763: EMPTY
11764: LIST
11765: LIST
11766: PUSH
11767: LD_INT 2
11769: PUSH
11770: EMPTY
11771: LIST
11772: PUSH
11773: LD_INT 30
11775: PUSH
11776: LD_INT 1
11778: PUSH
11779: EMPTY
11780: LIST
11781: LIST
11782: PUSH
11783: EMPTY
11784: LIST
11785: LIST
11786: LIST
11787: LIST
11788: PPUSH
11789: CALL_OW 69
11793: PUSH
11794: LD_INT 0
11796: PLUS
11797: PUSH
11798: LD_INT 0
11800: EQUAL
11801: IFFALSE 11810
// ToLua ( LUA_IsDepot(); ) ;
11803: LD_STRING LUA_IsDepot();
11805: PPUSH
11806: CALL_OW 559
// if side_tech_lvl [ GetSide ( b ) ] = 4 then
11810: LD_EXP 31
11814: PUSH
11815: LD_VAR 0 1
11819: PPUSH
11820: CALL_OW 255
11824: ARRAY
11825: PUSH
11826: LD_INT 4
11828: EQUAL
11829: IFFALSE 11838
// ToLua ( LUA_SideTechMax() ) ;
11831: LD_STRING LUA_SideTechMax()
11833: PPUSH
11834: CALL_OW 559
// if FilterAllUnits ( [ [ f_side , o ] , [ f_btype , b_depot ] , [ f_or ] , [ f_btype , b_warehouse ] ] ) + 0 = 0 then
11838: LD_INT 22
11840: PUSH
11841: LD_VAR 0 2
11845: PUSH
11846: EMPTY
11847: LIST
11848: LIST
11849: PUSH
11850: LD_INT 30
11852: PUSH
11853: LD_INT 0
11855: PUSH
11856: EMPTY
11857: LIST
11858: LIST
11859: PUSH
11860: LD_INT 2
11862: PUSH
11863: EMPTY
11864: LIST
11865: PUSH
11866: LD_INT 30
11868: PUSH
11869: LD_INT 1
11871: PUSH
11872: EMPTY
11873: LIST
11874: LIST
11875: PUSH
11876: EMPTY
11877: LIST
11878: LIST
11879: LIST
11880: LIST
11881: PPUSH
11882: CALL_OW 69
11886: PUSH
11887: LD_INT 0
11889: PLUS
11890: PUSH
11891: LD_INT 0
11893: EQUAL
11894: IFFALSE 11903
// ToLua ( LUA_NoDepot(); ) ;
11896: LD_STRING LUA_NoDepot();
11898: PPUSH
11899: CALL_OW 559
// end ; end ;
11903: PPOPN 3
11905: END
// on UnitDestroyed ( i ) do var side ;
11906: LD_INT 0
11908: PPUSH
// begin if GetType ( i ) = 1 then
11909: LD_VAR 0 1
11913: PPUSH
11914: CALL_OW 247
11918: PUSH
11919: LD_INT 1
11921: EQUAL
11922: IFFALSE 11985
// begin side := GetSide ( i ) ;
11924: LD_ADDR_VAR 0 2
11928: PUSH
11929: LD_VAR 0 1
11933: PPUSH
11934: CALL_OW 255
11938: ST_TO_ADDR
// side_soldiers := Replace ( side_soldiers , side , side_soldiers [ side ] diff i ) ;
11939: LD_ADDR_EXP 46
11943: PUSH
11944: LD_EXP 46
11948: PPUSH
11949: LD_VAR 0 2
11953: PPUSH
11954: LD_EXP 46
11958: PUSH
11959: LD_VAR 0 2
11963: ARRAY
11964: PUSH
11965: LD_VAR 0 1
11969: DIFF
11970: PPUSH
11971: CALL_OW 1
11975: ST_TO_ADDR
// DidPlayerLose ( side ) ;
11976: LD_VAR 0 2
11980: PPUSH
11981: CALL 6923 0 1
// end ; if GetBType ( i ) in [ b_depot , b_warehouse ] then
11985: LD_VAR 0 1
11989: PPUSH
11990: CALL_OW 266
11994: PUSH
11995: LD_INT 0
11997: PUSH
11998: LD_INT 1
12000: PUSH
12001: EMPTY
12002: LIST
12003: LIST
12004: IN
12005: IFFALSE 12072
// if FilterAllUnits ( [ [ f_side , i ] , [ f_btype , b_depot ] , [ f_or ] , [ f_btype , b_warehouse ] ] ) + 0 = 0 then
12007: LD_INT 22
12009: PUSH
12010: LD_VAR 0 1
12014: PUSH
12015: EMPTY
12016: LIST
12017: LIST
12018: PUSH
12019: LD_INT 30
12021: PUSH
12022: LD_INT 0
12024: PUSH
12025: EMPTY
12026: LIST
12027: LIST
12028: PUSH
12029: LD_INT 2
12031: PUSH
12032: EMPTY
12033: LIST
12034: PUSH
12035: LD_INT 30
12037: PUSH
12038: LD_INT 1
12040: PUSH
12041: EMPTY
12042: LIST
12043: LIST
12044: PUSH
12045: EMPTY
12046: LIST
12047: LIST
12048: LIST
12049: LIST
12050: PPUSH
12051: CALL_OW 69
12055: PUSH
12056: LD_INT 0
12058: PLUS
12059: PUSH
12060: LD_INT 0
12062: EQUAL
12063: IFFALSE 12072
// ToLua ( LUA_NoDepot(); ) ;
12065: LD_STRING LUA_NoDepot();
12067: PPUSH
12068: CALL_OW 559
// end ;
12072: PPOPN 2
12074: END
// on SailEvent ( ID ) do var i , j , lost ;
12075: LD_INT 0
12077: PPUSH
12078: PPUSH
12079: PPUSH
// begin case ID of 66 :
12080: LD_VAR 0 1
12084: PUSH
12085: LD_INT 66
12087: DOUBLE
12088: EQUAL
12089: IFTRUE 12093
12091: GO 12243
12093: POP
// begin for i = 1 to Teams do
12094: LD_ADDR_VAR 0 2
12098: PUSH
12099: DOUBLE
12100: LD_INT 1
12102: DEC
12103: ST_TO_ADDR
12104: LD_EXP 6
12108: PUSH
12109: FOR_TO
12110: IFFALSE 12239
// begin lost := 0 ;
12112: LD_ADDR_VAR 0 4
12116: PUSH
12117: LD_INT 0
12119: ST_TO_ADDR
// for j in Teams [ i ] do
12120: LD_ADDR_VAR 0 3
12124: PUSH
12125: LD_EXP 6
12129: PUSH
12130: LD_VAR 0 2
12134: ARRAY
12135: PUSH
12136: FOR_IN
12137: IFFALSE 12171
// if side_isalive [ j ] = 0 then
12139: LD_EXP 53
12143: PUSH
12144: LD_VAR 0 3
12148: ARRAY
12149: PUSH
12150: LD_INT 0
12152: EQUAL
12153: IFFALSE 12169
// lost := lost + 1 ;
12155: LD_ADDR_VAR 0 4
12159: PUSH
12160: LD_VAR 0 4
12164: PUSH
12165: LD_INT 1
12167: PLUS
12168: ST_TO_ADDR
12169: GO 12136
12171: POP
12172: POP
// if lost = Teams [ i ] + 0 then
12173: LD_VAR 0 4
12177: PUSH
12178: LD_EXP 6
12182: PUSH
12183: LD_VAR 0 2
12187: ARRAY
12188: PUSH
12189: LD_INT 0
12191: PLUS
12192: EQUAL
12193: IFFALSE 12235
// if Your_Side = 9 or Your_Side in Teams [ i ] then
12195: LD_OWVAR 2
12199: PUSH
12200: LD_INT 9
12202: EQUAL
12203: PUSH
12204: LD_OWVAR 2
12208: PUSH
12209: LD_EXP 6
12213: PUSH
12214: LD_VAR 0 2
12218: ARRAY
12219: IN
12220: OR
12221: IFFALSE 12229
// YouLostInMultiplayer else
12223: CALL_OW 107
12227: GO 12233
// YouWinInMultiplayer else
12229: CALL_OW 106
12233: GO 12237
// continue end ;
12235: GO 12109
12237: GO 12109
12239: POP
12240: POP
// end ; 67 :
12241: GO 12334
12243: LD_INT 67
12245: DOUBLE
12246: EQUAL
12247: IFTRUE 12251
12249: GO 12333
12251: POP
// begin if not victory_cond = 0 then
12252: LD_EXP 27
12256: PUSH
12257: LD_INT 0
12259: EQUAL
12260: NOT
12261: IFFALSE 12331
// begin for i = 1 to Teams do
12263: LD_ADDR_VAR 0 2
12267: PUSH
12268: DOUBLE
12269: LD_INT 1
12271: DEC
12272: ST_TO_ADDR
12273: LD_EXP 6
12277: PUSH
12278: FOR_TO
12279: IFFALSE 12329
// begin if team_siberite_stocked [ i ] >= victory_cond then
12281: LD_EXP 60
12285: PUSH
12286: LD_VAR 0 2
12290: ARRAY
12291: PUSH
12292: LD_EXP 27
12296: GREATEREQUAL
12297: IFFALSE 12327
// if Your_Side in Teams [ i ] then
12299: LD_OWVAR 2
12303: PUSH
12304: LD_EXP 6
12308: PUSH
12309: LD_VAR 0 2
12313: ARRAY
12314: IN
12315: IFFALSE 12323
// YouWinInMultiplayer else
12317: CALL_OW 106
12321: GO 12327
// YouLostInMultiplayer ;
12323: CALL_OW 107
// end ;
12327: GO 12278
12329: POP
12330: POP
// end ; end ; end ;
12331: GO 12334
12333: POP
// end ;
12334: PPOPN 4
12336: END
// on CustomCommand ( side , ComID , order , reserved1 , reserved2 , reserved3 ) do var i ;
12337: LD_INT 0
12339: PPUSH
// begin case ComID of 201 :
12340: LD_VAR 0 2
12344: PUSH
12345: LD_INT 201
12347: DOUBLE
12348: EQUAL
12349: IFTRUE 12353
12351: GO 12483
12353: POP
// begin if side = Your_Side then
12354: LD_VAR 0 1
12358: PUSH
12359: LD_OWVAR 2
12363: EQUAL
12364: IFFALSE 12481
// ToLua ( LUA_UpdateUpgradeCost( & cost_per_upgrade [ side_tech_lvl [ side ] + 1 ] [ reinforce_cost ] [ 1 ] & , & cost_per_upgrade [ side_tech_lvl [ side ] + 1 ] [ reinforce_cost ] [ 2 ] & , & cost_per_upgrade [ side_tech_lvl [ side ] + 1 ] [ reinforce_cost ] [ 3 ] & ); ) ;
12366: LD_STRING LUA_UpdateUpgradeCost(
12368: PUSH
12369: LD_EXP 55
12373: PUSH
12374: LD_EXP 31
12378: PUSH
12379: LD_VAR 0 1
12383: ARRAY
12384: PUSH
12385: LD_INT 1
12387: PLUS
12388: ARRAY
12389: PUSH
12390: LD_EXP 28
12394: ARRAY
12395: PUSH
12396: LD_INT 1
12398: ARRAY
12399: STR
12400: PUSH
12401: LD_STRING ,
12403: STR
12404: PUSH
12405: LD_EXP 55
12409: PUSH
12410: LD_EXP 31
12414: PUSH
12415: LD_VAR 0 1
12419: ARRAY
12420: PUSH
12421: LD_INT 1
12423: PLUS
12424: ARRAY
12425: PUSH
12426: LD_EXP 28
12430: ARRAY
12431: PUSH
12432: LD_INT 2
12434: ARRAY
12435: STR
12436: PUSH
12437: LD_STRING ,
12439: STR
12440: PUSH
12441: LD_EXP 55
12445: PUSH
12446: LD_EXP 31
12450: PUSH
12451: LD_VAR 0 1
12455: ARRAY
12456: PUSH
12457: LD_INT 1
12459: PLUS
12460: ARRAY
12461: PUSH
12462: LD_EXP 28
12466: ARRAY
12467: PUSH
12468: LD_INT 3
12470: ARRAY
12471: STR
12472: PUSH
12473: LD_STRING );
12475: STR
12476: PPUSH
12477: CALL_OW 559
// end ; 202 :
12481: GO 15841
12483: LD_INT 202
12485: DOUBLE
12486: EQUAL
12487: IFTRUE 12491
12489: GO 12640
12491: POP
// begin if side_reinforcement_amount [ side ] < 0 or side_reinforcement_amount [ side ] > side_reinforcement_cap [ side ] then
12492: LD_EXP 56
12496: PUSH
12497: LD_VAR 0 1
12501: ARRAY
12502: PUSH
12503: LD_INT 0
12505: LESS
12506: PUSH
12507: LD_EXP 56
12511: PUSH
12512: LD_VAR 0 1
12516: ARRAY
12517: PUSH
12518: LD_EXP 57
12522: PUSH
12523: LD_VAR 0 1
12527: ARRAY
12528: GREATER
12529: OR
12530: IFFALSE 12555
// side_reinforcement_amount := Replace ( side_reinforcement_amount , side , 1 ) ;
12532: LD_ADDR_EXP 56
12536: PUSH
12537: LD_EXP 56
12541: PPUSH
12542: LD_VAR 0 1
12546: PPUSH
12547: LD_INT 1
12549: PPUSH
12550: CALL_OW 1
12554: ST_TO_ADDR
// if side = Your_Side then
12555: LD_VAR 0 1
12559: PUSH
12560: LD_OWVAR 2
12564: EQUAL
12565: IFFALSE 12638
// ToLua ( LUA_UpdateReinforceCost( & side_reinforcement_amount [ side ] & * & cost_per_human [ reinforce_cost ] & , & 0 & , & 0 & , & side_reinforcement_amount [ side ] & ); ) ;
12567: LD_STRING LUA_UpdateReinforceCost(
12569: PUSH
12570: LD_EXP 56
12574: PUSH
12575: LD_VAR 0 1
12579: ARRAY
12580: STR
12581: PUSH
12582: LD_STRING *
12584: STR
12585: PUSH
12586: LD_EXP 54
12590: PUSH
12591: LD_EXP 28
12595: ARRAY
12596: STR
12597: PUSH
12598: LD_STRING ,
12600: STR
12601: PUSH
12602: LD_INT 0
12604: STR
12605: PUSH
12606: LD_STRING ,
12608: STR
12609: PUSH
12610: LD_INT 0
12612: STR
12613: PUSH
12614: LD_STRING ,
12616: STR
12617: PUSH
12618: LD_EXP 56
12622: PUSH
12623: LD_VAR 0 1
12627: ARRAY
12628: STR
12629: PUSH
12630: LD_STRING );
12632: STR
12633: PPUSH
12634: CALL_OW 559
// end ; 2020 :
12638: GO 15841
12640: LD_INT 2020
12642: DOUBLE
12643: EQUAL
12644: IFTRUE 12648
12646: GO 12785
12648: POP
// begin if side_reinforcement_amount [ side ] > 1 then
12649: LD_EXP 56
12653: PUSH
12654: LD_VAR 0 1
12658: ARRAY
12659: PUSH
12660: LD_INT 1
12662: GREATER
12663: IFFALSE 12700
// side_reinforcement_amount := Replace ( side_reinforcement_amount , side , side_reinforcement_amount [ side ] - 1 ) ;
12665: LD_ADDR_EXP 56
12669: PUSH
12670: LD_EXP 56
12674: PPUSH
12675: LD_VAR 0 1
12679: PPUSH
12680: LD_EXP 56
12684: PUSH
12685: LD_VAR 0 1
12689: ARRAY
12690: PUSH
12691: LD_INT 1
12693: MINUS
12694: PPUSH
12695: CALL_OW 1
12699: ST_TO_ADDR
// if side = Your_Side then
12700: LD_VAR 0 1
12704: PUSH
12705: LD_OWVAR 2
12709: EQUAL
12710: IFFALSE 12783
// ToLua ( LUA_UpdateReinforceCost( & side_reinforcement_amount [ side ] & * & cost_per_human [ reinforce_cost ] & , & 0 & , & 0 & , & side_reinforcement_amount [ side ] & ); ) ;
12712: LD_STRING LUA_UpdateReinforceCost(
12714: PUSH
12715: LD_EXP 56
12719: PUSH
12720: LD_VAR 0 1
12724: ARRAY
12725: STR
12726: PUSH
12727: LD_STRING *
12729: STR
12730: PUSH
12731: LD_EXP 54
12735: PUSH
12736: LD_EXP 28
12740: ARRAY
12741: STR
12742: PUSH
12743: LD_STRING ,
12745: STR
12746: PUSH
12747: LD_INT 0
12749: STR
12750: PUSH
12751: LD_STRING ,
12753: STR
12754: PUSH
12755: LD_INT 0
12757: STR
12758: PUSH
12759: LD_STRING ,
12761: STR
12762: PUSH
12763: LD_EXP 56
12767: PUSH
12768: LD_VAR 0 1
12772: ARRAY
12773: STR
12774: PUSH
12775: LD_STRING );
12777: STR
12778: PPUSH
12779: CALL_OW 559
// end ; 2021 :
12783: GO 15841
12785: LD_INT 2021
12787: DOUBLE
12788: EQUAL
12789: IFTRUE 12793
12791: GO 12938
12793: POP
// begin if side_reinforcement_amount [ side ] < side_reinforcement_cap [ side ] then
12794: LD_EXP 56
12798: PUSH
12799: LD_VAR 0 1
12803: ARRAY
12804: PUSH
12805: LD_EXP 57
12809: PUSH
12810: LD_VAR 0 1
12814: ARRAY
12815: LESS
12816: IFFALSE 12853
// side_reinforcement_amount := Replace ( side_reinforcement_amount , side , side_reinforcement_amount [ side ] + 1 ) ;
12818: LD_ADDR_EXP 56
12822: PUSH
12823: LD_EXP 56
12827: PPUSH
12828: LD_VAR 0 1
12832: PPUSH
12833: LD_EXP 56
12837: PUSH
12838: LD_VAR 0 1
12842: ARRAY
12843: PUSH
12844: LD_INT 1
12846: PLUS
12847: PPUSH
12848: CALL_OW 1
12852: ST_TO_ADDR
// if side = Your_Side then
12853: LD_VAR 0 1
12857: PUSH
12858: LD_OWVAR 2
12862: EQUAL
12863: IFFALSE 12936
// ToLua ( LUA_UpdateReinforceCost( & side_reinforcement_amount [ side ] & * & cost_per_human [ reinforce_cost ] & , & 0 & , & 0 & , & side_reinforcement_amount [ side ] & ); ) ;
12865: LD_STRING LUA_UpdateReinforceCost(
12867: PUSH
12868: LD_EXP 56
12872: PUSH
12873: LD_VAR 0 1
12877: ARRAY
12878: STR
12879: PUSH
12880: LD_STRING *
12882: STR
12883: PUSH
12884: LD_EXP 54
12888: PUSH
12889: LD_EXP 28
12893: ARRAY
12894: STR
12895: PUSH
12896: LD_STRING ,
12898: STR
12899: PUSH
12900: LD_INT 0
12902: STR
12903: PUSH
12904: LD_STRING ,
12906: STR
12907: PUSH
12908: LD_INT 0
12910: STR
12911: PUSH
12912: LD_STRING ,
12914: STR
12915: PUSH
12916: LD_EXP 56
12920: PUSH
12921: LD_VAR 0 1
12925: ARRAY
12926: STR
12927: PUSH
12928: LD_STRING );
12930: STR
12931: PPUSH
12932: CALL_OW 559
// end ; 203 :
12936: GO 15841
12938: LD_INT 203
12940: DOUBLE
12941: EQUAL
12942: IFTRUE 12946
12944: GO 13000
12946: POP
// begin if side = Your_Side then
12947: LD_VAR 0 1
12951: PUSH
12952: LD_OWVAR 2
12956: EQUAL
12957: IFFALSE 12998
// ToLua ( LUA_UpdateSiberiteSent( & team_siberite_stocked [ Side_Teams [ side ] ] & , & victory_cond & ); ) ;
12959: LD_STRING LUA_UpdateSiberiteSent(
12961: PUSH
12962: LD_EXP 60
12966: PUSH
12967: LD_EXP 5
12971: PUSH
12972: LD_VAR 0 1
12976: ARRAY
12977: ARRAY
12978: STR
12979: PUSH
12980: LD_STRING ,
12982: STR
12983: PUSH
12984: LD_EXP 27
12988: STR
12989: PUSH
12990: LD_STRING );
12992: STR
12993: PPUSH
12994: CALL_OW 559
// end ; 204 :
12998: GO 15841
13000: LD_INT 204
13002: DOUBLE
13003: EQUAL
13004: IFTRUE 13008
13006: GO 14037
13008: POP
// begin case order of 1 :
13009: LD_VAR 0 3
13013: PUSH
13014: LD_INT 1
13016: DOUBLE
13017: EQUAL
13018: IFTRUE 13022
13020: GO 13322
13022: POP
// begin side_pending_order := Replace ( side_pending_order , side , Replace ( side_pending_order [ side ] , 1 , side_reinforcement_amount [ side ] * cost_per_human [ reinforce_cost ] ) ) ;
13023: LD_ADDR_EXP 58
13027: PUSH
13028: LD_EXP 58
13032: PPUSH
13033: LD_VAR 0 1
13037: PPUSH
13038: LD_EXP 58
13042: PUSH
13043: LD_VAR 0 1
13047: ARRAY
13048: PPUSH
13049: LD_INT 1
13051: PPUSH
13052: LD_EXP 56
13056: PUSH
13057: LD_VAR 0 1
13061: ARRAY
13062: PUSH
13063: LD_EXP 54
13067: PUSH
13068: LD_EXP 28
13072: ARRAY
13073: MUL
13074: PPUSH
13075: CALL_OW 1
13079: PPUSH
13080: CALL_OW 1
13084: ST_TO_ADDR
// side_pending_order := Replace ( side_pending_order , side , Replace ( side_pending_order [ side ] , 2 , 0 ) ) ;
13085: LD_ADDR_EXP 58
13089: PUSH
13090: LD_EXP 58
13094: PPUSH
13095: LD_VAR 0 1
13099: PPUSH
13100: LD_EXP 58
13104: PUSH
13105: LD_VAR 0 1
13109: ARRAY
13110: PPUSH
13111: LD_INT 2
13113: PPUSH
13114: LD_INT 0
13116: PPUSH
13117: CALL_OW 1
13121: PPUSH
13122: CALL_OW 1
13126: ST_TO_ADDR
// side_pending_order := Replace ( side_pending_order , side , Replace ( side_pending_order [ side ] , 3 , 0 ) ) ;
13127: LD_ADDR_EXP 58
13131: PUSH
13132: LD_EXP 58
13136: PPUSH
13137: LD_VAR 0 1
13141: PPUSH
13142: LD_EXP 58
13146: PUSH
13147: LD_VAR 0 1
13151: ARRAY
13152: PPUSH
13153: LD_INT 3
13155: PPUSH
13156: LD_INT 0
13158: PPUSH
13159: CALL_OW 1
13163: PPUSH
13164: CALL_OW 1
13168: ST_TO_ADDR
// if side = Your_Side then
13169: LD_VAR 0 1
13173: PUSH
13174: LD_OWVAR 2
13178: EQUAL
13179: IFFALSE 13320
// begin ToLua ( LUA_UpdateTransferResources( & side_pending_order [ side ] [ 1 ] & , & side_pending_order [ side ] [ 2 ] & , & side_pending_order [ side ] [ 3 ] & , & 0 & , & 0 & ); ) ;
13181: LD_STRING LUA_UpdateTransferResources(
13183: PUSH
13184: LD_EXP 58
13188: PUSH
13189: LD_VAR 0 1
13193: ARRAY
13194: PUSH
13195: LD_INT 1
13197: ARRAY
13198: STR
13199: PUSH
13200: LD_STRING ,
13202: STR
13203: PUSH
13204: LD_EXP 58
13208: PUSH
13209: LD_VAR 0 1
13213: ARRAY
13214: PUSH
13215: LD_INT 2
13217: ARRAY
13218: STR
13219: PUSH
13220: LD_STRING ,
13222: STR
13223: PUSH
13224: LD_EXP 58
13228: PUSH
13229: LD_VAR 0 1
13233: ARRAY
13234: PUSH
13235: LD_INT 3
13237: ARRAY
13238: STR
13239: PUSH
13240: LD_STRING ,
13242: STR
13243: PUSH
13244: LD_INT 0
13246: STR
13247: PUSH
13248: LD_STRING ,
13250: STR
13251: PUSH
13252: LD_INT 0
13254: STR
13255: PUSH
13256: LD_STRING );
13258: STR
13259: PPUSH
13260: CALL_OW 559
// ToLua ( LUA_OrderIssued(); ) ;
13264: LD_STRING LUA_OrderIssued();
13266: PPUSH
13267: CALL_OW 559
// ToLua ( LUA_UpdateTransferResources( & 0 & , & 0 & , & 0 & , & 0 & , & order & ); ) ;
13271: LD_STRING LUA_UpdateTransferResources(
13273: PUSH
13274: LD_INT 0
13276: STR
13277: PUSH
13278: LD_STRING ,
13280: STR
13281: PUSH
13282: LD_INT 0
13284: STR
13285: PUSH
13286: LD_STRING ,
13288: STR
13289: PUSH
13290: LD_INT 0
13292: STR
13293: PUSH
13294: LD_STRING ,
13296: STR
13297: PUSH
13298: LD_INT 0
13300: STR
13301: PUSH
13302: LD_STRING ,
13304: STR
13305: PUSH
13306: LD_VAR 0 3
13310: STR
13311: PUSH
13312: LD_STRING );
13314: STR
13315: PPUSH
13316: CALL_OW 559
// end ; end ; 2 :
13320: GO 13914
13322: LD_INT 2
13324: DOUBLE
13325: EQUAL
13326: IFTRUE 13330
13328: GO 13694
13330: POP
// begin side_pending_order := Replace ( side_pending_order , side , Replace ( side_pending_order [ side ] , 1 , cost_per_upgrade [ side_tech_lvl [ side ] + 1 ] [ reinforce_cost ] [ 1 ] ) ) ;
13331: LD_ADDR_EXP 58
13335: PUSH
13336: LD_EXP 58
13340: PPUSH
13341: LD_VAR 0 1
13345: PPUSH
13346: LD_EXP 58
13350: PUSH
13351: LD_VAR 0 1
13355: ARRAY
13356: PPUSH
13357: LD_INT 1
13359: PPUSH
13360: LD_EXP 55
13364: PUSH
13365: LD_EXP 31
13369: PUSH
13370: LD_VAR 0 1
13374: ARRAY
13375: PUSH
13376: LD_INT 1
13378: PLUS
13379: ARRAY
13380: PUSH
13381: LD_EXP 28
13385: ARRAY
13386: PUSH
13387: LD_INT 1
13389: ARRAY
13390: PPUSH
13391: CALL_OW 1
13395: PPUSH
13396: CALL_OW 1
13400: ST_TO_ADDR
// side_pending_order := Replace ( side_pending_order , side , Replace ( side_pending_order [ side ] , 2 , cost_per_upgrade [ side_tech_lvl [ side ] + 1 ] [ reinforce_cost ] [ 2 ] ) ) ;
13401: LD_ADDR_EXP 58
13405: PUSH
13406: LD_EXP 58
13410: PPUSH
13411: LD_VAR 0 1
13415: PPUSH
13416: LD_EXP 58
13420: PUSH
13421: LD_VAR 0 1
13425: ARRAY
13426: PPUSH
13427: LD_INT 2
13429: PPUSH
13430: LD_EXP 55
13434: PUSH
13435: LD_EXP 31
13439: PUSH
13440: LD_VAR 0 1
13444: ARRAY
13445: PUSH
13446: LD_INT 1
13448: PLUS
13449: ARRAY
13450: PUSH
13451: LD_EXP 28
13455: ARRAY
13456: PUSH
13457: LD_INT 2
13459: ARRAY
13460: PPUSH
13461: CALL_OW 1
13465: PPUSH
13466: CALL_OW 1
13470: ST_TO_ADDR
// side_pending_order := Replace ( side_pending_order , side , Replace ( side_pending_order [ side ] , 3 , cost_per_upgrade [ side_tech_lvl [ side ] + 1 ] [ reinforce_cost ] [ 3 ] ) ) ;
13471: LD_ADDR_EXP 58
13475: PUSH
13476: LD_EXP 58
13480: PPUSH
13481: LD_VAR 0 1
13485: PPUSH
13486: LD_EXP 58
13490: PUSH
13491: LD_VAR 0 1
13495: ARRAY
13496: PPUSH
13497: LD_INT 3
13499: PPUSH
13500: LD_EXP 55
13504: PUSH
13505: LD_EXP 31
13509: PUSH
13510: LD_VAR 0 1
13514: ARRAY
13515: PUSH
13516: LD_INT 1
13518: PLUS
13519: ARRAY
13520: PUSH
13521: LD_EXP 28
13525: ARRAY
13526: PUSH
13527: LD_INT 3
13529: ARRAY
13530: PPUSH
13531: CALL_OW 1
13535: PPUSH
13536: CALL_OW 1
13540: ST_TO_ADDR
// if side = Your_Side then
13541: LD_VAR 0 1
13545: PUSH
13546: LD_OWVAR 2
13550: EQUAL
13551: IFFALSE 13692
// begin ToLua ( LUA_UpdateTransferResources( & side_pending_order [ side ] [ 1 ] & , & side_pending_order [ side ] [ 2 ] & , & side_pending_order [ side ] [ 3 ] & , & 0 & , & 0 & ); ) ;
13553: LD_STRING LUA_UpdateTransferResources(
13555: PUSH
13556: LD_EXP 58
13560: PUSH
13561: LD_VAR 0 1
13565: ARRAY
13566: PUSH
13567: LD_INT 1
13569: ARRAY
13570: STR
13571: PUSH
13572: LD_STRING ,
13574: STR
13575: PUSH
13576: LD_EXP 58
13580: PUSH
13581: LD_VAR 0 1
13585: ARRAY
13586: PUSH
13587: LD_INT 2
13589: ARRAY
13590: STR
13591: PUSH
13592: LD_STRING ,
13594: STR
13595: PUSH
13596: LD_EXP 58
13600: PUSH
13601: LD_VAR 0 1
13605: ARRAY
13606: PUSH
13607: LD_INT 3
13609: ARRAY
13610: STR
13611: PUSH
13612: LD_STRING ,
13614: STR
13615: PUSH
13616: LD_INT 0
13618: STR
13619: PUSH
13620: LD_STRING ,
13622: STR
13623: PUSH
13624: LD_INT 0
13626: STR
13627: PUSH
13628: LD_STRING );
13630: STR
13631: PPUSH
13632: CALL_OW 559
// ToLua ( LUA_OrderIssued(); ) ;
13636: LD_STRING LUA_OrderIssued();
13638: PPUSH
13639: CALL_OW 559
// ToLua ( LUA_UpdateTransferResources( & 0 & , & 0 & , & 0 & , & 0 & , & order & ); ) ;
13643: LD_STRING LUA_UpdateTransferResources(
13645: PUSH
13646: LD_INT 0
13648: STR
13649: PUSH
13650: LD_STRING ,
13652: STR
13653: PUSH
13654: LD_INT 0
13656: STR
13657: PUSH
13658: LD_STRING ,
13660: STR
13661: PUSH
13662: LD_INT 0
13664: STR
13665: PUSH
13666: LD_STRING ,
13668: STR
13669: PUSH
13670: LD_INT 0
13672: STR
13673: PUSH
13674: LD_STRING ,
13676: STR
13677: PUSH
13678: LD_VAR 0 3
13682: STR
13683: PUSH
13684: LD_STRING );
13686: STR
13687: PPUSH
13688: CALL_OW 559
// end ; end ; 3 :
13692: GO 13914
13694: LD_INT 3
13696: DOUBLE
13697: EQUAL
13698: IFTRUE 13702
13700: GO 13913
13702: POP
// begin side_pending_order := Replace ( side_pending_order , side , Replace ( side_pending_order [ side ] , 1 , 0 ) ) ;
13703: LD_ADDR_EXP 58
13707: PUSH
13708: LD_EXP 58
13712: PPUSH
13713: LD_VAR 0 1
13717: PPUSH
13718: LD_EXP 58
13722: PUSH
13723: LD_VAR 0 1
13727: ARRAY
13728: PPUSH
13729: LD_INT 1
13731: PPUSH
13732: LD_INT 0
13734: PPUSH
13735: CALL_OW 1
13739: PPUSH
13740: CALL_OW 1
13744: ST_TO_ADDR
// side_pending_order := Replace ( side_pending_order , side , Replace ( side_pending_order [ side ] , 2 , 0 ) ) ;
13745: LD_ADDR_EXP 58
13749: PUSH
13750: LD_EXP 58
13754: PPUSH
13755: LD_VAR 0 1
13759: PPUSH
13760: LD_EXP 58
13764: PUSH
13765: LD_VAR 0 1
13769: ARRAY
13770: PPUSH
13771: LD_INT 2
13773: PPUSH
13774: LD_INT 0
13776: PPUSH
13777: CALL_OW 1
13781: PPUSH
13782: CALL_OW 1
13786: ST_TO_ADDR
// side_pending_order := Replace ( side_pending_order , side , Replace ( side_pending_order [ side ] , 3 , 10 ) ) ;
13787: LD_ADDR_EXP 58
13791: PUSH
13792: LD_EXP 58
13796: PPUSH
13797: LD_VAR 0 1
13801: PPUSH
13802: LD_EXP 58
13806: PUSH
13807: LD_VAR 0 1
13811: ARRAY
13812: PPUSH
13813: LD_INT 3
13815: PPUSH
13816: LD_INT 10
13818: PPUSH
13819: CALL_OW 1
13823: PPUSH
13824: CALL_OW 1
13828: ST_TO_ADDR
// if side = Your_Side then
13829: LD_VAR 0 1
13833: PUSH
13834: LD_OWVAR 2
13838: EQUAL
13839: IFFALSE 13911
// begin ToLua ( LUA_UpdateTransferResources( & 0 & , & 0 & , & team_siberite_stocked [ Side_Teams [ side ] ] & , & victory_cond & , & 0 & ); ) ;
13841: LD_STRING LUA_UpdateTransferResources(
13843: PUSH
13844: LD_INT 0
13846: STR
13847: PUSH
13848: LD_STRING ,
13850: STR
13851: PUSH
13852: LD_INT 0
13854: STR
13855: PUSH
13856: LD_STRING ,
13858: STR
13859: PUSH
13860: LD_EXP 60
13864: PUSH
13865: LD_EXP 5
13869: PUSH
13870: LD_VAR 0 1
13874: ARRAY
13875: ARRAY
13876: STR
13877: PUSH
13878: LD_STRING ,
13880: STR
13881: PUSH
13882: LD_EXP 27
13886: STR
13887: PUSH
13888: LD_STRING ,
13890: STR
13891: PUSH
13892: LD_INT 0
13894: STR
13895: PUSH
13896: LD_STRING );
13898: STR
13899: PPUSH
13900: CALL_OW 559
// ToLua ( LUA_OrderIssued(); ) ;
13904: LD_STRING LUA_OrderIssued();
13906: PPUSH
13907: CALL_OW 559
// end ; end ; end ;
13911: GO 13914
13913: POP
// if side = Your_Side then
13914: LD_VAR 0 1
13918: PUSH
13919: LD_OWVAR 2
13923: EQUAL
13924: IFFALSE 14010
// begin ToLua ( LUA_CannotSendShipment(); ) ;
13926: LD_STRING LUA_CannotSendShipment();
13928: PPUSH
13929: CALL_OW 559
// ToLua ( LUA_UpdateTransferZone( & team_transfer_zones [ Side_Teams [ side ] ] [ side_chosen_zone [ side ] ] & ) ) ;
13933: LD_STRING LUA_UpdateTransferZone(
13935: PUSH
13936: LD_EXP 61
13940: PUSH
13941: LD_EXP 5
13945: PUSH
13946: LD_VAR 0 1
13950: ARRAY
13951: ARRAY
13952: PUSH
13953: LD_EXP 63
13957: PUSH
13958: LD_VAR 0 1
13962: ARRAY
13963: ARRAY
13964: STR
13965: PUSH
13966: LD_STRING )
13968: STR
13969: PPUSH
13970: CALL_OW 559
// SetAreaMapShow ( team_transfer_zones [ Side_Teams [ side ] ] [ side_chosen_zone [ side ] ] , 1 ) ;
13974: LD_EXP 61
13978: PUSH
13979: LD_EXP 5
13983: PUSH
13984: LD_VAR 0 1
13988: ARRAY
13989: ARRAY
13990: PUSH
13991: LD_EXP 63
13995: PUSH
13996: LD_VAR 0 1
14000: ARRAY
14001: ARRAY
14002: PPUSH
14003: LD_INT 1
14005: PPUSH
14006: CALL_OW 424
// end ; side_order_type := Replace ( side_order_type , side , order ) ;
14010: LD_ADDR_EXP 67
14014: PUSH
14015: LD_EXP 67
14019: PPUSH
14020: LD_VAR 0 1
14024: PPUSH
14025: LD_VAR 0 3
14029: PPUSH
14030: CALL_OW 1
14034: ST_TO_ADDR
// end ; 2040 :
14035: GO 15841
14037: LD_INT 2040
14039: DOUBLE
14040: EQUAL
14041: IFTRUE 14045
14043: GO 14131
14045: POP
// begin side_zone_locked := Replace ( side_zone_locked , side , 1 ) ;
14046: LD_ADDR_EXP 64
14050: PUSH
14051: LD_EXP 64
14055: PPUSH
14056: LD_VAR 0 1
14060: PPUSH
14061: LD_INT 1
14063: PPUSH
14064: CALL_OW 1
14068: ST_TO_ADDR
// if side = Your_Side then
14069: LD_VAR 0 1
14073: PUSH
14074: LD_OWVAR 2
14078: EQUAL
14079: IFFALSE 14129
// begin ToLua ( LUA_ChosenTransferZone(); ) ;
14081: LD_STRING LUA_ChosenTransferZone();
14083: PPUSH
14084: CALL_OW 559
// ToLua ( LUA_UpdateTransferZone( & team_transfer_zones [ Side_Teams [ side ] ] [ side_chosen_zone [ side ] ] & ) ) ;
14088: LD_STRING LUA_UpdateTransferZone(
14090: PUSH
14091: LD_EXP 61
14095: PUSH
14096: LD_EXP 5
14100: PUSH
14101: LD_VAR 0 1
14105: ARRAY
14106: ARRAY
14107: PUSH
14108: LD_EXP 63
14112: PUSH
14113: LD_VAR 0 1
14117: ARRAY
14118: ARRAY
14119: STR
14120: PUSH
14121: LD_STRING )
14123: STR
14124: PPUSH
14125: CALL_OW 559
// end ; end ; 2041 :
14129: GO 15841
14131: LD_INT 2041
14133: DOUBLE
14134: EQUAL
14135: IFTRUE 14139
14137: GO 14371
14139: POP
// begin if side = Your_Side then
14140: LD_VAR 0 1
14144: PUSH
14145: LD_OWVAR 2
14149: EQUAL
14150: IFFALSE 14188
// SetAreaMapShow ( team_transfer_zones [ Side_Teams [ side ] ] [ side_chosen_zone [ side ] ] , 0 ) ;
14152: LD_EXP 61
14156: PUSH
14157: LD_EXP 5
14161: PUSH
14162: LD_VAR 0 1
14166: ARRAY
14167: ARRAY
14168: PUSH
14169: LD_EXP 63
14173: PUSH
14174: LD_VAR 0 1
14178: ARRAY
14179: ARRAY
14180: PPUSH
14181: LD_INT 0
14183: PPUSH
14184: CALL_OW 424
// side_chosen_zone := Replace ( side_chosen_zone , side , side_chosen_zone [ side ] - 1 ) ;
14188: LD_ADDR_EXP 63
14192: PUSH
14193: LD_EXP 63
14197: PPUSH
14198: LD_VAR 0 1
14202: PPUSH
14203: LD_EXP 63
14207: PUSH
14208: LD_VAR 0 1
14212: ARRAY
14213: PUSH
14214: LD_INT 1
14216: MINUS
14217: PPUSH
14218: CALL_OW 1
14222: ST_TO_ADDR
// if side_chosen_zone [ side ] < 1 then
14223: LD_EXP 63
14227: PUSH
14228: LD_VAR 0 1
14232: ARRAY
14233: PUSH
14234: LD_INT 1
14236: LESS
14237: IFFALSE 14280
// side_chosen_zone := Replace ( side_chosen_zone , side , team_transfer_zones [ Side_Teams [ side ] ] + 0 ) ;
14239: LD_ADDR_EXP 63
14243: PUSH
14244: LD_EXP 63
14248: PPUSH
14249: LD_VAR 0 1
14253: PPUSH
14254: LD_EXP 61
14258: PUSH
14259: LD_EXP 5
14263: PUSH
14264: LD_VAR 0 1
14268: ARRAY
14269: ARRAY
14270: PUSH
14271: LD_INT 0
14273: PLUS
14274: PPUSH
14275: CALL_OW 1
14279: ST_TO_ADDR
// if side = Your_Side then
14280: LD_VAR 0 1
14284: PUSH
14285: LD_OWVAR 2
14289: EQUAL
14290: IFFALSE 14369
// begin ToLua ( LUA_UpdateTransferZone( & team_transfer_zones [ Side_Teams [ side ] ] [ side_chosen_zone [ side ] ] & ) ) ;
14292: LD_STRING LUA_UpdateTransferZone(
14294: PUSH
14295: LD_EXP 61
14299: PUSH
14300: LD_EXP 5
14304: PUSH
14305: LD_VAR 0 1
14309: ARRAY
14310: ARRAY
14311: PUSH
14312: LD_EXP 63
14316: PUSH
14317: LD_VAR 0 1
14321: ARRAY
14322: ARRAY
14323: STR
14324: PUSH
14325: LD_STRING )
14327: STR
14328: PPUSH
14329: CALL_OW 559
// SetAreaMapShow ( team_transfer_zones [ Side_Teams [ side ] ] [ side_chosen_zone [ side ] ] , 1 ) ;
14333: LD_EXP 61
14337: PUSH
14338: LD_EXP 5
14342: PUSH
14343: LD_VAR 0 1
14347: ARRAY
14348: ARRAY
14349: PUSH
14350: LD_EXP 63
14354: PUSH
14355: LD_VAR 0 1
14359: ARRAY
14360: ARRAY
14361: PPUSH
14362: LD_INT 1
14364: PPUSH
14365: CALL_OW 424
// end ; end ; 2042 :
14369: GO 15841
14371: LD_INT 2042
14373: DOUBLE
14374: EQUAL
14375: IFTRUE 14379
14377: GO 14611
14379: POP
// begin if side = Your_Side then
14380: LD_VAR 0 1
14384: PUSH
14385: LD_OWVAR 2
14389: EQUAL
14390: IFFALSE 14428
// SetAreaMapShow ( team_transfer_zones [ Side_Teams [ side ] ] [ side_chosen_zone [ side ] ] , 0 ) ;
14392: LD_EXP 61
14396: PUSH
14397: LD_EXP 5
14401: PUSH
14402: LD_VAR 0 1
14406: ARRAY
14407: ARRAY
14408: PUSH
14409: LD_EXP 63
14413: PUSH
14414: LD_VAR 0 1
14418: ARRAY
14419: ARRAY
14420: PPUSH
14421: LD_INT 0
14423: PPUSH
14424: CALL_OW 424
// side_chosen_zone := Replace ( side_chosen_zone , side , side_chosen_zone [ side ] + 1 ) ;
14428: LD_ADDR_EXP 63
14432: PUSH
14433: LD_EXP 63
14437: PPUSH
14438: LD_VAR 0 1
14442: PPUSH
14443: LD_EXP 63
14447: PUSH
14448: LD_VAR 0 1
14452: ARRAY
14453: PUSH
14454: LD_INT 1
14456: PLUS
14457: PPUSH
14458: CALL_OW 1
14462: ST_TO_ADDR
// if side_chosen_zone [ side ] > team_transfer_zones [ Side_Teams [ side ] ] + 0 then
14463: LD_EXP 63
14467: PUSH
14468: LD_VAR 0 1
14472: ARRAY
14473: PUSH
14474: LD_EXP 61
14478: PUSH
14479: LD_EXP 5
14483: PUSH
14484: LD_VAR 0 1
14488: ARRAY
14489: ARRAY
14490: PUSH
14491: LD_INT 0
14493: PLUS
14494: GREATER
14495: IFFALSE 14520
// side_chosen_zone := Replace ( side_chosen_zone , side , 1 ) ;
14497: LD_ADDR_EXP 63
14501: PUSH
14502: LD_EXP 63
14506: PPUSH
14507: LD_VAR 0 1
14511: PPUSH
14512: LD_INT 1
14514: PPUSH
14515: CALL_OW 1
14519: ST_TO_ADDR
// if side = Your_Side then
14520: LD_VAR 0 1
14524: PUSH
14525: LD_OWVAR 2
14529: EQUAL
14530: IFFALSE 14609
// begin ToLua ( LUA_UpdateTransferZone( & team_transfer_zones [ Side_Teams [ side ] ] [ side_chosen_zone [ side ] ] & ) ) ;
14532: LD_STRING LUA_UpdateTransferZone(
14534: PUSH
14535: LD_EXP 61
14539: PUSH
14540: LD_EXP 5
14544: PUSH
14545: LD_VAR 0 1
14549: ARRAY
14550: ARRAY
14551: PUSH
14552: LD_EXP 63
14556: PUSH
14557: LD_VAR 0 1
14561: ARRAY
14562: ARRAY
14563: STR
14564: PUSH
14565: LD_STRING )
14567: STR
14568: PPUSH
14569: CALL_OW 559
// SetAreaMapShow ( team_transfer_zones [ Side_Teams [ side ] ] [ side_chosen_zone [ side ] ] , 1 ) ;
14573: LD_EXP 61
14577: PUSH
14578: LD_EXP 5
14582: PUSH
14583: LD_VAR 0 1
14587: ARRAY
14588: ARRAY
14589: PUSH
14590: LD_EXP 63
14594: PUSH
14595: LD_VAR 0 1
14599: ARRAY
14600: ARRAY
14601: PPUSH
14602: LD_INT 1
14604: PPUSH
14605: CALL_OW 424
// end ; end ; 205 :
14609: GO 15841
14611: LD_INT 205
14613: DOUBLE
14614: EQUAL
14615: IFTRUE 14619
14617: GO 15229
14619: POP
// begin side_units_outside := Replace ( side_units_outside , side , FilterUnitsInArea ( team_transfer_zones [ Side_Teams [ side ] ] [ side_chosen_zone [ side ] ] , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , 12 ] , [ f_weapon , 32 ] , [ f_weapon , 51 ] ] , [ f_or , [ f_and , [ f_control , 2 ] , [ f_linked ] ] , [ f_and , [ f_control , 1 ] , [ f_occupied ] ] , [ f_control , 3 ] ] ] ) ) ;
14620: LD_ADDR_EXP 66
14624: PUSH
14625: LD_EXP 66
14629: PPUSH
14630: LD_VAR 0 1
14634: PPUSH
14635: LD_EXP 61
14639: PUSH
14640: LD_EXP 5
14644: PUSH
14645: LD_VAR 0 1
14649: ARRAY
14650: ARRAY
14651: PUSH
14652: LD_EXP 63
14656: PUSH
14657: LD_VAR 0 1
14661: ARRAY
14662: ARRAY
14663: PPUSH
14664: LD_INT 22
14666: PUSH
14667: LD_VAR 0 1
14671: PUSH
14672: EMPTY
14673: LIST
14674: LIST
14675: PUSH
14676: LD_INT 21
14678: PUSH
14679: LD_INT 2
14681: PUSH
14682: EMPTY
14683: LIST
14684: LIST
14685: PUSH
14686: LD_INT 2
14688: PUSH
14689: LD_INT 34
14691: PUSH
14692: LD_INT 12
14694: PUSH
14695: EMPTY
14696: LIST
14697: LIST
14698: PUSH
14699: LD_INT 34
14701: PUSH
14702: LD_INT 32
14704: PUSH
14705: EMPTY
14706: LIST
14707: LIST
14708: PUSH
14709: LD_INT 34
14711: PUSH
14712: LD_INT 51
14714: PUSH
14715: EMPTY
14716: LIST
14717: LIST
14718: PUSH
14719: EMPTY
14720: LIST
14721: LIST
14722: LIST
14723: LIST
14724: PUSH
14725: LD_INT 2
14727: PUSH
14728: LD_INT 1
14730: PUSH
14731: LD_INT 33
14733: PUSH
14734: LD_INT 2
14736: PUSH
14737: EMPTY
14738: LIST
14739: LIST
14740: PUSH
14741: LD_INT 61
14743: PUSH
14744: EMPTY
14745: LIST
14746: PUSH
14747: EMPTY
14748: LIST
14749: LIST
14750: LIST
14751: PUSH
14752: LD_INT 1
14754: PUSH
14755: LD_INT 33
14757: PUSH
14758: LD_INT 1
14760: PUSH
14761: EMPTY
14762: LIST
14763: LIST
14764: PUSH
14765: LD_INT 59
14767: PUSH
14768: EMPTY
14769: LIST
14770: PUSH
14771: EMPTY
14772: LIST
14773: LIST
14774: LIST
14775: PUSH
14776: LD_INT 33
14778: PUSH
14779: LD_INT 3
14781: PUSH
14782: EMPTY
14783: LIST
14784: LIST
14785: PUSH
14786: EMPTY
14787: LIST
14788: LIST
14789: LIST
14790: LIST
14791: PUSH
14792: EMPTY
14793: LIST
14794: LIST
14795: LIST
14796: LIST
14797: PPUSH
14798: CALL_OW 70
14802: PPUSH
14803: CALL_OW 1
14807: ST_TO_ADDR
// for i in side_units_outside [ side ] do
14808: LD_ADDR_VAR 0 7
14812: PUSH
14813: LD_EXP 66
14817: PUSH
14818: LD_VAR 0 1
14822: ARRAY
14823: PUSH
14824: FOR_IN
14825: IFFALSE 14838
// RemoveUnit ( i ) ;
14827: LD_VAR 0 7
14831: PPUSH
14832: CALL_OW 64
14836: GO 14824
14838: POP
14839: POP
// side_resources_remaining := Replace ( side_resources_remaining , side , Replace ( side_resources_remaining [ side ] , 1 , side_resources_delivered [ side ] [ 1 ] - side_pending_order [ side ] [ 1 ] ) ) ;
14840: LD_ADDR_EXP 68
14844: PUSH
14845: LD_EXP 68
14849: PPUSH
14850: LD_VAR 0 1
14854: PPUSH
14855: LD_EXP 68
14859: PUSH
14860: LD_VAR 0 1
14864: ARRAY
14865: PPUSH
14866: LD_INT 1
14868: PPUSH
14869: LD_EXP 59
14873: PUSH
14874: LD_VAR 0 1
14878: ARRAY
14879: PUSH
14880: LD_INT 1
14882: ARRAY
14883: PUSH
14884: LD_EXP 58
14888: PUSH
14889: LD_VAR 0 1
14893: ARRAY
14894: PUSH
14895: LD_INT 1
14897: ARRAY
14898: MINUS
14899: PPUSH
14900: CALL_OW 1
14904: PPUSH
14905: CALL_OW 1
14909: ST_TO_ADDR
// side_resources_remaining := Replace ( side_resources_remaining , side , Replace ( side_resources_remaining [ side ] , 2 , side_resources_delivered [ side ] [ 2 ] - side_pending_order [ side ] [ 2 ] ) ) ;
14910: LD_ADDR_EXP 68
14914: PUSH
14915: LD_EXP 68
14919: PPUSH
14920: LD_VAR 0 1
14924: PPUSH
14925: LD_EXP 68
14929: PUSH
14930: LD_VAR 0 1
14934: ARRAY
14935: PPUSH
14936: LD_INT 2
14938: PPUSH
14939: LD_EXP 59
14943: PUSH
14944: LD_VAR 0 1
14948: ARRAY
14949: PUSH
14950: LD_INT 2
14952: ARRAY
14953: PUSH
14954: LD_EXP 58
14958: PUSH
14959: LD_VAR 0 1
14963: ARRAY
14964: PUSH
14965: LD_INT 2
14967: ARRAY
14968: MINUS
14969: PPUSH
14970: CALL_OW 1
14974: PPUSH
14975: CALL_OW 1
14979: ST_TO_ADDR
// side_resources_remaining := Replace ( side_resources_remaining , side , Replace ( side_resources_remaining [ side ] , 3 , side_resources_delivered [ side ] [ 3 ] - side_pending_order [ side ] [ 3 ] ) ) ;
14980: LD_ADDR_EXP 68
14984: PUSH
14985: LD_EXP 68
14989: PPUSH
14990: LD_VAR 0 1
14994: PPUSH
14995: LD_EXP 68
14999: PUSH
15000: LD_VAR 0 1
15004: ARRAY
15005: PPUSH
15006: LD_INT 3
15008: PPUSH
15009: LD_EXP 59
15013: PUSH
15014: LD_VAR 0 1
15018: ARRAY
15019: PUSH
15020: LD_INT 3
15022: ARRAY
15023: PUSH
15024: LD_EXP 58
15028: PUSH
15029: LD_VAR 0 1
15033: ARRAY
15034: PUSH
15035: LD_INT 3
15037: ARRAY
15038: MINUS
15039: PPUSH
15040: CALL_OW 1
15044: PPUSH
15045: CALL_OW 1
15049: ST_TO_ADDR
// if side_order_type [ side ] = 3 then
15050: LD_EXP 67
15054: PUSH
15055: LD_VAR 0 1
15059: ARRAY
15060: PUSH
15061: LD_INT 3
15063: EQUAL
15064: IFFALSE 15120
// side_resources_remaining := Replace ( side_resources_remaining , side , Replace ( side_resources_remaining [ side ] , 3 , side_resources_delivered [ side ] [ 3 ] ) ) ;
15066: LD_ADDR_EXP 68
15070: PUSH
15071: LD_EXP 68
15075: PPUSH
15076: LD_VAR 0 1
15080: PPUSH
15081: LD_EXP 68
15085: PUSH
15086: LD_VAR 0 1
15090: ARRAY
15091: PPUSH
15092: LD_INT 3
15094: PPUSH
15095: LD_EXP 59
15099: PUSH
15100: LD_VAR 0 1
15104: ARRAY
15105: PUSH
15106: LD_INT 3
15108: ARRAY
15109: PPUSH
15110: CALL_OW 1
15114: PPUSH
15115: CALL_OW 1
15119: ST_TO_ADDR
// side_transfer_clocks := Replace ( side_transfer_clocks , side , tick + 3 3$0 ) ;
15120: LD_ADDR_EXP 65
15124: PUSH
15125: LD_EXP 65
15129: PPUSH
15130: LD_VAR 0 1
15134: PPUSH
15135: LD_OWVAR 1
15139: PUSH
15140: LD_INT 6300
15142: PLUS
15143: PPUSH
15144: CALL_OW 1
15148: ST_TO_ADDR
// side_transfer_pending := Replace ( side_transfer_pending , side , 1 ) ;
15149: LD_ADDR_EXP 69
15153: PUSH
15154: LD_EXP 69
15158: PPUSH
15159: LD_VAR 0 1
15163: PPUSH
15164: LD_INT 1
15166: PPUSH
15167: CALL_OW 1
15171: ST_TO_ADDR
// if side = Your_Side then
15172: LD_VAR 0 1
15176: PUSH
15177: LD_OWVAR 2
15181: EQUAL
15182: IFFALSE 15227
// begin SetAreaMapShow ( team_transfer_zones [ Side_Teams [ side ] ] [ side_chosen_zone [ side ] ] , 0 ) ;
15184: LD_EXP 61
15188: PUSH
15189: LD_EXP 5
15193: PUSH
15194: LD_VAR 0 1
15198: ARRAY
15199: ARRAY
15200: PUSH
15201: LD_EXP 63
15205: PUSH
15206: LD_VAR 0 1
15210: ARRAY
15211: ARRAY
15212: PPUSH
15213: LD_INT 0
15215: PPUSH
15216: CALL_OW 424
// ToLua ( LUA_WaitingTransfer(); ) ;
15220: LD_STRING LUA_WaitingTransfer();
15222: PPUSH
15223: CALL_OW 559
// end ; end ; 300 :
15227: GO 15841
15229: LD_INT 300
15231: DOUBLE
15232: EQUAL
15233: IFTRUE 15237
15235: GO 15437
15237: POP
// begin side_pending_order := Replace ( side_pending_order , side , Replace ( side_pending_order [ side ] , 1 , 0 ) ) ;
15238: LD_ADDR_EXP 58
15242: PUSH
15243: LD_EXP 58
15247: PPUSH
15248: LD_VAR 0 1
15252: PPUSH
15253: LD_EXP 58
15257: PUSH
15258: LD_VAR 0 1
15262: ARRAY
15263: PPUSH
15264: LD_INT 1
15266: PPUSH
15267: LD_INT 0
15269: PPUSH
15270: CALL_OW 1
15274: PPUSH
15275: CALL_OW 1
15279: ST_TO_ADDR
// side_pending_order := Replace ( side_pending_order , side , Replace ( side_pending_order [ side ] , 2 , 0 ) ) ;
15280: LD_ADDR_EXP 58
15284: PUSH
15285: LD_EXP 58
15289: PPUSH
15290: LD_VAR 0 1
15294: PPUSH
15295: LD_EXP 58
15299: PUSH
15300: LD_VAR 0 1
15304: ARRAY
15305: PPUSH
15306: LD_INT 2
15308: PPUSH
15309: LD_INT 0
15311: PPUSH
15312: CALL_OW 1
15316: PPUSH
15317: CALL_OW 1
15321: ST_TO_ADDR
// side_pending_order := Replace ( side_pending_order , side , Replace ( side_pending_order [ side ] , 3 , 0 ) ) ;
15322: LD_ADDR_EXP 58
15326: PUSH
15327: LD_EXP 58
15331: PPUSH
15332: LD_VAR 0 1
15336: PPUSH
15337: LD_EXP 58
15341: PUSH
15342: LD_VAR 0 1
15346: ARRAY
15347: PPUSH
15348: LD_INT 3
15350: PPUSH
15351: LD_INT 0
15353: PPUSH
15354: CALL_OW 1
15358: PPUSH
15359: CALL_OW 1
15363: ST_TO_ADDR
// side_zone_locked := Replace ( side_zone_locked , side , 0 ) ;
15364: LD_ADDR_EXP 64
15368: PUSH
15369: LD_EXP 64
15373: PPUSH
15374: LD_VAR 0 1
15378: PPUSH
15379: LD_INT 0
15381: PPUSH
15382: CALL_OW 1
15386: ST_TO_ADDR
// if side = Your_Side then
15387: LD_VAR 0 1
15391: PUSH
15392: LD_OWVAR 2
15396: EQUAL
15397: IFFALSE 15435
// SetAreaMapShow ( team_transfer_zones [ Side_Teams [ side ] ] [ side_chosen_zone [ side ] ] , 0 ) ;
15399: LD_EXP 61
15403: PUSH
15404: LD_EXP 5
15408: PUSH
15409: LD_VAR 0 1
15413: ARRAY
15414: ARRAY
15415: PUSH
15416: LD_EXP 63
15420: PUSH
15421: LD_VAR 0 1
15425: ARRAY
15426: ARRAY
15427: PPUSH
15428: LD_INT 0
15430: PPUSH
15431: CALL_OW 424
// end ; 301 :
15435: GO 15841
15437: LD_INT 301
15439: DOUBLE
15440: EQUAL
15441: IFTRUE 15445
15443: GO 15840
15445: POP
// begin side_pending_order := Replace ( side_pending_order , side , Replace ( side_pending_order [ side ] , 1 , 0 ) ) ;
15446: LD_ADDR_EXP 58
15450: PUSH
15451: LD_EXP 58
15455: PPUSH
15456: LD_VAR 0 1
15460: PPUSH
15461: LD_EXP 58
15465: PUSH
15466: LD_VAR 0 1
15470: ARRAY
15471: PPUSH
15472: LD_INT 1
15474: PPUSH
15475: LD_INT 0
15477: PPUSH
15478: CALL_OW 1
15482: PPUSH
15483: CALL_OW 1
15487: ST_TO_ADDR
// side_pending_order := Replace ( side_pending_order , side , Replace ( side_pending_order [ side ] , 2 , 0 ) ) ;
15488: LD_ADDR_EXP 58
15492: PUSH
15493: LD_EXP 58
15497: PPUSH
15498: LD_VAR 0 1
15502: PPUSH
15503: LD_EXP 58
15507: PUSH
15508: LD_VAR 0 1
15512: ARRAY
15513: PPUSH
15514: LD_INT 2
15516: PPUSH
15517: LD_INT 0
15519: PPUSH
15520: CALL_OW 1
15524: PPUSH
15525: CALL_OW 1
15529: ST_TO_ADDR
// side_pending_order := Replace ( side_pending_order , side , Replace ( side_pending_order [ side ] , 3 , 0 ) ) ;
15530: LD_ADDR_EXP 58
15534: PUSH
15535: LD_EXP 58
15539: PPUSH
15540: LD_VAR 0 1
15544: PPUSH
15545: LD_EXP 58
15549: PUSH
15550: LD_VAR 0 1
15554: ARRAY
15555: PPUSH
15556: LD_INT 3
15558: PPUSH
15559: LD_INT 0
15561: PPUSH
15562: CALL_OW 1
15566: PPUSH
15567: CALL_OW 1
15571: ST_TO_ADDR
// side_zone_locked := Replace ( side_zone_locked , side , 0 ) ;
15572: LD_ADDR_EXP 64
15576: PUSH
15577: LD_EXP 64
15581: PPUSH
15582: LD_VAR 0 1
15586: PPUSH
15587: LD_INT 0
15589: PPUSH
15590: CALL_OW 1
15594: ST_TO_ADDR
// side_transfer_pending := Replace ( side_transfer_pending , side , 0 ) ;
15595: LD_ADDR_EXP 69
15599: PUSH
15600: LD_EXP 69
15604: PPUSH
15605: LD_VAR 0 1
15609: PPUSH
15610: LD_INT 0
15612: PPUSH
15613: CALL_OW 1
15617: ST_TO_ADDR
// side_transfer_clocks := Replace ( side_transfer_clocks , side , 0 0$0 ) ;
15618: LD_ADDR_EXP 65
15622: PUSH
15623: LD_EXP 65
15627: PPUSH
15628: LD_VAR 0 1
15632: PPUSH
15633: LD_INT 0
15635: PPUSH
15636: CALL_OW 1
15640: ST_TO_ADDR
// side_resources_remaining := Replace ( side_resources_remaining , side , Replace ( side_resources_remaining [ side ] , 1 , 0 ) ) ;
15641: LD_ADDR_EXP 68
15645: PUSH
15646: LD_EXP 68
15650: PPUSH
15651: LD_VAR 0 1
15655: PPUSH
15656: LD_EXP 68
15660: PUSH
15661: LD_VAR 0 1
15665: ARRAY
15666: PPUSH
15667: LD_INT 1
15669: PPUSH
15670: LD_INT 0
15672: PPUSH
15673: CALL_OW 1
15677: PPUSH
15678: CALL_OW 1
15682: ST_TO_ADDR
// side_resources_remaining := Replace ( side_resources_remaining , side , Replace ( side_resources_remaining [ side ] , 2 , 0 ) ) ;
15683: LD_ADDR_EXP 68
15687: PUSH
15688: LD_EXP 68
15692: PPUSH
15693: LD_VAR 0 1
15697: PPUSH
15698: LD_EXP 68
15702: PUSH
15703: LD_VAR 0 1
15707: ARRAY
15708: PPUSH
15709: LD_INT 2
15711: PPUSH
15712: LD_INT 0
15714: PPUSH
15715: CALL_OW 1
15719: PPUSH
15720: CALL_OW 1
15724: ST_TO_ADDR
// side_resources_remaining := Replace ( side_resources_remaining , side , Replace ( side_resources_remaining [ side ] , 3 , 0 ) ) ;
15725: LD_ADDR_EXP 68
15729: PUSH
15730: LD_EXP 68
15734: PPUSH
15735: LD_VAR 0 1
15739: PPUSH
15740: LD_EXP 68
15744: PUSH
15745: LD_VAR 0 1
15749: ARRAY
15750: PPUSH
15751: LD_INT 3
15753: PPUSH
15754: LD_INT 0
15756: PPUSH
15757: CALL_OW 1
15761: PPUSH
15762: CALL_OW 1
15766: ST_TO_ADDR
// side_units_outside := Replace ( side_units_outside , side , 0 ) ;
15767: LD_ADDR_EXP 66
15771: PUSH
15772: LD_EXP 66
15776: PPUSH
15777: LD_VAR 0 1
15781: PPUSH
15782: LD_INT 0
15784: PPUSH
15785: CALL_OW 1
15789: ST_TO_ADDR
// if side = Your_Side then
15790: LD_VAR 0 1
15794: PUSH
15795: LD_OWVAR 2
15799: EQUAL
15800: IFFALSE 15838
// SetAreaMapShow ( team_transfer_zones [ Side_Teams [ side ] ] [ side_chosen_zone [ side ] ] , 0 ) ;
15802: LD_EXP 61
15806: PUSH
15807: LD_EXP 5
15811: PUSH
15812: LD_VAR 0 1
15816: ARRAY
15817: ARRAY
15818: PUSH
15819: LD_EXP 63
15823: PUSH
15824: LD_VAR 0 1
15828: ARRAY
15829: ARRAY
15830: PPUSH
15831: LD_INT 0
15833: PPUSH
15834: CALL_OW 424
// end ; end ;
15838: GO 15841
15840: POP
// end ; end_of_file
15841: PPOPN 7
15843: END
// export function CYCLIC_CrateSpawn ; var i , j , k , amount ; begin
15844: LD_INT 0
15846: PPUSH
15847: PPUSH
15848: PPUSH
15849: PPUSH
15850: PPUSH
// for i = 1 to position_drop_zones do
15851: LD_ADDR_VAR 0 2
15855: PUSH
15856: DOUBLE
15857: LD_INT 1
15859: DEC
15860: ST_TO_ADDR
15861: LD_EXP 36
15865: PUSH
15866: FOR_TO
15867: IFFALSE 16017
// begin amount := Rand ( position_drop_zones [ i ] [ 1 ] , 5 ) ;
15869: LD_ADDR_VAR 0 5
15873: PUSH
15874: LD_EXP 36
15878: PUSH
15879: LD_VAR 0 2
15883: ARRAY
15884: PUSH
15885: LD_INT 1
15887: ARRAY
15888: PPUSH
15889: LD_INT 5
15891: PPUSH
15892: CALL_OW 12
15896: ST_TO_ADDR
// for j = 3 to position_drop_zones [ i ] do
15897: LD_ADDR_VAR 0 3
15901: PUSH
15902: DOUBLE
15903: LD_INT 3
15905: DEC
15906: ST_TO_ADDR
15907: LD_EXP 36
15911: PUSH
15912: LD_VAR 0 2
15916: ARRAY
15917: PUSH
15918: FOR_TO
15919: IFFALSE 16013
// if Prob ( position_drop_zones [ i ] [ 2 ] ) then
15921: LD_EXP 36
15925: PUSH
15926: LD_VAR 0 2
15930: ARRAY
15931: PUSH
15932: LD_INT 2
15934: ARRAY
15935: PPUSH
15936: CALL_OW 13
15940: IFFALSE 16011
// for k = 1 to position_drop_zones [ i ] [ j ] do
15942: LD_ADDR_VAR 0 4
15946: PUSH
15947: DOUBLE
15948: LD_INT 1
15950: DEC
15951: ST_TO_ADDR
15952: LD_EXP 36
15956: PUSH
15957: LD_VAR 0 2
15961: ARRAY
15962: PUSH
15963: LD_VAR 0 3
15967: ARRAY
15968: PUSH
15969: FOR_TO
15970: IFFALSE 16009
// CreateCratesArea ( amount , position_drop_zones [ i ] [ j ] [ k ] , true ) ;
15972: LD_VAR 0 5
15976: PPUSH
15977: LD_EXP 36
15981: PUSH
15982: LD_VAR 0 2
15986: ARRAY
15987: PUSH
15988: LD_VAR 0 3
15992: ARRAY
15993: PUSH
15994: LD_VAR 0 4
15998: ARRAY
15999: PPUSH
16000: LD_INT 1
16002: PPUSH
16003: CALL_OW 55
16007: GO 15969
16009: POP
16010: POP
16011: GO 15918
16013: POP
16014: POP
// end ;
16015: GO 15866
16017: POP
16018: POP
// end ;
16019: LD_VAR 0 1
16023: RET
// export function CYCLIC_HumanSpawn ; var i , j , entity , areas , outside , side , arguments , human ; begin
16024: LD_INT 0
16026: PPUSH
16027: PPUSH
16028: PPUSH
16029: PPUSH
16030: PPUSH
16031: PPUSH
16032: PPUSH
16033: PPUSH
16034: PPUSH
// side_soldier_count := [ [ 1 , 0 ] , [ 2 , 0 ] , [ 3 , 0 ] , [ 4 , 0 ] , [ 5 , 0 ] , [ 6 , 0 ] , [ 7 , 0 ] , [ 8 , 0 ] ] ;
16035: LD_ADDR_EXP 47
16039: PUSH
16040: LD_INT 1
16042: PUSH
16043: LD_INT 0
16045: PUSH
16046: EMPTY
16047: LIST
16048: LIST
16049: PUSH
16050: LD_INT 2
16052: PUSH
16053: LD_INT 0
16055: PUSH
16056: EMPTY
16057: LIST
16058: LIST
16059: PUSH
16060: LD_INT 3
16062: PUSH
16063: LD_INT 0
16065: PUSH
16066: EMPTY
16067: LIST
16068: LIST
16069: PUSH
16070: LD_INT 4
16072: PUSH
16073: LD_INT 0
16075: PUSH
16076: EMPTY
16077: LIST
16078: LIST
16079: PUSH
16080: LD_INT 5
16082: PUSH
16083: LD_INT 0
16085: PUSH
16086: EMPTY
16087: LIST
16088: LIST
16089: PUSH
16090: LD_INT 6
16092: PUSH
16093: LD_INT 0
16095: PUSH
16096: EMPTY
16097: LIST
16098: LIST
16099: PUSH
16100: LD_INT 7
16102: PUSH
16103: LD_INT 0
16105: PUSH
16106: EMPTY
16107: LIST
16108: LIST
16109: PUSH
16110: LD_INT 8
16112: PUSH
16113: LD_INT 0
16115: PUSH
16116: EMPTY
16117: LIST
16118: LIST
16119: PUSH
16120: EMPTY
16121: LIST
16122: LIST
16123: LIST
16124: LIST
16125: LIST
16126: LIST
16127: LIST
16128: LIST
16129: ST_TO_ADDR
// arguments := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
16130: LD_ADDR_VAR 0 8
16134: PUSH
16135: LD_INT 0
16137: PUSH
16138: LD_INT 0
16140: PUSH
16141: LD_INT 0
16143: PUSH
16144: LD_INT 0
16146: PUSH
16147: LD_INT 0
16149: PUSH
16150: LD_INT 0
16152: PUSH
16153: LD_INT 0
16155: PUSH
16156: LD_INT 0
16158: PUSH
16159: EMPTY
16160: LIST
16161: LIST
16162: LIST
16163: LIST
16164: LIST
16165: LIST
16166: LIST
16167: LIST
16168: ST_TO_ADDR
// new_character_EON := [ 0 , Rand ( 1 , 4 ) , [ Rand ( 8 , 12 ) , Rand ( 8 , 12 ) ] , [ 0 , 0 , 0 , 0 ] , [ Rand ( 0 , experience ) , Rand ( 0 , experience ) , Rand ( 0 , experience ) , Rand ( 0 , experience ) ] , 0 ] ;
16169: LD_ADDR_EXP 44
16173: PUSH
16174: LD_INT 0
16176: PUSH
16177: LD_INT 1
16179: PPUSH
16180: LD_INT 4
16182: PPUSH
16183: CALL_OW 12
16187: PUSH
16188: LD_INT 8
16190: PPUSH
16191: LD_INT 12
16193: PPUSH
16194: CALL_OW 12
16198: PUSH
16199: LD_INT 8
16201: PPUSH
16202: LD_INT 12
16204: PPUSH
16205: CALL_OW 12
16209: PUSH
16210: EMPTY
16211: LIST
16212: LIST
16213: PUSH
16214: LD_INT 0
16216: PUSH
16217: LD_INT 0
16219: PUSH
16220: LD_INT 0
16222: PUSH
16223: LD_INT 0
16225: PUSH
16226: EMPTY
16227: LIST
16228: LIST
16229: LIST
16230: LIST
16231: PUSH
16232: LD_INT 0
16234: PPUSH
16235: LD_EXP 20
16239: PPUSH
16240: CALL_OW 12
16244: PUSH
16245: LD_INT 0
16247: PPUSH
16248: LD_EXP 20
16252: PPUSH
16253: CALL_OW 12
16257: PUSH
16258: LD_INT 0
16260: PPUSH
16261: LD_EXP 20
16265: PPUSH
16266: CALL_OW 12
16270: PUSH
16271: LD_INT 0
16273: PPUSH
16274: LD_EXP 20
16278: PPUSH
16279: CALL_OW 12
16283: PUSH
16284: EMPTY
16285: LIST
16286: LIST
16287: LIST
16288: LIST
16289: PUSH
16290: LD_INT 0
16292: PUSH
16293: EMPTY
16294: LIST
16295: LIST
16296: LIST
16297: LIST
16298: LIST
16299: LIST
16300: ST_TO_ADDR
// for i = 8 downto 1 do
16301: LD_ADDR_VAR 0 2
16305: PUSH
16306: DOUBLE
16307: LD_INT 8
16309: INC
16310: ST_TO_ADDR
16311: LD_INT 1
16313: PUSH
16314: FOR_DOWNTO
16315: IFFALSE 16408
// begin side_soldier_count := Replace ( side_soldier_count , i , Replace ( side_soldier_count [ i ] , 2 , side_soldiers [ i ] + 0 ) ) ;
16317: LD_ADDR_EXP 47
16321: PUSH
16322: LD_EXP 47
16326: PPUSH
16327: LD_VAR 0 2
16331: PPUSH
16332: LD_EXP 47
16336: PUSH
16337: LD_VAR 0 2
16341: ARRAY
16342: PPUSH
16343: LD_INT 2
16345: PPUSH
16346: LD_EXP 46
16350: PUSH
16351: LD_VAR 0 2
16355: ARRAY
16356: PUSH
16357: LD_INT 0
16359: PLUS
16360: PPUSH
16361: CALL_OW 1
16365: PPUSH
16366: CALL_OW 1
16370: ST_TO_ADDR
// arguments := Replace ( arguments , i , side_soldiers [ i ] + 0 ) ;
16371: LD_ADDR_VAR 0 8
16375: PUSH
16376: LD_VAR 0 8
16380: PPUSH
16381: LD_VAR 0 2
16385: PPUSH
16386: LD_EXP 46
16390: PUSH
16391: LD_VAR 0 2
16395: ARRAY
16396: PUSH
16397: LD_INT 0
16399: PLUS
16400: PPUSH
16401: CALL_OW 1
16405: ST_TO_ADDR
// end ;
16406: GO 16314
16408: POP
16409: POP
// for i = 8 downto 1 do
16410: LD_ADDR_VAR 0 2
16414: PUSH
16415: DOUBLE
16416: LD_INT 8
16418: INC
16419: ST_TO_ADDR
16420: LD_INT 1
16422: PUSH
16423: FOR_DOWNTO
16424: IFFALSE 16481
// if not side_isalive [ i ] then
16426: LD_EXP 53
16430: PUSH
16431: LD_VAR 0 2
16435: ARRAY
16436: NOT
16437: IFFALSE 16479
// begin side_soldier_count := Delete ( side_soldier_count , i ) ;
16439: LD_ADDR_EXP 47
16443: PUSH
16444: LD_EXP 47
16448: PPUSH
16449: LD_VAR 0 2
16453: PPUSH
16454: CALL_OW 3
16458: ST_TO_ADDR
// arguments := Delete ( arguments , i ) ;
16459: LD_ADDR_VAR 0 8
16463: PUSH
16464: LD_VAR 0 8
16468: PPUSH
16469: LD_VAR 0 2
16473: PPUSH
16474: CALL_OW 3
16478: ST_TO_ADDR
// end ;
16479: GO 16423
16481: POP
16482: POP
// side_soldier_count := SortListByListAsc ( side_soldier_count , arguments ) ;
16483: LD_ADDR_EXP 47
16487: PUSH
16488: LD_EXP 47
16492: PPUSH
16493: LD_VAR 0 8
16497: PPUSH
16498: CALL_OW 76
16502: ST_TO_ADDR
// for i = side_soldier_count + 0 downto 1 do
16503: LD_ADDR_VAR 0 2
16507: PUSH
16508: DOUBLE
16509: LD_EXP 47
16513: PUSH
16514: LD_INT 0
16516: PLUS
16517: INC
16518: ST_TO_ADDR
16519: LD_INT 1
16521: PUSH
16522: FOR_DOWNTO
16523: IFFALSE 16577
// begin if side_soldier_count [ i ] [ 2 ] > side_soldier_count [ 1 ] [ 2 ] then
16525: LD_EXP 47
16529: PUSH
16530: LD_VAR 0 2
16534: ARRAY
16535: PUSH
16536: LD_INT 2
16538: ARRAY
16539: PUSH
16540: LD_EXP 47
16544: PUSH
16545: LD_INT 1
16547: ARRAY
16548: PUSH
16549: LD_INT 2
16551: ARRAY
16552: GREATER
16553: IFFALSE 16575
// side_soldier_count := Delete ( side_soldier_count , i ) ;
16555: LD_ADDR_EXP 47
16559: PUSH
16560: LD_EXP 47
16564: PPUSH
16565: LD_VAR 0 2
16569: PPUSH
16570: CALL_OW 3
16574: ST_TO_ADDR
// end ;
16575: GO 16522
16577: POP
16578: POP
// side := side_soldier_count [ Rand ( 1 , side_soldier_count ) ] [ 1 ] ;
16579: LD_ADDR_VAR 0 7
16583: PUSH
16584: LD_EXP 47
16588: PUSH
16589: LD_INT 1
16591: PPUSH
16592: LD_EXP 47
16596: PPUSH
16597: CALL_OW 12
16601: ARRAY
16602: PUSH
16603: LD_INT 1
16605: ARRAY
16606: ST_TO_ADDR
// if side_soldiers [ side ] > 0 then
16607: LD_EXP 46
16611: PUSH
16612: LD_VAR 0 7
16616: ARRAY
16617: PUSH
16618: LD_INT 0
16620: GREATER
16621: IFFALSE 16661
// entity := side_soldiers [ side ] [ Rand ( 1 , side_soldiers [ side ] ) ] else
16623: LD_ADDR_VAR 0 4
16627: PUSH
16628: LD_EXP 46
16632: PUSH
16633: LD_VAR 0 7
16637: ARRAY
16638: PUSH
16639: LD_INT 1
16641: PPUSH
16642: LD_EXP 46
16646: PUSH
16647: LD_VAR 0 7
16651: ARRAY
16652: PPUSH
16653: CALL_OW 12
16657: ARRAY
16658: ST_TO_ADDR
16659: GO 16750
// begin entity := FilterAllUnits ( [ [ f_side , side ] , [ f_type , 3 ] , [ f_btype , 0 ] , [ f_or ] , [ f_btype , 1 ] ] ) ;
16661: LD_ADDR_VAR 0 4
16665: PUSH
16666: LD_INT 22
16668: PUSH
16669: LD_VAR 0 7
16673: PUSH
16674: EMPTY
16675: LIST
16676: LIST
16677: PUSH
16678: LD_INT 21
16680: PUSH
16681: LD_INT 3
16683: PUSH
16684: EMPTY
16685: LIST
16686: LIST
16687: PUSH
16688: LD_INT 30
16690: PUSH
16691: LD_INT 0
16693: PUSH
16694: EMPTY
16695: LIST
16696: LIST
16697: PUSH
16698: LD_INT 2
16700: PUSH
16701: EMPTY
16702: LIST
16703: PUSH
16704: LD_INT 30
16706: PUSH
16707: LD_INT 1
16709: PUSH
16710: EMPTY
16711: LIST
16712: LIST
16713: PUSH
16714: EMPTY
16715: LIST
16716: LIST
16717: LIST
16718: LIST
16719: LIST
16720: PPUSH
16721: CALL_OW 69
16725: ST_TO_ADDR
// entity := entity [ Rand ( 1 , entity ) ] ;
16726: LD_ADDR_VAR 0 4
16730: PUSH
16731: LD_VAR 0 4
16735: PUSH
16736: LD_INT 1
16738: PPUSH
16739: LD_VAR 0 4
16743: PPUSH
16744: CALL_OW 12
16748: ARRAY
16749: ST_TO_ADDR
// end ; outside := 0 ;
16750: LD_ADDR_VAR 0 6
16754: PUSH
16755: LD_INT 0
16757: ST_TO_ADDR
// areas := 0 ;
16758: LD_ADDR_VAR 0 5
16762: PUSH
16763: LD_INT 0
16765: ST_TO_ADDR
// for i = 1 to position_drop_zones do
16766: LD_ADDR_VAR 0 2
16770: PUSH
16771: DOUBLE
16772: LD_INT 1
16774: DEC
16775: ST_TO_ADDR
16776: LD_EXP 36
16780: PUSH
16781: FOR_TO
16782: IFFALSE 17074
// for j = 1 to position_drop_zones [ i ] [ 3 ] do
16784: LD_ADDR_VAR 0 3
16788: PUSH
16789: DOUBLE
16790: LD_INT 1
16792: DEC
16793: ST_TO_ADDR
16794: LD_EXP 36
16798: PUSH
16799: LD_VAR 0 2
16803: ARRAY
16804: PUSH
16805: LD_INT 3
16807: ARRAY
16808: PUSH
16809: FOR_TO
16810: IFFALSE 17070
// begin areas := areas + 1 ;
16812: LD_ADDR_VAR 0 5
16816: PUSH
16817: LD_VAR 0 5
16821: PUSH
16822: LD_INT 1
16824: PLUS
16825: ST_TO_ADDR
// if IsInArea ( entity , position_drop_zones [ i ] [ 3 ] [ j ] ) then
16826: LD_VAR 0 4
16830: PPUSH
16831: LD_EXP 36
16835: PUSH
16836: LD_VAR 0 2
16840: ARRAY
16841: PUSH
16842: LD_INT 3
16844: ARRAY
16845: PUSH
16846: LD_VAR 0 3
16850: ARRAY
16851: PPUSH
16852: CALL_OW 308
16856: IFFALSE 17054
// begin human := PrepareCharacters ( side , [ Rand ( 0 , 5 ) , Rand ( 0 , 5 ) , Rand ( 0 , 5 ) , Rand ( 0 , 5 ) , Rand ( 0 , 5 ) , Rand ( 0 , 5 ) , Rand ( 0 , 5 ) , Rand ( 0 , 5 ) ] , new_character_EON ) ;
16858: LD_ADDR_VAR 0 9
16862: PUSH
16863: LD_VAR 0 7
16867: PPUSH
16868: LD_INT 0
16870: PPUSH
16871: LD_INT 5
16873: PPUSH
16874: CALL_OW 12
16878: PUSH
16879: LD_INT 0
16881: PPUSH
16882: LD_INT 5
16884: PPUSH
16885: CALL_OW 12
16889: PUSH
16890: LD_INT 0
16892: PPUSH
16893: LD_INT 5
16895: PPUSH
16896: CALL_OW 12
16900: PUSH
16901: LD_INT 0
16903: PPUSH
16904: LD_INT 5
16906: PPUSH
16907: CALL_OW 12
16911: PUSH
16912: LD_INT 0
16914: PPUSH
16915: LD_INT 5
16917: PPUSH
16918: CALL_OW 12
16922: PUSH
16923: LD_INT 0
16925: PPUSH
16926: LD_INT 5
16928: PPUSH
16929: CALL_OW 12
16933: PUSH
16934: LD_INT 0
16936: PPUSH
16937: LD_INT 5
16939: PPUSH
16940: CALL_OW 12
16944: PUSH
16945: LD_INT 0
16947: PPUSH
16948: LD_INT 5
16950: PPUSH
16951: CALL_OW 12
16955: PUSH
16956: EMPTY
16957: LIST
16958: LIST
16959: LIST
16960: LIST
16961: LIST
16962: LIST
16963: LIST
16964: LIST
16965: PPUSH
16966: LD_EXP 44
16970: PPUSH
16971: CALL 6518 0 3
16975: ST_TO_ADDR
// PlaceUnitArea ( human , position_drop_zones [ i ] [ 3 ] [ j ] , true ) ;
16976: LD_VAR 0 9
16980: PPUSH
16981: LD_EXP 36
16985: PUSH
16986: LD_VAR 0 2
16990: ARRAY
16991: PUSH
16992: LD_INT 3
16994: ARRAY
16995: PUSH
16996: LD_VAR 0 3
17000: ARRAY
17001: PPUSH
17002: LD_INT 1
17004: PPUSH
17005: CALL_OW 49
// side_soldiers := Replace ( side_soldiers , side , side_soldiers [ side ] ^ human ) ;
17009: LD_ADDR_EXP 46
17013: PUSH
17014: LD_EXP 46
17018: PPUSH
17019: LD_VAR 0 7
17023: PPUSH
17024: LD_EXP 46
17028: PUSH
17029: LD_VAR 0 7
17033: ARRAY
17034: PUSH
17035: LD_VAR 0 9
17039: ADD
17040: PPUSH
17041: CALL_OW 1
17045: ST_TO_ADDR
// exit ;
17046: POP
17047: POP
17048: POP
17049: POP
17050: GO 17322
// end else
17052: GO 17068
// begin outside := outside + 1 ;
17054: LD_ADDR_VAR 0 6
17058: PUSH
17059: LD_VAR 0 6
17063: PUSH
17064: LD_INT 1
17066: PLUS
17067: ST_TO_ADDR
// end ; end ;
17068: GO 16809
17070: POP
17071: POP
17072: GO 16781
17074: POP
17075: POP
// if areas = outside then
17076: LD_VAR 0 5
17080: PUSH
17081: LD_VAR 0 6
17085: EQUAL
17086: IFFALSE 17322
// begin i := Rand ( 1 , position_drop_zones ) ;
17088: LD_ADDR_VAR 0 2
17092: PUSH
17093: LD_INT 1
17095: PPUSH
17096: LD_EXP 36
17100: PPUSH
17101: CALL_OW 12
17105: ST_TO_ADDR
// j := Rand ( 1 , position_drop_zones [ i ] [ 3 ] ) ;
17106: LD_ADDR_VAR 0 3
17110: PUSH
17111: LD_INT 1
17113: PPUSH
17114: LD_EXP 36
17118: PUSH
17119: LD_VAR 0 2
17123: ARRAY
17124: PUSH
17125: LD_INT 3
17127: ARRAY
17128: PPUSH
17129: CALL_OW 12
17133: ST_TO_ADDR
// human := PrepareCharacters ( side , [ Rand ( 0 , 5 ) , Rand ( 0 , 5 ) , Rand ( 0 , 5 ) , Rand ( 0 , 5 ) , Rand ( 0 , 5 ) , Rand ( 0 , 5 ) , Rand ( 0 , 5 ) , Rand ( 0 , 5 ) ] , new_character_EON ) ;
17134: LD_ADDR_VAR 0 9
17138: PUSH
17139: LD_VAR 0 7
17143: PPUSH
17144: LD_INT 0
17146: PPUSH
17147: LD_INT 5
17149: PPUSH
17150: CALL_OW 12
17154: PUSH
17155: LD_INT 0
17157: PPUSH
17158: LD_INT 5
17160: PPUSH
17161: CALL_OW 12
17165: PUSH
17166: LD_INT 0
17168: PPUSH
17169: LD_INT 5
17171: PPUSH
17172: CALL_OW 12
17176: PUSH
17177: LD_INT 0
17179: PPUSH
17180: LD_INT 5
17182: PPUSH
17183: CALL_OW 12
17187: PUSH
17188: LD_INT 0
17190: PPUSH
17191: LD_INT 5
17193: PPUSH
17194: CALL_OW 12
17198: PUSH
17199: LD_INT 0
17201: PPUSH
17202: LD_INT 5
17204: PPUSH
17205: CALL_OW 12
17209: PUSH
17210: LD_INT 0
17212: PPUSH
17213: LD_INT 5
17215: PPUSH
17216: CALL_OW 12
17220: PUSH
17221: LD_INT 0
17223: PPUSH
17224: LD_INT 5
17226: PPUSH
17227: CALL_OW 12
17231: PUSH
17232: EMPTY
17233: LIST
17234: LIST
17235: LIST
17236: LIST
17237: LIST
17238: LIST
17239: LIST
17240: LIST
17241: PPUSH
17242: LD_EXP 44
17246: PPUSH
17247: CALL 6518 0 3
17251: ST_TO_ADDR
// PlaceUnitArea ( human , position_drop_zones [ i ] [ 3 ] [ j ] , true ) ;
17252: LD_VAR 0 9
17256: PPUSH
17257: LD_EXP 36
17261: PUSH
17262: LD_VAR 0 2
17266: ARRAY
17267: PUSH
17268: LD_INT 3
17270: ARRAY
17271: PUSH
17272: LD_VAR 0 3
17276: ARRAY
17277: PPUSH
17278: LD_INT 1
17280: PPUSH
17281: CALL_OW 49
// side_soldiers := Replace ( side_soldiers , side , side_soldiers [ side ] ^ human ) ;
17285: LD_ADDR_EXP 46
17289: PUSH
17290: LD_EXP 46
17294: PPUSH
17295: LD_VAR 0 7
17299: PPUSH
17300: LD_EXP 46
17304: PUSH
17305: LD_VAR 0 7
17309: ARRAY
17310: PUSH
17311: LD_VAR 0 9
17315: ADD
17316: PPUSH
17317: CALL_OW 1
17321: ST_TO_ADDR
// end ; end ;
17322: LD_VAR 0 1
17326: RET
// export function CYCLIC_Fluctuation ; var change ; begin
17327: LD_INT 0
17329: PPUSH
17330: PPUSH
// current_spawn_rate := Rand ( - 5 , 5 ) ;
17331: LD_ADDR_EXP 41
17335: PUSH
17336: LD_INT 5
17338: NEG
17339: PPUSH
17340: LD_INT 5
17342: PPUSH
17343: CALL_OW 12
17347: ST_TO_ADDR
// fluctuation_modifier_crates := fluctuation_base_crates * current_spawn_rate ;
17348: LD_ADDR_EXP 39
17352: PUSH
17353: LD_EXP 37
17357: PUSH
17358: LD_EXP 41
17362: MUL
17363: ST_TO_ADDR
// fluctuation_modifier_humans := fluctuation_base_humans * current_spawn_rate ;
17364: LD_ADDR_EXP 40
17368: PUSH
17369: LD_EXP 38
17373: PUSH
17374: LD_EXP 41
17378: MUL
17379: ST_TO_ADDR
// change := current_spawn_rate - past_spawn_rate ;
17380: LD_ADDR_VAR 0 2
17384: PUSH
17385: LD_EXP 41
17389: PUSH
17390: LD_EXP 42
17394: MINUS
17395: ST_TO_ADDR
// case change of - 10 .. - 6 :
17396: LD_VAR 0 2
17400: PUSH
17401: LD_INT 10
17403: NEG
17404: DOUBLE
17405: GREATEREQUAL
17406: IFFALSE 17415
17408: LD_INT 6
17410: NEG
17411: DOUBLE
17412: LESSEQUAL
17413: IFTRUE 17417
17415: GO 17420
17417: POP
// begin end ; - 5 .. - 1 :
17418: GO 17485
17420: LD_INT 5
17422: NEG
17423: DOUBLE
17424: GREATEREQUAL
17425: IFFALSE 17434
17427: LD_INT 1
17429: NEG
17430: DOUBLE
17431: LESSEQUAL
17432: IFTRUE 17436
17434: GO 17439
17436: POP
// begin end ; 0 :
17437: GO 17485
17439: LD_INT 0
17441: DOUBLE
17442: EQUAL
17443: IFTRUE 17447
17445: GO 17450
17447: POP
// begin end ; 1 .. 5 :
17448: GO 17485
17450: LD_INT 1
17452: DOUBLE
17453: GREATEREQUAL
17454: IFFALSE 17462
17456: LD_INT 5
17458: DOUBLE
17459: LESSEQUAL
17460: IFTRUE 17464
17462: GO 17467
17464: POP
// begin end ; 6 .. 10 :
17465: GO 17485
17467: LD_INT 6
17469: DOUBLE
17470: GREATEREQUAL
17471: IFFALSE 17479
17473: LD_INT 10
17475: DOUBLE
17476: LESSEQUAL
17477: IFTRUE 17481
17479: GO 17484
17481: POP
// begin end ; end ;
17482: GO 17485
17484: POP
// past_spawn_rate := current_spawn_rate ;
17485: LD_ADDR_EXP 42
17489: PUSH
17490: LD_EXP 41
17494: ST_TO_ADDR
// end ;
17495: LD_VAR 0 1
17499: RET
// export function CYCLIC_CheckTransportsInZones ; var i , cargo_bays ; begin
17500: LD_INT 0
17502: PPUSH
17503: PPUSH
17504: PPUSH
// for i = 1 to 8 do
17505: LD_ADDR_VAR 0 2
17509: PUSH
17510: DOUBLE
17511: LD_INT 1
17513: DEC
17514: ST_TO_ADDR
17515: LD_INT 8
17517: PUSH
17518: FOR_TO
17519: IFFALSE 18316
// begin side_resources_delivered := Replace ( side_resources_delivered , i , [ 0 , 0 , 0 ] ) ;
17521: LD_ADDR_EXP 59
17525: PUSH
17526: LD_EXP 59
17530: PPUSH
17531: LD_VAR 0 2
17535: PPUSH
17536: LD_INT 0
17538: PUSH
17539: LD_INT 0
17541: PUSH
17542: LD_INT 0
17544: PUSH
17545: EMPTY
17546: LIST
17547: LIST
17548: LIST
17549: PPUSH
17550: CALL_OW 1
17554: ST_TO_ADDR
// if not side_zone_locked [ i ] = 0 then
17555: LD_EXP 64
17559: PUSH
17560: LD_VAR 0 2
17564: ARRAY
17565: PUSH
17566: LD_INT 0
17568: EQUAL
17569: NOT
17570: IFFALSE 18314
// begin cargo_bays := FilterUnitsInArea ( team_transfer_zones [ Side_Teams [ i ] ] [ side_chosen_zone [ i ] ] , [ [ f_side , i ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , 12 ] , [ f_weapon , 32 ] , [ f_weapon , 51 ] ] , [ f_or , [ f_and , [ f_control , 2 ] , [ f_linked ] ] , [ f_and , [ f_control , 1 ] , [ f_occupied ] ] , [ f_control , 3 ] ] ] ) ;
17572: LD_ADDR_VAR 0 3
17576: PUSH
17577: LD_EXP 61
17581: PUSH
17582: LD_EXP 5
17586: PUSH
17587: LD_VAR 0 2
17591: ARRAY
17592: ARRAY
17593: PUSH
17594: LD_EXP 63
17598: PUSH
17599: LD_VAR 0 2
17603: ARRAY
17604: ARRAY
17605: PPUSH
17606: LD_INT 22
17608: PUSH
17609: LD_VAR 0 2
17613: PUSH
17614: EMPTY
17615: LIST
17616: LIST
17617: PUSH
17618: LD_INT 21
17620: PUSH
17621: LD_INT 2
17623: PUSH
17624: EMPTY
17625: LIST
17626: LIST
17627: PUSH
17628: LD_INT 2
17630: PUSH
17631: LD_INT 34
17633: PUSH
17634: LD_INT 12
17636: PUSH
17637: EMPTY
17638: LIST
17639: LIST
17640: PUSH
17641: LD_INT 34
17643: PUSH
17644: LD_INT 32
17646: PUSH
17647: EMPTY
17648: LIST
17649: LIST
17650: PUSH
17651: LD_INT 34
17653: PUSH
17654: LD_INT 51
17656: PUSH
17657: EMPTY
17658: LIST
17659: LIST
17660: PUSH
17661: EMPTY
17662: LIST
17663: LIST
17664: LIST
17665: LIST
17666: PUSH
17667: LD_INT 2
17669: PUSH
17670: LD_INT 1
17672: PUSH
17673: LD_INT 33
17675: PUSH
17676: LD_INT 2
17678: PUSH
17679: EMPTY
17680: LIST
17681: LIST
17682: PUSH
17683: LD_INT 61
17685: PUSH
17686: EMPTY
17687: LIST
17688: PUSH
17689: EMPTY
17690: LIST
17691: LIST
17692: LIST
17693: PUSH
17694: LD_INT 1
17696: PUSH
17697: LD_INT 33
17699: PUSH
17700: LD_INT 1
17702: PUSH
17703: EMPTY
17704: LIST
17705: LIST
17706: PUSH
17707: LD_INT 59
17709: PUSH
17710: EMPTY
17711: LIST
17712: PUSH
17713: EMPTY
17714: LIST
17715: LIST
17716: LIST
17717: PUSH
17718: LD_INT 33
17720: PUSH
17721: LD_INT 3
17723: PUSH
17724: EMPTY
17725: LIST
17726: LIST
17727: PUSH
17728: EMPTY
17729: LIST
17730: LIST
17731: LIST
17732: LIST
17733: PUSH
17734: EMPTY
17735: LIST
17736: LIST
17737: LIST
17738: LIST
17739: PPUSH
17740: CALL_OW 70
17744: ST_TO_ADDR
// if not cargo_bays = [ ] then
17745: LD_VAR 0 3
17749: PUSH
17750: EMPTY
17751: EQUAL
17752: NOT
17753: IFFALSE 17911
// begin side_resources_delivered := Replace ( side_resources_delivered , i , Replace ( side_resources_delivered [ i ] , 1 , GetCargo ( cargo_bays , mat_cans ) ) ) ;
17755: LD_ADDR_EXP 59
17759: PUSH
17760: LD_EXP 59
17764: PPUSH
17765: LD_VAR 0 2
17769: PPUSH
17770: LD_EXP 59
17774: PUSH
17775: LD_VAR 0 2
17779: ARRAY
17780: PPUSH
17781: LD_INT 1
17783: PPUSH
17784: LD_VAR 0 3
17788: PPUSH
17789: LD_INT 1
17791: PPUSH
17792: CALL_OW 289
17796: PPUSH
17797: CALL_OW 1
17801: PPUSH
17802: CALL_OW 1
17806: ST_TO_ADDR
// side_resources_delivered := Replace ( side_resources_delivered , i , Replace ( side_resources_delivered [ i ] , 2 , GetCargo ( cargo_bays , mat_oil ) ) ) ;
17807: LD_ADDR_EXP 59
17811: PUSH
17812: LD_EXP 59
17816: PPUSH
17817: LD_VAR 0 2
17821: PPUSH
17822: LD_EXP 59
17826: PUSH
17827: LD_VAR 0 2
17831: ARRAY
17832: PPUSH
17833: LD_INT 2
17835: PPUSH
17836: LD_VAR 0 3
17840: PPUSH
17841: LD_INT 2
17843: PPUSH
17844: CALL_OW 289
17848: PPUSH
17849: CALL_OW 1
17853: PPUSH
17854: CALL_OW 1
17858: ST_TO_ADDR
// side_resources_delivered := Replace ( side_resources_delivered , i , Replace ( side_resources_delivered [ i ] , 3 , GetCargo ( cargo_bays , mat_siberit ) ) ) ;
17859: LD_ADDR_EXP 59
17863: PUSH
17864: LD_EXP 59
17868: PPUSH
17869: LD_VAR 0 2
17873: PPUSH
17874: LD_EXP 59
17878: PUSH
17879: LD_VAR 0 2
17883: ARRAY
17884: PPUSH
17885: LD_INT 3
17887: PPUSH
17888: LD_VAR 0 3
17892: PPUSH
17893: LD_INT 3
17895: PPUSH
17896: CALL_OW 289
17900: PPUSH
17901: CALL_OW 1
17905: PPUSH
17906: CALL_OW 1
17910: ST_TO_ADDR
// end ; if i = Your_Side and ( side_order_type [ i ] = 1 or side_order_type [ i ] = 2 ) then
17911: LD_VAR 0 2
17915: PUSH
17916: LD_OWVAR 2
17920: EQUAL
17921: PUSH
17922: LD_EXP 67
17926: PUSH
17927: LD_VAR 0 2
17931: ARRAY
17932: PUSH
17933: LD_INT 1
17935: EQUAL
17936: PUSH
17937: LD_EXP 67
17941: PUSH
17942: LD_VAR 0 2
17946: ARRAY
17947: PUSH
17948: LD_INT 2
17950: EQUAL
17951: OR
17952: AND
17953: IFFALSE 18046
// ToLua ( LUA_UpdateTransferResources( & side_resources_delivered [ i ] [ 1 ] & , & side_resources_delivered [ i ] [ 2 ] & , & side_resources_delivered [ i ] [ 3 ] & , & 0 & , & side_order_type [ i ] & ); ) ;
17955: LD_STRING LUA_UpdateTransferResources(
17957: PUSH
17958: LD_EXP 59
17962: PUSH
17963: LD_VAR 0 2
17967: ARRAY
17968: PUSH
17969: LD_INT 1
17971: ARRAY
17972: STR
17973: PUSH
17974: LD_STRING ,
17976: STR
17977: PUSH
17978: LD_EXP 59
17982: PUSH
17983: LD_VAR 0 2
17987: ARRAY
17988: PUSH
17989: LD_INT 2
17991: ARRAY
17992: STR
17993: PUSH
17994: LD_STRING ,
17996: STR
17997: PUSH
17998: LD_EXP 59
18002: PUSH
18003: LD_VAR 0 2
18007: ARRAY
18008: PUSH
18009: LD_INT 3
18011: ARRAY
18012: STR
18013: PUSH
18014: LD_STRING ,
18016: STR
18017: PUSH
18018: LD_INT 0
18020: STR
18021: PUSH
18022: LD_STRING ,
18024: STR
18025: PUSH
18026: LD_EXP 67
18030: PUSH
18031: LD_VAR 0 2
18035: ARRAY
18036: STR
18037: PUSH
18038: LD_STRING );
18040: STR
18041: PPUSH
18042: CALL_OW 559
// if i = Your_Side and side_order_type [ i ] = 3 then
18046: LD_VAR 0 2
18050: PUSH
18051: LD_OWVAR 2
18055: EQUAL
18056: PUSH
18057: LD_EXP 67
18061: PUSH
18062: LD_VAR 0 2
18066: ARRAY
18067: PUSH
18068: LD_INT 3
18070: EQUAL
18071: AND
18072: IFFALSE 18165
// ToLua ( LUA_UpdateTransferResources( & 0 & , & 0 & , & side_resources_delivered [ i ] [ 3 ] & + & team_siberite_stocked [ Side_Teams [ i ] ] & , & victory_cond & , & side_order_type [ i ] & ); ) ;
18074: LD_STRING LUA_UpdateTransferResources(
18076: PUSH
18077: LD_INT 0
18079: STR
18080: PUSH
18081: LD_STRING ,
18083: STR
18084: PUSH
18085: LD_INT 0
18087: STR
18088: PUSH
18089: LD_STRING ,
18091: STR
18092: PUSH
18093: LD_EXP 59
18097: PUSH
18098: LD_VAR 0 2
18102: ARRAY
18103: PUSH
18104: LD_INT 3
18106: ARRAY
18107: STR
18108: PUSH
18109: LD_STRING +
18111: STR
18112: PUSH
18113: LD_EXP 60
18117: PUSH
18118: LD_EXP 5
18122: PUSH
18123: LD_VAR 0 2
18127: ARRAY
18128: ARRAY
18129: STR
18130: PUSH
18131: LD_STRING ,
18133: STR
18134: PUSH
18135: LD_EXP 27
18139: STR
18140: PUSH
18141: LD_STRING ,
18143: STR
18144: PUSH
18145: LD_EXP 67
18149: PUSH
18150: LD_VAR 0 2
18154: ARRAY
18155: STR
18156: PUSH
18157: LD_STRING );
18159: STR
18160: PPUSH
18161: CALL_OW 559
// if side_resources_delivered [ i ] [ 1 ] >= side_pending_order [ i ] [ 1 ] and side_resources_delivered [ i ] [ 2 ] >= side_pending_order [ i ] [ 2 ] and side_resources_delivered [ i ] [ 3 ] >= side_pending_order [ i ] [ 3 ] and i = Your_Side then
18165: LD_EXP 59
18169: PUSH
18170: LD_VAR 0 2
18174: ARRAY
18175: PUSH
18176: LD_INT 1
18178: ARRAY
18179: PUSH
18180: LD_EXP 58
18184: PUSH
18185: LD_VAR 0 2
18189: ARRAY
18190: PUSH
18191: LD_INT 1
18193: ARRAY
18194: GREATEREQUAL
18195: PUSH
18196: LD_EXP 59
18200: PUSH
18201: LD_VAR 0 2
18205: ARRAY
18206: PUSH
18207: LD_INT 2
18209: ARRAY
18210: PUSH
18211: LD_EXP 58
18215: PUSH
18216: LD_VAR 0 2
18220: ARRAY
18221: PUSH
18222: LD_INT 2
18224: ARRAY
18225: GREATEREQUAL
18226: AND
18227: PUSH
18228: LD_EXP 59
18232: PUSH
18233: LD_VAR 0 2
18237: ARRAY
18238: PUSH
18239: LD_INT 3
18241: ARRAY
18242: PUSH
18243: LD_EXP 58
18247: PUSH
18248: LD_VAR 0 2
18252: ARRAY
18253: PUSH
18254: LD_INT 3
18256: ARRAY
18257: GREATEREQUAL
18258: AND
18259: PUSH
18260: LD_VAR 0 2
18264: PUSH
18265: LD_OWVAR 2
18269: EQUAL
18270: AND
18271: IFFALSE 18307
// if side_order_type [ i ] = 3 then
18273: LD_EXP 67
18277: PUSH
18278: LD_VAR 0 2
18282: ARRAY
18283: PUSH
18284: LD_INT 3
18286: EQUAL
18287: IFFALSE 18298
// ToLua ( LUA_CanSendShipment(); ) else
18289: LD_STRING LUA_CanSendShipment();
18291: PPUSH
18292: CALL_OW 559
18296: GO 18305
// ToLua ( LUA_AutomaticSend(); ) else
18298: LD_STRING LUA_AutomaticSend();
18300: PPUSH
18301: CALL_OW 559
18305: GO 18314
// ToLua ( LUA_CannotSendShipment(); ) ;
18307: LD_STRING LUA_CannotSendShipment();
18309: PPUSH
18310: CALL_OW 559
// end ; end ;
18314: GO 17518
18316: POP
18317: POP
// end ;
18318: LD_VAR 0 1
18322: RET
// export function CYCLIC_FinalizeTransfer ( side , in1 , in2 , in3 ) ; var human , i , bulk , crates , oil , siberite ; begin
18323: LD_INT 0
18325: PPUSH
18326: PPUSH
18327: PPUSH
18328: PPUSH
18329: PPUSH
18330: PPUSH
18331: PPUSH
// SetCargo ( side_units_outside [ side ] , mat_cans , 0 ) ;
18332: LD_EXP 66
18336: PUSH
18337: LD_VAR 0 1
18341: ARRAY
18342: PPUSH
18343: LD_INT 1
18345: PPUSH
18346: LD_INT 0
18348: PPUSH
18349: CALL_OW 290
// crates := in1 ;
18353: LD_ADDR_VAR 0 9
18357: PUSH
18358: LD_VAR 0 2
18362: ST_TO_ADDR
// oil := in2 ;
18363: LD_ADDR_VAR 0 10
18367: PUSH
18368: LD_VAR 0 3
18372: ST_TO_ADDR
// siberite := in3 ;
18373: LD_ADDR_VAR 0 11
18377: PUSH
18378: LD_VAR 0 4
18382: ST_TO_ADDR
// case side_order_type [ side ] of 1 :
18383: LD_EXP 67
18387: PUSH
18388: LD_VAR 0 1
18392: ARRAY
18393: PUSH
18394: LD_INT 1
18396: DOUBLE
18397: EQUAL
18398: IFTRUE 18402
18400: GO 18883
18402: POP
// begin for i = 1 to side_reinforcement_amount [ side ] do
18403: LD_ADDR_VAR 0 7
18407: PUSH
18408: DOUBLE
18409: LD_INT 1
18411: DEC
18412: ST_TO_ADDR
18413: LD_EXP 56
18417: PUSH
18418: LD_VAR 0 1
18422: ARRAY
18423: PUSH
18424: FOR_TO
18425: IFFALSE 18712
// begin new_character_reinforcements := [ 0 , 1 , [ Rand ( 8 , 12 ) , Rand ( 8 , 12 ) ] , [ 0 , 0 , 0 , 0 ] , [ Rand ( 0 , experience ) , Rand ( 0 , experience ) , Rand ( 0 , experience ) , Rand ( 0 , experience ) ] , 0 ] ;
18427: LD_ADDR_EXP 45
18431: PUSH
18432: LD_INT 0
18434: PUSH
18435: LD_INT 1
18437: PUSH
18438: LD_INT 8
18440: PPUSH
18441: LD_INT 12
18443: PPUSH
18444: CALL_OW 12
18448: PUSH
18449: LD_INT 8
18451: PPUSH
18452: LD_INT 12
18454: PPUSH
18455: CALL_OW 12
18459: PUSH
18460: EMPTY
18461: LIST
18462: LIST
18463: PUSH
18464: LD_INT 0
18466: PUSH
18467: LD_INT 0
18469: PUSH
18470: LD_INT 0
18472: PUSH
18473: LD_INT 0
18475: PUSH
18476: EMPTY
18477: LIST
18478: LIST
18479: LIST
18480: LIST
18481: PUSH
18482: LD_INT 0
18484: PPUSH
18485: LD_EXP 20
18489: PPUSH
18490: CALL_OW 12
18494: PUSH
18495: LD_INT 0
18497: PPUSH
18498: LD_EXP 20
18502: PPUSH
18503: CALL_OW 12
18507: PUSH
18508: LD_INT 0
18510: PPUSH
18511: LD_EXP 20
18515: PPUSH
18516: CALL_OW 12
18520: PUSH
18521: LD_INT 0
18523: PPUSH
18524: LD_EXP 20
18528: PPUSH
18529: CALL_OW 12
18533: PUSH
18534: EMPTY
18535: LIST
18536: LIST
18537: LIST
18538: LIST
18539: PUSH
18540: LD_INT 0
18542: PUSH
18543: EMPTY
18544: LIST
18545: LIST
18546: LIST
18547: LIST
18548: LIST
18549: LIST
18550: ST_TO_ADDR
// human := PrepareCharacters ( side , [ Rand ( 0 , 5 ) , Rand ( 0 , 5 ) , Rand ( 0 , 5 ) , Rand ( 0 , 5 ) , Rand ( 0 , 5 ) , Rand ( 0 , 5 ) , Rand ( 0 , 5 ) , Rand ( 0 , 5 ) ] , new_character_reinforcements ) ;
18551: LD_ADDR_VAR 0 6
18555: PUSH
18556: LD_VAR 0 1
18560: PPUSH
18561: LD_INT 0
18563: PPUSH
18564: LD_INT 5
18566: PPUSH
18567: CALL_OW 12
18571: PUSH
18572: LD_INT 0
18574: PPUSH
18575: LD_INT 5
18577: PPUSH
18578: CALL_OW 12
18582: PUSH
18583: LD_INT 0
18585: PPUSH
18586: LD_INT 5
18588: PPUSH
18589: CALL_OW 12
18593: PUSH
18594: LD_INT 0
18596: PPUSH
18597: LD_INT 5
18599: PPUSH
18600: CALL_OW 12
18604: PUSH
18605: LD_INT 0
18607: PPUSH
18608: LD_INT 5
18610: PPUSH
18611: CALL_OW 12
18615: PUSH
18616: LD_INT 0
18618: PPUSH
18619: LD_INT 5
18621: PPUSH
18622: CALL_OW 12
18626: PUSH
18627: LD_INT 0
18629: PPUSH
18630: LD_INT 5
18632: PPUSH
18633: CALL_OW 12
18637: PUSH
18638: LD_INT 0
18640: PPUSH
18641: LD_INT 5
18643: PPUSH
18644: CALL_OW 12
18648: PUSH
18649: EMPTY
18650: LIST
18651: LIST
18652: LIST
18653: LIST
18654: LIST
18655: LIST
18656: LIST
18657: LIST
18658: PPUSH
18659: LD_EXP 45
18663: PPUSH
18664: CALL 6518 0 3
18668: ST_TO_ADDR
// PlaceUnitArea ( human , team_transfer_zones [ Side_Teams [ side ] ] [ side_chosen_zone [ side ] ] , false ) ;
18669: LD_VAR 0 6
18673: PPUSH
18674: LD_EXP 61
18678: PUSH
18679: LD_EXP 5
18683: PUSH
18684: LD_VAR 0 1
18688: ARRAY
18689: ARRAY
18690: PUSH
18691: LD_EXP 63
18695: PUSH
18696: LD_VAR 0 1
18700: ARRAY
18701: ARRAY
18702: PPUSH
18703: LD_INT 0
18705: PPUSH
18706: CALL_OW 49
// end ;
18710: GO 18424
18712: POP
18713: POP
// for i in side_units_outside [ side ] do
18714: LD_ADDR_VAR 0 7
18718: PUSH
18719: LD_EXP 66
18723: PUSH
18724: LD_VAR 0 1
18728: ARRAY
18729: PUSH
18730: FOR_IN
18731: IFFALSE 18879
// begin bulk := FillUpVehicles ( i , crates , oil , siberite ) ;
18733: LD_ADDR_VAR 0 8
18737: PUSH
18738: LD_VAR 0 7
18742: PPUSH
18743: LD_VAR 0 9
18747: PPUSH
18748: LD_VAR 0 10
18752: PPUSH
18753: LD_VAR 0 11
18757: PPUSH
18758: CALL 11157 0 4
18762: ST_TO_ADDR
// crates := bulk [ 2 ] ;
18763: LD_ADDR_VAR 0 9
18767: PUSH
18768: LD_VAR 0 8
18772: PUSH
18773: LD_INT 2
18775: ARRAY
18776: ST_TO_ADDR
// oil := bulk [ 3 ] ;
18777: LD_ADDR_VAR 0 10
18781: PUSH
18782: LD_VAR 0 8
18786: PUSH
18787: LD_INT 3
18789: ARRAY
18790: ST_TO_ADDR
// siberite := bulk [ 4 ] ;
18791: LD_ADDR_VAR 0 11
18795: PUSH
18796: LD_VAR 0 8
18800: PUSH
18801: LD_INT 4
18803: ARRAY
18804: ST_TO_ADDR
// SetDir ( i , RotateUnit ( GetDir ( i ) , 3 ) ) ;
18805: LD_VAR 0 7
18809: PPUSH
18810: LD_VAR 0 7
18814: PPUSH
18815: CALL_OW 254
18819: PPUSH
18820: LD_INT 3
18822: PPUSH
18823: CALL 11439 0 2
18827: PPUSH
18828: CALL_OW 233
// PlaceUnitArea ( bulk [ 1 ] , team_transfer_zones [ Side_Teams [ side ] ] [ side_chosen_zone [ side ] ] , false ) ;
18832: LD_VAR 0 8
18836: PUSH
18837: LD_INT 1
18839: ARRAY
18840: PPUSH
18841: LD_EXP 61
18845: PUSH
18846: LD_EXP 5
18850: PUSH
18851: LD_VAR 0 1
18855: ARRAY
18856: ARRAY
18857: PUSH
18858: LD_EXP 63
18862: PUSH
18863: LD_VAR 0 1
18867: ARRAY
18868: ARRAY
18869: PPUSH
18870: LD_INT 0
18872: PPUSH
18873: CALL_OW 49
// end ;
18877: GO 18730
18879: POP
18880: POP
// end ; 2 :
18881: GO 19594
18883: LD_INT 2
18885: DOUBLE
18886: EQUAL
18887: IFTRUE 18891
18889: GO 19225
18891: POP
// begin side_tech_lvl := Replace ( side_tech_lvl , side , side_tech_lvl [ side ] + 1 ) ;
18892: LD_ADDR_EXP 31
18896: PUSH
18897: LD_EXP 31
18901: PPUSH
18902: LD_VAR 0 1
18906: PPUSH
18907: LD_EXP 31
18911: PUSH
18912: LD_VAR 0 1
18916: ARRAY
18917: PUSH
18918: LD_INT 1
18920: PLUS
18921: PPUSH
18922: CALL_OW 1
18926: ST_TO_ADDR
// TechUpgrade ( side_tech_lvl [ side ] , Side_Nations [ side ] , side ) ;
18927: LD_EXP 31
18931: PUSH
18932: LD_VAR 0 1
18936: ARRAY
18937: PPUSH
18938: LD_EXP 3
18942: PUSH
18943: LD_VAR 0 1
18947: ARRAY
18948: PPUSH
18949: LD_VAR 0 1
18953: PPUSH
18954: CALL 7871 0 3
// if side = Your_Side then
18958: LD_VAR 0 1
18962: PUSH
18963: LD_OWVAR 2
18967: EQUAL
18968: IFFALSE 19003
// ToLua ( LUA_UpdateSideInterface( & side & , & side_tech_lvl [ side ] & ); ) ;
18970: LD_STRING LUA_UpdateSideInterface(
18972: PUSH
18973: LD_VAR 0 1
18977: STR
18978: PUSH
18979: LD_STRING ,
18981: STR
18982: PUSH
18983: LD_EXP 31
18987: PUSH
18988: LD_VAR 0 1
18992: ARRAY
18993: STR
18994: PUSH
18995: LD_STRING );
18997: STR
18998: PPUSH
18999: CALL_OW 559
// if Your_Side = 9 then
19003: LD_OWVAR 2
19007: PUSH
19008: LD_INT 9
19010: EQUAL
19011: IFFALSE 19056
// ToLua ( LUA_UpdateSpecInterface( & side & , & side & , & side_tech_lvl [ side ] & ); ) ;
19013: LD_STRING LUA_UpdateSpecInterface(
19015: PUSH
19016: LD_VAR 0 1
19020: STR
19021: PUSH
19022: LD_STRING ,
19024: STR
19025: PUSH
19026: LD_VAR 0 1
19030: STR
19031: PUSH
19032: LD_STRING ,
19034: STR
19035: PUSH
19036: LD_EXP 31
19040: PUSH
19041: LD_VAR 0 1
19045: ARRAY
19046: STR
19047: PUSH
19048: LD_STRING );
19050: STR
19051: PPUSH
19052: CALL_OW 559
// for i in side_units_outside [ side ] do
19056: LD_ADDR_VAR 0 7
19060: PUSH
19061: LD_EXP 66
19065: PUSH
19066: LD_VAR 0 1
19070: ARRAY
19071: PUSH
19072: FOR_IN
19073: IFFALSE 19221
// begin bulk := FillUpVehicles ( i , crates , oil , siberite ) ;
19075: LD_ADDR_VAR 0 8
19079: PUSH
19080: LD_VAR 0 7
19084: PPUSH
19085: LD_VAR 0 9
19089: PPUSH
19090: LD_VAR 0 10
19094: PPUSH
19095: LD_VAR 0 11
19099: PPUSH
19100: CALL 11157 0 4
19104: ST_TO_ADDR
// crates := bulk [ 2 ] ;
19105: LD_ADDR_VAR 0 9
19109: PUSH
19110: LD_VAR 0 8
19114: PUSH
19115: LD_INT 2
19117: ARRAY
19118: ST_TO_ADDR
// oil := bulk [ 3 ] ;
19119: LD_ADDR_VAR 0 10
19123: PUSH
19124: LD_VAR 0 8
19128: PUSH
19129: LD_INT 3
19131: ARRAY
19132: ST_TO_ADDR
// siberite := bulk [ 4 ] ;
19133: LD_ADDR_VAR 0 11
19137: PUSH
19138: LD_VAR 0 8
19142: PUSH
19143: LD_INT 4
19145: ARRAY
19146: ST_TO_ADDR
// SetDir ( i , RotateUnit ( GetDir ( i ) , 3 ) ) ;
19147: LD_VAR 0 7
19151: PPUSH
19152: LD_VAR 0 7
19156: PPUSH
19157: CALL_OW 254
19161: PPUSH
19162: LD_INT 3
19164: PPUSH
19165: CALL 11439 0 2
19169: PPUSH
19170: CALL_OW 233
// PlaceUnitArea ( bulk [ 1 ] , team_transfer_zones [ Side_Teams [ side ] ] [ side_chosen_zone [ side ] ] , false ) ;
19174: LD_VAR 0 8
19178: PUSH
19179: LD_INT 1
19181: ARRAY
19182: PPUSH
19183: LD_EXP 61
19187: PUSH
19188: LD_EXP 5
19192: PUSH
19193: LD_VAR 0 1
19197: ARRAY
19198: ARRAY
19199: PUSH
19200: LD_EXP 63
19204: PUSH
19205: LD_VAR 0 1
19209: ARRAY
19210: ARRAY
19211: PPUSH
19212: LD_INT 0
19214: PPUSH
19215: CALL_OW 49
// end ;
19219: GO 19072
19221: POP
19222: POP
// end ; 3 :
19223: GO 19594
19225: LD_INT 3
19227: DOUBLE
19228: EQUAL
19229: IFTRUE 19233
19231: GO 19593
19233: POP
// begin team_siberite_stocked := Replace ( team_siberite_stocked , Side_Teams [ side ] , team_siberite_stocked [ Side_Teams [ side ] ] + siberite ) ;
19234: LD_ADDR_EXP 60
19238: PUSH
19239: LD_EXP 60
19243: PPUSH
19244: LD_EXP 5
19248: PUSH
19249: LD_VAR 0 1
19253: ARRAY
19254: PPUSH
19255: LD_EXP 60
19259: PUSH
19260: LD_EXP 5
19264: PUSH
19265: LD_VAR 0 1
19269: ARRAY
19270: ARRAY
19271: PUSH
19272: LD_VAR 0 11
19276: PLUS
19277: PPUSH
19278: CALL_OW 1
19282: ST_TO_ADDR
// RaiseSailEvent ( 67 ) ;
19283: LD_INT 67
19285: PPUSH
19286: CALL_OW 427
// siberite := 0 ;
19290: LD_ADDR_VAR 0 11
19294: PUSH
19295: LD_INT 0
19297: ST_TO_ADDR
// for i in side_units_outside [ side ] do
19298: LD_ADDR_VAR 0 7
19302: PUSH
19303: LD_EXP 66
19307: PUSH
19308: LD_VAR 0 1
19312: ARRAY
19313: PUSH
19314: FOR_IN
19315: IFFALSE 19463
// begin bulk := FillUpVehicles ( i , crates , oil , siberite ) ;
19317: LD_ADDR_VAR 0 8
19321: PUSH
19322: LD_VAR 0 7
19326: PPUSH
19327: LD_VAR 0 9
19331: PPUSH
19332: LD_VAR 0 10
19336: PPUSH
19337: LD_VAR 0 11
19341: PPUSH
19342: CALL 11157 0 4
19346: ST_TO_ADDR
// crates := bulk [ 2 ] ;
19347: LD_ADDR_VAR 0 9
19351: PUSH
19352: LD_VAR 0 8
19356: PUSH
19357: LD_INT 2
19359: ARRAY
19360: ST_TO_ADDR
// oil := bulk [ 3 ] ;
19361: LD_ADDR_VAR 0 10
19365: PUSH
19366: LD_VAR 0 8
19370: PUSH
19371: LD_INT 3
19373: ARRAY
19374: ST_TO_ADDR
// siberite := bulk [ 4 ] ;
19375: LD_ADDR_VAR 0 11
19379: PUSH
19380: LD_VAR 0 8
19384: PUSH
19385: LD_INT 4
19387: ARRAY
19388: ST_TO_ADDR
// SetDir ( i , RotateUnit ( GetDir ( i ) , 3 ) ) ;
19389: LD_VAR 0 7
19393: PPUSH
19394: LD_VAR 0 7
19398: PPUSH
19399: CALL_OW 254
19403: PPUSH
19404: LD_INT 3
19406: PPUSH
19407: CALL 11439 0 2
19411: PPUSH
19412: CALL_OW 233
// PlaceUnitArea ( bulk [ 1 ] , team_transfer_zones [ Side_Teams [ side ] ] [ side_chosen_zone [ side ] ] , false ) ;
19416: LD_VAR 0 8
19420: PUSH
19421: LD_INT 1
19423: ARRAY
19424: PPUSH
19425: LD_EXP 61
19429: PUSH
19430: LD_EXP 5
19434: PUSH
19435: LD_VAR 0 1
19439: ARRAY
19440: ARRAY
19441: PUSH
19442: LD_EXP 63
19446: PUSH
19447: LD_VAR 0 1
19451: ARRAY
19452: ARRAY
19453: PPUSH
19454: LD_INT 0
19456: PPUSH
19457: CALL_OW 49
// end ;
19461: GO 19314
19463: POP
19464: POP
// if side = Your_Side then
19465: LD_VAR 0 1
19469: PUSH
19470: LD_OWVAR 2
19474: EQUAL
19475: IFFALSE 19516
// ToLua ( LUA_UpdateSiberiteSent( & team_siberite_stocked [ Side_Teams [ side ] ] & , & victory_cond & ); ) ;
19477: LD_STRING LUA_UpdateSiberiteSent(
19479: PUSH
19480: LD_EXP 60
19484: PUSH
19485: LD_EXP 5
19489: PUSH
19490: LD_VAR 0 1
19494: ARRAY
19495: ARRAY
19496: STR
19497: PUSH
19498: LD_STRING ,
19500: STR
19501: PUSH
19502: LD_EXP 27
19506: STR
19507: PUSH
19508: LD_STRING );
19510: STR
19511: PPUSH
19512: CALL_OW 559
// if Your_Side = 9 then
19516: LD_OWVAR 2
19520: PUSH
19521: LD_INT 9
19523: EQUAL
19524: IFFALSE 19591
// for i = 1 to Teams do
19526: LD_ADDR_VAR 0 7
19530: PUSH
19531: DOUBLE
19532: LD_INT 1
19534: DEC
19535: ST_TO_ADDR
19536: LD_EXP 6
19540: PUSH
19541: FOR_TO
19542: IFFALSE 19589
// ToLua ( LUA_UpdateSiberiteSpec( & team_siberite_stocked [ i ] & , & victory_cond & , & i & ); ) ;
19544: LD_STRING LUA_UpdateSiberiteSpec(
19546: PUSH
19547: LD_EXP 60
19551: PUSH
19552: LD_VAR 0 7
19556: ARRAY
19557: STR
19558: PUSH
19559: LD_STRING ,
19561: STR
19562: PUSH
19563: LD_EXP 27
19567: STR
19568: PUSH
19569: LD_STRING ,
19571: STR
19572: PUSH
19573: LD_VAR 0 7
19577: STR
19578: PUSH
19579: LD_STRING );
19581: STR
19582: PPUSH
19583: CALL_OW 559
19587: GO 19541
19589: POP
19590: POP
// end ; end ;
19591: GO 19594
19593: POP
// ToLua ( LUA_TransferFinished(); ) ;
19594: LD_STRING LUA_TransferFinished();
19596: PPUSH
19597: CALL_OW 559
// end ; end_of_file
19601: LD_VAR 0 5
19605: RET
// export ExtraStrings ; export WaitServerStrings ; export function ShowTimer ; var AllStrings ; begin
19606: LD_INT 0
19608: PPUSH
19609: PPUSH
// AllStrings := [ #Multi1x1-Time , tick ] ;
19610: LD_ADDR_VAR 0 2
19614: PUSH
19615: LD_STRING #Multi1x1-Time
19617: PUSH
19618: LD_OWVAR 1
19622: PUSH
19623: EMPTY
19624: LIST
19625: LIST
19626: ST_TO_ADDR
// if WaitServerStrings then
19627: LD_EXP 71
19631: IFFALSE 19649
// AllStrings = AllStrings ^ WaitServerStrings ;
19633: LD_ADDR_VAR 0 2
19637: PUSH
19638: LD_VAR 0 2
19642: PUSH
19643: LD_EXP 71
19647: ADD
19648: ST_TO_ADDR
// ExtraStrings := [ side_chosen_zone , side_zone_locked ] ;
19649: LD_ADDR_EXP 70
19653: PUSH
19654: LD_EXP 63
19658: PUSH
19659: LD_EXP 64
19663: PUSH
19664: EMPTY
19665: LIST
19666: LIST
19667: ST_TO_ADDR
// if ( ExtraStrings ) then
19668: LD_EXP 70
19672: IFFALSE 19694
// AllStrings := AllStrings ^  ^ ExtraStrings ;
19674: LD_ADDR_VAR 0 2
19678: PUSH
19679: LD_VAR 0 2
19683: PUSH
19684: LD_STRING 
19686: ADD
19687: PUSH
19688: LD_EXP 70
19692: ADD
19693: ST_TO_ADDR
// Display_Strings := AllStrings ;
19694: LD_ADDR_OWVAR 47
19698: PUSH
19699: LD_VAR 0 2
19703: ST_TO_ADDR
// end ; end_of_file
19704: LD_VAR 0 1
19708: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
19709: LD_INT 0
19711: PPUSH
19712: PPUSH
19713: PPUSH
19714: PPUSH
19715: PPUSH
19716: PPUSH
19717: PPUSH
19718: PPUSH
19719: PPUSH
// for i := 1 to 8 do
19720: LD_ADDR_VAR 0 2
19724: PUSH
19725: DOUBLE
19726: LD_INT 1
19728: DEC
19729: ST_TO_ADDR
19730: LD_INT 8
19732: PUSH
19733: FOR_TO
19734: IFFALSE 20118
// begin if Side_Positions [ i ] then
19736: LD_EXP 2
19740: PUSH
19741: LD_VAR 0 2
19745: ARRAY
19746: IFFALSE 20116
// begin people := FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) + 0 ;
19748: LD_ADDR_VAR 0 7
19752: PUSH
19753: LD_INT 22
19755: PUSH
19756: LD_VAR 0 2
19760: PUSH
19761: EMPTY
19762: LIST
19763: LIST
19764: PUSH
19765: LD_INT 21
19767: PUSH
19768: LD_INT 1
19770: PUSH
19771: EMPTY
19772: LIST
19773: LIST
19774: PUSH
19775: EMPTY
19776: LIST
19777: LIST
19778: PPUSH
19779: CALL_OW 69
19783: PUSH
19784: LD_INT 0
19786: PLUS
19787: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19788: LD_ADDR_VAR 0 9
19792: PUSH
19793: LD_INT 22
19795: PUSH
19796: LD_VAR 0 2
19800: PUSH
19801: EMPTY
19802: LIST
19803: LIST
19804: PUSH
19805: LD_INT 2
19807: PUSH
19808: LD_INT 30
19810: PUSH
19811: LD_INT 0
19813: PUSH
19814: EMPTY
19815: LIST
19816: LIST
19817: PUSH
19818: LD_INT 30
19820: PUSH
19821: LD_INT 1
19823: PUSH
19824: EMPTY
19825: LIST
19826: LIST
19827: PUSH
19828: EMPTY
19829: LIST
19830: LIST
19831: LIST
19832: PUSH
19833: EMPTY
19834: LIST
19835: LIST
19836: PPUSH
19837: CALL_OW 69
19841: ST_TO_ADDR
// crates := 0 ;
19842: LD_ADDR_VAR 0 4
19846: PUSH
19847: LD_INT 0
19849: ST_TO_ADDR
// oil := 0 ;
19850: LD_ADDR_VAR 0 5
19854: PUSH
19855: LD_INT 0
19857: ST_TO_ADDR
// sib := 0 ;
19858: LD_ADDR_VAR 0 6
19862: PUSH
19863: LD_INT 0
19865: ST_TO_ADDR
// if bases then
19866: LD_VAR 0 9
19870: IFFALSE 19976
// begin for j in bases do
19872: LD_ADDR_VAR 0 3
19876: PUSH
19877: LD_VAR 0 9
19881: PUSH
19882: FOR_IN
19883: IFFALSE 19974
// begin base := GetBase ( j ) ;
19885: LD_ADDR_VAR 0 8
19889: PUSH
19890: LD_VAR 0 3
19894: PPUSH
19895: CALL_OW 274
19899: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
19900: LD_ADDR_VAR 0 4
19904: PUSH
19905: LD_VAR 0 4
19909: PUSH
19910: LD_VAR 0 8
19914: PPUSH
19915: LD_INT 1
19917: PPUSH
19918: CALL_OW 275
19922: PLUS
19923: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
19924: LD_ADDR_VAR 0 5
19928: PUSH
19929: LD_VAR 0 5
19933: PUSH
19934: LD_VAR 0 8
19938: PPUSH
19939: LD_INT 2
19941: PPUSH
19942: CALL_OW 275
19946: PLUS
19947: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
19948: LD_ADDR_VAR 0 6
19952: PUSH
19953: LD_VAR 0 6
19957: PUSH
19958: LD_VAR 0 8
19962: PPUSH
19963: LD_INT 3
19965: PPUSH
19966: CALL_OW 275
19970: PLUS
19971: ST_TO_ADDR
// end ;
19972: GO 19882
19974: POP
19975: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
19976: LD_STRING setSpecText(
19978: PUSH
19979: LD_VAR 0 2
19983: STR
19984: PUSH
19985: LD_STRING ,
19987: STR
19988: PUSH
19989: LD_INT 2
19991: STR
19992: PUSH
19993: LD_STRING ,
19995: STR
19996: PUSH
19997: LD_VAR 0 4
20001: STR
20002: PUSH
20003: LD_STRING )
20005: STR
20006: PPUSH
20007: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
20011: LD_STRING setSpecText(
20013: PUSH
20014: LD_VAR 0 2
20018: STR
20019: PUSH
20020: LD_STRING ,
20022: STR
20023: PUSH
20024: LD_INT 3
20026: STR
20027: PUSH
20028: LD_STRING ,
20030: STR
20031: PUSH
20032: LD_VAR 0 5
20036: STR
20037: PUSH
20038: LD_STRING )
20040: STR
20041: PPUSH
20042: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
20046: LD_STRING setSpecText(
20048: PUSH
20049: LD_VAR 0 2
20053: STR
20054: PUSH
20055: LD_STRING ,
20057: STR
20058: PUSH
20059: LD_INT 4
20061: STR
20062: PUSH
20063: LD_STRING ,
20065: STR
20066: PUSH
20067: LD_VAR 0 6
20071: STR
20072: PUSH
20073: LD_STRING )
20075: STR
20076: PPUSH
20077: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
20081: LD_STRING setSpecText(
20083: PUSH
20084: LD_VAR 0 2
20088: STR
20089: PUSH
20090: LD_STRING ,
20092: STR
20093: PUSH
20094: LD_INT 5
20096: STR
20097: PUSH
20098: LD_STRING ,
20100: STR
20101: PUSH
20102: LD_VAR 0 7
20106: STR
20107: PUSH
20108: LD_STRING )
20110: STR
20111: PPUSH
20112: CALL_OW 559
// end ; end ;
20116: GO 19733
20118: POP
20119: POP
// end ;
20120: LD_VAR 0 1
20124: RET
// every 0 0$1 do
20125: GO 20127
20127: DISABLE
// begin ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
20128: LD_STRING setSpecLogoNumber(
20130: PUSH
20131: LD_INT 2
20133: STR
20134: PUSH
20135: LD_STRING ,
20137: STR
20138: PUSH
20139: LD_INT 1
20141: STR
20142: PUSH
20143: LD_STRING )
20145: STR
20146: PPUSH
20147: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
20151: LD_STRING setSpecLogoNumber(
20153: PUSH
20154: LD_INT 3
20156: STR
20157: PUSH
20158: LD_STRING ,
20160: STR
20161: PUSH
20162: LD_INT 2
20164: STR
20165: PUSH
20166: LD_STRING )
20168: STR
20169: PPUSH
20170: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
20174: LD_STRING setSpecLogoNumber(
20176: PUSH
20177: LD_INT 4
20179: STR
20180: PUSH
20181: LD_STRING ,
20183: STR
20184: PUSH
20185: LD_INT 3
20187: STR
20188: PUSH
20189: LD_STRING )
20191: STR
20192: PPUSH
20193: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
20197: LD_STRING setSpecLogoNumber(
20199: PUSH
20200: LD_INT 5
20202: STR
20203: PUSH
20204: LD_STRING ,
20206: STR
20207: PUSH
20208: LD_INT 4
20210: STR
20211: PUSH
20212: LD_STRING )
20214: STR
20215: PPUSH
20216: CALL_OW 559
// end ;
20220: END
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
20221: LD_INT 2
20223: PUSH
20224: LD_INT 30
20226: PUSH
20227: LD_INT 0
20229: PUSH
20230: EMPTY
20231: LIST
20232: LIST
20233: PUSH
20234: LD_INT 30
20236: PUSH
20237: LD_INT 1
20239: PUSH
20240: EMPTY
20241: LIST
20242: LIST
20243: PUSH
20244: EMPTY
20245: LIST
20246: LIST
20247: LIST
20248: PPUSH
20249: CALL_OW 69
20253: IFFALSE 20263
20255: GO 20257
20257: DISABLE
// begin enable ;
20258: ENABLE
// UpdateSpectatorBar ;
20259: CALL 19709 0 0
// end ; end_of_file
20263: END
// export function SA_OnSiberiteRocketExploded ( siberite_rocket_vehicle , target_x , target_y , requestSide ) ; begin
20264: LD_INT 0
20266: PPUSH
// if GetSide ( siberite_rocket_vehicle ) = requestSide then
20267: LD_VAR 0 1
20271: PPUSH
20272: CALL_OW 255
20276: PUSH
20277: LD_VAR 0 4
20281: EQUAL
20282: IFFALSE 20301
// begin SetAchievement ( ACH_RAD ) ;
20284: LD_STRING ACH_RAD
20286: PPUSH
20287: CALL_OW 543
// SetAchievementEx ( ACH_NL , 1 ) ;
20291: LD_STRING ACH_NL
20293: PPUSH
20294: LD_INT 1
20296: PPUSH
20297: CALL_OW 564
// end end ;
20301: LD_VAR 0 5
20305: RET
// export function SA_Win ( side ) ; begin
20306: LD_INT 0
20308: PPUSH
// case side of 1 :
20309: LD_VAR 0 1
20313: PUSH
20314: LD_INT 1
20316: DOUBLE
20317: EQUAL
20318: IFTRUE 20322
20320: GO 20335
20322: POP
// SetAchievementEx ( ACH_AH , 1 ) ; 2 :
20323: LD_STRING ACH_AH
20325: PPUSH
20326: LD_INT 1
20328: PPUSH
20329: CALL_OW 564
20333: GO 20498
20335: LD_INT 2
20337: DOUBLE
20338: EQUAL
20339: IFTRUE 20343
20341: GO 20356
20343: POP
// SetAchievementEx ( ACH_E , 1 ) ; 3 :
20344: LD_STRING ACH_E
20346: PPUSH
20347: LD_INT 1
20349: PPUSH
20350: CALL_OW 564
20354: GO 20498
20356: LD_INT 3
20358: DOUBLE
20359: EQUAL
20360: IFTRUE 20364
20362: GO 20377
20364: POP
// SetAchievementEx ( ACH_OOL , 1 ) ; [ 1 , 2 ] :
20365: LD_STRING ACH_OOL
20367: PPUSH
20368: LD_INT 1
20370: PPUSH
20371: CALL_OW 564
20375: GO 20498
20377: LD_INT 1
20379: PUSH
20380: LD_INT 2
20382: PUSH
20383: EMPTY
20384: LIST
20385: LIST
20386: DOUBLE
20387: EQUAL
20388: IFTRUE 20392
20390: GO 20417
20392: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
20393: LD_STRING ACH_AH
20395: PPUSH
20396: LD_REAL  5.00000000000000E-0001
20399: PPUSH
20400: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
20404: LD_STRING ACH_E
20406: PPUSH
20407: LD_REAL  5.00000000000000E-0001
20410: PPUSH
20411: CALL_OW 564
// end ; [ 2 , 3 ] :
20415: GO 20498
20417: LD_INT 2
20419: PUSH
20420: LD_INT 3
20422: PUSH
20423: EMPTY
20424: LIST
20425: LIST
20426: DOUBLE
20427: EQUAL
20428: IFTRUE 20432
20430: GO 20457
20432: POP
// begin SetAchievementEx ( ACH_OOL , 0.5 ) ;
20433: LD_STRING ACH_OOL
20435: PPUSH
20436: LD_REAL  5.00000000000000E-0001
20439: PPUSH
20440: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
20444: LD_STRING ACH_E
20446: PPUSH
20447: LD_REAL  5.00000000000000E-0001
20450: PPUSH
20451: CALL_OW 564
// end ; [ 3 , 1 ] :
20455: GO 20498
20457: LD_INT 3
20459: PUSH
20460: LD_INT 1
20462: PUSH
20463: EMPTY
20464: LIST
20465: LIST
20466: DOUBLE
20467: EQUAL
20468: IFTRUE 20472
20470: GO 20497
20472: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
20473: LD_STRING ACH_AH
20475: PPUSH
20476: LD_REAL  5.00000000000000E-0001
20479: PPUSH
20480: CALL_OW 564
// SetAchievementEx ( ACH_OOL , 0.5 ) ;
20484: LD_STRING ACH_OOL
20486: PPUSH
20487: LD_REAL  5.00000000000000E-0001
20490: PPUSH
20491: CALL_OW 564
// end ; end ;
20495: GO 20498
20497: POP
// end ;
20498: LD_VAR 0 2
20502: RET
