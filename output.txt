// starting begin mp_selectmsg := true ;
   0: LD_ADDR_OWVAR 13
   4: PUSH
   5: LD_INT 1
   7: ST_TO_ADDR
// INIT_LoadMapParams ;
   8: CALL 4292 0 0
// INIT_LoadGameParams ;
  12: CALL 451 0 0
// INIT_ApplyGameParams ;
  16: CALL 1010 0 0
// INIT_GenerateDeposits ;
  20: CALL 1483 0 0
// INIT_SetUpAllies ;
  24: CALL 2049 0 0
// INIT_SetUpTechs ;
  28: CALL 2251 0 0
// INIT_PrepareSquad ;
  32: CALL 2850 0 0
// INIT_SpawnStartingUnits ;
  36: CALL 3462 0 0
// INIT_CameraFocus ;
  40: CALL 4230 0 0
// INIT_ActivateLUAInterface ;
  44: CALL 2339 0 0
// if Your_Side >= 1 and Your_Side <= 8 then
  48: LD_OWVAR 2
  52: PUSH
  53: LD_INT 1
  55: GREATEREQUAL
  56: PUSH
  57: LD_OWVAR 2
  61: PUSH
  62: LD_INT 8
  64: LESSEQUAL
  65: AND
  66: IFFALSE 84
// music_nat := Side_Nations [ Your_Side ] ;
  68: LD_ADDR_OWVAR 71
  72: PUSH
  73: LD_EXP 3
  77: PUSH
  78: LD_OWVAR 2
  82: ARRAY
  83: ST_TO_ADDR
// end ;
  84: END
// every 0 0$1 do
  85: GO 87
  87: DISABLE
// begin ShowTimer ;
  88: CALL 19651 0 0
// enable ;
  92: ENABLE
// end ;
  93: END
// every 0 0$3 trigger Multiplayer do
  94: LD_OWVAR 4
  98: IFFALSE 108
 100: GO 102
 102: DISABLE
// begin CheckPlayerPresence ;
 103: CALL 7038 0 0
// enable ;
 107: ENABLE
// end ;
 108: END
// every 0 0$1 trigger tick >= CLOCK_fluctuation and spawn_fluctuation <> 0 do
 109: LD_OWVAR 1
 113: PUSH
 114: LD_EXP 53
 118: GREATEREQUAL
 119: PUSH
 120: LD_EXP 24
 124: PUSH
 125: LD_INT 0
 127: NONEQUAL
 128: AND
 129: IFFALSE 155
 131: GO 133
 133: DISABLE
// begin enable ;
 134: ENABLE
// CLOCK_fluctuation := CLOCK_fluctuation + spawn_fluctuation ;
 135: LD_ADDR_EXP 53
 139: PUSH
 140: LD_EXP 53
 144: PUSH
 145: LD_EXP 24
 149: PLUS
 150: ST_TO_ADDR
// CYCLIC_Fluctuation ;
 151: CALL 17335 0 0
// end ;
 155: END
// every 0 0$1 trigger tick >= CLOCK_crate_spawn do
 156: LD_OWVAR 1
 160: PUSH
 161: LD_EXP 51
 165: GREATEREQUAL
 166: IFFALSE 198
 168: GO 170
 170: DISABLE
// begin enable ;
 171: ENABLE
// CLOCK_crate_spawn := CLOCK_crate_spawn + crate_spawn_rate + fluctuation_modifier_crates ;
 172: LD_ADDR_EXP 51
 176: PUSH
 177: LD_EXP 51
 181: PUSH
 182: LD_EXP 22
 186: PLUS
 187: PUSH
 188: LD_EXP 39
 192: PLUS
 193: ST_TO_ADDR
// CYCLIC_CrateSpawn ;
 194: CALL 15852 0 0
// end ;
 198: END
// every 0 0$1 trigger tick >= CLOCK_human_spawn and people_spawn_rate <> 0 do
 199: LD_OWVAR 1
 203: PUSH
 204: LD_EXP 52
 208: GREATEREQUAL
 209: PUSH
 210: LD_EXP 23
 214: PUSH
 215: LD_INT 0
 217: NONEQUAL
 218: AND
 219: IFFALSE 251
 221: GO 223
 223: DISABLE
// begin enable ;
 224: ENABLE
// CLOCK_human_spawn := CLOCK_human_spawn + people_spawn_rate + fluctuation_modifier_humans ;
 225: LD_ADDR_EXP 52
 229: PUSH
 230: LD_EXP 52
 234: PUSH
 235: LD_EXP 23
 239: PLUS
 240: PUSH
 241: LD_EXP 40
 245: PLUS
 246: ST_TO_ADDR
// CYCLIC_HumanSpawn ;
 247: CALL 16032 0 0
// end ;
 251: END
// every 0 0$1 trigger 1 in side_zone_locked do
 252: LD_INT 1
 254: PUSH
 255: LD_EXP 65
 259: IN
 260: IFFALSE 270
 262: GO 264
 264: DISABLE
// begin CYCLIC_CheckTransportsInZones ;
 265: CALL 17508 0 0
// enable ;
 269: ENABLE
// end ;
 270: END
// every 0 0$1 trigger 1 in side_transfer_pending do var i , remaining ;
 271: LD_INT 1
 273: PUSH
 274: LD_EXP 70
 278: IN
 279: IFFALSE 448
 281: GO 283
 283: DISABLE
 284: LD_INT 0
 286: PPUSH
 287: PPUSH
// begin for i = 1 to 8 do
 288: LD_ADDR_VAR 0 1
 292: PUSH
 293: DOUBLE
 294: LD_INT 1
 296: DEC
 297: ST_TO_ADDR
 298: LD_INT 8
 300: PUSH
 301: FOR_TO
 302: IFFALSE 445
// begin if side_transfer_pending [ i ] = 1 then
 304: LD_EXP 70
 308: PUSH
 309: LD_VAR 0 1
 313: ARRAY
 314: PUSH
 315: LD_INT 1
 317: EQUAL
 318: IFFALSE 443
// begin remaining := side_transfer_clocks [ i ] - tick ;
 320: LD_ADDR_VAR 0 2
 324: PUSH
 325: LD_EXP 66
 329: PUSH
 330: LD_VAR 0 1
 334: ARRAY
 335: PUSH
 336: LD_OWVAR 1
 340: MINUS
 341: ST_TO_ADDR
// if tick >= side_transfer_clocks [ i ] then
 342: LD_OWVAR 1
 346: PUSH
 347: LD_EXP 66
 351: PUSH
 352: LD_VAR 0 1
 356: ARRAY
 357: GREATEREQUAL
 358: IFFALSE 414
// CYCLIC_FinalizeTransfer ( i , side_resources_remaining [ i ] [ 1 ] , side_resources_remaining [ i ] [ 2 ] , side_resources_remaining [ i ] [ 3 ] ) ;
 360: LD_VAR 0 1
 364: PPUSH
 365: LD_EXP 69
 369: PUSH
 370: LD_VAR 0 1
 374: ARRAY
 375: PUSH
 376: LD_INT 1
 378: ARRAY
 379: PPUSH
 380: LD_EXP 69
 384: PUSH
 385: LD_VAR 0 1
 389: ARRAY
 390: PUSH
 391: LD_INT 2
 393: ARRAY
 394: PPUSH
 395: LD_EXP 69
 399: PUSH
 400: LD_VAR 0 1
 404: ARRAY
 405: PUSH
 406: LD_INT 3
 408: ARRAY
 409: PPUSH
 410: CALL 18331 0 4
// if i = Your_Side then
 414: LD_VAR 0 1
 418: PUSH
 419: LD_OWVAR 2
 423: EQUAL
 424: IFFALSE 443
// ToLua ( LUA_UpdateClock( & remaining & ); ) ;
 426: LD_STRING LUA_UpdateClock(
 428: PUSH
 429: LD_VAR 0 2
 433: STR
 434: PUSH
 435: LD_STRING );
 437: STR
 438: PPUSH
 439: CALL_OW 559
// end ; end ;
 443: GO 301
 445: POP
 446: POP
// enable ;
 447: ENABLE
// end ; end_of_file
 448: PPOPN 2
 450: END
// export function INIT_LoadGameParams ; begin
 451: LD_INT 0
 453: PPUSH
// if Multiplayer then
 454: LD_OWVAR 4
 458: IFFALSE 688
// begin Game_Type := mp_game_type ;
 460: LD_ADDR_EXP 1
 464: PUSH
 465: LD_OWVAR 6
 469: ST_TO_ADDR
// Your_Side := mp_player_side ;
 470: LD_ADDR_OWVAR 2
 474: PUSH
 475: LD_OWVAR 7
 479: ST_TO_ADDR
// Side_Positions := mp_sides_positions ;
 480: LD_ADDR_EXP 2
 484: PUSH
 485: LD_OWVAR 17
 489: ST_TO_ADDR
// Side_Nations := mp_sides_nations ;
 490: LD_ADDR_EXP 3
 494: PUSH
 495: LD_OWVAR 16
 499: ST_TO_ADDR
// Side_Comps := mp_sides_comps ;
 500: LD_ADDR_EXP 4
 504: PUSH
 505: CALL 6354 0 0
 509: ST_TO_ADDR
// Side_Teams := mp_sides_teams ;
 510: LD_ADDR_EXP 5
 514: PUSH
 515: LD_OWVAR 15
 519: ST_TO_ADDR
// Teams := mp_teams ;
 520: LD_ADDR_EXP 6
 524: PUSH
 525: LD_OWVAR 12
 529: ST_TO_ADDR
// Choice_people_num := GetMultiplayerSetting ( 0 ) ;
 530: LD_ADDR_EXP 7
 534: PUSH
 535: LD_INT 0
 537: PPUSH
 538: CALL_OW 426
 542: ST_TO_ADDR
// Choice_experience := GetMultiplayerSetting ( 1 ) ;
 543: LD_ADDR_EXP 8
 547: PUSH
 548: LD_INT 1
 550: PPUSH
 551: CALL_OW 426
 555: ST_TO_ADDR
// Choice_starting_resources := GetMultiplayerSetting ( 2 ) ;
 556: LD_ADDR_EXP 9
 560: PUSH
 561: LD_INT 2
 563: PPUSH
 564: CALL_OW 426
 568: ST_TO_ADDR
// Choice_crate_spawn_rate := GetMultiplayerSetting ( 3 ) ;
 569: LD_ADDR_EXP 10
 573: PUSH
 574: LD_INT 3
 576: PPUSH
 577: CALL_OW 426
 581: ST_TO_ADDR
// Choice_people_spawn_rate := GetMultiplayerSetting ( 4 ) ;
 582: LD_ADDR_EXP 11
 586: PUSH
 587: LD_INT 4
 589: PPUSH
 590: CALL_OW 426
 594: ST_TO_ADDR
// Choice_spawn_fluctuation := GetMultiplayerSetting ( 5 ) ;
 595: LD_ADDR_EXP 12
 599: PUSH
 600: LD_INT 5
 602: PPUSH
 603: CALL_OW 426
 607: ST_TO_ADDR
// Choice_oil_abundance := GetMultiplayerSetting ( 6 ) ;
 608: LD_ADDR_EXP 13
 612: PUSH
 613: LD_INT 6
 615: PPUSH
 616: CALL_OW 426
 620: ST_TO_ADDR
// Choice_sib_abundance := GetMultiplayerSetting ( 7 ) ;
 621: LD_ADDR_EXP 14
 625: PUSH
 626: LD_INT 7
 628: PPUSH
 629: CALL_OW 426
 633: ST_TO_ADDR
// Choice_victory_cond := GetMultiplayerSetting ( 8 ) ;
 634: LD_ADDR_EXP 15
 638: PUSH
 639: LD_INT 8
 641: PPUSH
 642: CALL_OW 426
 646: ST_TO_ADDR
// Choice_reinforce_cost := GetMultiplayerSetting ( 9 ) ;
 647: LD_ADDR_EXP 16
 651: PUSH
 652: LD_INT 9
 654: PPUSH
 655: CALL_OW 426
 659: ST_TO_ADDR
// Choice_black_FoW := GetMultiplayerSetting ( 10 ) ;
 660: LD_ADDR_EXP 17
 664: PUSH
 665: LD_INT 10
 667: PPUSH
 668: CALL_OW 426
 672: ST_TO_ADDR
// Choice_starting_tech_lvl := GetMultiplayerSetting ( 11 ) ;
 673: LD_ADDR_EXP 18
 677: PUSH
 678: LD_INT 11
 680: PPUSH
 681: CALL_OW 426
 685: ST_TO_ADDR
// end else
 686: GO 1005
// begin RandomizeAll ;
 688: CALL_OW 11
// Game_Type := 1 ;
 692: LD_ADDR_EXP 1
 696: PUSH
 697: LD_INT 1
 699: ST_TO_ADDR
// Your_Side := 1 ;
 700: LD_ADDR_OWVAR 2
 704: PUSH
 705: LD_INT 1
 707: ST_TO_ADDR
// Side_Positions := [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] ;
 708: LD_ADDR_EXP 2
 712: PUSH
 713: LD_INT 1
 715: PUSH
 716: LD_INT 2
 718: PUSH
 719: LD_INT 3
 721: PUSH
 722: LD_INT 4
 724: PUSH
 725: LD_INT 5
 727: PUSH
 728: LD_INT 6
 730: PUSH
 731: LD_INT 7
 733: PUSH
 734: LD_INT 8
 736: PUSH
 737: EMPTY
 738: LIST
 739: LIST
 740: LIST
 741: LIST
 742: LIST
 743: LIST
 744: LIST
 745: LIST
 746: ST_TO_ADDR
// Side_Nations := [ 1 , 2 , 3 , 1 , 2 , 3 , 1 , 2 ] ;
 747: LD_ADDR_EXP 3
 751: PUSH
 752: LD_INT 1
 754: PUSH
 755: LD_INT 2
 757: PUSH
 758: LD_INT 3
 760: PUSH
 761: LD_INT 1
 763: PUSH
 764: LD_INT 2
 766: PUSH
 767: LD_INT 3
 769: PUSH
 770: LD_INT 1
 772: PUSH
 773: LD_INT 2
 775: PUSH
 776: EMPTY
 777: LIST
 778: LIST
 779: LIST
 780: LIST
 781: LIST
 782: LIST
 783: LIST
 784: LIST
 785: ST_TO_ADDR
// Side_Comps := [ 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 ] ;
 786: LD_ADDR_EXP 4
 790: PUSH
 791: LD_INT 1
 793: PUSH
 794: LD_INT 1
 796: PUSH
 797: LD_INT 1
 799: PUSH
 800: LD_INT 1
 802: PUSH
 803: LD_INT 1
 805: PUSH
 806: LD_INT 1
 808: PUSH
 809: LD_INT 1
 811: PUSH
 812: LD_INT 1
 814: PUSH
 815: EMPTY
 816: LIST
 817: LIST
 818: LIST
 819: LIST
 820: LIST
 821: LIST
 822: LIST
 823: LIST
 824: ST_TO_ADDR
// Side_Teams := [ 1 , 1 , 1 , 1 , 2 , 2 , 2 , 2 ] ;
 825: LD_ADDR_EXP 5
 829: PUSH
 830: LD_INT 1
 832: PUSH
 833: LD_INT 1
 835: PUSH
 836: LD_INT 1
 838: PUSH
 839: LD_INT 1
 841: PUSH
 842: LD_INT 2
 844: PUSH
 845: LD_INT 2
 847: PUSH
 848: LD_INT 2
 850: PUSH
 851: LD_INT 2
 853: PUSH
 854: EMPTY
 855: LIST
 856: LIST
 857: LIST
 858: LIST
 859: LIST
 860: LIST
 861: LIST
 862: LIST
 863: ST_TO_ADDR
// Teams := [ [ 1 , 2 , 3 , 4 ] , [ 5 , 6 , 7 , 8 ] ] ;
 864: LD_ADDR_EXP 6
 868: PUSH
 869: LD_INT 1
 871: PUSH
 872: LD_INT 2
 874: PUSH
 875: LD_INT 3
 877: PUSH
 878: LD_INT 4
 880: PUSH
 881: EMPTY
 882: LIST
 883: LIST
 884: LIST
 885: LIST
 886: PUSH
 887: LD_INT 5
 889: PUSH
 890: LD_INT 6
 892: PUSH
 893: LD_INT 7
 895: PUSH
 896: LD_INT 8
 898: PUSH
 899: EMPTY
 900: LIST
 901: LIST
 902: LIST
 903: LIST
 904: PUSH
 905: EMPTY
 906: LIST
 907: LIST
 908: ST_TO_ADDR
// Choice_people_num := 2 ;
 909: LD_ADDR_EXP 7
 913: PUSH
 914: LD_INT 2
 916: ST_TO_ADDR
// Choice_experience := 3 ;
 917: LD_ADDR_EXP 8
 921: PUSH
 922: LD_INT 3
 924: ST_TO_ADDR
// Choice_starting_resources := 3 ;
 925: LD_ADDR_EXP 9
 929: PUSH
 930: LD_INT 3
 932: ST_TO_ADDR
// Choice_crate_spawn_rate := 3 ;
 933: LD_ADDR_EXP 10
 937: PUSH
 938: LD_INT 3
 940: ST_TO_ADDR
// Choice_people_spawn_rate := 3 ;
 941: LD_ADDR_EXP 11
 945: PUSH
 946: LD_INT 3
 948: ST_TO_ADDR
// Choice_spawn_fluctuation := 0 ;
 949: LD_ADDR_EXP 12
 953: PUSH
 954: LD_INT 0
 956: ST_TO_ADDR
// Choice_oil_abundance := 0 ;
 957: LD_ADDR_EXP 13
 961: PUSH
 962: LD_INT 0
 964: ST_TO_ADDR
// Choice_sib_abundance := 0 ;
 965: LD_ADDR_EXP 14
 969: PUSH
 970: LD_INT 0
 972: ST_TO_ADDR
// Choice_victory_cond := 2 ;
 973: LD_ADDR_EXP 15
 977: PUSH
 978: LD_INT 2
 980: ST_TO_ADDR
// Choice_reinforce_cost := 1 ;
 981: LD_ADDR_EXP 16
 985: PUSH
 986: LD_INT 1
 988: ST_TO_ADDR
// Choice_black_FoW := 0 ;
 989: LD_ADDR_EXP 17
 993: PUSH
 994: LD_INT 0
 996: ST_TO_ADDR
// Choice_starting_tech_lvl := 0 ;
 997: LD_ADDR_EXP 18
1001: PUSH
1002: LD_INT 0
1004: ST_TO_ADDR
// end ; end ;
1005: LD_VAR 0 1
1009: RET
// export function INIT_ApplyGameParams ; var i ; begin
1010: LD_INT 0
1012: PPUSH
1013: PPUSH
// people_num := people_num [ Choice_people_num + 1 ] ;
1014: LD_ADDR_EXP 19
1018: PUSH
1019: LD_EXP 19
1023: PUSH
1024: LD_EXP 7
1028: PUSH
1029: LD_INT 1
1031: PLUS
1032: ARRAY
1033: ST_TO_ADDR
// experience := experience [ Choice_experience + 1 ] ;
1034: LD_ADDR_EXP 20
1038: PUSH
1039: LD_EXP 20
1043: PUSH
1044: LD_EXP 8
1048: PUSH
1049: LD_INT 1
1051: PLUS
1052: ARRAY
1053: ST_TO_ADDR
// starting_resources := starting_resources [ Choice_starting_resources + 1 ] ;
1054: LD_ADDR_EXP 21
1058: PUSH
1059: LD_EXP 21
1063: PUSH
1064: LD_EXP 9
1068: PUSH
1069: LD_INT 1
1071: PLUS
1072: ARRAY
1073: ST_TO_ADDR
// crate_spawn_rate := crate_spawn_rate [ Choice_crate_spawn_rate + 1 ] ;
1074: LD_ADDR_EXP 22
1078: PUSH
1079: LD_EXP 22
1083: PUSH
1084: LD_EXP 10
1088: PUSH
1089: LD_INT 1
1091: PLUS
1092: ARRAY
1093: ST_TO_ADDR
// people_spawn_rate := people_spawn_rate [ Choice_people_spawn_rate + 1 ] ;
1094: LD_ADDR_EXP 23
1098: PUSH
1099: LD_EXP 23
1103: PUSH
1104: LD_EXP 11
1108: PUSH
1109: LD_INT 1
1111: PLUS
1112: ARRAY
1113: ST_TO_ADDR
// spawn_fluctuation := spawn_fluctuation [ Choice_spawn_fluctuation + 1 ] ;
1114: LD_ADDR_EXP 24
1118: PUSH
1119: LD_EXP 24
1123: PUSH
1124: LD_EXP 12
1128: PUSH
1129: LD_INT 1
1131: PLUS
1132: ARRAY
1133: ST_TO_ADDR
// fluctuation_base_crates := fluctuation_base_crates [ Choice_crate_spawn_rate + 1 ] ;
1134: LD_ADDR_EXP 37
1138: PUSH
1139: LD_EXP 37
1143: PUSH
1144: LD_EXP 10
1148: PUSH
1149: LD_INT 1
1151: PLUS
1152: ARRAY
1153: ST_TO_ADDR
// fluctuation_base_humans := fluctuation_base_humans [ Choice_people_spawn_rate + 1 ] ;
1154: LD_ADDR_EXP 38
1158: PUSH
1159: LD_EXP 38
1163: PUSH
1164: LD_EXP 11
1168: PUSH
1169: LD_INT 1
1171: PLUS
1172: ARRAY
1173: ST_TO_ADDR
// oil_abundance := oil_abundance [ Choice_oil_abundance + 1 ] ;
1174: LD_ADDR_EXP 25
1178: PUSH
1179: LD_EXP 25
1183: PUSH
1184: LD_EXP 13
1188: PUSH
1189: LD_INT 1
1191: PLUS
1192: ARRAY
1193: ST_TO_ADDR
// sib_abundance := sib_abundance [ Choice_sib_abundance + 1 ] ;
1194: LD_ADDR_EXP 26
1198: PUSH
1199: LD_EXP 26
1203: PUSH
1204: LD_EXP 14
1208: PUSH
1209: LD_INT 1
1211: PLUS
1212: ARRAY
1213: ST_TO_ADDR
// victory_cond := victory_cond [ Choice_victory_cond + 1 ] ;
1214: LD_ADDR_EXP 27
1218: PUSH
1219: LD_EXP 27
1223: PUSH
1224: LD_EXP 15
1228: PUSH
1229: LD_INT 1
1231: PLUS
1232: ARRAY
1233: ST_TO_ADDR
// reinforce_cost := reinforce_cost [ Choice_reinforce_cost + 1 ] ;
1234: LD_ADDR_EXP 28
1238: PUSH
1239: LD_EXP 28
1243: PUSH
1244: LD_EXP 16
1248: PUSH
1249: LD_INT 1
1251: PLUS
1252: ARRAY
1253: ST_TO_ADDR
// soldier_limit := people_num [ Choice_people_num + 1 ] ;
1254: LD_ADDR_EXP 49
1258: PUSH
1259: LD_EXP 19
1263: PUSH
1264: LD_EXP 7
1268: PUSH
1269: LD_INT 1
1271: PLUS
1272: ARRAY
1273: ST_TO_ADDR
// black_fow := Choice_black_FoW ;
1274: LD_ADDR_EXP 29
1278: PUSH
1279: LD_EXP 17
1283: ST_TO_ADDR
// starting_tech_lvl := Choice_starting_tech_lvl ;
1284: LD_ADDR_EXP 30
1288: PUSH
1289: LD_EXP 18
1293: ST_TO_ADDR
// CLOCK_crate_spawn := crate_spawn_rate ;
1294: LD_ADDR_EXP 51
1298: PUSH
1299: LD_EXP 22
1303: ST_TO_ADDR
// CLOCK_human_spawn := people_spawn_rate ;
1304: LD_ADDR_EXP 52
1308: PUSH
1309: LD_EXP 23
1313: ST_TO_ADDR
// CLOCK_fluctuation := spawn_fluctuation ;
1314: LD_ADDR_EXP 53
1318: PUSH
1319: LD_EXP 24
1323: ST_TO_ADDR
// for i = 1 to Side_Positions do
1324: LD_ADDR_VAR 0 2
1328: PUSH
1329: DOUBLE
1330: LD_INT 1
1332: DEC
1333: ST_TO_ADDR
1334: LD_EXP 2
1338: PUSH
1339: FOR_TO
1340: IFFALSE 1405
// begin if not Side_Positions [ i ] then
1342: LD_EXP 2
1346: PUSH
1347: LD_VAR 0 2
1351: ARRAY
1352: NOT
1353: IFFALSE 1380
// side_isalive := Replace ( side_isalive , i , 0 ) else
1355: LD_ADDR_EXP 54
1359: PUSH
1360: LD_EXP 54
1364: PPUSH
1365: LD_VAR 0 2
1369: PPUSH
1370: LD_INT 0
1372: PPUSH
1373: CALL_OW 1
1377: ST_TO_ADDR
1378: GO 1403
// side_isalive := Replace ( side_isalive , i , 1 ) ;
1380: LD_ADDR_EXP 54
1384: PUSH
1385: LD_EXP 54
1389: PPUSH
1390: LD_VAR 0 2
1394: PPUSH
1395: LD_INT 1
1397: PPUSH
1398: CALL_OW 1
1402: ST_TO_ADDR
// end ;
1403: GO 1339
1405: POP
1406: POP
// for i = 1 to Teams do
1407: LD_ADDR_VAR 0 2
1411: PUSH
1412: DOUBLE
1413: LD_INT 1
1415: DEC
1416: ST_TO_ADDR
1417: LD_EXP 6
1421: PUSH
1422: FOR_TO
1423: IFFALSE 1450
// team_siberite_stocked := Replace ( team_siberite_stocked , i , 0 ) ;
1425: LD_ADDR_EXP 61
1429: PUSH
1430: LD_EXP 61
1434: PPUSH
1435: LD_VAR 0 2
1439: PPUSH
1440: LD_INT 0
1442: PPUSH
1443: CALL_OW 1
1447: ST_TO_ADDR
1448: GO 1422
1450: POP
1451: POP
// if victory_cond = 0 then
1452: LD_EXP 27
1456: PUSH
1457: LD_INT 0
1459: EQUAL
1460: IFFALSE 1471
// ToLua ( Deathmatch = 1; ) else
1462: LD_STRING Deathmatch = 1;
1464: PPUSH
1465: CALL_OW 559
1469: GO 1478
// ToLua ( Deathmatch = 0; ) ;
1471: LD_STRING Deathmatch = 0;
1473: PPUSH
1474: CALL_OW 559
// end ;
1478: LD_VAR 0 1
1482: RET
// export function INIT_GenerateDeposits ; var x , y , i , j , pool_oil_deposits , pool_siberite_deposits ; begin
1483: LD_INT 0
1485: PPUSH
1486: PPUSH
1487: PPUSH
1488: PPUSH
1489: PPUSH
1490: PPUSH
1491: PPUSH
// pool_oil_deposits := available_oil_deposits ;
1492: LD_ADDR_VAR 0 6
1496: PUSH
1497: LD_EXP 32
1501: ST_TO_ADDR
// pool_siberite_deposits := available_siberite_deposits ;
1502: LD_ADDR_VAR 0 7
1506: PUSH
1507: LD_EXP 33
1511: ST_TO_ADDR
// i := 0 ;
1512: LD_ADDR_VAR 0 4
1516: PUSH
1517: LD_INT 0
1519: ST_TO_ADDR
// while i < oil_abundance do
1520: LD_VAR 0 4
1524: PUSH
1525: LD_EXP 25
1529: LESS
1530: IFFALSE 1778
// begin for j = 1 to pool_oil_deposits do
1532: LD_ADDR_VAR 0 5
1536: PUSH
1537: DOUBLE
1538: LD_INT 1
1540: DEC
1541: ST_TO_ADDR
1542: LD_VAR 0 6
1546: PUSH
1547: FOR_TO
1548: IFFALSE 1774
// begin i := i + 1 ;
1550: LD_ADDR_VAR 0 4
1554: PUSH
1555: LD_VAR 0 4
1559: PUSH
1560: LD_INT 1
1562: PLUS
1563: ST_TO_ADDR
// x := length ( pool_oil_deposits [ j ] ) ;
1564: LD_ADDR_VAR 0 2
1568: PUSH
1569: LD_VAR 0 6
1573: PUSH
1574: LD_VAR 0 5
1578: ARRAY
1579: PPUSH
1580: CALL 6306 0 1
1584: ST_TO_ADDR
// y := Rand ( 1 , x ) ;
1585: LD_ADDR_VAR 0 3
1589: PUSH
1590: LD_INT 1
1592: PPUSH
1593: LD_VAR 0 2
1597: PPUSH
1598: CALL_OW 12
1602: ST_TO_ADDR
// CreateDepositXY ( pool_oil_deposits [ j ] [ y ] [ 1 ] [ 1 ] , pool_oil_deposits [ j ] [ y ] [ 1 ] [ 2 ] , mat_oil ) ;
1603: LD_VAR 0 6
1607: PUSH
1608: LD_VAR 0 5
1612: ARRAY
1613: PUSH
1614: LD_VAR 0 3
1618: ARRAY
1619: PUSH
1620: LD_INT 1
1622: ARRAY
1623: PUSH
1624: LD_INT 1
1626: ARRAY
1627: PPUSH
1628: LD_VAR 0 6
1632: PUSH
1633: LD_VAR 0 5
1637: ARRAY
1638: PUSH
1639: LD_VAR 0 3
1643: ARRAY
1644: PUSH
1645: LD_INT 1
1647: ARRAY
1648: PUSH
1649: LD_INT 2
1651: ARRAY
1652: PPUSH
1653: LD_INT 2
1655: PPUSH
1656: CALL_OW 62
// CreateDepositXY ( pool_oil_deposits [ j ] [ y ] [ 2 ] [ 1 ] , pool_oil_deposits [ j ] [ y ] [ 2 ] [ 2 ] , mat_oil ) ;
1660: LD_VAR 0 6
1664: PUSH
1665: LD_VAR 0 5
1669: ARRAY
1670: PUSH
1671: LD_VAR 0 3
1675: ARRAY
1676: PUSH
1677: LD_INT 2
1679: ARRAY
1680: PUSH
1681: LD_INT 1
1683: ARRAY
1684: PPUSH
1685: LD_VAR 0 6
1689: PUSH
1690: LD_VAR 0 5
1694: ARRAY
1695: PUSH
1696: LD_VAR 0 3
1700: ARRAY
1701: PUSH
1702: LD_INT 2
1704: ARRAY
1705: PUSH
1706: LD_INT 2
1708: ARRAY
1709: PPUSH
1710: LD_INT 2
1712: PPUSH
1713: CALL_OW 62
// pool_oil_deposits := Replace ( pool_oil_deposits , j , Delete ( pool_oil_deposits [ j ] , y ) ) ;
1717: LD_ADDR_VAR 0 6
1721: PUSH
1722: LD_VAR 0 6
1726: PPUSH
1727: LD_VAR 0 5
1731: PPUSH
1732: LD_VAR 0 6
1736: PUSH
1737: LD_VAR 0 5
1741: ARRAY
1742: PPUSH
1743: LD_VAR 0 3
1747: PPUSH
1748: CALL_OW 3
1752: PPUSH
1753: CALL_OW 1
1757: ST_TO_ADDR
// if i >= oil_abundance then
1758: LD_VAR 0 4
1762: PUSH
1763: LD_EXP 25
1767: GREATEREQUAL
1768: IFFALSE 1772
// break ;
1770: GO 1774
// end ;
1772: GO 1547
1774: POP
1775: POP
// end ;
1776: GO 1520
// i := 0 ;
1778: LD_ADDR_VAR 0 4
1782: PUSH
1783: LD_INT 0
1785: ST_TO_ADDR
// while i < sib_abundance do
1786: LD_VAR 0 4
1790: PUSH
1791: LD_EXP 26
1795: LESS
1796: IFFALSE 2044
// begin for j = 1 to pool_siberite_deposits do
1798: LD_ADDR_VAR 0 5
1802: PUSH
1803: DOUBLE
1804: LD_INT 1
1806: DEC
1807: ST_TO_ADDR
1808: LD_VAR 0 7
1812: PUSH
1813: FOR_TO
1814: IFFALSE 2040
// begin i := i + 1 ;
1816: LD_ADDR_VAR 0 4
1820: PUSH
1821: LD_VAR 0 4
1825: PUSH
1826: LD_INT 1
1828: PLUS
1829: ST_TO_ADDR
// x := length ( pool_siberite_deposits [ j ] ) ;
1830: LD_ADDR_VAR 0 2
1834: PUSH
1835: LD_VAR 0 7
1839: PUSH
1840: LD_VAR 0 5
1844: ARRAY
1845: PPUSH
1846: CALL 6306 0 1
1850: ST_TO_ADDR
// y := Rand ( 1 , x ) ;
1851: LD_ADDR_VAR 0 3
1855: PUSH
1856: LD_INT 1
1858: PPUSH
1859: LD_VAR 0 2
1863: PPUSH
1864: CALL_OW 12
1868: ST_TO_ADDR
// CreateDepositXY ( pool_siberite_deposits [ j ] [ y ] [ 1 ] [ 1 ] , pool_siberite_deposits [ j ] [ y ] [ 1 ] [ 2 ] , mat_siberit ) ;
1869: LD_VAR 0 7
1873: PUSH
1874: LD_VAR 0 5
1878: ARRAY
1879: PUSH
1880: LD_VAR 0 3
1884: ARRAY
1885: PUSH
1886: LD_INT 1
1888: ARRAY
1889: PUSH
1890: LD_INT 1
1892: ARRAY
1893: PPUSH
1894: LD_VAR 0 7
1898: PUSH
1899: LD_VAR 0 5
1903: ARRAY
1904: PUSH
1905: LD_VAR 0 3
1909: ARRAY
1910: PUSH
1911: LD_INT 1
1913: ARRAY
1914: PUSH
1915: LD_INT 2
1917: ARRAY
1918: PPUSH
1919: LD_INT 3
1921: PPUSH
1922: CALL_OW 62
// CreateDepositXY ( pool_siberite_deposits [ j ] [ y ] [ 2 ] [ 1 ] , pool_siberite_deposits [ j ] [ y ] [ 2 ] [ 2 ] , mat_siberit ) ;
1926: LD_VAR 0 7
1930: PUSH
1931: LD_VAR 0 5
1935: ARRAY
1936: PUSH
1937: LD_VAR 0 3
1941: ARRAY
1942: PUSH
1943: LD_INT 2
1945: ARRAY
1946: PUSH
1947: LD_INT 1
1949: ARRAY
1950: PPUSH
1951: LD_VAR 0 7
1955: PUSH
1956: LD_VAR 0 5
1960: ARRAY
1961: PUSH
1962: LD_VAR 0 3
1966: ARRAY
1967: PUSH
1968: LD_INT 2
1970: ARRAY
1971: PUSH
1972: LD_INT 2
1974: ARRAY
1975: PPUSH
1976: LD_INT 3
1978: PPUSH
1979: CALL_OW 62
// pool_siberite_deposits := Replace ( pool_siberite_deposits , j , Delete ( pool_siberite_deposits [ j ] , y ) ) ;
1983: LD_ADDR_VAR 0 7
1987: PUSH
1988: LD_VAR 0 7
1992: PPUSH
1993: LD_VAR 0 5
1997: PPUSH
1998: LD_VAR 0 7
2002: PUSH
2003: LD_VAR 0 5
2007: ARRAY
2008: PPUSH
2009: LD_VAR 0 3
2013: PPUSH
2014: CALL_OW 3
2018: PPUSH
2019: CALL_OW 1
2023: ST_TO_ADDR
// if i >= sib_abundance then
2024: LD_VAR 0 4
2028: PUSH
2029: LD_EXP 26
2033: GREATEREQUAL
2034: IFFALSE 2038
// break ;
2036: GO 2040
// end ;
2038: GO 1813
2040: POP
2041: POP
// end ;
2042: GO 1786
// end ;
2044: LD_VAR 0 1
2048: RET
// export function INIT_SetUpAllies ; var i , j ; begin
2049: LD_INT 0
2051: PPUSH
2052: PPUSH
2053: PPUSH
// for i = 1 to 8 do
2054: LD_ADDR_VAR 0 2
2058: PUSH
2059: DOUBLE
2060: LD_INT 1
2062: DEC
2063: ST_TO_ADDR
2064: LD_INT 8
2066: PUSH
2067: FOR_TO
2068: IFFALSE 2158
// for j = 1 to 8 do
2070: LD_ADDR_VAR 0 3
2074: PUSH
2075: DOUBLE
2076: LD_INT 1
2078: DEC
2079: ST_TO_ADDR
2080: LD_INT 8
2082: PUSH
2083: FOR_TO
2084: IFFALSE 2154
// begin if Side_Teams [ i ] = Side_Teams [ j ] then
2086: LD_EXP 5
2090: PUSH
2091: LD_VAR 0 2
2095: ARRAY
2096: PUSH
2097: LD_EXP 5
2101: PUSH
2102: LD_VAR 0 3
2106: ARRAY
2107: EQUAL
2108: IFFALSE 2132
// SetAttitude ( i , j , att_friend , true ) else
2110: LD_VAR 0 2
2114: PPUSH
2115: LD_VAR 0 3
2119: PPUSH
2120: LD_INT 1
2122: PPUSH
2123: LD_INT 1
2125: PPUSH
2126: CALL_OW 80
2130: GO 2152
// SetAttitude ( i , j , att_enemy , true ) ;
2132: LD_VAR 0 2
2136: PPUSH
2137: LD_VAR 0 3
2141: PPUSH
2142: LD_INT 2
2144: PPUSH
2145: LD_INT 1
2147: PPUSH
2148: CALL_OW 80
// end ;
2152: GO 2083
2154: POP
2155: POP
2156: GO 2067
2158: POP
2159: POP
// for i = 1 to 8 do
2160: LD_ADDR_VAR 0 2
2164: PUSH
2165: DOUBLE
2166: LD_INT 1
2168: DEC
2169: ST_TO_ADDR
2170: LD_INT 8
2172: PUSH
2173: FOR_TO
2174: IFFALSE 2198
// ChangeSideFog ( i , Side_Teams [ i ] ) ;
2176: LD_VAR 0 2
2180: PPUSH
2181: LD_EXP 5
2185: PUSH
2186: LD_VAR 0 2
2190: ARRAY
2191: PPUSH
2192: CALL_OW 343
2196: GO 2173
2198: POP
2199: POP
// FogOff ( 0 ) ;
2200: LD_INT 0
2202: PPUSH
2203: CALL_OW 344
// ResetFog ;
2207: CALL_OW 335
// if black_fow then
2211: LD_EXP 29
2215: IFFALSE 2246
// for i = 1 to 8 do
2217: LD_ADDR_VAR 0 2
2221: PUSH
2222: DOUBLE
2223: LD_INT 1
2225: DEC
2226: ST_TO_ADDR
2227: LD_INT 8
2229: PUSH
2230: FOR_TO
2231: IFFALSE 2244
// ClearAllFogForSide ( i ) ;
2233: LD_VAR 0 2
2237: PPUSH
2238: CALL_OW 520
2242: GO 2230
2244: POP
2245: POP
// end ;
2246: LD_VAR 0 1
2250: RET
// export function INIT_SetUpTechs ; var i ; begin
2251: LD_INT 0
2253: PPUSH
2254: PPUSH
// for i = 1 to 8 do
2255: LD_ADDR_VAR 0 2
2259: PUSH
2260: DOUBLE
2261: LD_INT 1
2263: DEC
2264: ST_TO_ADDR
2265: LD_INT 8
2267: PUSH
2268: FOR_TO
2269: IFFALSE 2332
// begin DisableAllTechs ( i ) ;
2271: LD_VAR 0 2
2275: PPUSH
2276: CALL 7293 0 1
// side_tech_lvl := Replace ( side_tech_lvl , i , starting_tech_lvl ) ;
2280: LD_ADDR_EXP 31
2284: PUSH
2285: LD_EXP 31
2289: PPUSH
2290: LD_VAR 0 2
2294: PPUSH
2295: LD_EXP 30
2299: PPUSH
2300: CALL_OW 1
2304: ST_TO_ADDR
// TechUpgrade ( starting_tech_lvl , Side_Nations [ i ] , i ) ;
2305: LD_EXP 30
2309: PPUSH
2310: LD_EXP 3
2314: PUSH
2315: LD_VAR 0 2
2319: ARRAY
2320: PPUSH
2321: LD_VAR 0 2
2325: PPUSH
2326: CALL 7795 0 3
// end ;
2330: GO 2268
2332: POP
2333: POP
// end ;
2334: LD_VAR 0 1
2338: RET
// export function INIT_ActivateLUAInterface ; var colour , tech , i , team , count ; begin
2339: LD_INT 0
2341: PPUSH
2342: PPUSH
2343: PPUSH
2344: PPUSH
2345: PPUSH
2346: PPUSH
// if victory_cond = 0 then
2347: LD_EXP 27
2351: PUSH
2352: LD_INT 0
2354: EQUAL
2355: IFFALSE 2366
// ToLua ( Deathmatch = 1; ) else
2357: LD_STRING Deathmatch = 1;
2359: PPUSH
2360: CALL_OW 559
2364: GO 2373
// ToLua ( Deathmatch = 0; ) ;
2366: LD_STRING Deathmatch = 0;
2368: PPUSH
2369: CALL_OW 559
// if Your_Side in [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] then
2373: LD_OWVAR 2
2377: PUSH
2378: LD_INT 1
2380: PUSH
2381: LD_INT 2
2383: PUSH
2384: LD_INT 3
2386: PUSH
2387: LD_INT 4
2389: PUSH
2390: LD_INT 5
2392: PUSH
2393: LD_INT 6
2395: PUSH
2396: LD_INT 7
2398: PUSH
2399: LD_INT 8
2401: PUSH
2402: EMPTY
2403: LIST
2404: LIST
2405: LIST
2406: LIST
2407: LIST
2408: LIST
2409: LIST
2410: LIST
2411: IN
2412: IFFALSE 2463
// begin ToLua ( LUA_UpdateSideInterface( & Your_Side & , & side_tech_lvl [ Your_Side ] & ); ) ;
2414: LD_STRING LUA_UpdateSideInterface(
2416: PUSH
2417: LD_OWVAR 2
2421: STR
2422: PUSH
2423: LD_STRING ,
2425: STR
2426: PUSH
2427: LD_EXP 31
2431: PUSH
2432: LD_OWVAR 2
2436: ARRAY
2437: STR
2438: PUSH
2439: LD_STRING );
2441: STR
2442: PPUSH
2443: CALL_OW 559
// ToLua ( StartSideInterface(); ) ;
2447: LD_STRING StartSideInterface();
2449: PPUSH
2450: CALL_OW 559
// ToLua ( LUA_NoDepot(); ) ;
2454: LD_STRING LUA_NoDepot();
2456: PPUSH
2457: CALL_OW 559
// end else
2461: GO 2690
// begin count = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
2463: LD_ADDR_VAR 0 6
2467: PUSH
2468: LD_INT 0
2470: PUSH
2471: LD_INT 0
2473: PUSH
2474: LD_INT 0
2476: PUSH
2477: LD_INT 0
2479: PUSH
2480: LD_INT 0
2482: PUSH
2483: LD_INT 0
2485: PUSH
2486: LD_INT 0
2488: PUSH
2489: LD_INT 0
2491: PUSH
2492: EMPTY
2493: LIST
2494: LIST
2495: LIST
2496: LIST
2497: LIST
2498: LIST
2499: LIST
2500: LIST
2501: ST_TO_ADDR
// for i = 1 to 8 do
2502: LD_ADDR_VAR 0 4
2506: PUSH
2507: DOUBLE
2508: LD_INT 1
2510: DEC
2511: ST_TO_ADDR
2512: LD_INT 8
2514: PUSH
2515: FOR_TO
2516: IFFALSE 2681
// begin colour := i ;
2518: LD_ADDR_VAR 0 2
2522: PUSH
2523: LD_VAR 0 4
2527: ST_TO_ADDR
// tech := side_tech_lvl [ i ] ;
2528: LD_ADDR_VAR 0 3
2532: PUSH
2533: LD_EXP 31
2537: PUSH
2538: LD_VAR 0 4
2542: ARRAY
2543: ST_TO_ADDR
// team := Side_Teams [ i ] ;
2544: LD_ADDR_VAR 0 5
2548: PUSH
2549: LD_EXP 5
2553: PUSH
2554: LD_VAR 0 4
2558: ARRAY
2559: ST_TO_ADDR
// if not Side_Positions [ i ] then
2560: LD_EXP 2
2564: PUSH
2565: LD_VAR 0 4
2569: ARRAY
2570: NOT
2571: IFFALSE 2581
// team := 0 ;
2573: LD_ADDR_VAR 0 5
2577: PUSH
2578: LD_INT 0
2580: ST_TO_ADDR
// count := Replace ( count , team , count [ team ] + 1 ) ;
2581: LD_ADDR_VAR 0 6
2585: PUSH
2586: LD_VAR 0 6
2590: PPUSH
2591: LD_VAR 0 5
2595: PPUSH
2596: LD_VAR 0 6
2600: PUSH
2601: LD_VAR 0 5
2605: ARRAY
2606: PUSH
2607: LD_INT 1
2609: PLUS
2610: PPUSH
2611: CALL_OW 1
2615: ST_TO_ADDR
// ToLua ( LUA_RenderSpecLabels( & i & , & team & , & count [ team ] & , & colour & , & tech & ); ) ;
2616: LD_STRING LUA_RenderSpecLabels(
2618: PUSH
2619: LD_VAR 0 4
2623: STR
2624: PUSH
2625: LD_STRING ,
2627: STR
2628: PUSH
2629: LD_VAR 0 5
2633: STR
2634: PUSH
2635: LD_STRING ,
2637: STR
2638: PUSH
2639: LD_VAR 0 6
2643: PUSH
2644: LD_VAR 0 5
2648: ARRAY
2649: STR
2650: PUSH
2651: LD_STRING ,
2653: STR
2654: PUSH
2655: LD_VAR 0 2
2659: STR
2660: PUSH
2661: LD_STRING ,
2663: STR
2664: PUSH
2665: LD_VAR 0 3
2669: STR
2670: PUSH
2671: LD_STRING );
2673: STR
2674: PPUSH
2675: CALL_OW 559
// end ;
2679: GO 2515
2681: POP
2682: POP
// ToLua ( StartSpecInterface(); ) ;
2683: LD_STRING StartSpecInterface();
2685: PPUSH
2686: CALL_OW 559
// end ; if Your_Side in [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] then
2690: LD_OWVAR 2
2694: PUSH
2695: LD_INT 1
2697: PUSH
2698: LD_INT 2
2700: PUSH
2701: LD_INT 3
2703: PUSH
2704: LD_INT 4
2706: PUSH
2707: LD_INT 5
2709: PUSH
2710: LD_INT 6
2712: PUSH
2713: LD_INT 7
2715: PUSH
2716: LD_INT 8
2718: PUSH
2719: EMPTY
2720: LIST
2721: LIST
2722: LIST
2723: LIST
2724: LIST
2725: LIST
2726: LIST
2727: LIST
2728: IN
2729: IFFALSE 2770
// ToLua ( LUA_UpdateSiberiteSent( & team_siberite_stocked [ Side_Teams [ Your_Side ] ] & , & victory_cond & ); ) ;
2731: LD_STRING LUA_UpdateSiberiteSent(
2733: PUSH
2734: LD_EXP 61
2738: PUSH
2739: LD_EXP 5
2743: PUSH
2744: LD_OWVAR 2
2748: ARRAY
2749: ARRAY
2750: STR
2751: PUSH
2752: LD_STRING ,
2754: STR
2755: PUSH
2756: LD_EXP 27
2760: STR
2761: PUSH
2762: LD_STRING );
2764: STR
2765: PPUSH
2766: CALL_OW 559
// if Your_Side = 9 then
2770: LD_OWVAR 2
2774: PUSH
2775: LD_INT 9
2777: EQUAL
2778: IFFALSE 2845
// for i = 1 to Teams do
2780: LD_ADDR_VAR 0 4
2784: PUSH
2785: DOUBLE
2786: LD_INT 1
2788: DEC
2789: ST_TO_ADDR
2790: LD_EXP 6
2794: PUSH
2795: FOR_TO
2796: IFFALSE 2843
// ToLua ( LUA_UpdateSiberiteSpec( & team_siberite_stocked [ i ] & , & victory_cond & , & i & ); ) ;
2798: LD_STRING LUA_UpdateSiberiteSpec(
2800: PUSH
2801: LD_EXP 61
2805: PUSH
2806: LD_VAR 0 4
2810: ARRAY
2811: STR
2812: PUSH
2813: LD_STRING ,
2815: STR
2816: PUSH
2817: LD_EXP 27
2821: STR
2822: PUSH
2823: LD_STRING ,
2825: STR
2826: PUSH
2827: LD_VAR 0 4
2831: STR
2832: PUSH
2833: LD_STRING );
2835: STR
2836: PPUSH
2837: CALL_OW 559
2841: GO 2795
2843: POP
2844: POP
// end ;
2845: LD_VAR 0 1
2849: RET
// export function INIT_PrepareSquad ; var i , j , commander , profession , attributes , basic_skills , skill_levels , importance , stat_array ; begin
2850: LD_INT 0
2852: PPUSH
2853: PPUSH
2854: PPUSH
2855: PPUSH
2856: PPUSH
2857: PPUSH
2858: PPUSH
2859: PPUSH
2860: PPUSH
2861: PPUSH
// stat_array := [ ] ;
2862: LD_ADDR_VAR 0 10
2866: PUSH
2867: EMPTY
2868: ST_TO_ADDR
// for i = 1 to people_num [ 1 ] do
2869: LD_ADDR_VAR 0 2
2873: PUSH
2874: DOUBLE
2875: LD_INT 1
2877: DEC
2878: ST_TO_ADDR
2879: LD_EXP 19
2883: PUSH
2884: LD_INT 1
2886: ARRAY
2887: PUSH
2888: FOR_TO
2889: IFFALSE 3106
// begin commander := 1 ;
2891: LD_ADDR_VAR 0 4
2895: PUSH
2896: LD_INT 1
2898: ST_TO_ADDR
// profession := 1 ;
2899: LD_ADDR_VAR 0 5
2903: PUSH
2904: LD_INT 1
2906: ST_TO_ADDR
// attributes := [ Rand ( 10 , 15 ) , Rand ( 9 , 11 ) ] ;
2907: LD_ADDR_VAR 0 6
2911: PUSH
2912: LD_INT 10
2914: PPUSH
2915: LD_INT 15
2917: PPUSH
2918: CALL_OW 12
2922: PUSH
2923: LD_INT 9
2925: PPUSH
2926: LD_INT 11
2928: PPUSH
2929: CALL_OW 12
2933: PUSH
2934: EMPTY
2935: LIST
2936: LIST
2937: ST_TO_ADDR
// basic_skills := [ Rand ( 1 , 3 ) , 0 , 0 , 0 ] ;
2938: LD_ADDR_VAR 0 7
2942: PUSH
2943: LD_INT 1
2945: PPUSH
2946: LD_INT 3
2948: PPUSH
2949: CALL_OW 12
2953: PUSH
2954: LD_INT 0
2956: PUSH
2957: LD_INT 0
2959: PUSH
2960: LD_INT 0
2962: PUSH
2963: EMPTY
2964: LIST
2965: LIST
2966: LIST
2967: LIST
2968: ST_TO_ADDR
// skill_levels := [ basic_skills [ 1 ] + experience , Rand ( 0 , experience ) , Rand ( 0 , experience ) , Rand ( 0 , experience ) ] ;
2969: LD_ADDR_VAR 0 8
2973: PUSH
2974: LD_VAR 0 7
2978: PUSH
2979: LD_INT 1
2981: ARRAY
2982: PUSH
2983: LD_EXP 20
2987: PLUS
2988: PUSH
2989: LD_INT 0
2991: PPUSH
2992: LD_EXP 20
2996: PPUSH
2997: CALL_OW 12
3001: PUSH
3002: LD_INT 0
3004: PPUSH
3005: LD_EXP 20
3009: PPUSH
3010: CALL_OW 12
3014: PUSH
3015: LD_INT 0
3017: PPUSH
3018: LD_EXP 20
3022: PPUSH
3023: CALL_OW 12
3027: PUSH
3028: EMPTY
3029: LIST
3030: LIST
3031: LIST
3032: LIST
3033: ST_TO_ADDR
// importance := 105 ;
3034: LD_ADDR_VAR 0 9
3038: PUSH
3039: LD_INT 105
3041: ST_TO_ADDR
// stat_array := Replace ( stat_array , stat_array + 1 , [ commander , profession , attributes , basic_skills , skill_levels , importance ] ) ;
3042: LD_ADDR_VAR 0 10
3046: PUSH
3047: LD_VAR 0 10
3051: PPUSH
3052: LD_VAR 0 10
3056: PUSH
3057: LD_INT 1
3059: PLUS
3060: PPUSH
3061: LD_VAR 0 4
3065: PUSH
3066: LD_VAR 0 5
3070: PUSH
3071: LD_VAR 0 6
3075: PUSH
3076: LD_VAR 0 7
3080: PUSH
3081: LD_VAR 0 8
3085: PUSH
3086: LD_VAR 0 9
3090: PUSH
3091: EMPTY
3092: LIST
3093: LIST
3094: LIST
3095: LIST
3096: LIST
3097: LIST
3098: PPUSH
3099: CALL_OW 1
3103: ST_TO_ADDR
// end ;
3104: GO 2888
3106: POP
3107: POP
// for j = 2 to people_num do
3108: LD_ADDR_VAR 0 3
3112: PUSH
3113: DOUBLE
3114: LD_INT 2
3116: DEC
3117: ST_TO_ADDR
3118: LD_EXP 19
3122: PUSH
3123: FOR_TO
3124: IFFALSE 3445
// begin commander := 0 ;
3126: LD_ADDR_VAR 0 4
3130: PUSH
3131: LD_INT 0
3133: ST_TO_ADDR
// attributes := [ Rand ( 8 , 12 ) , Rand ( 8 , 12 ) ] ;
3134: LD_ADDR_VAR 0 6
3138: PUSH
3139: LD_INT 8
3141: PPUSH
3142: LD_INT 12
3144: PPUSH
3145: CALL_OW 12
3149: PUSH
3150: LD_INT 8
3152: PPUSH
3153: LD_INT 12
3155: PPUSH
3156: CALL_OW 12
3160: PUSH
3161: EMPTY
3162: LIST
3163: LIST
3164: ST_TO_ADDR
// importance := 0 ;
3165: LD_ADDR_VAR 0 9
3169: PUSH
3170: LD_INT 0
3172: ST_TO_ADDR
// profession := j - 1 ;
3173: LD_ADDR_VAR 0 5
3177: PUSH
3178: LD_VAR 0 3
3182: PUSH
3183: LD_INT 1
3185: MINUS
3186: ST_TO_ADDR
// for i = 1 to people_num [ j ] do
3187: LD_ADDR_VAR 0 2
3191: PUSH
3192: DOUBLE
3193: LD_INT 1
3195: DEC
3196: ST_TO_ADDR
3197: LD_EXP 19
3201: PUSH
3202: LD_VAR 0 3
3206: ARRAY
3207: PUSH
3208: FOR_TO
3209: IFFALSE 3441
// begin basic_skills := [ 0 , 0 , 0 , 0 ] ;
3211: LD_ADDR_VAR 0 7
3215: PUSH
3216: LD_INT 0
3218: PUSH
3219: LD_INT 0
3221: PUSH
3222: LD_INT 0
3224: PUSH
3225: LD_INT 0
3227: PUSH
3228: EMPTY
3229: LIST
3230: LIST
3231: LIST
3232: LIST
3233: ST_TO_ADDR
// skill_levels := [ Rand ( 0 , experience ) , Rand ( 0 , experience ) , Rand ( 0 , experience ) , Rand ( 0 , experience ) ] ;
3234: LD_ADDR_VAR 0 8
3238: PUSH
3239: LD_INT 0
3241: PPUSH
3242: LD_EXP 20
3246: PPUSH
3247: CALL_OW 12
3251: PUSH
3252: LD_INT 0
3254: PPUSH
3255: LD_EXP 20
3259: PPUSH
3260: CALL_OW 12
3264: PUSH
3265: LD_INT 0
3267: PPUSH
3268: LD_EXP 20
3272: PPUSH
3273: CALL_OW 12
3277: PUSH
3278: LD_INT 0
3280: PPUSH
3281: LD_EXP 20
3285: PPUSH
3286: CALL_OW 12
3290: PUSH
3291: EMPTY
3292: LIST
3293: LIST
3294: LIST
3295: LIST
3296: ST_TO_ADDR
// basic_skills := Replace ( basic_skills , j - 1 , Rand ( 0 , 2 ) ) ;
3297: LD_ADDR_VAR 0 7
3301: PUSH
3302: LD_VAR 0 7
3306: PPUSH
3307: LD_VAR 0 3
3311: PUSH
3312: LD_INT 1
3314: MINUS
3315: PPUSH
3316: LD_INT 0
3318: PPUSH
3319: LD_INT 2
3321: PPUSH
3322: CALL_OW 12
3326: PPUSH
3327: CALL_OW 1
3331: ST_TO_ADDR
// skill_levels := Replace ( skill_levels , j - 1 , basic_skills [ j - 1 ] + experience ) ;
3332: LD_ADDR_VAR 0 8
3336: PUSH
3337: LD_VAR 0 8
3341: PPUSH
3342: LD_VAR 0 3
3346: PUSH
3347: LD_INT 1
3349: MINUS
3350: PPUSH
3351: LD_VAR 0 7
3355: PUSH
3356: LD_VAR 0 3
3360: PUSH
3361: LD_INT 1
3363: MINUS
3364: ARRAY
3365: PUSH
3366: LD_EXP 20
3370: PLUS
3371: PPUSH
3372: CALL_OW 1
3376: ST_TO_ADDR
// stat_array := Replace ( stat_array , stat_array + 1 , [ commander , profession , attributes , basic_skills , skill_levels , importance ] ) ;
3377: LD_ADDR_VAR 0 10
3381: PUSH
3382: LD_VAR 0 10
3386: PPUSH
3387: LD_VAR 0 10
3391: PUSH
3392: LD_INT 1
3394: PLUS
3395: PPUSH
3396: LD_VAR 0 4
3400: PUSH
3401: LD_VAR 0 5
3405: PUSH
3406: LD_VAR 0 6
3410: PUSH
3411: LD_VAR 0 7
3415: PUSH
3416: LD_VAR 0 8
3420: PUSH
3421: LD_VAR 0 9
3425: PUSH
3426: EMPTY
3427: LIST
3428: LIST
3429: LIST
3430: LIST
3431: LIST
3432: LIST
3433: PPUSH
3434: CALL_OW 1
3438: ST_TO_ADDR
// end ;
3439: GO 3208
3441: POP
3442: POP
// end ;
3443: GO 3123
3445: POP
3446: POP
// composition := stat_array ;
3447: LD_ADDR_EXP 43
3451: PUSH
3452: LD_VAR 0 10
3456: ST_TO_ADDR
// end ;
3457: LD_VAR 0 1
3461: RET
// export function INIT_SpawnStartingUnits ; var i , j , human , vehicle , crates , oil , siberite , cargo_capacity , vehicle_amount , bulk ; begin
3462: LD_INT 0
3464: PPUSH
3465: PPUSH
3466: PPUSH
3467: PPUSH
3468: PPUSH
3469: PPUSH
3470: PPUSH
3471: PPUSH
3472: PPUSH
3473: PPUSH
3474: PPUSH
// side_soldiers := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
3475: LD_ADDR_EXP 46
3479: PUSH
3480: EMPTY
3481: PUSH
3482: EMPTY
3483: PUSH
3484: EMPTY
3485: PUSH
3486: EMPTY
3487: PUSH
3488: EMPTY
3489: PUSH
3490: EMPTY
3491: PUSH
3492: EMPTY
3493: PUSH
3494: EMPTY
3495: PUSH
3496: EMPTY
3497: LIST
3498: LIST
3499: LIST
3500: LIST
3501: LIST
3502: LIST
3503: LIST
3504: LIST
3505: ST_TO_ADDR
// side_vehicles := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
3506: LD_ADDR_EXP 50
3510: PUSH
3511: EMPTY
3512: PUSH
3513: EMPTY
3514: PUSH
3515: EMPTY
3516: PUSH
3517: EMPTY
3518: PUSH
3519: EMPTY
3520: PUSH
3521: EMPTY
3522: PUSH
3523: EMPTY
3524: PUSH
3525: EMPTY
3526: PUSH
3527: EMPTY
3528: LIST
3529: LIST
3530: LIST
3531: LIST
3532: LIST
3533: LIST
3534: LIST
3535: LIST
3536: ST_TO_ADDR
// vehicle_amount := 0 ;
3537: LD_ADDR_VAR 0 10
3541: PUSH
3542: LD_INT 0
3544: ST_TO_ADDR
// crates := starting_resources [ 1 ] ;
3545: LD_ADDR_VAR 0 6
3549: PUSH
3550: LD_EXP 21
3554: PUSH
3555: LD_INT 1
3557: ARRAY
3558: ST_TO_ADDR
// oil := starting_resources [ 2 ] ;
3559: LD_ADDR_VAR 0 7
3563: PUSH
3564: LD_EXP 21
3568: PUSH
3569: LD_INT 2
3571: ARRAY
3572: ST_TO_ADDR
// siberite := starting_resources [ 3 ] ;
3573: LD_ADDR_VAR 0 8
3577: PUSH
3578: LD_EXP 21
3582: PUSH
3583: LD_INT 3
3585: ARRAY
3586: ST_TO_ADDR
// cargo_capacity := crates + oil + siberite ;
3587: LD_ADDR_VAR 0 9
3591: PUSH
3592: LD_VAR 0 6
3596: PUSH
3597: LD_VAR 0 7
3601: PLUS
3602: PUSH
3603: LD_VAR 0 8
3607: PLUS
3608: ST_TO_ADDR
// if cargo_capacity > 0 then
3609: LD_VAR 0 9
3613: PUSH
3614: LD_INT 0
3616: GREATER
3617: IFFALSE 3659
// begin while cargo_capacity > 0 do
3619: LD_VAR 0 9
3623: PUSH
3624: LD_INT 0
3626: GREATER
3627: IFFALSE 3659
// begin vehicle_amount := vehicle_amount + 1 ;
3629: LD_ADDR_VAR 0 10
3633: PUSH
3634: LD_VAR 0 10
3638: PUSH
3639: LD_INT 1
3641: PLUS
3642: ST_TO_ADDR
// cargo_capacity := cargo_capacity - 100 ;
3643: LD_ADDR_VAR 0 9
3647: PUSH
3648: LD_VAR 0 9
3652: PUSH
3653: LD_INT 100
3655: MINUS
3656: ST_TO_ADDR
// end ;
3657: GO 3619
// end ; for i = 1 to 8 do
3659: LD_ADDR_VAR 0 2
3663: PUSH
3664: DOUBLE
3665: LD_INT 1
3667: DEC
3668: ST_TO_ADDR
3669: LD_INT 8
3671: PUSH
3672: FOR_TO
3673: IFFALSE 4223
// begin if not side_isalive [ i ] then
3675: LD_EXP 54
3679: PUSH
3680: LD_VAR 0 2
3684: ARRAY
3685: NOT
3686: IFFALSE 3690
// continue ;
3688: GO 3672
// for j = 1 to composition do
3690: LD_ADDR_VAR 0 3
3694: PUSH
3695: DOUBLE
3696: LD_INT 1
3698: DEC
3699: ST_TO_ADDR
3700: LD_EXP 43
3704: PUSH
3705: FOR_TO
3706: IFFALSE 3778
// begin human := PrepareCharacters ( i , position_spawn_direction , composition [ j ] ) ;
3708: LD_ADDR_VAR 0 4
3712: PUSH
3713: LD_VAR 0 2
3717: PPUSH
3718: LD_EXP 34
3722: PPUSH
3723: LD_EXP 43
3727: PUSH
3728: LD_VAR 0 3
3732: ARRAY
3733: PPUSH
3734: CALL 6422 0 3
3738: ST_TO_ADDR
// side_soldiers := Replace ( side_soldiers , i , side_soldiers [ i ] ^ human ) ;
3739: LD_ADDR_EXP 46
3743: PUSH
3744: LD_EXP 46
3748: PPUSH
3749: LD_VAR 0 2
3753: PPUSH
3754: LD_EXP 46
3758: PUSH
3759: LD_VAR 0 2
3763: ARRAY
3764: PUSH
3765: LD_VAR 0 4
3769: ADD
3770: PPUSH
3771: CALL_OW 1
3775: ST_TO_ADDR
// end ;
3776: GO 3705
3778: POP
3779: POP
// crates := starting_resources [ 1 ] ;
3780: LD_ADDR_VAR 0 6
3784: PUSH
3785: LD_EXP 21
3789: PUSH
3790: LD_INT 1
3792: ARRAY
3793: ST_TO_ADDR
// oil := starting_resources [ 2 ] ;
3794: LD_ADDR_VAR 0 7
3798: PUSH
3799: LD_EXP 21
3803: PUSH
3804: LD_INT 2
3806: ARRAY
3807: ST_TO_ADDR
// siberite := starting_resources [ 3 ] ;
3808: LD_ADDR_VAR 0 8
3812: PUSH
3813: LD_EXP 21
3817: PUSH
3818: LD_INT 3
3820: ARRAY
3821: ST_TO_ADDR
// for j = 1 to vehicle_amount do
3822: LD_ADDR_VAR 0 3
3826: PUSH
3827: DOUBLE
3828: LD_INT 1
3830: DEC
3831: ST_TO_ADDR
3832: LD_VAR 0 10
3836: PUSH
3837: FOR_TO
3838: IFFALSE 3975
// begin vehicle := PrepareVehicles ( i , position_spawn_direction ) ;
3840: LD_ADDR_VAR 0 5
3844: PUSH
3845: LD_VAR 0 2
3849: PPUSH
3850: LD_EXP 34
3854: PPUSH
3855: CALL 6636 0 2
3859: ST_TO_ADDR
// bulk := FillUpVehicles ( vehicle , crates , oil , siberite ) ;
3860: LD_ADDR_VAR 0 11
3864: PUSH
3865: LD_VAR 0 5
3869: PPUSH
3870: LD_VAR 0 6
3874: PPUSH
3875: LD_VAR 0 7
3879: PPUSH
3880: LD_VAR 0 8
3884: PPUSH
3885: CALL 11081 0 4
3889: ST_TO_ADDR
// crates := bulk [ 2 ] ;
3890: LD_ADDR_VAR 0 6
3894: PUSH
3895: LD_VAR 0 11
3899: PUSH
3900: LD_INT 2
3902: ARRAY
3903: ST_TO_ADDR
// oil := bulk [ 3 ] ;
3904: LD_ADDR_VAR 0 7
3908: PUSH
3909: LD_VAR 0 11
3913: PUSH
3914: LD_INT 3
3916: ARRAY
3917: ST_TO_ADDR
// siberite := bulk [ 4 ] ;
3918: LD_ADDR_VAR 0 8
3922: PUSH
3923: LD_VAR 0 11
3927: PUSH
3928: LD_INT 4
3930: ARRAY
3931: ST_TO_ADDR
// side_vehicles := Replace ( side_vehicles , i , side_vehicles [ i ] ^ bulk [ 1 ] ) ;
3932: LD_ADDR_EXP 50
3936: PUSH
3937: LD_EXP 50
3941: PPUSH
3942: LD_VAR 0 2
3946: PPUSH
3947: LD_EXP 50
3951: PUSH
3952: LD_VAR 0 2
3956: ARRAY
3957: PUSH
3958: LD_VAR 0 11
3962: PUSH
3963: LD_INT 1
3965: ARRAY
3966: ADD
3967: PPUSH
3968: CALL_OW 1
3972: ST_TO_ADDR
// end ;
3973: GO 3837
3975: POP
3976: POP
// for j = 1 to side_vehicles [ i ] do
3977: LD_ADDR_VAR 0 3
3981: PUSH
3982: DOUBLE
3983: LD_INT 1
3985: DEC
3986: ST_TO_ADDR
3987: LD_EXP 50
3991: PUSH
3992: LD_VAR 0 2
3996: ARRAY
3997: PUSH
3998: FOR_TO
3999: IFFALSE 4081
// PlaceHumanInUnit ( side_soldiers [ i ] [ people_num [ 1 ] + people_num [ 2 ] + people_num [ 3 ] + people_num [ 4 ] - j ] , side_vehicles [ i ] [ j ] ) ;
4001: LD_EXP 46
4005: PUSH
4006: LD_VAR 0 2
4010: ARRAY
4011: PUSH
4012: LD_EXP 19
4016: PUSH
4017: LD_INT 1
4019: ARRAY
4020: PUSH
4021: LD_EXP 19
4025: PUSH
4026: LD_INT 2
4028: ARRAY
4029: PLUS
4030: PUSH
4031: LD_EXP 19
4035: PUSH
4036: LD_INT 3
4038: ARRAY
4039: PLUS
4040: PUSH
4041: LD_EXP 19
4045: PUSH
4046: LD_INT 4
4048: ARRAY
4049: PLUS
4050: PUSH
4051: LD_VAR 0 3
4055: MINUS
4056: ARRAY
4057: PPUSH
4058: LD_EXP 50
4062: PUSH
4063: LD_VAR 0 2
4067: ARRAY
4068: PUSH
4069: LD_VAR 0 3
4073: ARRAY
4074: PPUSH
4075: CALL_OW 52
4079: GO 3998
4081: POP
4082: POP
// for j = 1 to side_soldiers [ i ] do
4083: LD_ADDR_VAR 0 3
4087: PUSH
4088: DOUBLE
4089: LD_INT 1
4091: DEC
4092: ST_TO_ADDR
4093: LD_EXP 46
4097: PUSH
4098: LD_VAR 0 2
4102: ARRAY
4103: PUSH
4104: FOR_TO
4105: IFFALSE 4150
// PlaceUnitArea ( side_soldiers [ i ] [ j ] , position_spawn_area [ Side_Positions [ i ] ] , false ) ;
4107: LD_EXP 46
4111: PUSH
4112: LD_VAR 0 2
4116: ARRAY
4117: PUSH
4118: LD_VAR 0 3
4122: ARRAY
4123: PPUSH
4124: LD_EXP 35
4128: PUSH
4129: LD_EXP 2
4133: PUSH
4134: LD_VAR 0 2
4138: ARRAY
4139: ARRAY
4140: PPUSH
4141: LD_INT 0
4143: PPUSH
4144: CALL_OW 49
4148: GO 4104
4150: POP
4151: POP
// for j = 1 to side_vehicles [ i ] do
4152: LD_ADDR_VAR 0 3
4156: PUSH
4157: DOUBLE
4158: LD_INT 1
4160: DEC
4161: ST_TO_ADDR
4162: LD_EXP 50
4166: PUSH
4167: LD_VAR 0 2
4171: ARRAY
4172: PUSH
4173: FOR_TO
4174: IFFALSE 4219
// PlaceUnitArea ( side_vehicles [ i ] [ j ] , position_spawn_area [ Side_Positions [ i ] ] , false ) ;
4176: LD_EXP 50
4180: PUSH
4181: LD_VAR 0 2
4185: ARRAY
4186: PUSH
4187: LD_VAR 0 3
4191: ARRAY
4192: PPUSH
4193: LD_EXP 35
4197: PUSH
4198: LD_EXP 2
4202: PUSH
4203: LD_VAR 0 2
4207: ARRAY
4208: ARRAY
4209: PPUSH
4210: LD_INT 0
4212: PPUSH
4213: CALL_OW 49
4217: GO 4173
4219: POP
4220: POP
// end ;
4221: GO 3672
4223: POP
4224: POP
// end ;
4225: LD_VAR 0 1
4229: RET
// export function INIT_CameraFocus ; begin
4230: LD_INT 0
4232: PPUSH
// if Your_Side >= 1 and Your_Side <= 8 then
4233: LD_OWVAR 2
4237: PUSH
4238: LD_INT 1
4240: GREATEREQUAL
4241: PUSH
4242: LD_OWVAR 2
4246: PUSH
4247: LD_INT 8
4249: LESSEQUAL
4250: AND
4251: IFFALSE 4270
// CenterNowOnUnits ( side_soldiers [ Your_Side ] ) else
4253: LD_EXP 46
4257: PUSH
4258: LD_OWVAR 2
4262: ARRAY
4263: PPUSH
4264: CALL_OW 87
4268: GO 4287
// begin CenterNowOnXY ( 164 , 129 ) ;
4270: LD_INT 164
4272: PPUSH
4273: LD_INT 129
4275: PPUSH
4276: CALL_OW 86
// FogOff ( 1 ) ;
4280: LD_INT 1
4282: PPUSH
4283: CALL_OW 344
// end ; end ; end_of_file
4287: LD_VAR 0 1
4291: RET
// export Game_Type , Side_Positions , Side_Nations , Side_Comps , Side_Teams , Teams , Choice_people_num , Choice_experience , Choice_starting_resources , Choice_crate_spawn_rate , Choice_people_spawn_rate , Choice_spawn_fluctuation , Choice_oil_abundance , Choice_sib_abundance , Choice_victory_cond , Choice_reinforce_cost , Choice_black_FoW , Choice_starting_tech_lvl , people_num , experience , starting_resources , crate_spawn_rate , people_spawn_rate , spawn_fluctuation , oil_abundance , sib_abundance , victory_cond , reinforce_cost , black_fow , starting_tech_lvl , side_tech_lvl , available_oil_deposits , available_siberite_deposits , position_spawn_direction , position_spawn_area , position_drop_zones , fluctuation_base_crates , fluctuation_base_humans , fluctuation_modifier_crates , fluctuation_modifier_humans , current_spawn_rate , past_spawn_rate , composition , new_character_EON , new_character_reinforcements , side_soldiers , side_depots , side_soldier_count , soldier_limit , side_vehicles , CLOCK_crate_spawn , CLOCK_human_spawn , CLOCK_fluctuation , side_isalive , cost_per_human , cost_per_upgrade , side_reinforcement_amount , side_reinforcement_cap , side_pending_order , side_resources_delivered , team_siberite_stocked , team_transfer_zones , transfer_zone_direction , side_chosen_zone , side_zone_locked , side_transfer_clocks , side_units_outside , side_order_type , side_resources_remaining , side_transfer_pending ; export function INIT_LoadMapParams ; var i ; begin
4292: LD_INT 0
4294: PPUSH
4295: PPUSH
// people_num := [ [ 1 , 1 , 1 , 1 , 1 ] , [ 1 , 2 , 2 , 2 , 2 ] , [ 1 , 3 , 3 , 3 , 3 ] , [ 1 , 4 , 4 , 4 , 4 ] ] ;
4296: LD_ADDR_EXP 19
4300: PUSH
4301: LD_INT 1
4303: PUSH
4304: LD_INT 1
4306: PUSH
4307: LD_INT 1
4309: PUSH
4310: LD_INT 1
4312: PUSH
4313: LD_INT 1
4315: PUSH
4316: EMPTY
4317: LIST
4318: LIST
4319: LIST
4320: LIST
4321: LIST
4322: PUSH
4323: LD_INT 1
4325: PUSH
4326: LD_INT 2
4328: PUSH
4329: LD_INT 2
4331: PUSH
4332: LD_INT 2
4334: PUSH
4335: LD_INT 2
4337: PUSH
4338: EMPTY
4339: LIST
4340: LIST
4341: LIST
4342: LIST
4343: LIST
4344: PUSH
4345: LD_INT 1
4347: PUSH
4348: LD_INT 3
4350: PUSH
4351: LD_INT 3
4353: PUSH
4354: LD_INT 3
4356: PUSH
4357: LD_INT 3
4359: PUSH
4360: EMPTY
4361: LIST
4362: LIST
4363: LIST
4364: LIST
4365: LIST
4366: PUSH
4367: LD_INT 1
4369: PUSH
4370: LD_INT 4
4372: PUSH
4373: LD_INT 4
4375: PUSH
4376: LD_INT 4
4378: PUSH
4379: LD_INT 4
4381: PUSH
4382: EMPTY
4383: LIST
4384: LIST
4385: LIST
4386: LIST
4387: LIST
4388: PUSH
4389: EMPTY
4390: LIST
4391: LIST
4392: LIST
4393: LIST
4394: ST_TO_ADDR
// experience := [ 1 , 2 , 4 , 5 ] ;
4395: LD_ADDR_EXP 20
4399: PUSH
4400: LD_INT 1
4402: PUSH
4403: LD_INT 2
4405: PUSH
4406: LD_INT 4
4408: PUSH
4409: LD_INT 5
4411: PUSH
4412: EMPTY
4413: LIST
4414: LIST
4415: LIST
4416: LIST
4417: ST_TO_ADDR
// starting_resources := [ [ 0 , 0 , 0 ] , [ 50 , 30 , 0 ] , [ 100 , 30 , 0 ] , [ 150 , 50 , 0 ] ] ;
4418: LD_ADDR_EXP 21
4422: PUSH
4423: LD_INT 0
4425: PUSH
4426: LD_INT 0
4428: PUSH
4429: LD_INT 0
4431: PUSH
4432: EMPTY
4433: LIST
4434: LIST
4435: LIST
4436: PUSH
4437: LD_INT 50
4439: PUSH
4440: LD_INT 30
4442: PUSH
4443: LD_INT 0
4445: PUSH
4446: EMPTY
4447: LIST
4448: LIST
4449: LIST
4450: PUSH
4451: LD_INT 100
4453: PUSH
4454: LD_INT 30
4456: PUSH
4457: LD_INT 0
4459: PUSH
4460: EMPTY
4461: LIST
4462: LIST
4463: LIST
4464: PUSH
4465: LD_INT 150
4467: PUSH
4468: LD_INT 50
4470: PUSH
4471: LD_INT 0
4473: PUSH
4474: EMPTY
4475: LIST
4476: LIST
4477: LIST
4478: PUSH
4479: EMPTY
4480: LIST
4481: LIST
4482: LIST
4483: LIST
4484: ST_TO_ADDR
// crate_spawn_rate := [ 2 2$00 , 1 1$30 , 1 1$00 , 0 0$30 ] ;
4485: LD_ADDR_EXP 22
4489: PUSH
4490: LD_INT 4200
4492: PUSH
4493: LD_INT 3150
4495: PUSH
4496: LD_INT 2100
4498: PUSH
4499: LD_INT 1050
4501: PUSH
4502: EMPTY
4503: LIST
4504: LIST
4505: LIST
4506: LIST
4507: ST_TO_ADDR
// people_spawn_rate := [ 0 , 15 15$0 , 10 10$0 , 5 5$0 ] ;
4508: LD_ADDR_EXP 23
4512: PUSH
4513: LD_INT 0
4515: PUSH
4516: LD_INT 31500
4518: PUSH
4519: LD_INT 21000
4521: PUSH
4522: LD_INT 10500
4524: PUSH
4525: EMPTY
4526: LIST
4527: LIST
4528: LIST
4529: LIST
4530: ST_TO_ADDR
// spawn_fluctuation := [ 0 , 5 5$0 , 2 2$30 ] ;
4531: LD_ADDR_EXP 24
4535: PUSH
4536: LD_INT 0
4538: PUSH
4539: LD_INT 10500
4541: PUSH
4542: LD_INT 5250
4544: PUSH
4545: EMPTY
4546: LIST
4547: LIST
4548: LIST
4549: ST_TO_ADDR
// oil_abundance := [ 4 , 6 , 8 ] ;
4550: LD_ADDR_EXP 25
4554: PUSH
4555: LD_INT 4
4557: PUSH
4558: LD_INT 6
4560: PUSH
4561: LD_INT 8
4563: PUSH
4564: EMPTY
4565: LIST
4566: LIST
4567: LIST
4568: ST_TO_ADDR
// sib_abundance := [ 2 , 3 , 4 ] ;
4569: LD_ADDR_EXP 26
4573: PUSH
4574: LD_INT 2
4576: PUSH
4577: LD_INT 3
4579: PUSH
4580: LD_INT 4
4582: PUSH
4583: EMPTY
4584: LIST
4585: LIST
4586: LIST
4587: ST_TO_ADDR
// victory_cond := [ 0 , 400 , 800 , 1200 ] ;
4588: LD_ADDR_EXP 27
4592: PUSH
4593: LD_INT 0
4595: PUSH
4596: LD_INT 400
4598: PUSH
4599: LD_INT 800
4601: PUSH
4602: LD_INT 1200
4604: PUSH
4605: EMPTY
4606: LIST
4607: LIST
4608: LIST
4609: LIST
4610: ST_TO_ADDR
// reinforce_cost := [ 1 , 2 , 3 , 4 ] ;
4611: LD_ADDR_EXP 28
4615: PUSH
4616: LD_INT 1
4618: PUSH
4619: LD_INT 2
4621: PUSH
4622: LD_INT 3
4624: PUSH
4625: LD_INT 4
4627: PUSH
4628: EMPTY
4629: LIST
4630: LIST
4631: LIST
4632: LIST
4633: ST_TO_ADDR
// cost_per_human := [ 50 , 70 , 100 , 150 ] ;
4634: LD_ADDR_EXP 55
4638: PUSH
4639: LD_INT 50
4641: PUSH
4642: LD_INT 70
4644: PUSH
4645: LD_INT 100
4647: PUSH
4648: LD_INT 150
4650: PUSH
4651: EMPTY
4652: LIST
4653: LIST
4654: LIST
4655: LIST
4656: ST_TO_ADDR
// cost_per_upgrade := [ [ [ 70 , 30 , 0 ] , [ 100 , 50 , 0 ] , [ 150 , 50 , 0 ] , [ 200 , 100 , 0 ] ] , [ [ 100 , 30 , 0 ] , [ 150 , 50 , 0 ] , [ 200 , 50 , 0 ] , [ 250 , 100 , 0 ] ] , [ [ 130 , 30 , 10 ] , [ 200 , 50 , 20 ] , [ 250 , 50 , 20 ] , [ 300 , 100 , 50 ] ] , [ [ 150 , 0 , 30 ] , [ 250 , 0 , 50 ] , [ 300 , 0 , 70 ] , [ 350 , 0 , 100 ] ] ] ;
4657: LD_ADDR_EXP 56
4661: PUSH
4662: LD_INT 70
4664: PUSH
4665: LD_INT 30
4667: PUSH
4668: LD_INT 0
4670: PUSH
4671: EMPTY
4672: LIST
4673: LIST
4674: LIST
4675: PUSH
4676: LD_INT 100
4678: PUSH
4679: LD_INT 50
4681: PUSH
4682: LD_INT 0
4684: PUSH
4685: EMPTY
4686: LIST
4687: LIST
4688: LIST
4689: PUSH
4690: LD_INT 150
4692: PUSH
4693: LD_INT 50
4695: PUSH
4696: LD_INT 0
4698: PUSH
4699: EMPTY
4700: LIST
4701: LIST
4702: LIST
4703: PUSH
4704: LD_INT 200
4706: PUSH
4707: LD_INT 100
4709: PUSH
4710: LD_INT 0
4712: PUSH
4713: EMPTY
4714: LIST
4715: LIST
4716: LIST
4717: PUSH
4718: EMPTY
4719: LIST
4720: LIST
4721: LIST
4722: LIST
4723: PUSH
4724: LD_INT 100
4726: PUSH
4727: LD_INT 30
4729: PUSH
4730: LD_INT 0
4732: PUSH
4733: EMPTY
4734: LIST
4735: LIST
4736: LIST
4737: PUSH
4738: LD_INT 150
4740: PUSH
4741: LD_INT 50
4743: PUSH
4744: LD_INT 0
4746: PUSH
4747: EMPTY
4748: LIST
4749: LIST
4750: LIST
4751: PUSH
4752: LD_INT 200
4754: PUSH
4755: LD_INT 50
4757: PUSH
4758: LD_INT 0
4760: PUSH
4761: EMPTY
4762: LIST
4763: LIST
4764: LIST
4765: PUSH
4766: LD_INT 250
4768: PUSH
4769: LD_INT 100
4771: PUSH
4772: LD_INT 0
4774: PUSH
4775: EMPTY
4776: LIST
4777: LIST
4778: LIST
4779: PUSH
4780: EMPTY
4781: LIST
4782: LIST
4783: LIST
4784: LIST
4785: PUSH
4786: LD_INT 130
4788: PUSH
4789: LD_INT 30
4791: PUSH
4792: LD_INT 10
4794: PUSH
4795: EMPTY
4796: LIST
4797: LIST
4798: LIST
4799: PUSH
4800: LD_INT 200
4802: PUSH
4803: LD_INT 50
4805: PUSH
4806: LD_INT 20
4808: PUSH
4809: EMPTY
4810: LIST
4811: LIST
4812: LIST
4813: PUSH
4814: LD_INT 250
4816: PUSH
4817: LD_INT 50
4819: PUSH
4820: LD_INT 20
4822: PUSH
4823: EMPTY
4824: LIST
4825: LIST
4826: LIST
4827: PUSH
4828: LD_INT 300
4830: PUSH
4831: LD_INT 100
4833: PUSH
4834: LD_INT 50
4836: PUSH
4837: EMPTY
4838: LIST
4839: LIST
4840: LIST
4841: PUSH
4842: EMPTY
4843: LIST
4844: LIST
4845: LIST
4846: LIST
4847: PUSH
4848: LD_INT 150
4850: PUSH
4851: LD_INT 0
4853: PUSH
4854: LD_INT 30
4856: PUSH
4857: EMPTY
4858: LIST
4859: LIST
4860: LIST
4861: PUSH
4862: LD_INT 250
4864: PUSH
4865: LD_INT 0
4867: PUSH
4868: LD_INT 50
4870: PUSH
4871: EMPTY
4872: LIST
4873: LIST
4874: LIST
4875: PUSH
4876: LD_INT 300
4878: PUSH
4879: LD_INT 0
4881: PUSH
4882: LD_INT 70
4884: PUSH
4885: EMPTY
4886: LIST
4887: LIST
4888: LIST
4889: PUSH
4890: LD_INT 350
4892: PUSH
4893: LD_INT 0
4895: PUSH
4896: LD_INT 100
4898: PUSH
4899: EMPTY
4900: LIST
4901: LIST
4902: LIST
4903: PUSH
4904: EMPTY
4905: LIST
4906: LIST
4907: LIST
4908: LIST
4909: PUSH
4910: EMPTY
4911: LIST
4912: LIST
4913: LIST
4914: LIST
4915: ST_TO_ADDR
// available_oil_deposits := [ [ [ [ 12 , 17 ] , [ 317 , 242 ] ] , [ [ 46 , 47 ] , [ 283 , 211 ] ] , [ [ 34 , 12 ] , [ 295 , 247 ] ] , [ [ 72 , 48 ] , [ 257 , 211 ] ] , [ [ 95 , 78 ] , [ 235 , 182 ] ] ] , [ [ [ 89 , 28 ] , [ 241 , 232 ] ] , [ [ 118 , 41 ] , [ 211 , 218 ] ] , [ [ 125 , 7 ] , [ 203 , 252 ] ] , [ [ 166 , 80 ] , [ 163 , 179 ] ] ] , [ [ [ 192 , 57 ] , [ 137 , 202 ] ] , [ [ 197 , 6 ] , [ 150 , 253 ] ] , [ [ 214 , 66 ] , [ 115 , 192 ] ] , [ [ 208 , 25 ] , [ 121 , 234 ] ] , [ [ 242 , 89 ] , [ 87 , 170 ] ] ] ] ;
4916: LD_ADDR_EXP 32
4920: PUSH
4921: LD_INT 12
4923: PUSH
4924: LD_INT 17
4926: PUSH
4927: EMPTY
4928: LIST
4929: LIST
4930: PUSH
4931: LD_INT 317
4933: PUSH
4934: LD_INT 242
4936: PUSH
4937: EMPTY
4938: LIST
4939: LIST
4940: PUSH
4941: EMPTY
4942: LIST
4943: LIST
4944: PUSH
4945: LD_INT 46
4947: PUSH
4948: LD_INT 47
4950: PUSH
4951: EMPTY
4952: LIST
4953: LIST
4954: PUSH
4955: LD_INT 283
4957: PUSH
4958: LD_INT 211
4960: PUSH
4961: EMPTY
4962: LIST
4963: LIST
4964: PUSH
4965: EMPTY
4966: LIST
4967: LIST
4968: PUSH
4969: LD_INT 34
4971: PUSH
4972: LD_INT 12
4974: PUSH
4975: EMPTY
4976: LIST
4977: LIST
4978: PUSH
4979: LD_INT 295
4981: PUSH
4982: LD_INT 247
4984: PUSH
4985: EMPTY
4986: LIST
4987: LIST
4988: PUSH
4989: EMPTY
4990: LIST
4991: LIST
4992: PUSH
4993: LD_INT 72
4995: PUSH
4996: LD_INT 48
4998: PUSH
4999: EMPTY
5000: LIST
5001: LIST
5002: PUSH
5003: LD_INT 257
5005: PUSH
5006: LD_INT 211
5008: PUSH
5009: EMPTY
5010: LIST
5011: LIST
5012: PUSH
5013: EMPTY
5014: LIST
5015: LIST
5016: PUSH
5017: LD_INT 95
5019: PUSH
5020: LD_INT 78
5022: PUSH
5023: EMPTY
5024: LIST
5025: LIST
5026: PUSH
5027: LD_INT 235
5029: PUSH
5030: LD_INT 182
5032: PUSH
5033: EMPTY
5034: LIST
5035: LIST
5036: PUSH
5037: EMPTY
5038: LIST
5039: LIST
5040: PUSH
5041: EMPTY
5042: LIST
5043: LIST
5044: LIST
5045: LIST
5046: LIST
5047: PUSH
5048: LD_INT 89
5050: PUSH
5051: LD_INT 28
5053: PUSH
5054: EMPTY
5055: LIST
5056: LIST
5057: PUSH
5058: LD_INT 241
5060: PUSH
5061: LD_INT 232
5063: PUSH
5064: EMPTY
5065: LIST
5066: LIST
5067: PUSH
5068: EMPTY
5069: LIST
5070: LIST
5071: PUSH
5072: LD_INT 118
5074: PUSH
5075: LD_INT 41
5077: PUSH
5078: EMPTY
5079: LIST
5080: LIST
5081: PUSH
5082: LD_INT 211
5084: PUSH
5085: LD_INT 218
5087: PUSH
5088: EMPTY
5089: LIST
5090: LIST
5091: PUSH
5092: EMPTY
5093: LIST
5094: LIST
5095: PUSH
5096: LD_INT 125
5098: PUSH
5099: LD_INT 7
5101: PUSH
5102: EMPTY
5103: LIST
5104: LIST
5105: PUSH
5106: LD_INT 203
5108: PUSH
5109: LD_INT 252
5111: PUSH
5112: EMPTY
5113: LIST
5114: LIST
5115: PUSH
5116: EMPTY
5117: LIST
5118: LIST
5119: PUSH
5120: LD_INT 166
5122: PUSH
5123: LD_INT 80
5125: PUSH
5126: EMPTY
5127: LIST
5128: LIST
5129: PUSH
5130: LD_INT 163
5132: PUSH
5133: LD_INT 179
5135: PUSH
5136: EMPTY
5137: LIST
5138: LIST
5139: PUSH
5140: EMPTY
5141: LIST
5142: LIST
5143: PUSH
5144: EMPTY
5145: LIST
5146: LIST
5147: LIST
5148: LIST
5149: PUSH
5150: LD_INT 192
5152: PUSH
5153: LD_INT 57
5155: PUSH
5156: EMPTY
5157: LIST
5158: LIST
5159: PUSH
5160: LD_INT 137
5162: PUSH
5163: LD_INT 202
5165: PUSH
5166: EMPTY
5167: LIST
5168: LIST
5169: PUSH
5170: EMPTY
5171: LIST
5172: LIST
5173: PUSH
5174: LD_INT 197
5176: PUSH
5177: LD_INT 6
5179: PUSH
5180: EMPTY
5181: LIST
5182: LIST
5183: PUSH
5184: LD_INT 150
5186: PUSH
5187: LD_INT 253
5189: PUSH
5190: EMPTY
5191: LIST
5192: LIST
5193: PUSH
5194: EMPTY
5195: LIST
5196: LIST
5197: PUSH
5198: LD_INT 214
5200: PUSH
5201: LD_INT 66
5203: PUSH
5204: EMPTY
5205: LIST
5206: LIST
5207: PUSH
5208: LD_INT 115
5210: PUSH
5211: LD_INT 192
5213: PUSH
5214: EMPTY
5215: LIST
5216: LIST
5217: PUSH
5218: EMPTY
5219: LIST
5220: LIST
5221: PUSH
5222: LD_INT 208
5224: PUSH
5225: LD_INT 25
5227: PUSH
5228: EMPTY
5229: LIST
5230: LIST
5231: PUSH
5232: LD_INT 121
5234: PUSH
5235: LD_INT 234
5237: PUSH
5238: EMPTY
5239: LIST
5240: LIST
5241: PUSH
5242: EMPTY
5243: LIST
5244: LIST
5245: PUSH
5246: LD_INT 242
5248: PUSH
5249: LD_INT 89
5251: PUSH
5252: EMPTY
5253: LIST
5254: LIST
5255: PUSH
5256: LD_INT 87
5258: PUSH
5259: LD_INT 170
5261: PUSH
5262: EMPTY
5263: LIST
5264: LIST
5265: PUSH
5266: EMPTY
5267: LIST
5268: LIST
5269: PUSH
5270: EMPTY
5271: LIST
5272: LIST
5273: LIST
5274: LIST
5275: LIST
5276: PUSH
5277: EMPTY
5278: LIST
5279: LIST
5280: LIST
5281: ST_TO_ADDR
// available_siberite_deposits := [ [ [ [ 61 , 103 ] , [ 268 , 156 ] ] , [ [ 100 , 115 ] , [ 229 , 144 ] ] , [ [ 128 , 105 ] , [ 201 , 154 ] ] , [ [ 113 , 75 ] , [ 216 , 184 ] ] ] , [ [ [ 167 , 143 ] , [ 162 , 116 ] ] , [ [ 129 , 157 ] , [ 200 , 102 ] ] ] ] ;
5282: LD_ADDR_EXP 33
5286: PUSH
5287: LD_INT 61
5289: PUSH
5290: LD_INT 103
5292: PUSH
5293: EMPTY
5294: LIST
5295: LIST
5296: PUSH
5297: LD_INT 268
5299: PUSH
5300: LD_INT 156
5302: PUSH
5303: EMPTY
5304: LIST
5305: LIST
5306: PUSH
5307: EMPTY
5308: LIST
5309: LIST
5310: PUSH
5311: LD_INT 100
5313: PUSH
5314: LD_INT 115
5316: PUSH
5317: EMPTY
5318: LIST
5319: LIST
5320: PUSH
5321: LD_INT 229
5323: PUSH
5324: LD_INT 144
5326: PUSH
5327: EMPTY
5328: LIST
5329: LIST
5330: PUSH
5331: EMPTY
5332: LIST
5333: LIST
5334: PUSH
5335: LD_INT 128
5337: PUSH
5338: LD_INT 105
5340: PUSH
5341: EMPTY
5342: LIST
5343: LIST
5344: PUSH
5345: LD_INT 201
5347: PUSH
5348: LD_INT 154
5350: PUSH
5351: EMPTY
5352: LIST
5353: LIST
5354: PUSH
5355: EMPTY
5356: LIST
5357: LIST
5358: PUSH
5359: LD_INT 113
5361: PUSH
5362: LD_INT 75
5364: PUSH
5365: EMPTY
5366: LIST
5367: LIST
5368: PUSH
5369: LD_INT 216
5371: PUSH
5372: LD_INT 184
5374: PUSH
5375: EMPTY
5376: LIST
5377: LIST
5378: PUSH
5379: EMPTY
5380: LIST
5381: LIST
5382: PUSH
5383: EMPTY
5384: LIST
5385: LIST
5386: LIST
5387: LIST
5388: PUSH
5389: LD_INT 167
5391: PUSH
5392: LD_INT 143
5394: PUSH
5395: EMPTY
5396: LIST
5397: LIST
5398: PUSH
5399: LD_INT 162
5401: PUSH
5402: LD_INT 116
5404: PUSH
5405: EMPTY
5406: LIST
5407: LIST
5408: PUSH
5409: EMPTY
5410: LIST
5411: LIST
5412: PUSH
5413: LD_INT 129
5415: PUSH
5416: LD_INT 157
5418: PUSH
5419: EMPTY
5420: LIST
5421: LIST
5422: PUSH
5423: LD_INT 200
5425: PUSH
5426: LD_INT 102
5428: PUSH
5429: EMPTY
5430: LIST
5431: LIST
5432: PUSH
5433: EMPTY
5434: LIST
5435: LIST
5436: PUSH
5437: EMPTY
5438: LIST
5439: LIST
5440: PUSH
5441: EMPTY
5442: LIST
5443: LIST
5444: ST_TO_ADDR
// position_spawn_direction := [ 2 , 2 , 3 , 3 , 0 , 0 , 5 , 5 ] ;
5445: LD_ADDR_EXP 34
5449: PUSH
5450: LD_INT 2
5452: PUSH
5453: LD_INT 2
5455: PUSH
5456: LD_INT 3
5458: PUSH
5459: LD_INT 3
5461: PUSH
5462: LD_INT 0
5464: PUSH
5465: LD_INT 0
5467: PUSH
5468: LD_INT 5
5470: PUSH
5471: LD_INT 5
5473: PUSH
5474: EMPTY
5475: LIST
5476: LIST
5477: LIST
5478: LIST
5479: LIST
5480: LIST
5481: LIST
5482: LIST
5483: ST_TO_ADDR
// position_spawn_area := [ INIT_SpawnNW , INIT_SpawnNW , INIT_SpawnNE , INIT_SpawnNE , INIT_SpawnSW , INIT_SpawnSW , INIT_SpawnSE , INIT_SpawnSE ] ;
5484: LD_ADDR_EXP 35
5488: PUSH
5489: LD_INT 1
5491: PUSH
5492: LD_INT 1
5494: PUSH
5495: LD_INT 2
5497: PUSH
5498: LD_INT 2
5500: PUSH
5501: LD_INT 4
5503: PUSH
5504: LD_INT 4
5506: PUSH
5507: LD_INT 3
5509: PUSH
5510: LD_INT 3
5512: PUSH
5513: EMPTY
5514: LIST
5515: LIST
5516: LIST
5517: LIST
5518: LIST
5519: LIST
5520: LIST
5521: LIST
5522: ST_TO_ADDR
// position_drop_zones := [ [ 1 , 50 , [ CrateDropSW , CrateDropSE , CrateDropNW , CrateDropNE ] ] , [ 2 , 60 , [ CrateDropMidSW , CrateDropMidNE ] , [ CrateDropMidNW , CrateDropMidSE ] ] , [ 3 , 70 , [ CrateDropMidN , CrateDropMidS ] ] ] ;
5523: LD_ADDR_EXP 36
5527: PUSH
5528: LD_INT 1
5530: PUSH
5531: LD_INT 50
5533: PUSH
5534: LD_INT 5
5536: PUSH
5537: LD_INT 6
5539: PUSH
5540: LD_INT 7
5542: PUSH
5543: LD_INT 8
5545: PUSH
5546: EMPTY
5547: LIST
5548: LIST
5549: LIST
5550: LIST
5551: PUSH
5552: EMPTY
5553: LIST
5554: LIST
5555: LIST
5556: PUSH
5557: LD_INT 2
5559: PUSH
5560: LD_INT 60
5562: PUSH
5563: LD_INT 9
5565: PUSH
5566: LD_INT 13
5568: PUSH
5569: EMPTY
5570: LIST
5571: LIST
5572: PUSH
5573: LD_INT 10
5575: PUSH
5576: LD_INT 14
5578: PUSH
5579: EMPTY
5580: LIST
5581: LIST
5582: PUSH
5583: EMPTY
5584: LIST
5585: LIST
5586: LIST
5587: LIST
5588: PUSH
5589: LD_INT 3
5591: PUSH
5592: LD_INT 70
5594: PUSH
5595: LD_INT 11
5597: PUSH
5598: LD_INT 12
5600: PUSH
5601: EMPTY
5602: LIST
5603: LIST
5604: PUSH
5605: EMPTY
5606: LIST
5607: LIST
5608: LIST
5609: PUSH
5610: EMPTY
5611: LIST
5612: LIST
5613: LIST
5614: ST_TO_ADDR
// fluctuation_base_crates := [ 0 0$12 , 0 0$9 , 0 0$6 , 0 0$2 ] ;
5615: LD_ADDR_EXP 37
5619: PUSH
5620: LD_INT 420
5622: PUSH
5623: LD_INT 315
5625: PUSH
5626: LD_INT 210
5628: PUSH
5629: LD_INT 70
5631: PUSH
5632: EMPTY
5633: LIST
5634: LIST
5635: LIST
5636: LIST
5637: ST_TO_ADDR
// fluctuation_base_humans := [ 0 , 1 1$30 , 1 1$00 , 0 0$30 ] ;
5638: LD_ADDR_EXP 38
5642: PUSH
5643: LD_INT 0
5645: PUSH
5646: LD_INT 3150
5648: PUSH
5649: LD_INT 2100
5651: PUSH
5652: LD_INT 1050
5654: PUSH
5655: EMPTY
5656: LIST
5657: LIST
5658: LIST
5659: LIST
5660: ST_TO_ADDR
// fluctuation_modifier_crates := 0 ;
5661: LD_ADDR_EXP 39
5665: PUSH
5666: LD_INT 0
5668: ST_TO_ADDR
// fluctuation_modifier_humans := 0 ;
5669: LD_ADDR_EXP 40
5673: PUSH
5674: LD_INT 0
5676: ST_TO_ADDR
// current_spawn_rate := 0 ;
5677: LD_ADDR_EXP 41
5681: PUSH
5682: LD_INT 0
5684: ST_TO_ADDR
// past_spawn_rate := 0 ;
5685: LD_ADDR_EXP 42
5689: PUSH
5690: LD_INT 0
5692: ST_TO_ADDR
// side_depots := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
5693: LD_ADDR_EXP 47
5697: PUSH
5698: EMPTY
5699: PUSH
5700: EMPTY
5701: PUSH
5702: EMPTY
5703: PUSH
5704: EMPTY
5705: PUSH
5706: EMPTY
5707: PUSH
5708: EMPTY
5709: PUSH
5710: EMPTY
5711: PUSH
5712: EMPTY
5713: PUSH
5714: EMPTY
5715: LIST
5716: LIST
5717: LIST
5718: LIST
5719: LIST
5720: LIST
5721: LIST
5722: LIST
5723: ST_TO_ADDR
// side_reinforcement_amount := [ 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 ] ;
5724: LD_ADDR_EXP 57
5728: PUSH
5729: LD_INT 1
5731: PUSH
5732: LD_INT 1
5734: PUSH
5735: LD_INT 1
5737: PUSH
5738: LD_INT 1
5740: PUSH
5741: LD_INT 1
5743: PUSH
5744: LD_INT 1
5746: PUSH
5747: LD_INT 1
5749: PUSH
5750: LD_INT 1
5752: PUSH
5753: EMPTY
5754: LIST
5755: LIST
5756: LIST
5757: LIST
5758: LIST
5759: LIST
5760: LIST
5761: LIST
5762: ST_TO_ADDR
// side_reinforcement_cap := [ 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 ] ;
5763: LD_ADDR_EXP 58
5767: PUSH
5768: LD_INT 3
5770: PUSH
5771: LD_INT 3
5773: PUSH
5774: LD_INT 3
5776: PUSH
5777: LD_INT 3
5779: PUSH
5780: LD_INT 3
5782: PUSH
5783: LD_INT 3
5785: PUSH
5786: LD_INT 3
5788: PUSH
5789: LD_INT 3
5791: PUSH
5792: EMPTY
5793: LIST
5794: LIST
5795: LIST
5796: LIST
5797: LIST
5798: LIST
5799: LIST
5800: LIST
5801: ST_TO_ADDR
// team_transfer_zones := [ [ TransferNW , TransferNE ] , [ TransferSW , TransferSE ] ] ;
5802: LD_ADDR_EXP 62
5806: PUSH
5807: LD_INT 15
5809: PUSH
5810: LD_INT 16
5812: PUSH
5813: EMPTY
5814: LIST
5815: LIST
5816: PUSH
5817: LD_INT 18
5819: PUSH
5820: LD_INT 17
5822: PUSH
5823: EMPTY
5824: LIST
5825: LIST
5826: PUSH
5827: EMPTY
5828: LIST
5829: LIST
5830: ST_TO_ADDR
// transfer_zone_direction := [ [ 3 , 4 ] , [ 1 , 5 ] ] ;
5831: LD_ADDR_EXP 63
5835: PUSH
5836: LD_INT 3
5838: PUSH
5839: LD_INT 4
5841: PUSH
5842: EMPTY
5843: LIST
5844: LIST
5845: PUSH
5846: LD_INT 1
5848: PUSH
5849: LD_INT 5
5851: PUSH
5852: EMPTY
5853: LIST
5854: LIST
5855: PUSH
5856: EMPTY
5857: LIST
5858: LIST
5859: ST_TO_ADDR
// side_chosen_zone := [ 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 ] ;
5860: LD_ADDR_EXP 64
5864: PUSH
5865: LD_INT 1
5867: PUSH
5868: LD_INT 1
5870: PUSH
5871: LD_INT 1
5873: PUSH
5874: LD_INT 1
5876: PUSH
5877: LD_INT 1
5879: PUSH
5880: LD_INT 1
5882: PUSH
5883: LD_INT 1
5885: PUSH
5886: LD_INT 1
5888: PUSH
5889: EMPTY
5890: LIST
5891: LIST
5892: LIST
5893: LIST
5894: LIST
5895: LIST
5896: LIST
5897: LIST
5898: ST_TO_ADDR
// side_zone_locked := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5899: LD_ADDR_EXP 65
5903: PUSH
5904: LD_INT 0
5906: PUSH
5907: LD_INT 0
5909: PUSH
5910: LD_INT 0
5912: PUSH
5913: LD_INT 0
5915: PUSH
5916: LD_INT 0
5918: PUSH
5919: LD_INT 0
5921: PUSH
5922: LD_INT 0
5924: PUSH
5925: LD_INT 0
5927: PUSH
5928: EMPTY
5929: LIST
5930: LIST
5931: LIST
5932: LIST
5933: LIST
5934: LIST
5935: LIST
5936: LIST
5937: ST_TO_ADDR
// side_pending_order := [ [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] ] ;
5938: LD_ADDR_EXP 59
5942: PUSH
5943: LD_INT 0
5945: PUSH
5946: LD_INT 0
5948: PUSH
5949: LD_INT 0
5951: PUSH
5952: EMPTY
5953: LIST
5954: LIST
5955: LIST
5956: PUSH
5957: LD_INT 0
5959: PUSH
5960: LD_INT 0
5962: PUSH
5963: LD_INT 0
5965: PUSH
5966: EMPTY
5967: LIST
5968: LIST
5969: LIST
5970: PUSH
5971: LD_INT 0
5973: PUSH
5974: LD_INT 0
5976: PUSH
5977: LD_INT 0
5979: PUSH
5980: EMPTY
5981: LIST
5982: LIST
5983: LIST
5984: PUSH
5985: LD_INT 0
5987: PUSH
5988: LD_INT 0
5990: PUSH
5991: LD_INT 0
5993: PUSH
5994: EMPTY
5995: LIST
5996: LIST
5997: LIST
5998: PUSH
5999: LD_INT 0
6001: PUSH
6002: LD_INT 0
6004: PUSH
6005: LD_INT 0
6007: PUSH
6008: EMPTY
6009: LIST
6010: LIST
6011: LIST
6012: PUSH
6013: LD_INT 0
6015: PUSH
6016: LD_INT 0
6018: PUSH
6019: LD_INT 0
6021: PUSH
6022: EMPTY
6023: LIST
6024: LIST
6025: LIST
6026: PUSH
6027: LD_INT 0
6029: PUSH
6030: LD_INT 0
6032: PUSH
6033: LD_INT 0
6035: PUSH
6036: EMPTY
6037: LIST
6038: LIST
6039: LIST
6040: PUSH
6041: LD_INT 0
6043: PUSH
6044: LD_INT 0
6046: PUSH
6047: LD_INT 0
6049: PUSH
6050: EMPTY
6051: LIST
6052: LIST
6053: LIST
6054: PUSH
6055: EMPTY
6056: LIST
6057: LIST
6058: LIST
6059: LIST
6060: LIST
6061: LIST
6062: LIST
6063: LIST
6064: ST_TO_ADDR
// side_order_type := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6065: LD_ADDR_EXP 68
6069: PUSH
6070: LD_INT 0
6072: PUSH
6073: LD_INT 0
6075: PUSH
6076: LD_INT 0
6078: PUSH
6079: LD_INT 0
6081: PUSH
6082: LD_INT 0
6084: PUSH
6085: LD_INT 0
6087: PUSH
6088: LD_INT 0
6090: PUSH
6091: LD_INT 0
6093: PUSH
6094: EMPTY
6095: LIST
6096: LIST
6097: LIST
6098: LIST
6099: LIST
6100: LIST
6101: LIST
6102: LIST
6103: ST_TO_ADDR
// side_units_outside := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
6104: LD_ADDR_EXP 67
6108: PUSH
6109: EMPTY
6110: PUSH
6111: EMPTY
6112: PUSH
6113: EMPTY
6114: PUSH
6115: EMPTY
6116: PUSH
6117: EMPTY
6118: PUSH
6119: EMPTY
6120: PUSH
6121: EMPTY
6122: PUSH
6123: EMPTY
6124: PUSH
6125: EMPTY
6126: LIST
6127: LIST
6128: LIST
6129: LIST
6130: LIST
6131: LIST
6132: LIST
6133: LIST
6134: ST_TO_ADDR
// side_transfer_pending := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6135: LD_ADDR_EXP 70
6139: PUSH
6140: LD_INT 0
6142: PUSH
6143: LD_INT 0
6145: PUSH
6146: LD_INT 0
6148: PUSH
6149: LD_INT 0
6151: PUSH
6152: LD_INT 0
6154: PUSH
6155: LD_INT 0
6157: PUSH
6158: LD_INT 0
6160: PUSH
6161: LD_INT 0
6163: PUSH
6164: EMPTY
6165: LIST
6166: LIST
6167: LIST
6168: LIST
6169: LIST
6170: LIST
6171: LIST
6172: LIST
6173: ST_TO_ADDR
// side_resources_remaining := [ [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] ] ;
6174: LD_ADDR_EXP 69
6178: PUSH
6179: LD_INT 0
6181: PUSH
6182: LD_INT 0
6184: PUSH
6185: LD_INT 0
6187: PUSH
6188: EMPTY
6189: LIST
6190: LIST
6191: LIST
6192: PUSH
6193: LD_INT 0
6195: PUSH
6196: LD_INT 0
6198: PUSH
6199: LD_INT 0
6201: PUSH
6202: EMPTY
6203: LIST
6204: LIST
6205: LIST
6206: PUSH
6207: LD_INT 0
6209: PUSH
6210: LD_INT 0
6212: PUSH
6213: LD_INT 0
6215: PUSH
6216: EMPTY
6217: LIST
6218: LIST
6219: LIST
6220: PUSH
6221: LD_INT 0
6223: PUSH
6224: LD_INT 0
6226: PUSH
6227: LD_INT 0
6229: PUSH
6230: EMPTY
6231: LIST
6232: LIST
6233: LIST
6234: PUSH
6235: LD_INT 0
6237: PUSH
6238: LD_INT 0
6240: PUSH
6241: LD_INT 0
6243: PUSH
6244: EMPTY
6245: LIST
6246: LIST
6247: LIST
6248: PUSH
6249: LD_INT 0
6251: PUSH
6252: LD_INT 0
6254: PUSH
6255: LD_INT 0
6257: PUSH
6258: EMPTY
6259: LIST
6260: LIST
6261: LIST
6262: PUSH
6263: LD_INT 0
6265: PUSH
6266: LD_INT 0
6268: PUSH
6269: LD_INT 0
6271: PUSH
6272: EMPTY
6273: LIST
6274: LIST
6275: LIST
6276: PUSH
6277: LD_INT 0
6279: PUSH
6280: LD_INT 0
6282: PUSH
6283: LD_INT 0
6285: PUSH
6286: EMPTY
6287: LIST
6288: LIST
6289: LIST
6290: PUSH
6291: EMPTY
6292: LIST
6293: LIST
6294: LIST
6295: LIST
6296: LIST
6297: LIST
6298: LIST
6299: LIST
6300: ST_TO_ADDR
// end ; end_of_file
6301: LD_VAR 0 1
6305: RET
// export function length ( _array ) ; var _x ; begin
6306: LD_INT 0
6308: PPUSH
6309: PPUSH
// Result := 0 ;
6310: LD_ADDR_VAR 0 2
6314: PUSH
6315: LD_INT 0
6317: ST_TO_ADDR
// for _x in _array do
6318: LD_ADDR_VAR 0 3
6322: PUSH
6323: LD_VAR 0 1
6327: PUSH
6328: FOR_IN
6329: IFFALSE 6347
// begin Result := Result + 1 ;
6331: LD_ADDR_VAR 0 2
6335: PUSH
6336: LD_VAR 0 2
6340: PUSH
6341: LD_INT 1
6343: PLUS
6344: ST_TO_ADDR
// end ;
6345: GO 6328
6347: POP
6348: POP
// end ;
6349: LD_VAR 0 2
6353: RET
// export function mp_sides_comps ; var c , i ; begin
6354: LD_INT 0
6356: PPUSH
6357: PPUSH
6358: PPUSH
// c = [ ] ;
6359: LD_ADDR_VAR 0 2
6363: PUSH
6364: EMPTY
6365: ST_TO_ADDR
// for i = 1 to 8 do
6366: LD_ADDR_VAR 0 3
6370: PUSH
6371: DOUBLE
6372: LD_INT 1
6374: DEC
6375: ST_TO_ADDR
6376: LD_INT 8
6378: PUSH
6379: FOR_TO
6380: IFFALSE 6405
// c = c ^ Multiplayer_GetPlayerIsComp ( i ) ;
6382: LD_ADDR_VAR 0 2
6386: PUSH
6387: LD_VAR 0 2
6391: PUSH
6392: LD_VAR 0 3
6396: PPUSH
6397: CALL_OW 532
6401: ADD
6402: ST_TO_ADDR
6403: GO 6379
6405: POP
6406: POP
// result = c ;
6407: LD_ADDR_VAR 0 1
6411: PUSH
6412: LD_VAR 0 2
6416: ST_TO_ADDR
// end ;
6417: LD_VAR 0 1
6421: RET
// export function PrepareCharacters ( side , direction , loadout ) ; begin
6422: LD_INT 0
6424: PPUSH
// InitHc ( ) ;
6425: CALL_OW 19
// InitUc ( ) ;
6429: CALL_OW 18
// if loadout [ 1 ] and Multiplayer then
6433: LD_VAR 0 3
6437: PUSH
6438: LD_INT 1
6440: ARRAY
6441: PUSH
6442: LD_OWVAR 4
6446: AND
6447: IFFALSE 6503
// begin hc_name := mp_sides_players_names [ side ] ;
6449: LD_ADDR_OWVAR 26
6453: PUSH
6454: LD_OWVAR 19
6458: PUSH
6459: LD_VAR 0 1
6463: ARRAY
6464: ST_TO_ADDR
// hc_gallery := MULTIAVATARS ;
6465: LD_ADDR_OWVAR 33
6469: PUSH
6470: LD_STRING MULTIAVATARS
6472: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( side ) ;
6473: LD_ADDR_OWVAR 34
6477: PUSH
6478: LD_VAR 0 1
6482: PPUSH
6483: CALL_OW 525
6487: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( side ) ;
6488: LD_ADDR_OWVAR 27
6492: PUSH
6493: LD_VAR 0 1
6497: PPUSH
6498: CALL_OW 526
6502: ST_TO_ADDR
// end ; uc_side := side ;
6503: LD_ADDR_OWVAR 20
6507: PUSH
6508: LD_VAR 0 1
6512: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
6513: LD_ADDR_OWVAR 21
6517: PUSH
6518: LD_EXP 3
6522: PUSH
6523: LD_VAR 0 1
6527: ARRAY
6528: ST_TO_ADDR
// uc_direction := direction [ Side_Positions [ side ] ] ;
6529: LD_ADDR_OWVAR 24
6533: PUSH
6534: LD_VAR 0 2
6538: PUSH
6539: LD_EXP 2
6543: PUSH
6544: LD_VAR 0 1
6548: ARRAY
6549: ARRAY
6550: ST_TO_ADDR
// hc_class := loadout [ 2 ] ;
6551: LD_ADDR_OWVAR 28
6555: PUSH
6556: LD_VAR 0 3
6560: PUSH
6561: LD_INT 2
6563: ARRAY
6564: ST_TO_ADDR
// hc_attr := loadout [ 3 ] ;
6565: LD_ADDR_OWVAR 29
6569: PUSH
6570: LD_VAR 0 3
6574: PUSH
6575: LD_INT 3
6577: ARRAY
6578: ST_TO_ADDR
// hc_basic_skills := loadout [ 4 ] ;
6579: LD_ADDR_OWVAR 30
6583: PUSH
6584: LD_VAR 0 3
6588: PUSH
6589: LD_INT 4
6591: ARRAY
6592: ST_TO_ADDR
// hc_skills := loadout [ 5 ] ;
6593: LD_ADDR_OWVAR 31
6597: PUSH
6598: LD_VAR 0 3
6602: PUSH
6603: LD_INT 5
6605: ARRAY
6606: ST_TO_ADDR
// hc_importance := loadout [ 6 ] ;
6607: LD_ADDR_OWVAR 32
6611: PUSH
6612: LD_VAR 0 3
6616: PUSH
6617: LD_INT 6
6619: ARRAY
6620: ST_TO_ADDR
// Result := CreateHuman ;
6621: LD_ADDR_VAR 0 4
6625: PUSH
6626: CALL_OW 44
6630: ST_TO_ADDR
// end ;
6631: LD_VAR 0 4
6635: RET
// export function PrepareVehicles ( side , direction ) ; begin
6636: LD_INT 0
6638: PPUSH
// InitUc ( ) ;
6639: CALL_OW 18
// InitVc ( ) ;
6643: CALL_OW 20
// uc_direction := direction [ Side_Positions [ side ] ] ;
6647: LD_ADDR_OWVAR 24
6651: PUSH
6652: LD_VAR 0 2
6656: PUSH
6657: LD_EXP 2
6661: PUSH
6662: LD_VAR 0 1
6666: ARRAY
6667: ARRAY
6668: ST_TO_ADDR
// uc_side := side ;
6669: LD_ADDR_OWVAR 20
6673: PUSH
6674: LD_VAR 0 1
6678: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
6679: LD_ADDR_OWVAR 21
6683: PUSH
6684: LD_EXP 3
6688: PUSH
6689: LD_VAR 0 1
6693: ARRAY
6694: ST_TO_ADDR
// vc_control := 1 ;
6695: LD_ADDR_OWVAR 38
6699: PUSH
6700: LD_INT 1
6702: ST_TO_ADDR
// vc_engine := 1 ;
6703: LD_ADDR_OWVAR 39
6707: PUSH
6708: LD_INT 1
6710: ST_TO_ADDR
// vc_fuel_battery := 85 ;
6711: LD_ADDR_OWVAR 41
6715: PUSH
6716: LD_INT 85
6718: ST_TO_ADDR
// case Side_Nations [ side ] of 1 :
6719: LD_EXP 3
6723: PUSH
6724: LD_VAR 0 1
6728: ARRAY
6729: PUSH
6730: LD_INT 1
6732: DOUBLE
6733: EQUAL
6734: IFTRUE 6738
6736: GO 6757
6738: POP
// begin vc_chassis := 2 ;
6739: LD_ADDR_OWVAR 37
6743: PUSH
6744: LD_INT 2
6746: ST_TO_ADDR
// vc_weapon := 12 ;
6747: LD_ADDR_OWVAR 40
6751: PUSH
6752: LD_INT 12
6754: ST_TO_ADDR
// end ; 2 :
6755: GO 6812
6757: LD_INT 2
6759: DOUBLE
6760: EQUAL
6761: IFTRUE 6765
6763: GO 6784
6765: POP
// begin vc_chassis := 13 ;
6766: LD_ADDR_OWVAR 37
6770: PUSH
6771: LD_INT 13
6773: ST_TO_ADDR
// vc_weapon := 32 ;
6774: LD_ADDR_OWVAR 40
6778: PUSH
6779: LD_INT 32
6781: ST_TO_ADDR
// end ; 3 :
6782: GO 6812
6784: LD_INT 3
6786: DOUBLE
6787: EQUAL
6788: IFTRUE 6792
6790: GO 6811
6792: POP
// begin vc_chassis := 21 ;
6793: LD_ADDR_OWVAR 37
6797: PUSH
6798: LD_INT 21
6800: ST_TO_ADDR
// vc_weapon := 51 ;
6801: LD_ADDR_OWVAR 40
6805: PUSH
6806: LD_INT 51
6808: ST_TO_ADDR
// end ; end ;
6809: GO 6812
6811: POP
// Result := CreateVehicle ;
6812: LD_ADDR_VAR 0 3
6816: PUSH
6817: CALL_OW 45
6821: ST_TO_ADDR
// end ;
6822: LD_VAR 0 3
6826: RET
// export function DidPlayerLose ( side ) ; var depots , colour ; begin
6827: LD_INT 0
6829: PPUSH
6830: PPUSH
6831: PPUSH
// if side_soldiers [ side ] = 0 then
6832: LD_EXP 46
6836: PUSH
6837: LD_VAR 0 1
6841: ARRAY
6842: PUSH
6843: LD_INT 0
6845: EQUAL
6846: IFFALSE 7033
// begin depots := FilterAllUnits ( [ [ f_side , side ] , [ f_type , 3 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) ;
6848: LD_ADDR_VAR 0 3
6852: PUSH
6853: LD_INT 22
6855: PUSH
6856: LD_VAR 0 1
6860: PUSH
6861: EMPTY
6862: LIST
6863: LIST
6864: PUSH
6865: LD_INT 21
6867: PUSH
6868: LD_INT 3
6870: PUSH
6871: EMPTY
6872: LIST
6873: LIST
6874: PUSH
6875: LD_INT 2
6877: PUSH
6878: LD_INT 30
6880: PUSH
6881: LD_INT 0
6883: PUSH
6884: EMPTY
6885: LIST
6886: LIST
6887: PUSH
6888: LD_INT 30
6890: PUSH
6891: LD_INT 1
6893: PUSH
6894: EMPTY
6895: LIST
6896: LIST
6897: PUSH
6898: EMPTY
6899: LIST
6900: LIST
6901: LIST
6902: PUSH
6903: EMPTY
6904: LIST
6905: LIST
6906: LIST
6907: PPUSH
6908: CALL_OW 69
6912: ST_TO_ADDR
// if depots + 0 = 0 then
6913: LD_VAR 0 3
6917: PUSH
6918: LD_INT 0
6920: PLUS
6921: PUSH
6922: LD_INT 0
6924: EQUAL
6925: IFFALSE 7033
// begin side_isalive := Replace ( side_isalive , side , 0 ) ;
6927: LD_ADDR_EXP 54
6931: PUSH
6932: LD_EXP 54
6936: PPUSH
6937: LD_VAR 0 1
6941: PPUSH
6942: LD_INT 0
6944: PPUSH
6945: CALL_OW 1
6949: ST_TO_ADDR
// RaiseSailEvent ( 66 ) ;
6950: LD_INT 66
6952: PPUSH
6953: CALL_OW 427
// if side = Your_Side then
6957: LD_VAR 0 1
6961: PUSH
6962: LD_OWVAR 2
6966: EQUAL
6967: IFFALSE 6982
// begin ToLua ( LUA_Lost(); ) ;
6969: LD_STRING LUA_Lost();
6971: PPUSH
6972: CALL_OW 559
// Multiplayer_Loose_Message ( ) ;
6976: CALL_OW 521
// end else
6980: GO 6990
// colour := 0 ;
6982: LD_ADDR_VAR 0 4
6986: PUSH
6987: LD_INT 0
6989: ST_TO_ADDR
// ToLua ( LUA_UpdateSpecInterface( & side & , & colour & , & side_tech_lvl [ side ] & ); ) ;
6990: LD_STRING LUA_UpdateSpecInterface(
6992: PUSH
6993: LD_VAR 0 1
6997: STR
6998: PUSH
6999: LD_STRING ,
7001: STR
7002: PUSH
7003: LD_VAR 0 4
7007: STR
7008: PUSH
7009: LD_STRING ,
7011: STR
7012: PUSH
7013: LD_EXP 31
7017: PUSH
7018: LD_VAR 0 1
7022: ARRAY
7023: STR
7024: PUSH
7025: LD_STRING );
7027: STR
7028: PPUSH
7029: CALL_OW 559
// end ; end ; end ;
7033: LD_VAR 0 2
7037: RET
// export function CheckPlayerPresence ; var i , colour ; begin
7038: LD_INT 0
7040: PPUSH
7041: PPUSH
7042: PPUSH
// for i = 1 to 8 do
7043: LD_ADDR_VAR 0 2
7047: PUSH
7048: DOUBLE
7049: LD_INT 1
7051: DEC
7052: ST_TO_ADDR
7053: LD_INT 8
7055: PUSH
7056: FOR_TO
7057: IFFALSE 7176
// begin if not MultiplayerSideAlive ( i ) and side_isalive [ i ] then
7059: LD_VAR 0 2
7063: PPUSH
7064: CALL_OW 108
7068: NOT
7069: PUSH
7070: LD_EXP 54
7074: PUSH
7075: LD_VAR 0 2
7079: ARRAY
7080: AND
7081: IFFALSE 7174
// begin side_isalive := Replace ( side_isalive , i , 0 ) ;
7083: LD_ADDR_EXP 54
7087: PUSH
7088: LD_EXP 54
7092: PPUSH
7093: LD_VAR 0 2
7097: PPUSH
7098: LD_INT 0
7100: PPUSH
7101: CALL_OW 1
7105: ST_TO_ADDR
// RaiseSailEvent ( 66 ) ;
7106: LD_INT 66
7108: PPUSH
7109: CALL_OW 427
// if Your_Side = 9 then
7113: LD_OWVAR 2
7117: PUSH
7118: LD_INT 9
7120: EQUAL
7121: IFFALSE 7174
// begin colour := 0 ;
7123: LD_ADDR_VAR 0 3
7127: PUSH
7128: LD_INT 0
7130: ST_TO_ADDR
// ToLua ( LUA_UpdateSpecInterface( & i & , & colour & , & side_tech_lvl [ i ] & ); ) ;
7131: LD_STRING LUA_UpdateSpecInterface(
7133: PUSH
7134: LD_VAR 0 2
7138: STR
7139: PUSH
7140: LD_STRING ,
7142: STR
7143: PUSH
7144: LD_VAR 0 3
7148: STR
7149: PUSH
7150: LD_STRING ,
7152: STR
7153: PUSH
7154: LD_EXP 31
7158: PUSH
7159: LD_VAR 0 2
7163: ARRAY
7164: STR
7165: PUSH
7166: LD_STRING );
7168: STR
7169: PPUSH
7170: CALL_OW 559
// end ; end ; end ;
7174: GO 7056
7176: POP
7177: POP
// end ;
7178: LD_VAR 0 1
7182: RET
// function TechUnlock ( techs , side , state ) ; var i ; begin
7183: LD_INT 0
7185: PPUSH
7186: PPUSH
// for i in techs do
7187: LD_ADDR_VAR 0 5
7191: PUSH
7192: LD_VAR 0 1
7196: PUSH
7197: FOR_IN
7198: IFFALSE 7241
// if Researched ( side , i ) = 0 then
7200: LD_VAR 0 2
7204: PPUSH
7205: LD_VAR 0 5
7209: PPUSH
7210: CALL_OW 325
7214: PUSH
7215: LD_INT 0
7217: EQUAL
7218: IFFALSE 7239
// SetTech ( i , side , state ) ;
7220: LD_VAR 0 5
7224: PPUSH
7225: LD_VAR 0 2
7229: PPUSH
7230: LD_VAR 0 3
7234: PPUSH
7235: CALL_OW 322
7239: GO 7197
7241: POP
7242: POP
// end ;
7243: LD_VAR 0 4
7247: RET
// function BuildingUnlock ( buildings , side , state ) ; var i ; begin
7248: LD_INT 0
7250: PPUSH
7251: PPUSH
// for i in buildings do
7252: LD_ADDR_VAR 0 5
7256: PUSH
7257: LD_VAR 0 1
7261: PUSH
7262: FOR_IN
7263: IFFALSE 7286
// SetRestrict ( i , side , state ) ;
7265: LD_VAR 0 5
7269: PPUSH
7270: LD_VAR 0 2
7274: PPUSH
7275: LD_VAR 0 3
7279: PPUSH
7280: CALL_OW 324
7284: GO 7262
7286: POP
7287: POP
// end ;
7288: LD_VAR 0 4
7292: RET
// export function DisableAllTechs ( side ) ; var techs , buildings ; begin
7293: LD_INT 0
7295: PPUSH
7296: PPUSH
7297: PPUSH
// techs := [ 35 , 45 , 46 , 47 , 1 , 2 , 11 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 12 , 13 , 10 , 14 , 15 , 18 , 16 , 17 , 20 , 19 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 36 , 70 , 69 , 39 , 34 , 40 , 71 , 41 , 42 , 43 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 63 , 64 , 65 , 66 , 67 , 68 ] ;
7298: LD_ADDR_VAR 0 3
7302: PUSH
7303: LD_INT 35
7305: PUSH
7306: LD_INT 45
7308: PUSH
7309: LD_INT 46
7311: PUSH
7312: LD_INT 47
7314: PUSH
7315: LD_INT 1
7317: PUSH
7318: LD_INT 2
7320: PUSH
7321: LD_INT 11
7323: PUSH
7324: LD_INT 3
7326: PUSH
7327: LD_INT 4
7329: PUSH
7330: LD_INT 5
7332: PUSH
7333: LD_INT 6
7335: PUSH
7336: LD_INT 7
7338: PUSH
7339: LD_INT 8
7341: PUSH
7342: LD_INT 9
7344: PUSH
7345: LD_INT 12
7347: PUSH
7348: LD_INT 13
7350: PUSH
7351: LD_INT 10
7353: PUSH
7354: LD_INT 14
7356: PUSH
7357: LD_INT 15
7359: PUSH
7360: LD_INT 18
7362: PUSH
7363: LD_INT 16
7365: PUSH
7366: LD_INT 17
7368: PUSH
7369: LD_INT 20
7371: PUSH
7372: LD_INT 19
7374: PUSH
7375: LD_INT 21
7377: PUSH
7378: LD_INT 22
7380: PUSH
7381: LD_INT 23
7383: PUSH
7384: LD_INT 24
7386: PUSH
7387: LD_INT 25
7389: PUSH
7390: LD_INT 26
7392: PUSH
7393: LD_INT 28
7395: PUSH
7396: LD_INT 29
7398: PUSH
7399: LD_INT 30
7401: PUSH
7402: LD_INT 31
7404: PUSH
7405: LD_INT 37
7407: PUSH
7408: LD_INT 38
7410: PUSH
7411: LD_INT 32
7413: PUSH
7414: LD_INT 27
7416: PUSH
7417: LD_INT 33
7419: PUSH
7420: LD_INT 36
7422: PUSH
7423: LD_INT 70
7425: PUSH
7426: LD_INT 69
7428: PUSH
7429: LD_INT 39
7431: PUSH
7432: LD_INT 34
7434: PUSH
7435: LD_INT 40
7437: PUSH
7438: LD_INT 71
7440: PUSH
7441: LD_INT 41
7443: PUSH
7444: LD_INT 42
7446: PUSH
7447: LD_INT 43
7449: PUSH
7450: LD_INT 44
7452: PUSH
7453: LD_INT 48
7455: PUSH
7456: LD_INT 49
7458: PUSH
7459: LD_INT 50
7461: PUSH
7462: LD_INT 51
7464: PUSH
7465: LD_INT 52
7467: PUSH
7468: LD_INT 53
7470: PUSH
7471: LD_INT 54
7473: PUSH
7474: LD_INT 55
7476: PUSH
7477: LD_INT 56
7479: PUSH
7480: LD_INT 57
7482: PUSH
7483: LD_INT 58
7485: PUSH
7486: LD_INT 59
7488: PUSH
7489: LD_INT 60
7491: PUSH
7492: LD_INT 61
7494: PUSH
7495: LD_INT 62
7497: PUSH
7498: LD_INT 63
7500: PUSH
7501: LD_INT 64
7503: PUSH
7504: LD_INT 65
7506: PUSH
7507: LD_INT 66
7509: PUSH
7510: LD_INT 67
7512: PUSH
7513: LD_INT 68
7515: PUSH
7516: EMPTY
7517: LIST
7518: LIST
7519: LIST
7520: LIST
7521: LIST
7522: LIST
7523: LIST
7524: LIST
7525: LIST
7526: LIST
7527: LIST
7528: LIST
7529: LIST
7530: LIST
7531: LIST
7532: LIST
7533: LIST
7534: LIST
7535: LIST
7536: LIST
7537: LIST
7538: LIST
7539: LIST
7540: LIST
7541: LIST
7542: LIST
7543: LIST
7544: LIST
7545: LIST
7546: LIST
7547: LIST
7548: LIST
7549: LIST
7550: LIST
7551: LIST
7552: LIST
7553: LIST
7554: LIST
7555: LIST
7556: LIST
7557: LIST
7558: LIST
7559: LIST
7560: LIST
7561: LIST
7562: LIST
7563: LIST
7564: LIST
7565: LIST
7566: LIST
7567: LIST
7568: LIST
7569: LIST
7570: LIST
7571: LIST
7572: LIST
7573: LIST
7574: LIST
7575: LIST
7576: LIST
7577: LIST
7578: LIST
7579: LIST
7580: LIST
7581: LIST
7582: LIST
7583: LIST
7584: LIST
7585: LIST
7586: LIST
7587: LIST
7588: ST_TO_ADDR
// buildings := [ 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 , 37 , 38 , 39 ] ;
7589: LD_ADDR_VAR 0 4
7593: PUSH
7594: LD_INT 0
7596: PUSH
7597: LD_INT 1
7599: PUSH
7600: LD_INT 2
7602: PUSH
7603: LD_INT 3
7605: PUSH
7606: LD_INT 4
7608: PUSH
7609: LD_INT 5
7611: PUSH
7612: LD_INT 6
7614: PUSH
7615: LD_INT 7
7617: PUSH
7618: LD_INT 8
7620: PUSH
7621: LD_INT 9
7623: PUSH
7624: LD_INT 10
7626: PUSH
7627: LD_INT 11
7629: PUSH
7630: LD_INT 12
7632: PUSH
7633: LD_INT 13
7635: PUSH
7636: LD_INT 14
7638: PUSH
7639: LD_INT 15
7641: PUSH
7642: LD_INT 16
7644: PUSH
7645: LD_INT 17
7647: PUSH
7648: LD_INT 18
7650: PUSH
7651: LD_INT 19
7653: PUSH
7654: LD_INT 20
7656: PUSH
7657: LD_INT 21
7659: PUSH
7660: LD_INT 22
7662: PUSH
7663: LD_INT 23
7665: PUSH
7666: LD_INT 24
7668: PUSH
7669: LD_INT 25
7671: PUSH
7672: LD_INT 26
7674: PUSH
7675: LD_INT 27
7677: PUSH
7678: LD_INT 28
7680: PUSH
7681: LD_INT 29
7683: PUSH
7684: LD_INT 30
7686: PUSH
7687: LD_INT 31
7689: PUSH
7690: LD_INT 32
7692: PUSH
7693: LD_INT 33
7695: PUSH
7696: LD_INT 34
7698: PUSH
7699: LD_INT 35
7701: PUSH
7702: LD_INT 36
7704: PUSH
7705: LD_INT 37
7707: PUSH
7708: LD_INT 38
7710: PUSH
7711: LD_INT 39
7713: PUSH
7714: EMPTY
7715: LIST
7716: LIST
7717: LIST
7718: LIST
7719: LIST
7720: LIST
7721: LIST
7722: LIST
7723: LIST
7724: LIST
7725: LIST
7726: LIST
7727: LIST
7728: LIST
7729: LIST
7730: LIST
7731: LIST
7732: LIST
7733: LIST
7734: LIST
7735: LIST
7736: LIST
7737: LIST
7738: LIST
7739: LIST
7740: LIST
7741: LIST
7742: LIST
7743: LIST
7744: LIST
7745: LIST
7746: LIST
7747: LIST
7748: LIST
7749: LIST
7750: LIST
7751: LIST
7752: LIST
7753: LIST
7754: LIST
7755: ST_TO_ADDR
// TechUnlock ( techs , side , 0 ) ;
7756: LD_VAR 0 3
7760: PPUSH
7761: LD_VAR 0 1
7765: PPUSH
7766: LD_INT 0
7768: PPUSH
7769: CALL 7183 0 3
// BuildingUnlock ( buildings , side , 0 ) ;
7773: LD_VAR 0 4
7777: PPUSH
7778: LD_VAR 0 1
7782: PPUSH
7783: LD_INT 0
7785: PPUSH
7786: CALL 7248 0 3
// end ;
7790: LD_VAR 0 2
7794: RET
// export function TechUpgrade ( tier , nation , side ) ; var techs , buildings , reinforcement , i ; begin
7795: LD_INT 0
7797: PPUSH
7798: PPUSH
7799: PPUSH
7800: PPUSH
7801: PPUSH
// techs := [ ] ;
7802: LD_ADDR_VAR 0 5
7806: PUSH
7807: EMPTY
7808: ST_TO_ADDR
// buildings := [ ] ;
7809: LD_ADDR_VAR 0 6
7813: PUSH
7814: EMPTY
7815: ST_TO_ADDR
// case tier of 0 :
7816: LD_VAR 0 1
7820: PUSH
7821: LD_INT 0
7823: DOUBLE
7824: EQUAL
7825: IFTRUE 7829
7827: GO 8173
7829: POP
// begin case nation of 1 :
7830: LD_VAR 0 2
7834: PUSH
7835: LD_INT 1
7837: DOUBLE
7838: EQUAL
7839: IFTRUE 7843
7841: GO 7948
7843: POP
// begin techs := [ 35 , 45 , 46 , 47 , 69 , 48 , 51 ] ;
7844: LD_ADDR_VAR 0 5
7848: PUSH
7849: LD_INT 35
7851: PUSH
7852: LD_INT 45
7854: PUSH
7855: LD_INT 46
7857: PUSH
7858: LD_INT 47
7860: PUSH
7861: LD_INT 69
7863: PUSH
7864: LD_INT 48
7866: PUSH
7867: LD_INT 51
7869: PUSH
7870: EMPTY
7871: LIST
7872: LIST
7873: LIST
7874: LIST
7875: LIST
7876: LIST
7877: LIST
7878: ST_TO_ADDR
// buildings := [ 0 , 2 , 3 , 4 , 6 , 7 , 8 , 10 , 16 , 19 , 26 , 27 , 29 , 31 , 32 ] ;
7879: LD_ADDR_VAR 0 6
7883: PUSH
7884: LD_INT 0
7886: PUSH
7887: LD_INT 2
7889: PUSH
7890: LD_INT 3
7892: PUSH
7893: LD_INT 4
7895: PUSH
7896: LD_INT 6
7898: PUSH
7899: LD_INT 7
7901: PUSH
7902: LD_INT 8
7904: PUSH
7905: LD_INT 10
7907: PUSH
7908: LD_INT 16
7910: PUSH
7911: LD_INT 19
7913: PUSH
7914: LD_INT 26
7916: PUSH
7917: LD_INT 27
7919: PUSH
7920: LD_INT 29
7922: PUSH
7923: LD_INT 31
7925: PUSH
7926: LD_INT 32
7928: PUSH
7929: EMPTY
7930: LIST
7931: LIST
7932: LIST
7933: LIST
7934: LIST
7935: LIST
7936: LIST
7937: LIST
7938: LIST
7939: LIST
7940: LIST
7941: LIST
7942: LIST
7943: LIST
7944: LIST
7945: ST_TO_ADDR
// end ; 2 :
7946: GO 8163
7948: LD_INT 2
7950: DOUBLE
7951: EQUAL
7952: IFTRUE 7956
7954: GO 8061
7956: POP
// begin techs := [ 35 , 45 , 46 , 47 , 69 , 48 , 51 ] ;
7957: LD_ADDR_VAR 0 5
7961: PUSH
7962: LD_INT 35
7964: PUSH
7965: LD_INT 45
7967: PUSH
7968: LD_INT 46
7970: PUSH
7971: LD_INT 47
7973: PUSH
7974: LD_INT 69
7976: PUSH
7977: LD_INT 48
7979: PUSH
7980: LD_INT 51
7982: PUSH
7983: EMPTY
7984: LIST
7985: LIST
7986: LIST
7987: LIST
7988: LIST
7989: LIST
7990: LIST
7991: ST_TO_ADDR
// buildings := [ 0 , 2 , 3 , 4 , 6 , 7 , 8 , 10 , 16 , 23 , 26 , 27 , 29 , 31 , 32 ] ;
7992: LD_ADDR_VAR 0 6
7996: PUSH
7997: LD_INT 0
7999: PUSH
8000: LD_INT 2
8002: PUSH
8003: LD_INT 3
8005: PUSH
8006: LD_INT 4
8008: PUSH
8009: LD_INT 6
8011: PUSH
8012: LD_INT 7
8014: PUSH
8015: LD_INT 8
8017: PUSH
8018: LD_INT 10
8020: PUSH
8021: LD_INT 16
8023: PUSH
8024: LD_INT 23
8026: PUSH
8027: LD_INT 26
8029: PUSH
8030: LD_INT 27
8032: PUSH
8033: LD_INT 29
8035: PUSH
8036: LD_INT 31
8038: PUSH
8039: LD_INT 32
8041: PUSH
8042: EMPTY
8043: LIST
8044: LIST
8045: LIST
8046: LIST
8047: LIST
8048: LIST
8049: LIST
8050: LIST
8051: LIST
8052: LIST
8053: LIST
8054: LIST
8055: LIST
8056: LIST
8057: LIST
8058: ST_TO_ADDR
// end ; 3 :
8059: GO 8163
8061: LD_INT 3
8063: DOUBLE
8064: EQUAL
8065: IFTRUE 8069
8067: GO 8162
8069: POP
// begin techs := [ 46 , 47 , 69 , 48 , 51 ] ;
8070: LD_ADDR_VAR 0 5
8074: PUSH
8075: LD_INT 46
8077: PUSH
8078: LD_INT 47
8080: PUSH
8081: LD_INT 69
8083: PUSH
8084: LD_INT 48
8086: PUSH
8087: LD_INT 51
8089: PUSH
8090: EMPTY
8091: LIST
8092: LIST
8093: LIST
8094: LIST
8095: LIST
8096: ST_TO_ADDR
// buildings := [ 0 , 2 , 3 , 4 , 6 , 7 , 8 , 10 , 16 , 19 , 26 , 29 , 31 , 32 ] ;
8097: LD_ADDR_VAR 0 6
8101: PUSH
8102: LD_INT 0
8104: PUSH
8105: LD_INT 2
8107: PUSH
8108: LD_INT 3
8110: PUSH
8111: LD_INT 4
8113: PUSH
8114: LD_INT 6
8116: PUSH
8117: LD_INT 7
8119: PUSH
8120: LD_INT 8
8122: PUSH
8123: LD_INT 10
8125: PUSH
8126: LD_INT 16
8128: PUSH
8129: LD_INT 19
8131: PUSH
8132: LD_INT 26
8134: PUSH
8135: LD_INT 29
8137: PUSH
8138: LD_INT 31
8140: PUSH
8141: LD_INT 32
8143: PUSH
8144: EMPTY
8145: LIST
8146: LIST
8147: LIST
8148: LIST
8149: LIST
8150: LIST
8151: LIST
8152: LIST
8153: LIST
8154: LIST
8155: LIST
8156: LIST
8157: LIST
8158: LIST
8159: ST_TO_ADDR
// end ; end ;
8160: GO 8163
8162: POP
// reinforcement := 3 ;
8163: LD_ADDR_VAR 0 7
8167: PUSH
8168: LD_INT 3
8170: ST_TO_ADDR
// end ; 1 :
8171: GO 11017
8173: LD_INT 1
8175: DOUBLE
8176: EQUAL
8177: IFTRUE 8181
8179: GO 8657
8181: POP
// begin case nation of 1 :
8182: LD_VAR 0 2
8186: PUSH
8187: LD_INT 1
8189: DOUBLE
8190: EQUAL
8191: IFTRUE 8195
8193: GO 8344
8195: POP
// begin techs := [ 35 , 45 , 46 , 47 , 6 , 7 , 20 , 69 , 39 , 48 , 49 , 51 , 52 , 60 ] ;
8196: LD_ADDR_VAR 0 5
8200: PUSH
8201: LD_INT 35
8203: PUSH
8204: LD_INT 45
8206: PUSH
8207: LD_INT 46
8209: PUSH
8210: LD_INT 47
8212: PUSH
8213: LD_INT 6
8215: PUSH
8216: LD_INT 7
8218: PUSH
8219: LD_INT 20
8221: PUSH
8222: LD_INT 69
8224: PUSH
8225: LD_INT 39
8227: PUSH
8228: LD_INT 48
8230: PUSH
8231: LD_INT 49
8233: PUSH
8234: LD_INT 51
8236: PUSH
8237: LD_INT 52
8239: PUSH
8240: LD_INT 60
8242: PUSH
8243: EMPTY
8244: LIST
8245: LIST
8246: LIST
8247: LIST
8248: LIST
8249: LIST
8250: LIST
8251: LIST
8252: LIST
8253: LIST
8254: LIST
8255: LIST
8256: LIST
8257: LIST
8258: ST_TO_ADDR
// buildings := [ 0 , 2 , 3 , 4 , 6 , 7 , 8 , 10 , 15 , 16 , 17 , 19 , 20 , 26 , 27 , 29 , 30 , 31 , 32 ] ;
8259: LD_ADDR_VAR 0 6
8263: PUSH
8264: LD_INT 0
8266: PUSH
8267: LD_INT 2
8269: PUSH
8270: LD_INT 3
8272: PUSH
8273: LD_INT 4
8275: PUSH
8276: LD_INT 6
8278: PUSH
8279: LD_INT 7
8281: PUSH
8282: LD_INT 8
8284: PUSH
8285: LD_INT 10
8287: PUSH
8288: LD_INT 15
8290: PUSH
8291: LD_INT 16
8293: PUSH
8294: LD_INT 17
8296: PUSH
8297: LD_INT 19
8299: PUSH
8300: LD_INT 20
8302: PUSH
8303: LD_INT 26
8305: PUSH
8306: LD_INT 27
8308: PUSH
8309: LD_INT 29
8311: PUSH
8312: LD_INT 30
8314: PUSH
8315: LD_INT 31
8317: PUSH
8318: LD_INT 32
8320: PUSH
8321: EMPTY
8322: LIST
8323: LIST
8324: LIST
8325: LIST
8326: LIST
8327: LIST
8328: LIST
8329: LIST
8330: LIST
8331: LIST
8332: LIST
8333: LIST
8334: LIST
8335: LIST
8336: LIST
8337: LIST
8338: LIST
8339: LIST
8340: LIST
8341: ST_TO_ADDR
// end ; 2 :
8342: GO 8647
8344: LD_INT 2
8346: DOUBLE
8347: EQUAL
8348: IFTRUE 8352
8350: GO 8509
8352: POP
// begin techs := [ 35 , 45 , 46 , 47 , 6 , 7 , 20 , 70 , 69 , 39 , 48 , 49 , 51 , 52 , 60 ] ;
8353: LD_ADDR_VAR 0 5
8357: PUSH
8358: LD_INT 35
8360: PUSH
8361: LD_INT 45
8363: PUSH
8364: LD_INT 46
8366: PUSH
8367: LD_INT 47
8369: PUSH
8370: LD_INT 6
8372: PUSH
8373: LD_INT 7
8375: PUSH
8376: LD_INT 20
8378: PUSH
8379: LD_INT 70
8381: PUSH
8382: LD_INT 69
8384: PUSH
8385: LD_INT 39
8387: PUSH
8388: LD_INT 48
8390: PUSH
8391: LD_INT 49
8393: PUSH
8394: LD_INT 51
8396: PUSH
8397: LD_INT 52
8399: PUSH
8400: LD_INT 60
8402: PUSH
8403: EMPTY
8404: LIST
8405: LIST
8406: LIST
8407: LIST
8408: LIST
8409: LIST
8410: LIST
8411: LIST
8412: LIST
8413: LIST
8414: LIST
8415: LIST
8416: LIST
8417: LIST
8418: LIST
8419: ST_TO_ADDR
// buildings := [ 0 , 2 , 3 , 4 , 6 , 7 , 8 , 10 , 15 , 16 , 17 , 20 , 23 , 26 , 27 , 29 , 30 , 31 , 32 , 42 ] ;
8420: LD_ADDR_VAR 0 6
8424: PUSH
8425: LD_INT 0
8427: PUSH
8428: LD_INT 2
8430: PUSH
8431: LD_INT 3
8433: PUSH
8434: LD_INT 4
8436: PUSH
8437: LD_INT 6
8439: PUSH
8440: LD_INT 7
8442: PUSH
8443: LD_INT 8
8445: PUSH
8446: LD_INT 10
8448: PUSH
8449: LD_INT 15
8451: PUSH
8452: LD_INT 16
8454: PUSH
8455: LD_INT 17
8457: PUSH
8458: LD_INT 20
8460: PUSH
8461: LD_INT 23
8463: PUSH
8464: LD_INT 26
8466: PUSH
8467: LD_INT 27
8469: PUSH
8470: LD_INT 29
8472: PUSH
8473: LD_INT 30
8475: PUSH
8476: LD_INT 31
8478: PUSH
8479: LD_INT 32
8481: PUSH
8482: LD_INT 42
8484: PUSH
8485: EMPTY
8486: LIST
8487: LIST
8488: LIST
8489: LIST
8490: LIST
8491: LIST
8492: LIST
8493: LIST
8494: LIST
8495: LIST
8496: LIST
8497: LIST
8498: LIST
8499: LIST
8500: LIST
8501: LIST
8502: LIST
8503: LIST
8504: LIST
8505: LIST
8506: ST_TO_ADDR
// end ; 3 :
8507: GO 8647
8509: LD_INT 3
8511: DOUBLE
8512: EQUAL
8513: IFTRUE 8517
8515: GO 8646
8517: POP
// begin techs := [ 46 , 47 , 9 , 20 , 69 , 39 , 48 , 49 , 51 , 52 , 57 ] ;
8518: LD_ADDR_VAR 0 5
8522: PUSH
8523: LD_INT 46
8525: PUSH
8526: LD_INT 47
8528: PUSH
8529: LD_INT 9
8531: PUSH
8532: LD_INT 20
8534: PUSH
8535: LD_INT 69
8537: PUSH
8538: LD_INT 39
8540: PUSH
8541: LD_INT 48
8543: PUSH
8544: LD_INT 49
8546: PUSH
8547: LD_INT 51
8549: PUSH
8550: LD_INT 52
8552: PUSH
8553: LD_INT 57
8555: PUSH
8556: EMPTY
8557: LIST
8558: LIST
8559: LIST
8560: LIST
8561: LIST
8562: LIST
8563: LIST
8564: LIST
8565: LIST
8566: LIST
8567: LIST
8568: ST_TO_ADDR
// buildings := [ 0 , 2 , 3 , 4 , 6 , 7 , 8 , 10 , 12 , 16 , 17 , 19 , 26 , 29 , 30 , 31 , 32 ] ;
8569: LD_ADDR_VAR 0 6
8573: PUSH
8574: LD_INT 0
8576: PUSH
8577: LD_INT 2
8579: PUSH
8580: LD_INT 3
8582: PUSH
8583: LD_INT 4
8585: PUSH
8586: LD_INT 6
8588: PUSH
8589: LD_INT 7
8591: PUSH
8592: LD_INT 8
8594: PUSH
8595: LD_INT 10
8597: PUSH
8598: LD_INT 12
8600: PUSH
8601: LD_INT 16
8603: PUSH
8604: LD_INT 17
8606: PUSH
8607: LD_INT 19
8609: PUSH
8610: LD_INT 26
8612: PUSH
8613: LD_INT 29
8615: PUSH
8616: LD_INT 30
8618: PUSH
8619: LD_INT 31
8621: PUSH
8622: LD_INT 32
8624: PUSH
8625: EMPTY
8626: LIST
8627: LIST
8628: LIST
8629: LIST
8630: LIST
8631: LIST
8632: LIST
8633: LIST
8634: LIST
8635: LIST
8636: LIST
8637: LIST
8638: LIST
8639: LIST
8640: LIST
8641: LIST
8642: LIST
8643: ST_TO_ADDR
// end ; end ;
8644: GO 8647
8646: POP
// reinforcement := 3 ;
8647: LD_ADDR_VAR 0 7
8651: PUSH
8652: LD_INT 3
8654: ST_TO_ADDR
// end ; 2 :
8655: GO 11017
8657: LD_INT 2
8659: DOUBLE
8660: EQUAL
8661: IFTRUE 8665
8663: GO 9281
8665: POP
// begin case nation of 1 :
8666: LD_VAR 0 2
8670: PUSH
8671: LD_INT 1
8673: DOUBLE
8674: EQUAL
8675: IFTRUE 8679
8677: GO 8856
8679: POP
// begin techs := [ 35 , 45 , 46 , 47 , 6 , 7 , 12 , 15 , 20 , 69 , 39 , 48 , 49 , 50 , 51 , 52 , 60 , 61 ] ;
8680: LD_ADDR_VAR 0 5
8684: PUSH
8685: LD_INT 35
8687: PUSH
8688: LD_INT 45
8690: PUSH
8691: LD_INT 46
8693: PUSH
8694: LD_INT 47
8696: PUSH
8697: LD_INT 6
8699: PUSH
8700: LD_INT 7
8702: PUSH
8703: LD_INT 12
8705: PUSH
8706: LD_INT 15
8708: PUSH
8709: LD_INT 20
8711: PUSH
8712: LD_INT 69
8714: PUSH
8715: LD_INT 39
8717: PUSH
8718: LD_INT 48
8720: PUSH
8721: LD_INT 49
8723: PUSH
8724: LD_INT 50
8726: PUSH
8727: LD_INT 51
8729: PUSH
8730: LD_INT 52
8732: PUSH
8733: LD_INT 60
8735: PUSH
8736: LD_INT 61
8738: PUSH
8739: EMPTY
8740: LIST
8741: LIST
8742: LIST
8743: LIST
8744: LIST
8745: LIST
8746: LIST
8747: LIST
8748: LIST
8749: LIST
8750: LIST
8751: LIST
8752: LIST
8753: LIST
8754: LIST
8755: LIST
8756: LIST
8757: LIST
8758: ST_TO_ADDR
// buildings := [ 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 10 , 15 , 16 , 17 , 19 , 20 , 26 , 27 , 29 , 30 , 31 , 32 , 36 ] ;
8759: LD_ADDR_VAR 0 6
8763: PUSH
8764: LD_INT 0
8766: PUSH
8767: LD_INT 1
8769: PUSH
8770: LD_INT 2
8772: PUSH
8773: LD_INT 3
8775: PUSH
8776: LD_INT 4
8778: PUSH
8779: LD_INT 5
8781: PUSH
8782: LD_INT 6
8784: PUSH
8785: LD_INT 7
8787: PUSH
8788: LD_INT 8
8790: PUSH
8791: LD_INT 10
8793: PUSH
8794: LD_INT 15
8796: PUSH
8797: LD_INT 16
8799: PUSH
8800: LD_INT 17
8802: PUSH
8803: LD_INT 19
8805: PUSH
8806: LD_INT 20
8808: PUSH
8809: LD_INT 26
8811: PUSH
8812: LD_INT 27
8814: PUSH
8815: LD_INT 29
8817: PUSH
8818: LD_INT 30
8820: PUSH
8821: LD_INT 31
8823: PUSH
8824: LD_INT 32
8826: PUSH
8827: LD_INT 36
8829: PUSH
8830: EMPTY
8831: LIST
8832: LIST
8833: LIST
8834: LIST
8835: LIST
8836: LIST
8837: LIST
8838: LIST
8839: LIST
8840: LIST
8841: LIST
8842: LIST
8843: LIST
8844: LIST
8845: LIST
8846: LIST
8847: LIST
8848: LIST
8849: LIST
8850: LIST
8851: LIST
8852: LIST
8853: ST_TO_ADDR
// end ; 2 :
8854: GO 9271
8856: LD_INT 2
8858: DOUBLE
8859: EQUAL
8860: IFTRUE 8864
8862: GO 9061
8864: POP
// begin techs := [ 35 , 45 , 46 , 47 , 5 , 6 , 7 , 15 , 17 , 20 , 70 , 69 , 39 , 41 , 42 , 48 , 49 , 50 , 51 , 52 , 60 , 61 , 66 ] ;
8865: LD_ADDR_VAR 0 5
8869: PUSH
8870: LD_INT 35
8872: PUSH
8873: LD_INT 45
8875: PUSH
8876: LD_INT 46
8878: PUSH
8879: LD_INT 47
8881: PUSH
8882: LD_INT 5
8884: PUSH
8885: LD_INT 6
8887: PUSH
8888: LD_INT 7
8890: PUSH
8891: LD_INT 15
8893: PUSH
8894: LD_INT 17
8896: PUSH
8897: LD_INT 20
8899: PUSH
8900: LD_INT 70
8902: PUSH
8903: LD_INT 69
8905: PUSH
8906: LD_INT 39
8908: PUSH
8909: LD_INT 41
8911: PUSH
8912: LD_INT 42
8914: PUSH
8915: LD_INT 48
8917: PUSH
8918: LD_INT 49
8920: PUSH
8921: LD_INT 50
8923: PUSH
8924: LD_INT 51
8926: PUSH
8927: LD_INT 52
8929: PUSH
8930: LD_INT 60
8932: PUSH
8933: LD_INT 61
8935: PUSH
8936: LD_INT 66
8938: PUSH
8939: EMPTY
8940: LIST
8941: LIST
8942: LIST
8943: LIST
8944: LIST
8945: LIST
8946: LIST
8947: LIST
8948: LIST
8949: LIST
8950: LIST
8951: LIST
8952: LIST
8953: LIST
8954: LIST
8955: LIST
8956: LIST
8957: LIST
8958: LIST
8959: LIST
8960: LIST
8961: LIST
8962: LIST
8963: ST_TO_ADDR
// buildings := [ 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 10 , 13 , 15 , 16 , 17 , 20 , 23 , 26 , 27 , 29 , 30 , 31 , 32 ] ;
8964: LD_ADDR_VAR 0 6
8968: PUSH
8969: LD_INT 0
8971: PUSH
8972: LD_INT 1
8974: PUSH
8975: LD_INT 2
8977: PUSH
8978: LD_INT 3
8980: PUSH
8981: LD_INT 4
8983: PUSH
8984: LD_INT 5
8986: PUSH
8987: LD_INT 6
8989: PUSH
8990: LD_INT 7
8992: PUSH
8993: LD_INT 8
8995: PUSH
8996: LD_INT 10
8998: PUSH
8999: LD_INT 13
9001: PUSH
9002: LD_INT 15
9004: PUSH
9005: LD_INT 16
9007: PUSH
9008: LD_INT 17
9010: PUSH
9011: LD_INT 20
9013: PUSH
9014: LD_INT 23
9016: PUSH
9017: LD_INT 26
9019: PUSH
9020: LD_INT 27
9022: PUSH
9023: LD_INT 29
9025: PUSH
9026: LD_INT 30
9028: PUSH
9029: LD_INT 31
9031: PUSH
9032: LD_INT 32
9034: PUSH
9035: EMPTY
9036: LIST
9037: LIST
9038: LIST
9039: LIST
9040: LIST
9041: LIST
9042: LIST
9043: LIST
9044: LIST
9045: LIST
9046: LIST
9047: LIST
9048: LIST
9049: LIST
9050: LIST
9051: LIST
9052: LIST
9053: LIST
9054: LIST
9055: LIST
9056: LIST
9057: LIST
9058: ST_TO_ADDR
// end ; 3 :
9059: GO 9271
9061: LD_INT 3
9063: DOUBLE
9064: EQUAL
9065: IFTRUE 9069
9067: GO 9270
9069: POP
// begin techs := [ 46 , 47 , 9 , 20 , 21 , 22 , 30 , 32 , 27 , 69 , 39 , 44 , 48 , 49 , 50 , 51 , 52 , 54 , 57 , 58 , 63 ] ;
9070: LD_ADDR_VAR 0 5
9074: PUSH
9075: LD_INT 46
9077: PUSH
9078: LD_INT 47
9080: PUSH
9081: LD_INT 9
9083: PUSH
9084: LD_INT 20
9086: PUSH
9087: LD_INT 21
9089: PUSH
9090: LD_INT 22
9092: PUSH
9093: LD_INT 30
9095: PUSH
9096: LD_INT 32
9098: PUSH
9099: LD_INT 27
9101: PUSH
9102: LD_INT 69
9104: PUSH
9105: LD_INT 39
9107: PUSH
9108: LD_INT 44
9110: PUSH
9111: LD_INT 48
9113: PUSH
9114: LD_INT 49
9116: PUSH
9117: LD_INT 50
9119: PUSH
9120: LD_INT 51
9122: PUSH
9123: LD_INT 52
9125: PUSH
9126: LD_INT 54
9128: PUSH
9129: LD_INT 57
9131: PUSH
9132: LD_INT 58
9134: PUSH
9135: LD_INT 63
9137: PUSH
9138: EMPTY
9139: LIST
9140: LIST
9141: LIST
9142: LIST
9143: LIST
9144: LIST
9145: LIST
9146: LIST
9147: LIST
9148: LIST
9149: LIST
9150: LIST
9151: LIST
9152: LIST
9153: LIST
9154: LIST
9155: LIST
9156: LIST
9157: LIST
9158: LIST
9159: LIST
9160: ST_TO_ADDR
// buildings := [ 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 10 , 11 , 12 , 14 , 16 , 17 , 19 , 21 , 24 , 26 , 28 , 29 , 30 , 31 , 32 , 33 ] ;
9161: LD_ADDR_VAR 0 6
9165: PUSH
9166: LD_INT 0
9168: PUSH
9169: LD_INT 1
9171: PUSH
9172: LD_INT 2
9174: PUSH
9175: LD_INT 3
9177: PUSH
9178: LD_INT 4
9180: PUSH
9181: LD_INT 5
9183: PUSH
9184: LD_INT 6
9186: PUSH
9187: LD_INT 7
9189: PUSH
9190: LD_INT 8
9192: PUSH
9193: LD_INT 10
9195: PUSH
9196: LD_INT 11
9198: PUSH
9199: LD_INT 12
9201: PUSH
9202: LD_INT 14
9204: PUSH
9205: LD_INT 16
9207: PUSH
9208: LD_INT 17
9210: PUSH
9211: LD_INT 19
9213: PUSH
9214: LD_INT 21
9216: PUSH
9217: LD_INT 24
9219: PUSH
9220: LD_INT 26
9222: PUSH
9223: LD_INT 28
9225: PUSH
9226: LD_INT 29
9228: PUSH
9229: LD_INT 30
9231: PUSH
9232: LD_INT 31
9234: PUSH
9235: LD_INT 32
9237: PUSH
9238: LD_INT 33
9240: PUSH
9241: EMPTY
9242: LIST
9243: LIST
9244: LIST
9245: LIST
9246: LIST
9247: LIST
9248: LIST
9249: LIST
9250: LIST
9251: LIST
9252: LIST
9253: LIST
9254: LIST
9255: LIST
9256: LIST
9257: LIST
9258: LIST
9259: LIST
9260: LIST
9261: LIST
9262: LIST
9263: LIST
9264: LIST
9265: LIST
9266: LIST
9267: ST_TO_ADDR
// end ; end ;
9268: GO 9271
9270: POP
// reinforcement := 4 ;
9271: LD_ADDR_VAR 0 7
9275: PUSH
9276: LD_INT 4
9278: ST_TO_ADDR
// end ; 3 :
9279: GO 11017
9281: LD_INT 3
9283: DOUBLE
9284: EQUAL
9285: IFTRUE 9289
9287: GO 10113
9289: POP
// begin case nation of 1 :
9290: LD_VAR 0 2
9294: PUSH
9295: LD_INT 1
9297: DOUBLE
9298: EQUAL
9299: IFTRUE 9303
9301: GO 9572
9303: POP
// begin techs := [ 35 , 45 , 46 , 47 , 6 , 7 , 12 , 13 , 10 , 15 , 16 , 20 , 21 , 22 , 32 , 27 , 69 , 39 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 57 , 58 , 59 , 60 , 61 , 62 ] ;
9304: LD_ADDR_VAR 0 5
9308: PUSH
9309: LD_INT 35
9311: PUSH
9312: LD_INT 45
9314: PUSH
9315: LD_INT 46
9317: PUSH
9318: LD_INT 47
9320: PUSH
9321: LD_INT 6
9323: PUSH
9324: LD_INT 7
9326: PUSH
9327: LD_INT 12
9329: PUSH
9330: LD_INT 13
9332: PUSH
9333: LD_INT 10
9335: PUSH
9336: LD_INT 15
9338: PUSH
9339: LD_INT 16
9341: PUSH
9342: LD_INT 20
9344: PUSH
9345: LD_INT 21
9347: PUSH
9348: LD_INT 22
9350: PUSH
9351: LD_INT 32
9353: PUSH
9354: LD_INT 27
9356: PUSH
9357: LD_INT 69
9359: PUSH
9360: LD_INT 39
9362: PUSH
9363: LD_INT 40
9365: PUSH
9366: LD_INT 48
9368: PUSH
9369: LD_INT 49
9371: PUSH
9372: LD_INT 50
9374: PUSH
9375: LD_INT 51
9377: PUSH
9378: LD_INT 52
9380: PUSH
9381: LD_INT 53
9383: PUSH
9384: LD_INT 54
9386: PUSH
9387: LD_INT 55
9389: PUSH
9390: LD_INT 57
9392: PUSH
9393: LD_INT 58
9395: PUSH
9396: LD_INT 59
9398: PUSH
9399: LD_INT 60
9401: PUSH
9402: LD_INT 61
9404: PUSH
9405: LD_INT 62
9407: PUSH
9408: EMPTY
9409: LIST
9410: LIST
9411: LIST
9412: LIST
9413: LIST
9414: LIST
9415: LIST
9416: LIST
9417: LIST
9418: LIST
9419: LIST
9420: LIST
9421: LIST
9422: LIST
9423: LIST
9424: LIST
9425: LIST
9426: LIST
9427: LIST
9428: LIST
9429: LIST
9430: LIST
9431: LIST
9432: LIST
9433: LIST
9434: LIST
9435: LIST
9436: LIST
9437: LIST
9438: LIST
9439: LIST
9440: LIST
9441: LIST
9442: ST_TO_ADDR
// buildings := [ 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 10 , 11 , 12 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 36 ] ;
9443: LD_ADDR_VAR 0 6
9447: PUSH
9448: LD_INT 0
9450: PUSH
9451: LD_INT 1
9453: PUSH
9454: LD_INT 2
9456: PUSH
9457: LD_INT 3
9459: PUSH
9460: LD_INT 4
9462: PUSH
9463: LD_INT 5
9465: PUSH
9466: LD_INT 6
9468: PUSH
9469: LD_INT 7
9471: PUSH
9472: LD_INT 8
9474: PUSH
9475: LD_INT 10
9477: PUSH
9478: LD_INT 11
9480: PUSH
9481: LD_INT 12
9483: PUSH
9484: LD_INT 15
9486: PUSH
9487: LD_INT 16
9489: PUSH
9490: LD_INT 17
9492: PUSH
9493: LD_INT 18
9495: PUSH
9496: LD_INT 19
9498: PUSH
9499: LD_INT 20
9501: PUSH
9502: LD_INT 21
9504: PUSH
9505: LD_INT 24
9507: PUSH
9508: LD_INT 25
9510: PUSH
9511: LD_INT 26
9513: PUSH
9514: LD_INT 27
9516: PUSH
9517: LD_INT 28
9519: PUSH
9520: LD_INT 29
9522: PUSH
9523: LD_INT 30
9525: PUSH
9526: LD_INT 31
9528: PUSH
9529: LD_INT 32
9531: PUSH
9532: LD_INT 33
9534: PUSH
9535: LD_INT 36
9537: PUSH
9538: EMPTY
9539: LIST
9540: LIST
9541: LIST
9542: LIST
9543: LIST
9544: LIST
9545: LIST
9546: LIST
9547: LIST
9548: LIST
9549: LIST
9550: LIST
9551: LIST
9552: LIST
9553: LIST
9554: LIST
9555: LIST
9556: LIST
9557: LIST
9558: LIST
9559: LIST
9560: LIST
9561: LIST
9562: LIST
9563: LIST
9564: LIST
9565: LIST
9566: LIST
9567: LIST
9568: LIST
9569: ST_TO_ADDR
// end ; 2 :
9570: GO 10103
9572: LD_INT 2
9574: DOUBLE
9575: EQUAL
9576: IFTRUE 9580
9578: GO 9845
9580: POP
// begin techs := [ 35 , 45 , 46 , 47 , 5 , 6 , 7 , 8 , 15 , 18 , 17 , 20 , 21 , 22 , 26 , 70 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 60 , 61 , 62 , 66 , 67 , 68 ] ;
9581: LD_ADDR_VAR 0 5
9585: PUSH
9586: LD_INT 35
9588: PUSH
9589: LD_INT 45
9591: PUSH
9592: LD_INT 46
9594: PUSH
9595: LD_INT 47
9597: PUSH
9598: LD_INT 5
9600: PUSH
9601: LD_INT 6
9603: PUSH
9604: LD_INT 7
9606: PUSH
9607: LD_INT 8
9609: PUSH
9610: LD_INT 15
9612: PUSH
9613: LD_INT 18
9615: PUSH
9616: LD_INT 17
9618: PUSH
9619: LD_INT 20
9621: PUSH
9622: LD_INT 21
9624: PUSH
9625: LD_INT 22
9627: PUSH
9628: LD_INT 26
9630: PUSH
9631: LD_INT 70
9633: PUSH
9634: LD_INT 69
9636: PUSH
9637: LD_INT 39
9639: PUSH
9640: LD_INT 40
9642: PUSH
9643: LD_INT 41
9645: PUSH
9646: LD_INT 42
9648: PUSH
9649: LD_INT 43
9651: PUSH
9652: LD_INT 48
9654: PUSH
9655: LD_INT 49
9657: PUSH
9658: LD_INT 50
9660: PUSH
9661: LD_INT 51
9663: PUSH
9664: LD_INT 52
9666: PUSH
9667: LD_INT 53
9669: PUSH
9670: LD_INT 54
9672: PUSH
9673: LD_INT 55
9675: PUSH
9676: LD_INT 60
9678: PUSH
9679: LD_INT 61
9681: PUSH
9682: LD_INT 62
9684: PUSH
9685: LD_INT 66
9687: PUSH
9688: LD_INT 67
9690: PUSH
9691: LD_INT 68
9693: PUSH
9694: EMPTY
9695: LIST
9696: LIST
9697: LIST
9698: LIST
9699: LIST
9700: LIST
9701: LIST
9702: LIST
9703: LIST
9704: LIST
9705: LIST
9706: LIST
9707: LIST
9708: LIST
9709: LIST
9710: LIST
9711: LIST
9712: LIST
9713: LIST
9714: LIST
9715: LIST
9716: LIST
9717: LIST
9718: LIST
9719: LIST
9720: LIST
9721: LIST
9722: LIST
9723: LIST
9724: LIST
9725: LIST
9726: LIST
9727: LIST
9728: LIST
9729: LIST
9730: LIST
9731: ST_TO_ADDR
// buildings := [ 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 10 , 11 , 13 , 15 , 16 , 17 , 18 , 20 , 21 , 23 , 26 , 27 , 28 , 29 , 30 , 31 , 32 ] ;
9732: LD_ADDR_VAR 0 6
9736: PUSH
9737: LD_INT 0
9739: PUSH
9740: LD_INT 1
9742: PUSH
9743: LD_INT 2
9745: PUSH
9746: LD_INT 3
9748: PUSH
9749: LD_INT 4
9751: PUSH
9752: LD_INT 5
9754: PUSH
9755: LD_INT 6
9757: PUSH
9758: LD_INT 7
9760: PUSH
9761: LD_INT 8
9763: PUSH
9764: LD_INT 10
9766: PUSH
9767: LD_INT 11
9769: PUSH
9770: LD_INT 13
9772: PUSH
9773: LD_INT 15
9775: PUSH
9776: LD_INT 16
9778: PUSH
9779: LD_INT 17
9781: PUSH
9782: LD_INT 18
9784: PUSH
9785: LD_INT 20
9787: PUSH
9788: LD_INT 21
9790: PUSH
9791: LD_INT 23
9793: PUSH
9794: LD_INT 26
9796: PUSH
9797: LD_INT 27
9799: PUSH
9800: LD_INT 28
9802: PUSH
9803: LD_INT 29
9805: PUSH
9806: LD_INT 30
9808: PUSH
9809: LD_INT 31
9811: PUSH
9812: LD_INT 32
9814: PUSH
9815: EMPTY
9816: LIST
9817: LIST
9818: LIST
9819: LIST
9820: LIST
9821: LIST
9822: LIST
9823: LIST
9824: LIST
9825: LIST
9826: LIST
9827: LIST
9828: LIST
9829: LIST
9830: LIST
9831: LIST
9832: LIST
9833: LIST
9834: LIST
9835: LIST
9836: LIST
9837: LIST
9838: LIST
9839: LIST
9840: LIST
9841: LIST
9842: ST_TO_ADDR
// end ; 3 :
9843: GO 10103
9845: LD_INT 3
9847: DOUBLE
9848: EQUAL
9849: IFTRUE 9853
9851: GO 10102
9853: POP
// begin techs := [ 46 , 47 , 9 , 20 , 19 , 21 , 22 , 28 , 29 , 30 , 37 , 32 , 27 , 69 , 39 , 34 , 40 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 ] ;
9854: LD_ADDR_VAR 0 5
9858: PUSH
9859: LD_INT 46
9861: PUSH
9862: LD_INT 47
9864: PUSH
9865: LD_INT 9
9867: PUSH
9868: LD_INT 20
9870: PUSH
9871: LD_INT 19
9873: PUSH
9874: LD_INT 21
9876: PUSH
9877: LD_INT 22
9879: PUSH
9880: LD_INT 28
9882: PUSH
9883: LD_INT 29
9885: PUSH
9886: LD_INT 30
9888: PUSH
9889: LD_INT 37
9891: PUSH
9892: LD_INT 32
9894: PUSH
9895: LD_INT 27
9897: PUSH
9898: LD_INT 69
9900: PUSH
9901: LD_INT 39
9903: PUSH
9904: LD_INT 34
9906: PUSH
9907: LD_INT 40
9909: PUSH
9910: LD_INT 44
9912: PUSH
9913: LD_INT 48
9915: PUSH
9916: LD_INT 49
9918: PUSH
9919: LD_INT 50
9921: PUSH
9922: LD_INT 51
9924: PUSH
9925: LD_INT 52
9927: PUSH
9928: LD_INT 53
9930: PUSH
9931: LD_INT 54
9933: PUSH
9934: LD_INT 55
9936: PUSH
9937: LD_INT 56
9939: PUSH
9940: LD_INT 57
9942: PUSH
9943: LD_INT 58
9945: PUSH
9946: LD_INT 59
9948: PUSH
9949: LD_INT 63
9951: PUSH
9952: LD_INT 64
9954: PUSH
9955: EMPTY
9956: LIST
9957: LIST
9958: LIST
9959: LIST
9960: LIST
9961: LIST
9962: LIST
9963: LIST
9964: LIST
9965: LIST
9966: LIST
9967: LIST
9968: LIST
9969: LIST
9970: LIST
9971: LIST
9972: LIST
9973: LIST
9974: LIST
9975: LIST
9976: LIST
9977: LIST
9978: LIST
9979: LIST
9980: LIST
9981: LIST
9982: LIST
9983: LIST
9984: LIST
9985: LIST
9986: LIST
9987: LIST
9988: ST_TO_ADDR
// buildings := [ 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 10 , 11 , 12 , 14 , 16 , 17 , 18 , 19 , 21 , 24 , 26 , 28 , 29 , 30 , 31 , 32 , 33 ] ;
9989: LD_ADDR_VAR 0 6
9993: PUSH
9994: LD_INT 0
9996: PUSH
9997: LD_INT 1
9999: PUSH
10000: LD_INT 2
10002: PUSH
10003: LD_INT 3
10005: PUSH
10006: LD_INT 4
10008: PUSH
10009: LD_INT 5
10011: PUSH
10012: LD_INT 6
10014: PUSH
10015: LD_INT 7
10017: PUSH
10018: LD_INT 8
10020: PUSH
10021: LD_INT 10
10023: PUSH
10024: LD_INT 11
10026: PUSH
10027: LD_INT 12
10029: PUSH
10030: LD_INT 14
10032: PUSH
10033: LD_INT 16
10035: PUSH
10036: LD_INT 17
10038: PUSH
10039: LD_INT 18
10041: PUSH
10042: LD_INT 19
10044: PUSH
10045: LD_INT 21
10047: PUSH
10048: LD_INT 24
10050: PUSH
10051: LD_INT 26
10053: PUSH
10054: LD_INT 28
10056: PUSH
10057: LD_INT 29
10059: PUSH
10060: LD_INT 30
10062: PUSH
10063: LD_INT 31
10065: PUSH
10066: LD_INT 32
10068: PUSH
10069: LD_INT 33
10071: PUSH
10072: EMPTY
10073: LIST
10074: LIST
10075: LIST
10076: LIST
10077: LIST
10078: LIST
10079: LIST
10080: LIST
10081: LIST
10082: LIST
10083: LIST
10084: LIST
10085: LIST
10086: LIST
10087: LIST
10088: LIST
10089: LIST
10090: LIST
10091: LIST
10092: LIST
10093: LIST
10094: LIST
10095: LIST
10096: LIST
10097: LIST
10098: LIST
10099: ST_TO_ADDR
// end ; end ;
10100: GO 10103
10102: POP
// reinforcement := 4 ;
10103: LD_ADDR_VAR 0 7
10107: PUSH
10108: LD_INT 4
10110: ST_TO_ADDR
// end ; 4 :
10111: GO 11017
10113: LD_INT 4
10115: DOUBLE
10116: EQUAL
10117: IFTRUE 10121
10119: GO 11016
10121: POP
// begin case nation of 1 :
10122: LD_VAR 0 2
10126: PUSH
10127: LD_INT 1
10129: DOUBLE
10130: EQUAL
10131: IFTRUE 10135
10133: GO 10424
10135: POP
// begin techs := [ 35 , 45 , 46 , 47 , 6 , 7 , 12 , 13 , 10 , 14 , 15 , 16 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 ] ;
10136: LD_ADDR_VAR 0 5
10140: PUSH
10141: LD_INT 35
10143: PUSH
10144: LD_INT 45
10146: PUSH
10147: LD_INT 46
10149: PUSH
10150: LD_INT 47
10152: PUSH
10153: LD_INT 6
10155: PUSH
10156: LD_INT 7
10158: PUSH
10159: LD_INT 12
10161: PUSH
10162: LD_INT 13
10164: PUSH
10165: LD_INT 10
10167: PUSH
10168: LD_INT 14
10170: PUSH
10171: LD_INT 15
10173: PUSH
10174: LD_INT 16
10176: PUSH
10177: LD_INT 20
10179: PUSH
10180: LD_INT 21
10182: PUSH
10183: LD_INT 22
10185: PUSH
10186: LD_INT 25
10188: PUSH
10189: LD_INT 32
10191: PUSH
10192: LD_INT 27
10194: PUSH
10195: LD_INT 36
10197: PUSH
10198: LD_INT 69
10200: PUSH
10201: LD_INT 39
10203: PUSH
10204: LD_INT 34
10206: PUSH
10207: LD_INT 40
10209: PUSH
10210: LD_INT 48
10212: PUSH
10213: LD_INT 49
10215: PUSH
10216: LD_INT 50
10218: PUSH
10219: LD_INT 51
10221: PUSH
10222: LD_INT 52
10224: PUSH
10225: LD_INT 53
10227: PUSH
10228: LD_INT 54
10230: PUSH
10231: LD_INT 55
10233: PUSH
10234: LD_INT 56
10236: PUSH
10237: LD_INT 57
10239: PUSH
10240: LD_INT 58
10242: PUSH
10243: LD_INT 59
10245: PUSH
10246: LD_INT 60
10248: PUSH
10249: LD_INT 61
10251: PUSH
10252: LD_INT 62
10254: PUSH
10255: EMPTY
10256: LIST
10257: LIST
10258: LIST
10259: LIST
10260: LIST
10261: LIST
10262: LIST
10263: LIST
10264: LIST
10265: LIST
10266: LIST
10267: LIST
10268: LIST
10269: LIST
10270: LIST
10271: LIST
10272: LIST
10273: LIST
10274: LIST
10275: LIST
10276: LIST
10277: LIST
10278: LIST
10279: LIST
10280: LIST
10281: LIST
10282: LIST
10283: LIST
10284: LIST
10285: LIST
10286: LIST
10287: LIST
10288: LIST
10289: LIST
10290: LIST
10291: LIST
10292: LIST
10293: LIST
10294: ST_TO_ADDR
// buildings := [ 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 10 , 11 , 12 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 36 ] ;
10295: LD_ADDR_VAR 0 6
10299: PUSH
10300: LD_INT 0
10302: PUSH
10303: LD_INT 1
10305: PUSH
10306: LD_INT 2
10308: PUSH
10309: LD_INT 3
10311: PUSH
10312: LD_INT 4
10314: PUSH
10315: LD_INT 5
10317: PUSH
10318: LD_INT 6
10320: PUSH
10321: LD_INT 7
10323: PUSH
10324: LD_INT 8
10326: PUSH
10327: LD_INT 10
10329: PUSH
10330: LD_INT 11
10332: PUSH
10333: LD_INT 12
10335: PUSH
10336: LD_INT 15
10338: PUSH
10339: LD_INT 16
10341: PUSH
10342: LD_INT 17
10344: PUSH
10345: LD_INT 18
10347: PUSH
10348: LD_INT 19
10350: PUSH
10351: LD_INT 20
10353: PUSH
10354: LD_INT 21
10356: PUSH
10357: LD_INT 24
10359: PUSH
10360: LD_INT 25
10362: PUSH
10363: LD_INT 26
10365: PUSH
10366: LD_INT 27
10368: PUSH
10369: LD_INT 28
10371: PUSH
10372: LD_INT 29
10374: PUSH
10375: LD_INT 30
10377: PUSH
10378: LD_INT 31
10380: PUSH
10381: LD_INT 32
10383: PUSH
10384: LD_INT 33
10386: PUSH
10387: LD_INT 36
10389: PUSH
10390: EMPTY
10391: LIST
10392: LIST
10393: LIST
10394: LIST
10395: LIST
10396: LIST
10397: LIST
10398: LIST
10399: LIST
10400: LIST
10401: LIST
10402: LIST
10403: LIST
10404: LIST
10405: LIST
10406: LIST
10407: LIST
10408: LIST
10409: LIST
10410: LIST
10411: LIST
10412: LIST
10413: LIST
10414: LIST
10415: LIST
10416: LIST
10417: LIST
10418: LIST
10419: LIST
10420: LIST
10421: ST_TO_ADDR
// end ; 2 :
10422: GO 10999
10424: LD_INT 2
10426: DOUBLE
10427: EQUAL
10428: IFTRUE 10432
10430: GO 10705
10432: POP
// begin techs := [ 35 , 45 , 46 , 47 , 5 , 6 , 7 , 8 , 15 , 18 , 17 , 20 , 21 , 22 , 25 , 26 , 70 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 ] ;
10433: LD_ADDR_VAR 0 5
10437: PUSH
10438: LD_INT 35
10440: PUSH
10441: LD_INT 45
10443: PUSH
10444: LD_INT 46
10446: PUSH
10447: LD_INT 47
10449: PUSH
10450: LD_INT 5
10452: PUSH
10453: LD_INT 6
10455: PUSH
10456: LD_INT 7
10458: PUSH
10459: LD_INT 8
10461: PUSH
10462: LD_INT 15
10464: PUSH
10465: LD_INT 18
10467: PUSH
10468: LD_INT 17
10470: PUSH
10471: LD_INT 20
10473: PUSH
10474: LD_INT 21
10476: PUSH
10477: LD_INT 22
10479: PUSH
10480: LD_INT 25
10482: PUSH
10483: LD_INT 26
10485: PUSH
10486: LD_INT 70
10488: PUSH
10489: LD_INT 69
10491: PUSH
10492: LD_INT 39
10494: PUSH
10495: LD_INT 40
10497: PUSH
10498: LD_INT 41
10500: PUSH
10501: LD_INT 42
10503: PUSH
10504: LD_INT 43
10506: PUSH
10507: LD_INT 48
10509: PUSH
10510: LD_INT 49
10512: PUSH
10513: LD_INT 50
10515: PUSH
10516: LD_INT 51
10518: PUSH
10519: LD_INT 52
10521: PUSH
10522: LD_INT 53
10524: PUSH
10525: LD_INT 54
10527: PUSH
10528: LD_INT 55
10530: PUSH
10531: LD_INT 56
10533: PUSH
10534: LD_INT 60
10536: PUSH
10537: LD_INT 61
10539: PUSH
10540: LD_INT 62
10542: PUSH
10543: LD_INT 66
10545: PUSH
10546: LD_INT 67
10548: PUSH
10549: LD_INT 68
10551: PUSH
10552: EMPTY
10553: LIST
10554: LIST
10555: LIST
10556: LIST
10557: LIST
10558: LIST
10559: LIST
10560: LIST
10561: LIST
10562: LIST
10563: LIST
10564: LIST
10565: LIST
10566: LIST
10567: LIST
10568: LIST
10569: LIST
10570: LIST
10571: LIST
10572: LIST
10573: LIST
10574: LIST
10575: LIST
10576: LIST
10577: LIST
10578: LIST
10579: LIST
10580: LIST
10581: LIST
10582: LIST
10583: LIST
10584: LIST
10585: LIST
10586: LIST
10587: LIST
10588: LIST
10589: LIST
10590: LIST
10591: ST_TO_ADDR
// buildings := [ 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 10 , 11 , 13 , 15 , 16 , 17 , 18 , 20 , 21 , 23 , 26 , 27 , 28 , 29 , 30 , 31 , 32 ] ;
10592: LD_ADDR_VAR 0 6
10596: PUSH
10597: LD_INT 0
10599: PUSH
10600: LD_INT 1
10602: PUSH
10603: LD_INT 2
10605: PUSH
10606: LD_INT 3
10608: PUSH
10609: LD_INT 4
10611: PUSH
10612: LD_INT 5
10614: PUSH
10615: LD_INT 6
10617: PUSH
10618: LD_INT 7
10620: PUSH
10621: LD_INT 8
10623: PUSH
10624: LD_INT 10
10626: PUSH
10627: LD_INT 11
10629: PUSH
10630: LD_INT 13
10632: PUSH
10633: LD_INT 15
10635: PUSH
10636: LD_INT 16
10638: PUSH
10639: LD_INT 17
10641: PUSH
10642: LD_INT 18
10644: PUSH
10645: LD_INT 20
10647: PUSH
10648: LD_INT 21
10650: PUSH
10651: LD_INT 23
10653: PUSH
10654: LD_INT 26
10656: PUSH
10657: LD_INT 27
10659: PUSH
10660: LD_INT 28
10662: PUSH
10663: LD_INT 29
10665: PUSH
10666: LD_INT 30
10668: PUSH
10669: LD_INT 31
10671: PUSH
10672: LD_INT 32
10674: PUSH
10675: EMPTY
10676: LIST
10677: LIST
10678: LIST
10679: LIST
10680: LIST
10681: LIST
10682: LIST
10683: LIST
10684: LIST
10685: LIST
10686: LIST
10687: LIST
10688: LIST
10689: LIST
10690: LIST
10691: LIST
10692: LIST
10693: LIST
10694: LIST
10695: LIST
10696: LIST
10697: LIST
10698: LIST
10699: LIST
10700: LIST
10701: LIST
10702: ST_TO_ADDR
// end ; 3 :
10703: GO 10999
10705: LD_INT 3
10707: DOUBLE
10708: EQUAL
10709: IFTRUE 10713
10711: GO 10998
10713: POP
// begin techs := [ 46 , 47 , 9 , 20 , 19 , 21 , 22 , 23 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 ] ;
10714: LD_ADDR_VAR 0 5
10718: PUSH
10719: LD_INT 46
10721: PUSH
10722: LD_INT 47
10724: PUSH
10725: LD_INT 9
10727: PUSH
10728: LD_INT 20
10730: PUSH
10731: LD_INT 19
10733: PUSH
10734: LD_INT 21
10736: PUSH
10737: LD_INT 22
10739: PUSH
10740: LD_INT 23
10742: PUSH
10743: LD_INT 25
10745: PUSH
10746: LD_INT 28
10748: PUSH
10749: LD_INT 29
10751: PUSH
10752: LD_INT 30
10754: PUSH
10755: LD_INT 31
10757: PUSH
10758: LD_INT 37
10760: PUSH
10761: LD_INT 38
10763: PUSH
10764: LD_INT 32
10766: PUSH
10767: LD_INT 27
10769: PUSH
10770: LD_INT 33
10772: PUSH
10773: LD_INT 69
10775: PUSH
10776: LD_INT 39
10778: PUSH
10779: LD_INT 34
10781: PUSH
10782: LD_INT 40
10784: PUSH
10785: LD_INT 71
10787: PUSH
10788: LD_INT 44
10790: PUSH
10791: LD_INT 48
10793: PUSH
10794: LD_INT 49
10796: PUSH
10797: LD_INT 50
10799: PUSH
10800: LD_INT 51
10802: PUSH
10803: LD_INT 52
10805: PUSH
10806: LD_INT 53
10808: PUSH
10809: LD_INT 54
10811: PUSH
10812: LD_INT 55
10814: PUSH
10815: LD_INT 56
10817: PUSH
10818: LD_INT 57
10820: PUSH
10821: LD_INT 58
10823: PUSH
10824: LD_INT 59
10826: PUSH
10827: LD_INT 63
10829: PUSH
10830: LD_INT 64
10832: PUSH
10833: LD_INT 65
10835: PUSH
10836: EMPTY
10837: LIST
10838: LIST
10839: LIST
10840: LIST
10841: LIST
10842: LIST
10843: LIST
10844: LIST
10845: LIST
10846: LIST
10847: LIST
10848: LIST
10849: LIST
10850: LIST
10851: LIST
10852: LIST
10853: LIST
10854: LIST
10855: LIST
10856: LIST
10857: LIST
10858: LIST
10859: LIST
10860: LIST
10861: LIST
10862: LIST
10863: LIST
10864: LIST
10865: LIST
10866: LIST
10867: LIST
10868: LIST
10869: LIST
10870: LIST
10871: LIST
10872: LIST
10873: LIST
10874: LIST
10875: LIST
10876: ST_TO_ADDR
// buildings := [ 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 10 , 11 , 12 , 14 , 16 , 17 , 18 , 19 , 21 , 24 , 26 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 37 ] ;
10877: LD_ADDR_VAR 0 6
10881: PUSH
10882: LD_INT 0
10884: PUSH
10885: LD_INT 1
10887: PUSH
10888: LD_INT 2
10890: PUSH
10891: LD_INT 3
10893: PUSH
10894: LD_INT 4
10896: PUSH
10897: LD_INT 5
10899: PUSH
10900: LD_INT 6
10902: PUSH
10903: LD_INT 7
10905: PUSH
10906: LD_INT 8
10908: PUSH
10909: LD_INT 10
10911: PUSH
10912: LD_INT 11
10914: PUSH
10915: LD_INT 12
10917: PUSH
10918: LD_INT 14
10920: PUSH
10921: LD_INT 16
10923: PUSH
10924: LD_INT 17
10926: PUSH
10927: LD_INT 18
10929: PUSH
10930: LD_INT 19
10932: PUSH
10933: LD_INT 21
10935: PUSH
10936: LD_INT 24
10938: PUSH
10939: LD_INT 26
10941: PUSH
10942: LD_INT 28
10944: PUSH
10945: LD_INT 29
10947: PUSH
10948: LD_INT 30
10950: PUSH
10951: LD_INT 31
10953: PUSH
10954: LD_INT 32
10956: PUSH
10957: LD_INT 33
10959: PUSH
10960: LD_INT 34
10962: PUSH
10963: LD_INT 37
10965: PUSH
10966: EMPTY
10967: LIST
10968: LIST
10969: LIST
10970: LIST
10971: LIST
10972: LIST
10973: LIST
10974: LIST
10975: LIST
10976: LIST
10977: LIST
10978: LIST
10979: LIST
10980: LIST
10981: LIST
10982: LIST
10983: LIST
10984: LIST
10985: LIST
10986: LIST
10987: LIST
10988: LIST
10989: LIST
10990: LIST
10991: LIST
10992: LIST
10993: LIST
10994: LIST
10995: ST_TO_ADDR
// end ; end ;
10996: GO 10999
10998: POP
// reinforcement := 5 ;
10999: LD_ADDR_VAR 0 7
11003: PUSH
11004: LD_INT 5
11006: ST_TO_ADDR
// ToLua ( LUA_SideTechMax(); ) ;
11007: LD_STRING LUA_SideTechMax();
11009: PPUSH
11010: CALL_OW 559
// end ; end ;
11014: GO 11017
11016: POP
// side_reinforcement_cap := Replace ( side_reinforcement_cap , side , reinforcement ) ;
11017: LD_ADDR_EXP 58
11021: PUSH
11022: LD_EXP 58
11026: PPUSH
11027: LD_VAR 0 3
11031: PPUSH
11032: LD_VAR 0 7
11036: PPUSH
11037: CALL_OW 1
11041: ST_TO_ADDR
// TechUnlock ( techs , side , 1 ) ;
11042: LD_VAR 0 5
11046: PPUSH
11047: LD_VAR 0 3
11051: PPUSH
11052: LD_INT 1
11054: PPUSH
11055: CALL 7183 0 3
// BuildingUnlock ( buildings , side , 1 ) ;
11059: LD_VAR 0 6
11063: PPUSH
11064: LD_VAR 0 3
11068: PPUSH
11069: LD_INT 1
11071: PPUSH
11072: CALL 7248 0 3
// end ;
11076: LD_VAR 0 4
11080: RET
// export function FillUpVehicles ( vehicle , crates , oil , siberite ) ; var occupied ; begin
11081: LD_INT 0
11083: PPUSH
11084: PPUSH
// if crates >= 100 then
11085: LD_VAR 0 2
11089: PUSH
11090: LD_INT 100
11092: GREATEREQUAL
11093: IFFALSE 11126
// begin AddCargo ( vehicle , mat_cans , 100 ) ;
11095: LD_VAR 0 1
11099: PPUSH
11100: LD_INT 1
11102: PPUSH
11103: LD_INT 100
11105: PPUSH
11106: CALL_OW 291
// crates := crates - 100 ;
11110: LD_ADDR_VAR 0 2
11114: PUSH
11115: LD_VAR 0 2
11119: PUSH
11120: LD_INT 100
11122: MINUS
11123: ST_TO_ADDR
// end else
11124: GO 11327
// begin AddCargo ( vehicle , mat_cans , crates ) ;
11126: LD_VAR 0 1
11130: PPUSH
11131: LD_INT 1
11133: PPUSH
11134: LD_VAR 0 2
11138: PPUSH
11139: CALL_OW 291
// occupied := crates ;
11143: LD_ADDR_VAR 0 6
11147: PUSH
11148: LD_VAR 0 2
11152: ST_TO_ADDR
// crates := 0 ;
11153: LD_ADDR_VAR 0 2
11157: PUSH
11158: LD_INT 0
11160: ST_TO_ADDR
// if oil >= 100 then
11161: LD_VAR 0 3
11165: PUSH
11166: LD_INT 100
11168: GREATEREQUAL
11169: IFFALSE 11214
// begin AddCargo ( vehicle , mat_oil , 100 - occupied ) ;
11171: LD_VAR 0 1
11175: PPUSH
11176: LD_INT 2
11178: PPUSH
11179: LD_INT 100
11181: PUSH
11182: LD_VAR 0 6
11186: MINUS
11187: PPUSH
11188: CALL_OW 291
// oil := oil - 100 + occupied ;
11192: LD_ADDR_VAR 0 3
11196: PUSH
11197: LD_VAR 0 3
11201: PUSH
11202: LD_INT 100
11204: MINUS
11205: PUSH
11206: LD_VAR 0 6
11210: PLUS
11211: ST_TO_ADDR
// end else
11212: GO 11327
// begin AddCargo ( vehicle , mat_oil , oil ) ;
11214: LD_VAR 0 1
11218: PPUSH
11219: LD_INT 2
11221: PPUSH
11222: LD_VAR 0 3
11226: PPUSH
11227: CALL_OW 291
// occupied := oil ;
11231: LD_ADDR_VAR 0 6
11235: PUSH
11236: LD_VAR 0 3
11240: ST_TO_ADDR
// oil := 0 ;
11241: LD_ADDR_VAR 0 3
11245: PUSH
11246: LD_INT 0
11248: ST_TO_ADDR
// if siberite >= 100 then
11249: LD_VAR 0 4
11253: PUSH
11254: LD_INT 100
11256: GREATEREQUAL
11257: IFFALSE 11302
// begin AddCargo ( vehicle , mat_siberit , 100 - occupied ) ;
11259: LD_VAR 0 1
11263: PPUSH
11264: LD_INT 3
11266: PPUSH
11267: LD_INT 100
11269: PUSH
11270: LD_VAR 0 6
11274: MINUS
11275: PPUSH
11276: CALL_OW 291
// siberite := siberite - 100 + occupied ;
11280: LD_ADDR_VAR 0 4
11284: PUSH
11285: LD_VAR 0 4
11289: PUSH
11290: LD_INT 100
11292: MINUS
11293: PUSH
11294: LD_VAR 0 6
11298: PLUS
11299: ST_TO_ADDR
// end else
11300: GO 11327
// begin AddCargo ( vehicle , mat_siberit , siberite ) ;
11302: LD_VAR 0 1
11306: PPUSH
11307: LD_INT 3
11309: PPUSH
11310: LD_VAR 0 4
11314: PPUSH
11315: CALL_OW 291
// siberite := 0 ;
11319: LD_ADDR_VAR 0 4
11323: PUSH
11324: LD_INT 0
11326: ST_TO_ADDR
// end ; end ; end ; result := [ vehicle , crates , oil , siberite ] ;
11327: LD_ADDR_VAR 0 5
11331: PUSH
11332: LD_VAR 0 1
11336: PUSH
11337: LD_VAR 0 2
11341: PUSH
11342: LD_VAR 0 3
11346: PUSH
11347: LD_VAR 0 4
11351: PUSH
11352: EMPTY
11353: LIST
11354: LIST
11355: LIST
11356: LIST
11357: ST_TO_ADDR
// end ;
11358: LD_VAR 0 5
11362: RET
// export function RotateUnit ( in_direction , rotation ) ; var r ; begin
11363: LD_INT 0
11365: PPUSH
11366: PPUSH
// rotation := rotation mod 6 ;
11367: LD_ADDR_VAR 0 2
11371: PUSH
11372: LD_VAR 0 2
11376: PUSH
11377: LD_INT 6
11379: MOD
11380: ST_TO_ADDR
// r := in_direction + rotation ;
11381: LD_ADDR_VAR 0 4
11385: PUSH
11386: LD_VAR 0 1
11390: PUSH
11391: LD_VAR 0 2
11395: PLUS
11396: ST_TO_ADDR
// if r >= 6 then
11397: LD_VAR 0 4
11401: PUSH
11402: LD_INT 6
11404: GREATEREQUAL
11405: IFFALSE 11421
// rotation := rotation - 6 ;
11407: LD_ADDR_VAR 0 2
11411: PUSH
11412: LD_VAR 0 2
11416: PUSH
11417: LD_INT 6
11419: MINUS
11420: ST_TO_ADDR
// if r <= 1 then
11421: LD_VAR 0 4
11425: PUSH
11426: LD_INT 1
11428: LESSEQUAL
11429: IFFALSE 11445
// rotation := rotation + 6 ;
11431: LD_ADDR_VAR 0 2
11435: PUSH
11436: LD_VAR 0 2
11440: PUSH
11441: LD_INT 6
11443: PLUS
11444: ST_TO_ADDR
// result := in_direction + rotation ;
11445: LD_ADDR_VAR 0 3
11449: PUSH
11450: LD_VAR 0 1
11454: PUSH
11455: LD_VAR 0 2
11459: PLUS
11460: ST_TO_ADDR
// end ; end_of_file
11461: LD_VAR 0 3
11465: RET
// on BuildingStarted ( b , u ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
11466: LD_VAR 0 1
11470: PPUSH
11471: CALL_OW 266
11475: PUSH
11476: LD_INT 0
11478: PUSH
11479: LD_INT 1
11481: PUSH
11482: EMPTY
11483: LIST
11484: LIST
11485: IN
11486: IFFALSE 11635
// begin SetBName ( b , @ & GetSide ( b ) ) ;
11488: LD_VAR 0 1
11492: PPUSH
11493: LD_STRING @
11495: PUSH
11496: LD_VAR 0 1
11500: PPUSH
11501: CALL_OW 255
11505: STR
11506: PPUSH
11507: CALL_OW 500
// if GetSide ( b ) = Your_Side then
11511: LD_VAR 0 1
11515: PPUSH
11516: CALL_OW 255
11520: PUSH
11521: LD_OWVAR 2
11525: EQUAL
11526: IFFALSE 11560
// if side_depots [ GetSide ( b ) ] + 0 = 0 then
11528: LD_EXP 47
11532: PUSH
11533: LD_VAR 0 1
11537: PPUSH
11538: CALL_OW 255
11542: ARRAY
11543: PUSH
11544: LD_INT 0
11546: PLUS
11547: PUSH
11548: LD_INT 0
11550: EQUAL
11551: IFFALSE 11560
// ToLua ( LUA_IsDepot(); ) ;
11553: LD_STRING LUA_IsDepot();
11555: PPUSH
11556: CALL_OW 559
// if side_tech_lvl [ GetSide ( b ) ] = 4 then
11560: LD_EXP 31
11564: PUSH
11565: LD_VAR 0 1
11569: PPUSH
11570: CALL_OW 255
11574: ARRAY
11575: PUSH
11576: LD_INT 4
11578: EQUAL
11579: IFFALSE 11588
// ToLua ( LUA_SideTechMax() ) ;
11581: LD_STRING LUA_SideTechMax()
11583: PPUSH
11584: CALL_OW 559
// side_depots := Replace ( side_depots , GetSide ( b ) , side_depots [ GetSide ( b ) ] ^ b ) ;
11588: LD_ADDR_EXP 47
11592: PUSH
11593: LD_EXP 47
11597: PPUSH
11598: LD_VAR 0 1
11602: PPUSH
11603: CALL_OW 255
11607: PPUSH
11608: LD_EXP 47
11612: PUSH
11613: LD_VAR 0 1
11617: PPUSH
11618: CALL_OW 255
11622: ARRAY
11623: PUSH
11624: LD_VAR 0 1
11628: ADD
11629: PPUSH
11630: CALL_OW 1
11634: ST_TO_ADDR
// end ; end ;
11635: PPOPN 2
11637: END
// on BuildingCaptured ( b , o , e ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
11638: LD_VAR 0 1
11642: PPUSH
11643: CALL_OW 266
11647: PUSH
11648: LD_INT 0
11650: PUSH
11651: LD_INT 1
11653: PUSH
11654: EMPTY
11655: LIST
11656: LIST
11657: IN
11658: IFFALSE 11869
// begin SetBName ( b , @ & GetSide ( b ) ) ;
11660: LD_VAR 0 1
11664: PPUSH
11665: LD_STRING @
11667: PUSH
11668: LD_VAR 0 1
11672: PPUSH
11673: CALL_OW 255
11677: STR
11678: PPUSH
11679: CALL_OW 500
// side_depots := Replace ( side_depots , GetSide ( o ) , side_depots [ GetSide ( o ) ] diff b ) ;
11683: LD_ADDR_EXP 47
11687: PUSH
11688: LD_EXP 47
11692: PPUSH
11693: LD_VAR 0 2
11697: PPUSH
11698: CALL_OW 255
11702: PPUSH
11703: LD_EXP 47
11707: PUSH
11708: LD_VAR 0 2
11712: PPUSH
11713: CALL_OW 255
11717: ARRAY
11718: PUSH
11719: LD_VAR 0 1
11723: DIFF
11724: PPUSH
11725: CALL_OW 1
11729: ST_TO_ADDR
// if side_depots [ GetSide ( b ) ] + 0 = 0 then
11730: LD_EXP 47
11734: PUSH
11735: LD_VAR 0 1
11739: PPUSH
11740: CALL_OW 255
11744: ARRAY
11745: PUSH
11746: LD_INT 0
11748: PLUS
11749: PUSH
11750: LD_INT 0
11752: EQUAL
11753: IFFALSE 11762
// ToLua ( LUA_IsDepot(); ) ;
11755: LD_STRING LUA_IsDepot();
11757: PPUSH
11758: CALL_OW 559
// if side_tech_lvl [ GetSide ( b ) ] = 4 then
11762: LD_EXP 31
11766: PUSH
11767: LD_VAR 0 1
11771: PPUSH
11772: CALL_OW 255
11776: ARRAY
11777: PUSH
11778: LD_INT 4
11780: EQUAL
11781: IFFALSE 11790
// ToLua ( LUA_SideTechMax() ) ;
11783: LD_STRING LUA_SideTechMax()
11785: PPUSH
11786: CALL_OW 559
// if side_depots [ GetSide ( o ) ] + 0 = 0 then
11790: LD_EXP 47
11794: PUSH
11795: LD_VAR 0 2
11799: PPUSH
11800: CALL_OW 255
11804: ARRAY
11805: PUSH
11806: LD_INT 0
11808: PLUS
11809: PUSH
11810: LD_INT 0
11812: EQUAL
11813: IFFALSE 11822
// ToLua ( LUA_NoDepot(); ) ;
11815: LD_STRING LUA_NoDepot();
11817: PPUSH
11818: CALL_OW 559
// side_depots := Replace ( side_depots , GetSide ( b ) , side_depots [ GetSide ( b ) ] ^ b ) ;
11822: LD_ADDR_EXP 47
11826: PUSH
11827: LD_EXP 47
11831: PPUSH
11832: LD_VAR 0 1
11836: PPUSH
11837: CALL_OW 255
11841: PPUSH
11842: LD_EXP 47
11846: PUSH
11847: LD_VAR 0 1
11851: PPUSH
11852: CALL_OW 255
11856: ARRAY
11857: PUSH
11858: LD_VAR 0 1
11862: ADD
11863: PPUSH
11864: CALL_OW 1
11868: ST_TO_ADDR
// end ; end ;
11869: PPOPN 3
11871: END
// on UnitDestroyed ( i ) do var side ;
11872: LD_INT 0
11874: PPUSH
// begin if GetType ( i ) = 1 then
11875: LD_VAR 0 1
11879: PPUSH
11880: CALL_OW 247
11884: PUSH
11885: LD_INT 1
11887: EQUAL
11888: IFFALSE 11951
// begin side := GetSide ( i ) ;
11890: LD_ADDR_VAR 0 2
11894: PUSH
11895: LD_VAR 0 1
11899: PPUSH
11900: CALL_OW 255
11904: ST_TO_ADDR
// side_soldiers := Replace ( side_soldiers , side , side_soldiers [ side ] diff i ) ;
11905: LD_ADDR_EXP 46
11909: PUSH
11910: LD_EXP 46
11914: PPUSH
11915: LD_VAR 0 2
11919: PPUSH
11920: LD_EXP 46
11924: PUSH
11925: LD_VAR 0 2
11929: ARRAY
11930: PUSH
11931: LD_VAR 0 1
11935: DIFF
11936: PPUSH
11937: CALL_OW 1
11941: ST_TO_ADDR
// DidPlayerLose ( side ) ;
11942: LD_VAR 0 2
11946: PPUSH
11947: CALL 6827 0 1
// end ; if GetBType ( i ) in [ b_depot , b_warehouse ] then
11951: LD_VAR 0 1
11955: PPUSH
11956: CALL_OW 266
11960: PUSH
11961: LD_INT 0
11963: PUSH
11964: LD_INT 1
11966: PUSH
11967: EMPTY
11968: LIST
11969: LIST
11970: IN
11971: IFFALSE 12020
// side_depots := Replace ( side_depots , GetSide ( i ) , side_depots [ GetSide ( i ) ] diff i ) ;
11973: LD_ADDR_EXP 47
11977: PUSH
11978: LD_EXP 47
11982: PPUSH
11983: LD_VAR 0 1
11987: PPUSH
11988: CALL_OW 255
11992: PPUSH
11993: LD_EXP 47
11997: PUSH
11998: LD_VAR 0 1
12002: PPUSH
12003: CALL_OW 255
12007: ARRAY
12008: PUSH
12009: LD_VAR 0 1
12013: DIFF
12014: PPUSH
12015: CALL_OW 1
12019: ST_TO_ADDR
// if side_depots [ GetSide ( i ) ] + 0 = 0 then
12020: LD_EXP 47
12024: PUSH
12025: LD_VAR 0 1
12029: PPUSH
12030: CALL_OW 255
12034: ARRAY
12035: PUSH
12036: LD_INT 0
12038: PLUS
12039: PUSH
12040: LD_INT 0
12042: EQUAL
12043: IFFALSE 12052
// ToLua ( LUA_NoDepot(); ) ;
12045: LD_STRING LUA_NoDepot();
12047: PPUSH
12048: CALL_OW 559
// end ;
12052: PPOPN 2
12054: END
// on SailEvent ( ID ) do var i , j , lost ;
12055: LD_INT 0
12057: PPUSH
12058: PPUSH
12059: PPUSH
// begin case ID of 66 :
12060: LD_VAR 0 1
12064: PUSH
12065: LD_INT 66
12067: DOUBLE
12068: EQUAL
12069: IFTRUE 12073
12071: GO 12237
12073: POP
// begin for i = 1 to Teams do
12074: LD_ADDR_VAR 0 2
12078: PUSH
12079: DOUBLE
12080: LD_INT 1
12082: DEC
12083: ST_TO_ADDR
12084: LD_EXP 6
12088: PUSH
12089: FOR_TO
12090: IFFALSE 12233
// begin lost := 0 ;
12092: LD_ADDR_VAR 0 4
12096: PUSH
12097: LD_INT 0
12099: ST_TO_ADDR
// for j in Teams [ i ] do
12100: LD_ADDR_VAR 0 3
12104: PUSH
12105: LD_EXP 6
12109: PUSH
12110: LD_VAR 0 2
12114: ARRAY
12115: PUSH
12116: FOR_IN
12117: IFFALSE 12151
// if side_isalive [ j ] = 0 then
12119: LD_EXP 54
12123: PUSH
12124: LD_VAR 0 3
12128: ARRAY
12129: PUSH
12130: LD_INT 0
12132: EQUAL
12133: IFFALSE 12149
// lost := lost + 1 ;
12135: LD_ADDR_VAR 0 4
12139: PUSH
12140: LD_VAR 0 4
12144: PUSH
12145: LD_INT 1
12147: PLUS
12148: ST_TO_ADDR
12149: GO 12116
12151: POP
12152: POP
// if lost = Teams [ i ] + 0 then
12153: LD_VAR 0 4
12157: PUSH
12158: LD_EXP 6
12162: PUSH
12163: LD_VAR 0 2
12167: ARRAY
12168: PUSH
12169: LD_INT 0
12171: PLUS
12172: EQUAL
12173: IFFALSE 12229
// if Your_Side = 9 or Your_Side in Teams [ i ] then
12175: LD_OWVAR 2
12179: PUSH
12180: LD_INT 9
12182: EQUAL
12183: PUSH
12184: LD_OWVAR 2
12188: PUSH
12189: LD_EXP 6
12193: PUSH
12194: LD_VAR 0 2
12198: ARRAY
12199: IN
12200: OR
12201: IFFALSE 12216
// begin YouLostInMultiplayer ;
12203: CALL_OW 107
// ToLua ( EndGame(); ) ;
12207: LD_STRING EndGame();
12209: PPUSH
12210: CALL_OW 559
// end else
12214: GO 12227
// begin YouWinInMultiplayer ;
12216: CALL_OW 106
// ToLua ( EndGame(); ) ;
12220: LD_STRING EndGame();
12222: PPUSH
12223: CALL_OW 559
// end else
12227: GO 12231
// continue end ;
12229: GO 12089
12231: GO 12089
12233: POP
12234: POP
// end ; 67 :
12235: GO 12342
12237: LD_INT 67
12239: DOUBLE
12240: EQUAL
12241: IFTRUE 12245
12243: GO 12341
12245: POP
// begin if not victory_cond = 0 then
12246: LD_EXP 27
12250: PUSH
12251: LD_INT 0
12253: EQUAL
12254: NOT
12255: IFFALSE 12339
// begin for i = 1 to Teams do
12257: LD_ADDR_VAR 0 2
12261: PUSH
12262: DOUBLE
12263: LD_INT 1
12265: DEC
12266: ST_TO_ADDR
12267: LD_EXP 6
12271: PUSH
12272: FOR_TO
12273: IFFALSE 12337
// begin if team_siberite_stocked [ i ] >= victory_cond then
12275: LD_EXP 61
12279: PUSH
12280: LD_VAR 0 2
12284: ARRAY
12285: PUSH
12286: LD_EXP 27
12290: GREATEREQUAL
12291: IFFALSE 12335
// if Your_Side in Teams [ i ] then
12293: LD_OWVAR 2
12297: PUSH
12298: LD_EXP 6
12302: PUSH
12303: LD_VAR 0 2
12307: ARRAY
12308: IN
12309: IFFALSE 12324
// begin YouWinInMultiplayer ;
12311: CALL_OW 106
// ToLua ( EndGame(); ) ;
12315: LD_STRING EndGame();
12317: PPUSH
12318: CALL_OW 559
// end else
12322: GO 12335
// begin YouLostInMultiplayer ;
12324: CALL_OW 107
// ToLua ( EndGame(); ) ;
12328: LD_STRING EndGame();
12330: PPUSH
12331: CALL_OW 559
// end ; end ;
12335: GO 12272
12337: POP
12338: POP
// end ; end ; end ;
12339: GO 12342
12341: POP
// end ;
12342: PPOPN 4
12344: END
// on CustomCommand ( side , ComID , order , reserved1 , reserved2 , reserved3 ) do var i ;
12345: LD_INT 0
12347: PPUSH
// begin case ComID of 201 :
12348: LD_VAR 0 2
12352: PUSH
12353: LD_INT 201
12355: DOUBLE
12356: EQUAL
12357: IFTRUE 12361
12359: GO 12491
12361: POP
// begin if side = Your_Side then
12362: LD_VAR 0 1
12366: PUSH
12367: LD_OWVAR 2
12371: EQUAL
12372: IFFALSE 12489
// ToLua ( LUA_UpdateUpgradeCost( & cost_per_upgrade [ side_tech_lvl [ side ] + 1 ] [ reinforce_cost ] [ 1 ] & , & cost_per_upgrade [ side_tech_lvl [ side ] + 1 ] [ reinforce_cost ] [ 2 ] & , & cost_per_upgrade [ side_tech_lvl [ side ] + 1 ] [ reinforce_cost ] [ 3 ] & ); ) ;
12374: LD_STRING LUA_UpdateUpgradeCost(
12376: PUSH
12377: LD_EXP 56
12381: PUSH
12382: LD_EXP 31
12386: PUSH
12387: LD_VAR 0 1
12391: ARRAY
12392: PUSH
12393: LD_INT 1
12395: PLUS
12396: ARRAY
12397: PUSH
12398: LD_EXP 28
12402: ARRAY
12403: PUSH
12404: LD_INT 1
12406: ARRAY
12407: STR
12408: PUSH
12409: LD_STRING ,
12411: STR
12412: PUSH
12413: LD_EXP 56
12417: PUSH
12418: LD_EXP 31
12422: PUSH
12423: LD_VAR 0 1
12427: ARRAY
12428: PUSH
12429: LD_INT 1
12431: PLUS
12432: ARRAY
12433: PUSH
12434: LD_EXP 28
12438: ARRAY
12439: PUSH
12440: LD_INT 2
12442: ARRAY
12443: STR
12444: PUSH
12445: LD_STRING ,
12447: STR
12448: PUSH
12449: LD_EXP 56
12453: PUSH
12454: LD_EXP 31
12458: PUSH
12459: LD_VAR 0 1
12463: ARRAY
12464: PUSH
12465: LD_INT 1
12467: PLUS
12468: ARRAY
12469: PUSH
12470: LD_EXP 28
12474: ARRAY
12475: PUSH
12476: LD_INT 3
12478: ARRAY
12479: STR
12480: PUSH
12481: LD_STRING );
12483: STR
12484: PPUSH
12485: CALL_OW 559
// end ; 202 :
12489: GO 15849
12491: LD_INT 202
12493: DOUBLE
12494: EQUAL
12495: IFTRUE 12499
12497: GO 12648
12499: POP
// begin if side_reinforcement_amount [ side ] < 0 or side_reinforcement_amount [ side ] > side_reinforcement_cap [ side ] then
12500: LD_EXP 57
12504: PUSH
12505: LD_VAR 0 1
12509: ARRAY
12510: PUSH
12511: LD_INT 0
12513: LESS
12514: PUSH
12515: LD_EXP 57
12519: PUSH
12520: LD_VAR 0 1
12524: ARRAY
12525: PUSH
12526: LD_EXP 58
12530: PUSH
12531: LD_VAR 0 1
12535: ARRAY
12536: GREATER
12537: OR
12538: IFFALSE 12563
// side_reinforcement_amount := Replace ( side_reinforcement_amount , side , 1 ) ;
12540: LD_ADDR_EXP 57
12544: PUSH
12545: LD_EXP 57
12549: PPUSH
12550: LD_VAR 0 1
12554: PPUSH
12555: LD_INT 1
12557: PPUSH
12558: CALL_OW 1
12562: ST_TO_ADDR
// if side = Your_Side then
12563: LD_VAR 0 1
12567: PUSH
12568: LD_OWVAR 2
12572: EQUAL
12573: IFFALSE 12646
// ToLua ( LUA_UpdateReinforceCost( & side_reinforcement_amount [ side ] & * & cost_per_human [ reinforce_cost ] & , & 0 & , & 0 & , & side_reinforcement_amount [ side ] & ); ) ;
12575: LD_STRING LUA_UpdateReinforceCost(
12577: PUSH
12578: LD_EXP 57
12582: PUSH
12583: LD_VAR 0 1
12587: ARRAY
12588: STR
12589: PUSH
12590: LD_STRING *
12592: STR
12593: PUSH
12594: LD_EXP 55
12598: PUSH
12599: LD_EXP 28
12603: ARRAY
12604: STR
12605: PUSH
12606: LD_STRING ,
12608: STR
12609: PUSH
12610: LD_INT 0
12612: STR
12613: PUSH
12614: LD_STRING ,
12616: STR
12617: PUSH
12618: LD_INT 0
12620: STR
12621: PUSH
12622: LD_STRING ,
12624: STR
12625: PUSH
12626: LD_EXP 57
12630: PUSH
12631: LD_VAR 0 1
12635: ARRAY
12636: STR
12637: PUSH
12638: LD_STRING );
12640: STR
12641: PPUSH
12642: CALL_OW 559
// end ; 2020 :
12646: GO 15849
12648: LD_INT 2020
12650: DOUBLE
12651: EQUAL
12652: IFTRUE 12656
12654: GO 12793
12656: POP
// begin if side_reinforcement_amount [ side ] > 1 then
12657: LD_EXP 57
12661: PUSH
12662: LD_VAR 0 1
12666: ARRAY
12667: PUSH
12668: LD_INT 1
12670: GREATER
12671: IFFALSE 12708
// side_reinforcement_amount := Replace ( side_reinforcement_amount , side , side_reinforcement_amount [ side ] - 1 ) ;
12673: LD_ADDR_EXP 57
12677: PUSH
12678: LD_EXP 57
12682: PPUSH
12683: LD_VAR 0 1
12687: PPUSH
12688: LD_EXP 57
12692: PUSH
12693: LD_VAR 0 1
12697: ARRAY
12698: PUSH
12699: LD_INT 1
12701: MINUS
12702: PPUSH
12703: CALL_OW 1
12707: ST_TO_ADDR
// if side = Your_Side then
12708: LD_VAR 0 1
12712: PUSH
12713: LD_OWVAR 2
12717: EQUAL
12718: IFFALSE 12791
// ToLua ( LUA_UpdateReinforceCost( & side_reinforcement_amount [ side ] & * & cost_per_human [ reinforce_cost ] & , & 0 & , & 0 & , & side_reinforcement_amount [ side ] & ); ) ;
12720: LD_STRING LUA_UpdateReinforceCost(
12722: PUSH
12723: LD_EXP 57
12727: PUSH
12728: LD_VAR 0 1
12732: ARRAY
12733: STR
12734: PUSH
12735: LD_STRING *
12737: STR
12738: PUSH
12739: LD_EXP 55
12743: PUSH
12744: LD_EXP 28
12748: ARRAY
12749: STR
12750: PUSH
12751: LD_STRING ,
12753: STR
12754: PUSH
12755: LD_INT 0
12757: STR
12758: PUSH
12759: LD_STRING ,
12761: STR
12762: PUSH
12763: LD_INT 0
12765: STR
12766: PUSH
12767: LD_STRING ,
12769: STR
12770: PUSH
12771: LD_EXP 57
12775: PUSH
12776: LD_VAR 0 1
12780: ARRAY
12781: STR
12782: PUSH
12783: LD_STRING );
12785: STR
12786: PPUSH
12787: CALL_OW 559
// end ; 2021 :
12791: GO 15849
12793: LD_INT 2021
12795: DOUBLE
12796: EQUAL
12797: IFTRUE 12801
12799: GO 12946
12801: POP
// begin if side_reinforcement_amount [ side ] < side_reinforcement_cap [ side ] then
12802: LD_EXP 57
12806: PUSH
12807: LD_VAR 0 1
12811: ARRAY
12812: PUSH
12813: LD_EXP 58
12817: PUSH
12818: LD_VAR 0 1
12822: ARRAY
12823: LESS
12824: IFFALSE 12861
// side_reinforcement_amount := Replace ( side_reinforcement_amount , side , side_reinforcement_amount [ side ] + 1 ) ;
12826: LD_ADDR_EXP 57
12830: PUSH
12831: LD_EXP 57
12835: PPUSH
12836: LD_VAR 0 1
12840: PPUSH
12841: LD_EXP 57
12845: PUSH
12846: LD_VAR 0 1
12850: ARRAY
12851: PUSH
12852: LD_INT 1
12854: PLUS
12855: PPUSH
12856: CALL_OW 1
12860: ST_TO_ADDR
// if side = Your_Side then
12861: LD_VAR 0 1
12865: PUSH
12866: LD_OWVAR 2
12870: EQUAL
12871: IFFALSE 12944
// ToLua ( LUA_UpdateReinforceCost( & side_reinforcement_amount [ side ] & * & cost_per_human [ reinforce_cost ] & , & 0 & , & 0 & , & side_reinforcement_amount [ side ] & ); ) ;
12873: LD_STRING LUA_UpdateReinforceCost(
12875: PUSH
12876: LD_EXP 57
12880: PUSH
12881: LD_VAR 0 1
12885: ARRAY
12886: STR
12887: PUSH
12888: LD_STRING *
12890: STR
12891: PUSH
12892: LD_EXP 55
12896: PUSH
12897: LD_EXP 28
12901: ARRAY
12902: STR
12903: PUSH
12904: LD_STRING ,
12906: STR
12907: PUSH
12908: LD_INT 0
12910: STR
12911: PUSH
12912: LD_STRING ,
12914: STR
12915: PUSH
12916: LD_INT 0
12918: STR
12919: PUSH
12920: LD_STRING ,
12922: STR
12923: PUSH
12924: LD_EXP 57
12928: PUSH
12929: LD_VAR 0 1
12933: ARRAY
12934: STR
12935: PUSH
12936: LD_STRING );
12938: STR
12939: PPUSH
12940: CALL_OW 559
// end ; 203 :
12944: GO 15849
12946: LD_INT 203
12948: DOUBLE
12949: EQUAL
12950: IFTRUE 12954
12952: GO 13008
12954: POP
// begin if side = Your_Side then
12955: LD_VAR 0 1
12959: PUSH
12960: LD_OWVAR 2
12964: EQUAL
12965: IFFALSE 13006
// ToLua ( LUA_UpdateSiberiteSent( & team_siberite_stocked [ Side_Teams [ side ] ] & , & victory_cond & ); ) ;
12967: LD_STRING LUA_UpdateSiberiteSent(
12969: PUSH
12970: LD_EXP 61
12974: PUSH
12975: LD_EXP 5
12979: PUSH
12980: LD_VAR 0 1
12984: ARRAY
12985: ARRAY
12986: STR
12987: PUSH
12988: LD_STRING ,
12990: STR
12991: PUSH
12992: LD_EXP 27
12996: STR
12997: PUSH
12998: LD_STRING );
13000: STR
13001: PPUSH
13002: CALL_OW 559
// end ; 204 :
13006: GO 15849
13008: LD_INT 204
13010: DOUBLE
13011: EQUAL
13012: IFTRUE 13016
13014: GO 14045
13016: POP
// begin case order of 1 :
13017: LD_VAR 0 3
13021: PUSH
13022: LD_INT 1
13024: DOUBLE
13025: EQUAL
13026: IFTRUE 13030
13028: GO 13330
13030: POP
// begin side_pending_order := Replace ( side_pending_order , side , Replace ( side_pending_order [ side ] , 1 , side_reinforcement_amount [ side ] * cost_per_human [ reinforce_cost ] ) ) ;
13031: LD_ADDR_EXP 59
13035: PUSH
13036: LD_EXP 59
13040: PPUSH
13041: LD_VAR 0 1
13045: PPUSH
13046: LD_EXP 59
13050: PUSH
13051: LD_VAR 0 1
13055: ARRAY
13056: PPUSH
13057: LD_INT 1
13059: PPUSH
13060: LD_EXP 57
13064: PUSH
13065: LD_VAR 0 1
13069: ARRAY
13070: PUSH
13071: LD_EXP 55
13075: PUSH
13076: LD_EXP 28
13080: ARRAY
13081: MUL
13082: PPUSH
13083: CALL_OW 1
13087: PPUSH
13088: CALL_OW 1
13092: ST_TO_ADDR
// side_pending_order := Replace ( side_pending_order , side , Replace ( side_pending_order [ side ] , 2 , 0 ) ) ;
13093: LD_ADDR_EXP 59
13097: PUSH
13098: LD_EXP 59
13102: PPUSH
13103: LD_VAR 0 1
13107: PPUSH
13108: LD_EXP 59
13112: PUSH
13113: LD_VAR 0 1
13117: ARRAY
13118: PPUSH
13119: LD_INT 2
13121: PPUSH
13122: LD_INT 0
13124: PPUSH
13125: CALL_OW 1
13129: PPUSH
13130: CALL_OW 1
13134: ST_TO_ADDR
// side_pending_order := Replace ( side_pending_order , side , Replace ( side_pending_order [ side ] , 3 , 0 ) ) ;
13135: LD_ADDR_EXP 59
13139: PUSH
13140: LD_EXP 59
13144: PPUSH
13145: LD_VAR 0 1
13149: PPUSH
13150: LD_EXP 59
13154: PUSH
13155: LD_VAR 0 1
13159: ARRAY
13160: PPUSH
13161: LD_INT 3
13163: PPUSH
13164: LD_INT 0
13166: PPUSH
13167: CALL_OW 1
13171: PPUSH
13172: CALL_OW 1
13176: ST_TO_ADDR
// if side = Your_Side then
13177: LD_VAR 0 1
13181: PUSH
13182: LD_OWVAR 2
13186: EQUAL
13187: IFFALSE 13328
// begin ToLua ( LUA_UpdateTransferResources( & side_pending_order [ side ] [ 1 ] & , & side_pending_order [ side ] [ 2 ] & , & side_pending_order [ side ] [ 3 ] & , & 0 & , & 0 & ); ) ;
13189: LD_STRING LUA_UpdateTransferResources(
13191: PUSH
13192: LD_EXP 59
13196: PUSH
13197: LD_VAR 0 1
13201: ARRAY
13202: PUSH
13203: LD_INT 1
13205: ARRAY
13206: STR
13207: PUSH
13208: LD_STRING ,
13210: STR
13211: PUSH
13212: LD_EXP 59
13216: PUSH
13217: LD_VAR 0 1
13221: ARRAY
13222: PUSH
13223: LD_INT 2
13225: ARRAY
13226: STR
13227: PUSH
13228: LD_STRING ,
13230: STR
13231: PUSH
13232: LD_EXP 59
13236: PUSH
13237: LD_VAR 0 1
13241: ARRAY
13242: PUSH
13243: LD_INT 3
13245: ARRAY
13246: STR
13247: PUSH
13248: LD_STRING ,
13250: STR
13251: PUSH
13252: LD_INT 0
13254: STR
13255: PUSH
13256: LD_STRING ,
13258: STR
13259: PUSH
13260: LD_INT 0
13262: STR
13263: PUSH
13264: LD_STRING );
13266: STR
13267: PPUSH
13268: CALL_OW 559
// ToLua ( LUA_OrderIssued(); ) ;
13272: LD_STRING LUA_OrderIssued();
13274: PPUSH
13275: CALL_OW 559
// ToLua ( LUA_UpdateTransferResources( & 0 & , & 0 & , & 0 & , & 0 & , & order & ); ) ;
13279: LD_STRING LUA_UpdateTransferResources(
13281: PUSH
13282: LD_INT 0
13284: STR
13285: PUSH
13286: LD_STRING ,
13288: STR
13289: PUSH
13290: LD_INT 0
13292: STR
13293: PUSH
13294: LD_STRING ,
13296: STR
13297: PUSH
13298: LD_INT 0
13300: STR
13301: PUSH
13302: LD_STRING ,
13304: STR
13305: PUSH
13306: LD_INT 0
13308: STR
13309: PUSH
13310: LD_STRING ,
13312: STR
13313: PUSH
13314: LD_VAR 0 3
13318: STR
13319: PUSH
13320: LD_STRING );
13322: STR
13323: PPUSH
13324: CALL_OW 559
// end ; end ; 2 :
13328: GO 13922
13330: LD_INT 2
13332: DOUBLE
13333: EQUAL
13334: IFTRUE 13338
13336: GO 13702
13338: POP
// begin side_pending_order := Replace ( side_pending_order , side , Replace ( side_pending_order [ side ] , 1 , cost_per_upgrade [ side_tech_lvl [ side ] + 1 ] [ reinforce_cost ] [ 1 ] ) ) ;
13339: LD_ADDR_EXP 59
13343: PUSH
13344: LD_EXP 59
13348: PPUSH
13349: LD_VAR 0 1
13353: PPUSH
13354: LD_EXP 59
13358: PUSH
13359: LD_VAR 0 1
13363: ARRAY
13364: PPUSH
13365: LD_INT 1
13367: PPUSH
13368: LD_EXP 56
13372: PUSH
13373: LD_EXP 31
13377: PUSH
13378: LD_VAR 0 1
13382: ARRAY
13383: PUSH
13384: LD_INT 1
13386: PLUS
13387: ARRAY
13388: PUSH
13389: LD_EXP 28
13393: ARRAY
13394: PUSH
13395: LD_INT 1
13397: ARRAY
13398: PPUSH
13399: CALL_OW 1
13403: PPUSH
13404: CALL_OW 1
13408: ST_TO_ADDR
// side_pending_order := Replace ( side_pending_order , side , Replace ( side_pending_order [ side ] , 2 , cost_per_upgrade [ side_tech_lvl [ side ] + 1 ] [ reinforce_cost ] [ 2 ] ) ) ;
13409: LD_ADDR_EXP 59
13413: PUSH
13414: LD_EXP 59
13418: PPUSH
13419: LD_VAR 0 1
13423: PPUSH
13424: LD_EXP 59
13428: PUSH
13429: LD_VAR 0 1
13433: ARRAY
13434: PPUSH
13435: LD_INT 2
13437: PPUSH
13438: LD_EXP 56
13442: PUSH
13443: LD_EXP 31
13447: PUSH
13448: LD_VAR 0 1
13452: ARRAY
13453: PUSH
13454: LD_INT 1
13456: PLUS
13457: ARRAY
13458: PUSH
13459: LD_EXP 28
13463: ARRAY
13464: PUSH
13465: LD_INT 2
13467: ARRAY
13468: PPUSH
13469: CALL_OW 1
13473: PPUSH
13474: CALL_OW 1
13478: ST_TO_ADDR
// side_pending_order := Replace ( side_pending_order , side , Replace ( side_pending_order [ side ] , 3 , cost_per_upgrade [ side_tech_lvl [ side ] + 1 ] [ reinforce_cost ] [ 3 ] ) ) ;
13479: LD_ADDR_EXP 59
13483: PUSH
13484: LD_EXP 59
13488: PPUSH
13489: LD_VAR 0 1
13493: PPUSH
13494: LD_EXP 59
13498: PUSH
13499: LD_VAR 0 1
13503: ARRAY
13504: PPUSH
13505: LD_INT 3
13507: PPUSH
13508: LD_EXP 56
13512: PUSH
13513: LD_EXP 31
13517: PUSH
13518: LD_VAR 0 1
13522: ARRAY
13523: PUSH
13524: LD_INT 1
13526: PLUS
13527: ARRAY
13528: PUSH
13529: LD_EXP 28
13533: ARRAY
13534: PUSH
13535: LD_INT 3
13537: ARRAY
13538: PPUSH
13539: CALL_OW 1
13543: PPUSH
13544: CALL_OW 1
13548: ST_TO_ADDR
// if side = Your_Side then
13549: LD_VAR 0 1
13553: PUSH
13554: LD_OWVAR 2
13558: EQUAL
13559: IFFALSE 13700
// begin ToLua ( LUA_UpdateTransferResources( & side_pending_order [ side ] [ 1 ] & , & side_pending_order [ side ] [ 2 ] & , & side_pending_order [ side ] [ 3 ] & , & 0 & , & 0 & ); ) ;
13561: LD_STRING LUA_UpdateTransferResources(
13563: PUSH
13564: LD_EXP 59
13568: PUSH
13569: LD_VAR 0 1
13573: ARRAY
13574: PUSH
13575: LD_INT 1
13577: ARRAY
13578: STR
13579: PUSH
13580: LD_STRING ,
13582: STR
13583: PUSH
13584: LD_EXP 59
13588: PUSH
13589: LD_VAR 0 1
13593: ARRAY
13594: PUSH
13595: LD_INT 2
13597: ARRAY
13598: STR
13599: PUSH
13600: LD_STRING ,
13602: STR
13603: PUSH
13604: LD_EXP 59
13608: PUSH
13609: LD_VAR 0 1
13613: ARRAY
13614: PUSH
13615: LD_INT 3
13617: ARRAY
13618: STR
13619: PUSH
13620: LD_STRING ,
13622: STR
13623: PUSH
13624: LD_INT 0
13626: STR
13627: PUSH
13628: LD_STRING ,
13630: STR
13631: PUSH
13632: LD_INT 0
13634: STR
13635: PUSH
13636: LD_STRING );
13638: STR
13639: PPUSH
13640: CALL_OW 559
// ToLua ( LUA_OrderIssued(); ) ;
13644: LD_STRING LUA_OrderIssued();
13646: PPUSH
13647: CALL_OW 559
// ToLua ( LUA_UpdateTransferResources( & 0 & , & 0 & , & 0 & , & 0 & , & order & ); ) ;
13651: LD_STRING LUA_UpdateTransferResources(
13653: PUSH
13654: LD_INT 0
13656: STR
13657: PUSH
13658: LD_STRING ,
13660: STR
13661: PUSH
13662: LD_INT 0
13664: STR
13665: PUSH
13666: LD_STRING ,
13668: STR
13669: PUSH
13670: LD_INT 0
13672: STR
13673: PUSH
13674: LD_STRING ,
13676: STR
13677: PUSH
13678: LD_INT 0
13680: STR
13681: PUSH
13682: LD_STRING ,
13684: STR
13685: PUSH
13686: LD_VAR 0 3
13690: STR
13691: PUSH
13692: LD_STRING );
13694: STR
13695: PPUSH
13696: CALL_OW 559
// end ; end ; 3 :
13700: GO 13922
13702: LD_INT 3
13704: DOUBLE
13705: EQUAL
13706: IFTRUE 13710
13708: GO 13921
13710: POP
// begin side_pending_order := Replace ( side_pending_order , side , Replace ( side_pending_order [ side ] , 1 , 0 ) ) ;
13711: LD_ADDR_EXP 59
13715: PUSH
13716: LD_EXP 59
13720: PPUSH
13721: LD_VAR 0 1
13725: PPUSH
13726: LD_EXP 59
13730: PUSH
13731: LD_VAR 0 1
13735: ARRAY
13736: PPUSH
13737: LD_INT 1
13739: PPUSH
13740: LD_INT 0
13742: PPUSH
13743: CALL_OW 1
13747: PPUSH
13748: CALL_OW 1
13752: ST_TO_ADDR
// side_pending_order := Replace ( side_pending_order , side , Replace ( side_pending_order [ side ] , 2 , 0 ) ) ;
13753: LD_ADDR_EXP 59
13757: PUSH
13758: LD_EXP 59
13762: PPUSH
13763: LD_VAR 0 1
13767: PPUSH
13768: LD_EXP 59
13772: PUSH
13773: LD_VAR 0 1
13777: ARRAY
13778: PPUSH
13779: LD_INT 2
13781: PPUSH
13782: LD_INT 0
13784: PPUSH
13785: CALL_OW 1
13789: PPUSH
13790: CALL_OW 1
13794: ST_TO_ADDR
// side_pending_order := Replace ( side_pending_order , side , Replace ( side_pending_order [ side ] , 3 , 10 ) ) ;
13795: LD_ADDR_EXP 59
13799: PUSH
13800: LD_EXP 59
13804: PPUSH
13805: LD_VAR 0 1
13809: PPUSH
13810: LD_EXP 59
13814: PUSH
13815: LD_VAR 0 1
13819: ARRAY
13820: PPUSH
13821: LD_INT 3
13823: PPUSH
13824: LD_INT 10
13826: PPUSH
13827: CALL_OW 1
13831: PPUSH
13832: CALL_OW 1
13836: ST_TO_ADDR
// if side = Your_Side then
13837: LD_VAR 0 1
13841: PUSH
13842: LD_OWVAR 2
13846: EQUAL
13847: IFFALSE 13919
// begin ToLua ( LUA_UpdateTransferResources( & 0 & , & 0 & , & team_siberite_stocked [ Side_Teams [ side ] ] & , & victory_cond & , & 0 & ); ) ;
13849: LD_STRING LUA_UpdateTransferResources(
13851: PUSH
13852: LD_INT 0
13854: STR
13855: PUSH
13856: LD_STRING ,
13858: STR
13859: PUSH
13860: LD_INT 0
13862: STR
13863: PUSH
13864: LD_STRING ,
13866: STR
13867: PUSH
13868: LD_EXP 61
13872: PUSH
13873: LD_EXP 5
13877: PUSH
13878: LD_VAR 0 1
13882: ARRAY
13883: ARRAY
13884: STR
13885: PUSH
13886: LD_STRING ,
13888: STR
13889: PUSH
13890: LD_EXP 27
13894: STR
13895: PUSH
13896: LD_STRING ,
13898: STR
13899: PUSH
13900: LD_INT 0
13902: STR
13903: PUSH
13904: LD_STRING );
13906: STR
13907: PPUSH
13908: CALL_OW 559
// ToLua ( LUA_OrderIssued(); ) ;
13912: LD_STRING LUA_OrderIssued();
13914: PPUSH
13915: CALL_OW 559
// end ; end ; end ;
13919: GO 13922
13921: POP
// if side = Your_Side then
13922: LD_VAR 0 1
13926: PUSH
13927: LD_OWVAR 2
13931: EQUAL
13932: IFFALSE 14018
// begin ToLua ( LUA_CannotSendShipment(); ) ;
13934: LD_STRING LUA_CannotSendShipment();
13936: PPUSH
13937: CALL_OW 559
// ToLua ( LUA_UpdateTransferZone( & team_transfer_zones [ Side_Teams [ side ] ] [ side_chosen_zone [ side ] ] & ) ) ;
13941: LD_STRING LUA_UpdateTransferZone(
13943: PUSH
13944: LD_EXP 62
13948: PUSH
13949: LD_EXP 5
13953: PUSH
13954: LD_VAR 0 1
13958: ARRAY
13959: ARRAY
13960: PUSH
13961: LD_EXP 64
13965: PUSH
13966: LD_VAR 0 1
13970: ARRAY
13971: ARRAY
13972: STR
13973: PUSH
13974: LD_STRING )
13976: STR
13977: PPUSH
13978: CALL_OW 559
// SetAreaMapShow ( team_transfer_zones [ Side_Teams [ side ] ] [ side_chosen_zone [ side ] ] , 1 ) ;
13982: LD_EXP 62
13986: PUSH
13987: LD_EXP 5
13991: PUSH
13992: LD_VAR 0 1
13996: ARRAY
13997: ARRAY
13998: PUSH
13999: LD_EXP 64
14003: PUSH
14004: LD_VAR 0 1
14008: ARRAY
14009: ARRAY
14010: PPUSH
14011: LD_INT 1
14013: PPUSH
14014: CALL_OW 424
// end ; side_order_type := Replace ( side_order_type , side , order ) ;
14018: LD_ADDR_EXP 68
14022: PUSH
14023: LD_EXP 68
14027: PPUSH
14028: LD_VAR 0 1
14032: PPUSH
14033: LD_VAR 0 3
14037: PPUSH
14038: CALL_OW 1
14042: ST_TO_ADDR
// end ; 2040 :
14043: GO 15849
14045: LD_INT 2040
14047: DOUBLE
14048: EQUAL
14049: IFTRUE 14053
14051: GO 14139
14053: POP
// begin side_zone_locked := Replace ( side_zone_locked , side , 1 ) ;
14054: LD_ADDR_EXP 65
14058: PUSH
14059: LD_EXP 65
14063: PPUSH
14064: LD_VAR 0 1
14068: PPUSH
14069: LD_INT 1
14071: PPUSH
14072: CALL_OW 1
14076: ST_TO_ADDR
// if side = Your_Side then
14077: LD_VAR 0 1
14081: PUSH
14082: LD_OWVAR 2
14086: EQUAL
14087: IFFALSE 14137
// begin ToLua ( LUA_ChosenTransferZone(); ) ;
14089: LD_STRING LUA_ChosenTransferZone();
14091: PPUSH
14092: CALL_OW 559
// ToLua ( LUA_UpdateTransferZone( & team_transfer_zones [ Side_Teams [ side ] ] [ side_chosen_zone [ side ] ] & ) ) ;
14096: LD_STRING LUA_UpdateTransferZone(
14098: PUSH
14099: LD_EXP 62
14103: PUSH
14104: LD_EXP 5
14108: PUSH
14109: LD_VAR 0 1
14113: ARRAY
14114: ARRAY
14115: PUSH
14116: LD_EXP 64
14120: PUSH
14121: LD_VAR 0 1
14125: ARRAY
14126: ARRAY
14127: STR
14128: PUSH
14129: LD_STRING )
14131: STR
14132: PPUSH
14133: CALL_OW 559
// end ; end ; 2041 :
14137: GO 15849
14139: LD_INT 2041
14141: DOUBLE
14142: EQUAL
14143: IFTRUE 14147
14145: GO 14379
14147: POP
// begin if side = Your_Side then
14148: LD_VAR 0 1
14152: PUSH
14153: LD_OWVAR 2
14157: EQUAL
14158: IFFALSE 14196
// SetAreaMapShow ( team_transfer_zones [ Side_Teams [ side ] ] [ side_chosen_zone [ side ] ] , 0 ) ;
14160: LD_EXP 62
14164: PUSH
14165: LD_EXP 5
14169: PUSH
14170: LD_VAR 0 1
14174: ARRAY
14175: ARRAY
14176: PUSH
14177: LD_EXP 64
14181: PUSH
14182: LD_VAR 0 1
14186: ARRAY
14187: ARRAY
14188: PPUSH
14189: LD_INT 0
14191: PPUSH
14192: CALL_OW 424
// side_chosen_zone := Replace ( side_chosen_zone , side , side_chosen_zone [ side ] - 1 ) ;
14196: LD_ADDR_EXP 64
14200: PUSH
14201: LD_EXP 64
14205: PPUSH
14206: LD_VAR 0 1
14210: PPUSH
14211: LD_EXP 64
14215: PUSH
14216: LD_VAR 0 1
14220: ARRAY
14221: PUSH
14222: LD_INT 1
14224: MINUS
14225: PPUSH
14226: CALL_OW 1
14230: ST_TO_ADDR
// if side_chosen_zone [ side ] < 1 then
14231: LD_EXP 64
14235: PUSH
14236: LD_VAR 0 1
14240: ARRAY
14241: PUSH
14242: LD_INT 1
14244: LESS
14245: IFFALSE 14288
// side_chosen_zone := Replace ( side_chosen_zone , side , team_transfer_zones [ Side_Teams [ side ] ] + 0 ) ;
14247: LD_ADDR_EXP 64
14251: PUSH
14252: LD_EXP 64
14256: PPUSH
14257: LD_VAR 0 1
14261: PPUSH
14262: LD_EXP 62
14266: PUSH
14267: LD_EXP 5
14271: PUSH
14272: LD_VAR 0 1
14276: ARRAY
14277: ARRAY
14278: PUSH
14279: LD_INT 0
14281: PLUS
14282: PPUSH
14283: CALL_OW 1
14287: ST_TO_ADDR
// if side = Your_Side then
14288: LD_VAR 0 1
14292: PUSH
14293: LD_OWVAR 2
14297: EQUAL
14298: IFFALSE 14377
// begin ToLua ( LUA_UpdateTransferZone( & team_transfer_zones [ Side_Teams [ side ] ] [ side_chosen_zone [ side ] ] & ) ) ;
14300: LD_STRING LUA_UpdateTransferZone(
14302: PUSH
14303: LD_EXP 62
14307: PUSH
14308: LD_EXP 5
14312: PUSH
14313: LD_VAR 0 1
14317: ARRAY
14318: ARRAY
14319: PUSH
14320: LD_EXP 64
14324: PUSH
14325: LD_VAR 0 1
14329: ARRAY
14330: ARRAY
14331: STR
14332: PUSH
14333: LD_STRING )
14335: STR
14336: PPUSH
14337: CALL_OW 559
// SetAreaMapShow ( team_transfer_zones [ Side_Teams [ side ] ] [ side_chosen_zone [ side ] ] , 1 ) ;
14341: LD_EXP 62
14345: PUSH
14346: LD_EXP 5
14350: PUSH
14351: LD_VAR 0 1
14355: ARRAY
14356: ARRAY
14357: PUSH
14358: LD_EXP 64
14362: PUSH
14363: LD_VAR 0 1
14367: ARRAY
14368: ARRAY
14369: PPUSH
14370: LD_INT 1
14372: PPUSH
14373: CALL_OW 424
// end ; end ; 2042 :
14377: GO 15849
14379: LD_INT 2042
14381: DOUBLE
14382: EQUAL
14383: IFTRUE 14387
14385: GO 14619
14387: POP
// begin if side = Your_Side then
14388: LD_VAR 0 1
14392: PUSH
14393: LD_OWVAR 2
14397: EQUAL
14398: IFFALSE 14436
// SetAreaMapShow ( team_transfer_zones [ Side_Teams [ side ] ] [ side_chosen_zone [ side ] ] , 0 ) ;
14400: LD_EXP 62
14404: PUSH
14405: LD_EXP 5
14409: PUSH
14410: LD_VAR 0 1
14414: ARRAY
14415: ARRAY
14416: PUSH
14417: LD_EXP 64
14421: PUSH
14422: LD_VAR 0 1
14426: ARRAY
14427: ARRAY
14428: PPUSH
14429: LD_INT 0
14431: PPUSH
14432: CALL_OW 424
// side_chosen_zone := Replace ( side_chosen_zone , side , side_chosen_zone [ side ] + 1 ) ;
14436: LD_ADDR_EXP 64
14440: PUSH
14441: LD_EXP 64
14445: PPUSH
14446: LD_VAR 0 1
14450: PPUSH
14451: LD_EXP 64
14455: PUSH
14456: LD_VAR 0 1
14460: ARRAY
14461: PUSH
14462: LD_INT 1
14464: PLUS
14465: PPUSH
14466: CALL_OW 1
14470: ST_TO_ADDR
// if side_chosen_zone [ side ] > team_transfer_zones [ Side_Teams [ side ] ] + 0 then
14471: LD_EXP 64
14475: PUSH
14476: LD_VAR 0 1
14480: ARRAY
14481: PUSH
14482: LD_EXP 62
14486: PUSH
14487: LD_EXP 5
14491: PUSH
14492: LD_VAR 0 1
14496: ARRAY
14497: ARRAY
14498: PUSH
14499: LD_INT 0
14501: PLUS
14502: GREATER
14503: IFFALSE 14528
// side_chosen_zone := Replace ( side_chosen_zone , side , 1 ) ;
14505: LD_ADDR_EXP 64
14509: PUSH
14510: LD_EXP 64
14514: PPUSH
14515: LD_VAR 0 1
14519: PPUSH
14520: LD_INT 1
14522: PPUSH
14523: CALL_OW 1
14527: ST_TO_ADDR
// if side = Your_Side then
14528: LD_VAR 0 1
14532: PUSH
14533: LD_OWVAR 2
14537: EQUAL
14538: IFFALSE 14617
// begin ToLua ( LUA_UpdateTransferZone( & team_transfer_zones [ Side_Teams [ side ] ] [ side_chosen_zone [ side ] ] & ) ) ;
14540: LD_STRING LUA_UpdateTransferZone(
14542: PUSH
14543: LD_EXP 62
14547: PUSH
14548: LD_EXP 5
14552: PUSH
14553: LD_VAR 0 1
14557: ARRAY
14558: ARRAY
14559: PUSH
14560: LD_EXP 64
14564: PUSH
14565: LD_VAR 0 1
14569: ARRAY
14570: ARRAY
14571: STR
14572: PUSH
14573: LD_STRING )
14575: STR
14576: PPUSH
14577: CALL_OW 559
// SetAreaMapShow ( team_transfer_zones [ Side_Teams [ side ] ] [ side_chosen_zone [ side ] ] , 1 ) ;
14581: LD_EXP 62
14585: PUSH
14586: LD_EXP 5
14590: PUSH
14591: LD_VAR 0 1
14595: ARRAY
14596: ARRAY
14597: PUSH
14598: LD_EXP 64
14602: PUSH
14603: LD_VAR 0 1
14607: ARRAY
14608: ARRAY
14609: PPUSH
14610: LD_INT 1
14612: PPUSH
14613: CALL_OW 424
// end ; end ; 205 :
14617: GO 15849
14619: LD_INT 205
14621: DOUBLE
14622: EQUAL
14623: IFTRUE 14627
14625: GO 15237
14627: POP
// begin side_units_outside := Replace ( side_units_outside , side , FilterUnitsInArea ( team_transfer_zones [ Side_Teams [ side ] ] [ side_chosen_zone [ side ] ] , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , 12 ] , [ f_weapon , 32 ] , [ f_weapon , 51 ] ] , [ f_or , [ f_and , [ f_control , 2 ] , [ f_linked ] ] , [ f_and , [ f_control , 1 ] , [ f_occupied ] ] , [ f_control , 3 ] ] ] ) ) ;
14628: LD_ADDR_EXP 67
14632: PUSH
14633: LD_EXP 67
14637: PPUSH
14638: LD_VAR 0 1
14642: PPUSH
14643: LD_EXP 62
14647: PUSH
14648: LD_EXP 5
14652: PUSH
14653: LD_VAR 0 1
14657: ARRAY
14658: ARRAY
14659: PUSH
14660: LD_EXP 64
14664: PUSH
14665: LD_VAR 0 1
14669: ARRAY
14670: ARRAY
14671: PPUSH
14672: LD_INT 22
14674: PUSH
14675: LD_VAR 0 1
14679: PUSH
14680: EMPTY
14681: LIST
14682: LIST
14683: PUSH
14684: LD_INT 21
14686: PUSH
14687: LD_INT 2
14689: PUSH
14690: EMPTY
14691: LIST
14692: LIST
14693: PUSH
14694: LD_INT 2
14696: PUSH
14697: LD_INT 34
14699: PUSH
14700: LD_INT 12
14702: PUSH
14703: EMPTY
14704: LIST
14705: LIST
14706: PUSH
14707: LD_INT 34
14709: PUSH
14710: LD_INT 32
14712: PUSH
14713: EMPTY
14714: LIST
14715: LIST
14716: PUSH
14717: LD_INT 34
14719: PUSH
14720: LD_INT 51
14722: PUSH
14723: EMPTY
14724: LIST
14725: LIST
14726: PUSH
14727: EMPTY
14728: LIST
14729: LIST
14730: LIST
14731: LIST
14732: PUSH
14733: LD_INT 2
14735: PUSH
14736: LD_INT 1
14738: PUSH
14739: LD_INT 33
14741: PUSH
14742: LD_INT 2
14744: PUSH
14745: EMPTY
14746: LIST
14747: LIST
14748: PUSH
14749: LD_INT 61
14751: PUSH
14752: EMPTY
14753: LIST
14754: PUSH
14755: EMPTY
14756: LIST
14757: LIST
14758: LIST
14759: PUSH
14760: LD_INT 1
14762: PUSH
14763: LD_INT 33
14765: PUSH
14766: LD_INT 1
14768: PUSH
14769: EMPTY
14770: LIST
14771: LIST
14772: PUSH
14773: LD_INT 59
14775: PUSH
14776: EMPTY
14777: LIST
14778: PUSH
14779: EMPTY
14780: LIST
14781: LIST
14782: LIST
14783: PUSH
14784: LD_INT 33
14786: PUSH
14787: LD_INT 3
14789: PUSH
14790: EMPTY
14791: LIST
14792: LIST
14793: PUSH
14794: EMPTY
14795: LIST
14796: LIST
14797: LIST
14798: LIST
14799: PUSH
14800: EMPTY
14801: LIST
14802: LIST
14803: LIST
14804: LIST
14805: PPUSH
14806: CALL_OW 70
14810: PPUSH
14811: CALL_OW 1
14815: ST_TO_ADDR
// for i in side_units_outside [ side ] do
14816: LD_ADDR_VAR 0 7
14820: PUSH
14821: LD_EXP 67
14825: PUSH
14826: LD_VAR 0 1
14830: ARRAY
14831: PUSH
14832: FOR_IN
14833: IFFALSE 14846
// RemoveUnit ( i ) ;
14835: LD_VAR 0 7
14839: PPUSH
14840: CALL_OW 64
14844: GO 14832
14846: POP
14847: POP
// side_resources_remaining := Replace ( side_resources_remaining , side , Replace ( side_resources_remaining [ side ] , 1 , side_resources_delivered [ side ] [ 1 ] - side_pending_order [ side ] [ 1 ] ) ) ;
14848: LD_ADDR_EXP 69
14852: PUSH
14853: LD_EXP 69
14857: PPUSH
14858: LD_VAR 0 1
14862: PPUSH
14863: LD_EXP 69
14867: PUSH
14868: LD_VAR 0 1
14872: ARRAY
14873: PPUSH
14874: LD_INT 1
14876: PPUSH
14877: LD_EXP 60
14881: PUSH
14882: LD_VAR 0 1
14886: ARRAY
14887: PUSH
14888: LD_INT 1
14890: ARRAY
14891: PUSH
14892: LD_EXP 59
14896: PUSH
14897: LD_VAR 0 1
14901: ARRAY
14902: PUSH
14903: LD_INT 1
14905: ARRAY
14906: MINUS
14907: PPUSH
14908: CALL_OW 1
14912: PPUSH
14913: CALL_OW 1
14917: ST_TO_ADDR
// side_resources_remaining := Replace ( side_resources_remaining , side , Replace ( side_resources_remaining [ side ] , 2 , side_resources_delivered [ side ] [ 2 ] - side_pending_order [ side ] [ 2 ] ) ) ;
14918: LD_ADDR_EXP 69
14922: PUSH
14923: LD_EXP 69
14927: PPUSH
14928: LD_VAR 0 1
14932: PPUSH
14933: LD_EXP 69
14937: PUSH
14938: LD_VAR 0 1
14942: ARRAY
14943: PPUSH
14944: LD_INT 2
14946: PPUSH
14947: LD_EXP 60
14951: PUSH
14952: LD_VAR 0 1
14956: ARRAY
14957: PUSH
14958: LD_INT 2
14960: ARRAY
14961: PUSH
14962: LD_EXP 59
14966: PUSH
14967: LD_VAR 0 1
14971: ARRAY
14972: PUSH
14973: LD_INT 2
14975: ARRAY
14976: MINUS
14977: PPUSH
14978: CALL_OW 1
14982: PPUSH
14983: CALL_OW 1
14987: ST_TO_ADDR
// side_resources_remaining := Replace ( side_resources_remaining , side , Replace ( side_resources_remaining [ side ] , 3 , side_resources_delivered [ side ] [ 3 ] - side_pending_order [ side ] [ 3 ] ) ) ;
14988: LD_ADDR_EXP 69
14992: PUSH
14993: LD_EXP 69
14997: PPUSH
14998: LD_VAR 0 1
15002: PPUSH
15003: LD_EXP 69
15007: PUSH
15008: LD_VAR 0 1
15012: ARRAY
15013: PPUSH
15014: LD_INT 3
15016: PPUSH
15017: LD_EXP 60
15021: PUSH
15022: LD_VAR 0 1
15026: ARRAY
15027: PUSH
15028: LD_INT 3
15030: ARRAY
15031: PUSH
15032: LD_EXP 59
15036: PUSH
15037: LD_VAR 0 1
15041: ARRAY
15042: PUSH
15043: LD_INT 3
15045: ARRAY
15046: MINUS
15047: PPUSH
15048: CALL_OW 1
15052: PPUSH
15053: CALL_OW 1
15057: ST_TO_ADDR
// if side_order_type [ side ] = 3 then
15058: LD_EXP 68
15062: PUSH
15063: LD_VAR 0 1
15067: ARRAY
15068: PUSH
15069: LD_INT 3
15071: EQUAL
15072: IFFALSE 15128
// side_resources_remaining := Replace ( side_resources_remaining , side , Replace ( side_resources_remaining [ side ] , 3 , side_resources_delivered [ side ] [ 3 ] ) ) ;
15074: LD_ADDR_EXP 69
15078: PUSH
15079: LD_EXP 69
15083: PPUSH
15084: LD_VAR 0 1
15088: PPUSH
15089: LD_EXP 69
15093: PUSH
15094: LD_VAR 0 1
15098: ARRAY
15099: PPUSH
15100: LD_INT 3
15102: PPUSH
15103: LD_EXP 60
15107: PUSH
15108: LD_VAR 0 1
15112: ARRAY
15113: PUSH
15114: LD_INT 3
15116: ARRAY
15117: PPUSH
15118: CALL_OW 1
15122: PPUSH
15123: CALL_OW 1
15127: ST_TO_ADDR
// side_transfer_clocks := Replace ( side_transfer_clocks , side , tick + 3 3$0 ) ;
15128: LD_ADDR_EXP 66
15132: PUSH
15133: LD_EXP 66
15137: PPUSH
15138: LD_VAR 0 1
15142: PPUSH
15143: LD_OWVAR 1
15147: PUSH
15148: LD_INT 6300
15150: PLUS
15151: PPUSH
15152: CALL_OW 1
15156: ST_TO_ADDR
// side_transfer_pending := Replace ( side_transfer_pending , side , 1 ) ;
15157: LD_ADDR_EXP 70
15161: PUSH
15162: LD_EXP 70
15166: PPUSH
15167: LD_VAR 0 1
15171: PPUSH
15172: LD_INT 1
15174: PPUSH
15175: CALL_OW 1
15179: ST_TO_ADDR
// if side = Your_Side then
15180: LD_VAR 0 1
15184: PUSH
15185: LD_OWVAR 2
15189: EQUAL
15190: IFFALSE 15235
// begin SetAreaMapShow ( team_transfer_zones [ Side_Teams [ side ] ] [ side_chosen_zone [ side ] ] , 0 ) ;
15192: LD_EXP 62
15196: PUSH
15197: LD_EXP 5
15201: PUSH
15202: LD_VAR 0 1
15206: ARRAY
15207: ARRAY
15208: PUSH
15209: LD_EXP 64
15213: PUSH
15214: LD_VAR 0 1
15218: ARRAY
15219: ARRAY
15220: PPUSH
15221: LD_INT 0
15223: PPUSH
15224: CALL_OW 424
// ToLua ( LUA_WaitingTransfer(); ) ;
15228: LD_STRING LUA_WaitingTransfer();
15230: PPUSH
15231: CALL_OW 559
// end ; end ; 300 :
15235: GO 15849
15237: LD_INT 300
15239: DOUBLE
15240: EQUAL
15241: IFTRUE 15245
15243: GO 15445
15245: POP
// begin side_pending_order := Replace ( side_pending_order , side , Replace ( side_pending_order [ side ] , 1 , 0 ) ) ;
15246: LD_ADDR_EXP 59
15250: PUSH
15251: LD_EXP 59
15255: PPUSH
15256: LD_VAR 0 1
15260: PPUSH
15261: LD_EXP 59
15265: PUSH
15266: LD_VAR 0 1
15270: ARRAY
15271: PPUSH
15272: LD_INT 1
15274: PPUSH
15275: LD_INT 0
15277: PPUSH
15278: CALL_OW 1
15282: PPUSH
15283: CALL_OW 1
15287: ST_TO_ADDR
// side_pending_order := Replace ( side_pending_order , side , Replace ( side_pending_order [ side ] , 2 , 0 ) ) ;
15288: LD_ADDR_EXP 59
15292: PUSH
15293: LD_EXP 59
15297: PPUSH
15298: LD_VAR 0 1
15302: PPUSH
15303: LD_EXP 59
15307: PUSH
15308: LD_VAR 0 1
15312: ARRAY
15313: PPUSH
15314: LD_INT 2
15316: PPUSH
15317: LD_INT 0
15319: PPUSH
15320: CALL_OW 1
15324: PPUSH
15325: CALL_OW 1
15329: ST_TO_ADDR
// side_pending_order := Replace ( side_pending_order , side , Replace ( side_pending_order [ side ] , 3 , 0 ) ) ;
15330: LD_ADDR_EXP 59
15334: PUSH
15335: LD_EXP 59
15339: PPUSH
15340: LD_VAR 0 1
15344: PPUSH
15345: LD_EXP 59
15349: PUSH
15350: LD_VAR 0 1
15354: ARRAY
15355: PPUSH
15356: LD_INT 3
15358: PPUSH
15359: LD_INT 0
15361: PPUSH
15362: CALL_OW 1
15366: PPUSH
15367: CALL_OW 1
15371: ST_TO_ADDR
// side_zone_locked := Replace ( side_zone_locked , side , 0 ) ;
15372: LD_ADDR_EXP 65
15376: PUSH
15377: LD_EXP 65
15381: PPUSH
15382: LD_VAR 0 1
15386: PPUSH
15387: LD_INT 0
15389: PPUSH
15390: CALL_OW 1
15394: ST_TO_ADDR
// if side = Your_Side then
15395: LD_VAR 0 1
15399: PUSH
15400: LD_OWVAR 2
15404: EQUAL
15405: IFFALSE 15443
// SetAreaMapShow ( team_transfer_zones [ Side_Teams [ side ] ] [ side_chosen_zone [ side ] ] , 0 ) ;
15407: LD_EXP 62
15411: PUSH
15412: LD_EXP 5
15416: PUSH
15417: LD_VAR 0 1
15421: ARRAY
15422: ARRAY
15423: PUSH
15424: LD_EXP 64
15428: PUSH
15429: LD_VAR 0 1
15433: ARRAY
15434: ARRAY
15435: PPUSH
15436: LD_INT 0
15438: PPUSH
15439: CALL_OW 424
// end ; 301 :
15443: GO 15849
15445: LD_INT 301
15447: DOUBLE
15448: EQUAL
15449: IFTRUE 15453
15451: GO 15848
15453: POP
// begin side_pending_order := Replace ( side_pending_order , side , Replace ( side_pending_order [ side ] , 1 , 0 ) ) ;
15454: LD_ADDR_EXP 59
15458: PUSH
15459: LD_EXP 59
15463: PPUSH
15464: LD_VAR 0 1
15468: PPUSH
15469: LD_EXP 59
15473: PUSH
15474: LD_VAR 0 1
15478: ARRAY
15479: PPUSH
15480: LD_INT 1
15482: PPUSH
15483: LD_INT 0
15485: PPUSH
15486: CALL_OW 1
15490: PPUSH
15491: CALL_OW 1
15495: ST_TO_ADDR
// side_pending_order := Replace ( side_pending_order , side , Replace ( side_pending_order [ side ] , 2 , 0 ) ) ;
15496: LD_ADDR_EXP 59
15500: PUSH
15501: LD_EXP 59
15505: PPUSH
15506: LD_VAR 0 1
15510: PPUSH
15511: LD_EXP 59
15515: PUSH
15516: LD_VAR 0 1
15520: ARRAY
15521: PPUSH
15522: LD_INT 2
15524: PPUSH
15525: LD_INT 0
15527: PPUSH
15528: CALL_OW 1
15532: PPUSH
15533: CALL_OW 1
15537: ST_TO_ADDR
// side_pending_order := Replace ( side_pending_order , side , Replace ( side_pending_order [ side ] , 3 , 0 ) ) ;
15538: LD_ADDR_EXP 59
15542: PUSH
15543: LD_EXP 59
15547: PPUSH
15548: LD_VAR 0 1
15552: PPUSH
15553: LD_EXP 59
15557: PUSH
15558: LD_VAR 0 1
15562: ARRAY
15563: PPUSH
15564: LD_INT 3
15566: PPUSH
15567: LD_INT 0
15569: PPUSH
15570: CALL_OW 1
15574: PPUSH
15575: CALL_OW 1
15579: ST_TO_ADDR
// side_zone_locked := Replace ( side_zone_locked , side , 0 ) ;
15580: LD_ADDR_EXP 65
15584: PUSH
15585: LD_EXP 65
15589: PPUSH
15590: LD_VAR 0 1
15594: PPUSH
15595: LD_INT 0
15597: PPUSH
15598: CALL_OW 1
15602: ST_TO_ADDR
// side_transfer_pending := Replace ( side_transfer_pending , side , 0 ) ;
15603: LD_ADDR_EXP 70
15607: PUSH
15608: LD_EXP 70
15612: PPUSH
15613: LD_VAR 0 1
15617: PPUSH
15618: LD_INT 0
15620: PPUSH
15621: CALL_OW 1
15625: ST_TO_ADDR
// side_transfer_clocks := Replace ( side_transfer_clocks , side , 0 0$0 ) ;
15626: LD_ADDR_EXP 66
15630: PUSH
15631: LD_EXP 66
15635: PPUSH
15636: LD_VAR 0 1
15640: PPUSH
15641: LD_INT 0
15643: PPUSH
15644: CALL_OW 1
15648: ST_TO_ADDR
// side_resources_remaining := Replace ( side_resources_remaining , side , Replace ( side_resources_remaining [ side ] , 1 , 0 ) ) ;
15649: LD_ADDR_EXP 69
15653: PUSH
15654: LD_EXP 69
15658: PPUSH
15659: LD_VAR 0 1
15663: PPUSH
15664: LD_EXP 69
15668: PUSH
15669: LD_VAR 0 1
15673: ARRAY
15674: PPUSH
15675: LD_INT 1
15677: PPUSH
15678: LD_INT 0
15680: PPUSH
15681: CALL_OW 1
15685: PPUSH
15686: CALL_OW 1
15690: ST_TO_ADDR
// side_resources_remaining := Replace ( side_resources_remaining , side , Replace ( side_resources_remaining [ side ] , 2 , 0 ) ) ;
15691: LD_ADDR_EXP 69
15695: PUSH
15696: LD_EXP 69
15700: PPUSH
15701: LD_VAR 0 1
15705: PPUSH
15706: LD_EXP 69
15710: PUSH
15711: LD_VAR 0 1
15715: ARRAY
15716: PPUSH
15717: LD_INT 2
15719: PPUSH
15720: LD_INT 0
15722: PPUSH
15723: CALL_OW 1
15727: PPUSH
15728: CALL_OW 1
15732: ST_TO_ADDR
// side_resources_remaining := Replace ( side_resources_remaining , side , Replace ( side_resources_remaining [ side ] , 3 , 0 ) ) ;
15733: LD_ADDR_EXP 69
15737: PUSH
15738: LD_EXP 69
15742: PPUSH
15743: LD_VAR 0 1
15747: PPUSH
15748: LD_EXP 69
15752: PUSH
15753: LD_VAR 0 1
15757: ARRAY
15758: PPUSH
15759: LD_INT 3
15761: PPUSH
15762: LD_INT 0
15764: PPUSH
15765: CALL_OW 1
15769: PPUSH
15770: CALL_OW 1
15774: ST_TO_ADDR
// side_units_outside := Replace ( side_units_outside , side , 0 ) ;
15775: LD_ADDR_EXP 67
15779: PUSH
15780: LD_EXP 67
15784: PPUSH
15785: LD_VAR 0 1
15789: PPUSH
15790: LD_INT 0
15792: PPUSH
15793: CALL_OW 1
15797: ST_TO_ADDR
// if side = Your_Side then
15798: LD_VAR 0 1
15802: PUSH
15803: LD_OWVAR 2
15807: EQUAL
15808: IFFALSE 15846
// SetAreaMapShow ( team_transfer_zones [ Side_Teams [ side ] ] [ side_chosen_zone [ side ] ] , 0 ) ;
15810: LD_EXP 62
15814: PUSH
15815: LD_EXP 5
15819: PUSH
15820: LD_VAR 0 1
15824: ARRAY
15825: ARRAY
15826: PUSH
15827: LD_EXP 64
15831: PUSH
15832: LD_VAR 0 1
15836: ARRAY
15837: ARRAY
15838: PPUSH
15839: LD_INT 0
15841: PPUSH
15842: CALL_OW 424
// end ; end ;
15846: GO 15849
15848: POP
// end ; end_of_file
15849: PPOPN 7
15851: END
// export function CYCLIC_CrateSpawn ; var i , j , k , amount ; begin
15852: LD_INT 0
15854: PPUSH
15855: PPUSH
15856: PPUSH
15857: PPUSH
15858: PPUSH
// for i = 1 to position_drop_zones do
15859: LD_ADDR_VAR 0 2
15863: PUSH
15864: DOUBLE
15865: LD_INT 1
15867: DEC
15868: ST_TO_ADDR
15869: LD_EXP 36
15873: PUSH
15874: FOR_TO
15875: IFFALSE 16025
// begin amount := Rand ( position_drop_zones [ i ] [ 1 ] , 5 ) ;
15877: LD_ADDR_VAR 0 5
15881: PUSH
15882: LD_EXP 36
15886: PUSH
15887: LD_VAR 0 2
15891: ARRAY
15892: PUSH
15893: LD_INT 1
15895: ARRAY
15896: PPUSH
15897: LD_INT 5
15899: PPUSH
15900: CALL_OW 12
15904: ST_TO_ADDR
// for j = 3 to position_drop_zones [ i ] do
15905: LD_ADDR_VAR 0 3
15909: PUSH
15910: DOUBLE
15911: LD_INT 3
15913: DEC
15914: ST_TO_ADDR
15915: LD_EXP 36
15919: PUSH
15920: LD_VAR 0 2
15924: ARRAY
15925: PUSH
15926: FOR_TO
15927: IFFALSE 16021
// if Prob ( position_drop_zones [ i ] [ 2 ] ) then
15929: LD_EXP 36
15933: PUSH
15934: LD_VAR 0 2
15938: ARRAY
15939: PUSH
15940: LD_INT 2
15942: ARRAY
15943: PPUSH
15944: CALL_OW 13
15948: IFFALSE 16019
// for k = 1 to position_drop_zones [ i ] [ j ] do
15950: LD_ADDR_VAR 0 4
15954: PUSH
15955: DOUBLE
15956: LD_INT 1
15958: DEC
15959: ST_TO_ADDR
15960: LD_EXP 36
15964: PUSH
15965: LD_VAR 0 2
15969: ARRAY
15970: PUSH
15971: LD_VAR 0 3
15975: ARRAY
15976: PUSH
15977: FOR_TO
15978: IFFALSE 16017
// CreateCratesArea ( amount , position_drop_zones [ i ] [ j ] [ k ] , true ) ;
15980: LD_VAR 0 5
15984: PPUSH
15985: LD_EXP 36
15989: PUSH
15990: LD_VAR 0 2
15994: ARRAY
15995: PUSH
15996: LD_VAR 0 3
16000: ARRAY
16001: PUSH
16002: LD_VAR 0 4
16006: ARRAY
16007: PPUSH
16008: LD_INT 1
16010: PPUSH
16011: CALL_OW 55
16015: GO 15977
16017: POP
16018: POP
16019: GO 15926
16021: POP
16022: POP
// end ;
16023: GO 15874
16025: POP
16026: POP
// end ;
16027: LD_VAR 0 1
16031: RET
// export function CYCLIC_HumanSpawn ; var i , j , entity , areas , outside , side , arguments , human ; begin
16032: LD_INT 0
16034: PPUSH
16035: PPUSH
16036: PPUSH
16037: PPUSH
16038: PPUSH
16039: PPUSH
16040: PPUSH
16041: PPUSH
16042: PPUSH
// side_soldier_count := [ [ 1 , 0 ] , [ 2 , 0 ] , [ 3 , 0 ] , [ 4 , 0 ] , [ 5 , 0 ] , [ 6 , 0 ] , [ 7 , 0 ] , [ 8 , 0 ] ] ;
16043: LD_ADDR_EXP 48
16047: PUSH
16048: LD_INT 1
16050: PUSH
16051: LD_INT 0
16053: PUSH
16054: EMPTY
16055: LIST
16056: LIST
16057: PUSH
16058: LD_INT 2
16060: PUSH
16061: LD_INT 0
16063: PUSH
16064: EMPTY
16065: LIST
16066: LIST
16067: PUSH
16068: LD_INT 3
16070: PUSH
16071: LD_INT 0
16073: PUSH
16074: EMPTY
16075: LIST
16076: LIST
16077: PUSH
16078: LD_INT 4
16080: PUSH
16081: LD_INT 0
16083: PUSH
16084: EMPTY
16085: LIST
16086: LIST
16087: PUSH
16088: LD_INT 5
16090: PUSH
16091: LD_INT 0
16093: PUSH
16094: EMPTY
16095: LIST
16096: LIST
16097: PUSH
16098: LD_INT 6
16100: PUSH
16101: LD_INT 0
16103: PUSH
16104: EMPTY
16105: LIST
16106: LIST
16107: PUSH
16108: LD_INT 7
16110: PUSH
16111: LD_INT 0
16113: PUSH
16114: EMPTY
16115: LIST
16116: LIST
16117: PUSH
16118: LD_INT 8
16120: PUSH
16121: LD_INT 0
16123: PUSH
16124: EMPTY
16125: LIST
16126: LIST
16127: PUSH
16128: EMPTY
16129: LIST
16130: LIST
16131: LIST
16132: LIST
16133: LIST
16134: LIST
16135: LIST
16136: LIST
16137: ST_TO_ADDR
// arguments := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
16138: LD_ADDR_VAR 0 8
16142: PUSH
16143: LD_INT 0
16145: PUSH
16146: LD_INT 0
16148: PUSH
16149: LD_INT 0
16151: PUSH
16152: LD_INT 0
16154: PUSH
16155: LD_INT 0
16157: PUSH
16158: LD_INT 0
16160: PUSH
16161: LD_INT 0
16163: PUSH
16164: LD_INT 0
16166: PUSH
16167: EMPTY
16168: LIST
16169: LIST
16170: LIST
16171: LIST
16172: LIST
16173: LIST
16174: LIST
16175: LIST
16176: ST_TO_ADDR
// new_character_EON := [ 0 , Rand ( 1 , 4 ) , [ Rand ( 8 , 12 ) , Rand ( 8 , 12 ) ] , [ 0 , 0 , 0 , 0 ] , [ Rand ( 0 , experience ) , Rand ( 0 , experience ) , Rand ( 0 , experience ) , Rand ( 0 , experience ) ] , 0 ] ;
16177: LD_ADDR_EXP 44
16181: PUSH
16182: LD_INT 0
16184: PUSH
16185: LD_INT 1
16187: PPUSH
16188: LD_INT 4
16190: PPUSH
16191: CALL_OW 12
16195: PUSH
16196: LD_INT 8
16198: PPUSH
16199: LD_INT 12
16201: PPUSH
16202: CALL_OW 12
16206: PUSH
16207: LD_INT 8
16209: PPUSH
16210: LD_INT 12
16212: PPUSH
16213: CALL_OW 12
16217: PUSH
16218: EMPTY
16219: LIST
16220: LIST
16221: PUSH
16222: LD_INT 0
16224: PUSH
16225: LD_INT 0
16227: PUSH
16228: LD_INT 0
16230: PUSH
16231: LD_INT 0
16233: PUSH
16234: EMPTY
16235: LIST
16236: LIST
16237: LIST
16238: LIST
16239: PUSH
16240: LD_INT 0
16242: PPUSH
16243: LD_EXP 20
16247: PPUSH
16248: CALL_OW 12
16252: PUSH
16253: LD_INT 0
16255: PPUSH
16256: LD_EXP 20
16260: PPUSH
16261: CALL_OW 12
16265: PUSH
16266: LD_INT 0
16268: PPUSH
16269: LD_EXP 20
16273: PPUSH
16274: CALL_OW 12
16278: PUSH
16279: LD_INT 0
16281: PPUSH
16282: LD_EXP 20
16286: PPUSH
16287: CALL_OW 12
16291: PUSH
16292: EMPTY
16293: LIST
16294: LIST
16295: LIST
16296: LIST
16297: PUSH
16298: LD_INT 0
16300: PUSH
16301: EMPTY
16302: LIST
16303: LIST
16304: LIST
16305: LIST
16306: LIST
16307: LIST
16308: ST_TO_ADDR
// for i = 8 downto 1 do
16309: LD_ADDR_VAR 0 2
16313: PUSH
16314: DOUBLE
16315: LD_INT 8
16317: INC
16318: ST_TO_ADDR
16319: LD_INT 1
16321: PUSH
16322: FOR_DOWNTO
16323: IFFALSE 16416
// begin side_soldier_count := Replace ( side_soldier_count , i , Replace ( side_soldier_count [ i ] , 2 , side_soldiers [ i ] + 0 ) ) ;
16325: LD_ADDR_EXP 48
16329: PUSH
16330: LD_EXP 48
16334: PPUSH
16335: LD_VAR 0 2
16339: PPUSH
16340: LD_EXP 48
16344: PUSH
16345: LD_VAR 0 2
16349: ARRAY
16350: PPUSH
16351: LD_INT 2
16353: PPUSH
16354: LD_EXP 46
16358: PUSH
16359: LD_VAR 0 2
16363: ARRAY
16364: PUSH
16365: LD_INT 0
16367: PLUS
16368: PPUSH
16369: CALL_OW 1
16373: PPUSH
16374: CALL_OW 1
16378: ST_TO_ADDR
// arguments := Replace ( arguments , i , side_soldiers [ i ] + 0 ) ;
16379: LD_ADDR_VAR 0 8
16383: PUSH
16384: LD_VAR 0 8
16388: PPUSH
16389: LD_VAR 0 2
16393: PPUSH
16394: LD_EXP 46
16398: PUSH
16399: LD_VAR 0 2
16403: ARRAY
16404: PUSH
16405: LD_INT 0
16407: PLUS
16408: PPUSH
16409: CALL_OW 1
16413: ST_TO_ADDR
// end ;
16414: GO 16322
16416: POP
16417: POP
// for i = 8 downto 1 do
16418: LD_ADDR_VAR 0 2
16422: PUSH
16423: DOUBLE
16424: LD_INT 8
16426: INC
16427: ST_TO_ADDR
16428: LD_INT 1
16430: PUSH
16431: FOR_DOWNTO
16432: IFFALSE 16489
// if not side_isalive [ i ] then
16434: LD_EXP 54
16438: PUSH
16439: LD_VAR 0 2
16443: ARRAY
16444: NOT
16445: IFFALSE 16487
// begin side_soldier_count := Delete ( side_soldier_count , i ) ;
16447: LD_ADDR_EXP 48
16451: PUSH
16452: LD_EXP 48
16456: PPUSH
16457: LD_VAR 0 2
16461: PPUSH
16462: CALL_OW 3
16466: ST_TO_ADDR
// arguments := Delete ( arguments , i ) ;
16467: LD_ADDR_VAR 0 8
16471: PUSH
16472: LD_VAR 0 8
16476: PPUSH
16477: LD_VAR 0 2
16481: PPUSH
16482: CALL_OW 3
16486: ST_TO_ADDR
// end ;
16487: GO 16431
16489: POP
16490: POP
// side_soldier_count := SortListByListAsc ( side_soldier_count , arguments ) ;
16491: LD_ADDR_EXP 48
16495: PUSH
16496: LD_EXP 48
16500: PPUSH
16501: LD_VAR 0 8
16505: PPUSH
16506: CALL_OW 76
16510: ST_TO_ADDR
// for i = side_soldier_count + 0 downto 1 do
16511: LD_ADDR_VAR 0 2
16515: PUSH
16516: DOUBLE
16517: LD_EXP 48
16521: PUSH
16522: LD_INT 0
16524: PLUS
16525: INC
16526: ST_TO_ADDR
16527: LD_INT 1
16529: PUSH
16530: FOR_DOWNTO
16531: IFFALSE 16585
// begin if side_soldier_count [ i ] [ 2 ] > side_soldier_count [ 1 ] [ 2 ] then
16533: LD_EXP 48
16537: PUSH
16538: LD_VAR 0 2
16542: ARRAY
16543: PUSH
16544: LD_INT 2
16546: ARRAY
16547: PUSH
16548: LD_EXP 48
16552: PUSH
16553: LD_INT 1
16555: ARRAY
16556: PUSH
16557: LD_INT 2
16559: ARRAY
16560: GREATER
16561: IFFALSE 16583
// side_soldier_count := Delete ( side_soldier_count , i ) ;
16563: LD_ADDR_EXP 48
16567: PUSH
16568: LD_EXP 48
16572: PPUSH
16573: LD_VAR 0 2
16577: PPUSH
16578: CALL_OW 3
16582: ST_TO_ADDR
// end ;
16583: GO 16530
16585: POP
16586: POP
// side := side_soldier_count [ Rand ( 1 , side_soldier_count ) ] [ 1 ] ;
16587: LD_ADDR_VAR 0 7
16591: PUSH
16592: LD_EXP 48
16596: PUSH
16597: LD_INT 1
16599: PPUSH
16600: LD_EXP 48
16604: PPUSH
16605: CALL_OW 12
16609: ARRAY
16610: PUSH
16611: LD_INT 1
16613: ARRAY
16614: ST_TO_ADDR
// if side_soldiers [ side ] > 0 then
16615: LD_EXP 46
16619: PUSH
16620: LD_VAR 0 7
16624: ARRAY
16625: PUSH
16626: LD_INT 0
16628: GREATER
16629: IFFALSE 16669
// entity := side_soldiers [ side ] [ Rand ( 1 , side_soldiers [ side ] ) ] else
16631: LD_ADDR_VAR 0 4
16635: PUSH
16636: LD_EXP 46
16640: PUSH
16641: LD_VAR 0 7
16645: ARRAY
16646: PUSH
16647: LD_INT 1
16649: PPUSH
16650: LD_EXP 46
16654: PUSH
16655: LD_VAR 0 7
16659: ARRAY
16660: PPUSH
16661: CALL_OW 12
16665: ARRAY
16666: ST_TO_ADDR
16667: GO 16758
// begin entity := FilterAllUnits ( [ [ f_side , side ] , [ f_type , 3 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) ;
16669: LD_ADDR_VAR 0 4
16673: PUSH
16674: LD_INT 22
16676: PUSH
16677: LD_VAR 0 7
16681: PUSH
16682: EMPTY
16683: LIST
16684: LIST
16685: PUSH
16686: LD_INT 21
16688: PUSH
16689: LD_INT 3
16691: PUSH
16692: EMPTY
16693: LIST
16694: LIST
16695: PUSH
16696: LD_INT 2
16698: PUSH
16699: LD_INT 30
16701: PUSH
16702: LD_INT 0
16704: PUSH
16705: EMPTY
16706: LIST
16707: LIST
16708: PUSH
16709: LD_INT 30
16711: PUSH
16712: LD_INT 1
16714: PUSH
16715: EMPTY
16716: LIST
16717: LIST
16718: PUSH
16719: EMPTY
16720: LIST
16721: LIST
16722: LIST
16723: PUSH
16724: EMPTY
16725: LIST
16726: LIST
16727: LIST
16728: PPUSH
16729: CALL_OW 69
16733: ST_TO_ADDR
// entity := entity [ Rand ( 1 , entity ) ] ;
16734: LD_ADDR_VAR 0 4
16738: PUSH
16739: LD_VAR 0 4
16743: PUSH
16744: LD_INT 1
16746: PPUSH
16747: LD_VAR 0 4
16751: PPUSH
16752: CALL_OW 12
16756: ARRAY
16757: ST_TO_ADDR
// end ; outside := 0 ;
16758: LD_ADDR_VAR 0 6
16762: PUSH
16763: LD_INT 0
16765: ST_TO_ADDR
// areas := 0 ;
16766: LD_ADDR_VAR 0 5
16770: PUSH
16771: LD_INT 0
16773: ST_TO_ADDR
// for i = 1 to position_drop_zones do
16774: LD_ADDR_VAR 0 2
16778: PUSH
16779: DOUBLE
16780: LD_INT 1
16782: DEC
16783: ST_TO_ADDR
16784: LD_EXP 36
16788: PUSH
16789: FOR_TO
16790: IFFALSE 17082
// for j = 1 to position_drop_zones [ i ] [ 3 ] do
16792: LD_ADDR_VAR 0 3
16796: PUSH
16797: DOUBLE
16798: LD_INT 1
16800: DEC
16801: ST_TO_ADDR
16802: LD_EXP 36
16806: PUSH
16807: LD_VAR 0 2
16811: ARRAY
16812: PUSH
16813: LD_INT 3
16815: ARRAY
16816: PUSH
16817: FOR_TO
16818: IFFALSE 17078
// begin areas := areas + 1 ;
16820: LD_ADDR_VAR 0 5
16824: PUSH
16825: LD_VAR 0 5
16829: PUSH
16830: LD_INT 1
16832: PLUS
16833: ST_TO_ADDR
// if IsInArea ( entity , position_drop_zones [ i ] [ 3 ] [ j ] ) then
16834: LD_VAR 0 4
16838: PPUSH
16839: LD_EXP 36
16843: PUSH
16844: LD_VAR 0 2
16848: ARRAY
16849: PUSH
16850: LD_INT 3
16852: ARRAY
16853: PUSH
16854: LD_VAR 0 3
16858: ARRAY
16859: PPUSH
16860: CALL_OW 308
16864: IFFALSE 17062
// begin human := PrepareCharacters ( side , [ Rand ( 0 , 5 ) , Rand ( 0 , 5 ) , Rand ( 0 , 5 ) , Rand ( 0 , 5 ) , Rand ( 0 , 5 ) , Rand ( 0 , 5 ) , Rand ( 0 , 5 ) , Rand ( 0 , 5 ) ] , new_character_EON ) ;
16866: LD_ADDR_VAR 0 9
16870: PUSH
16871: LD_VAR 0 7
16875: PPUSH
16876: LD_INT 0
16878: PPUSH
16879: LD_INT 5
16881: PPUSH
16882: CALL_OW 12
16886: PUSH
16887: LD_INT 0
16889: PPUSH
16890: LD_INT 5
16892: PPUSH
16893: CALL_OW 12
16897: PUSH
16898: LD_INT 0
16900: PPUSH
16901: LD_INT 5
16903: PPUSH
16904: CALL_OW 12
16908: PUSH
16909: LD_INT 0
16911: PPUSH
16912: LD_INT 5
16914: PPUSH
16915: CALL_OW 12
16919: PUSH
16920: LD_INT 0
16922: PPUSH
16923: LD_INT 5
16925: PPUSH
16926: CALL_OW 12
16930: PUSH
16931: LD_INT 0
16933: PPUSH
16934: LD_INT 5
16936: PPUSH
16937: CALL_OW 12
16941: PUSH
16942: LD_INT 0
16944: PPUSH
16945: LD_INT 5
16947: PPUSH
16948: CALL_OW 12
16952: PUSH
16953: LD_INT 0
16955: PPUSH
16956: LD_INT 5
16958: PPUSH
16959: CALL_OW 12
16963: PUSH
16964: EMPTY
16965: LIST
16966: LIST
16967: LIST
16968: LIST
16969: LIST
16970: LIST
16971: LIST
16972: LIST
16973: PPUSH
16974: LD_EXP 44
16978: PPUSH
16979: CALL 6422 0 3
16983: ST_TO_ADDR
// PlaceUnitArea ( human , position_drop_zones [ i ] [ 3 ] [ j ] , true ) ;
16984: LD_VAR 0 9
16988: PPUSH
16989: LD_EXP 36
16993: PUSH
16994: LD_VAR 0 2
16998: ARRAY
16999: PUSH
17000: LD_INT 3
17002: ARRAY
17003: PUSH
17004: LD_VAR 0 3
17008: ARRAY
17009: PPUSH
17010: LD_INT 1
17012: PPUSH
17013: CALL_OW 49
// side_soldiers := Replace ( side_soldiers , side , side_soldiers [ side ] ^ human ) ;
17017: LD_ADDR_EXP 46
17021: PUSH
17022: LD_EXP 46
17026: PPUSH
17027: LD_VAR 0 7
17031: PPUSH
17032: LD_EXP 46
17036: PUSH
17037: LD_VAR 0 7
17041: ARRAY
17042: PUSH
17043: LD_VAR 0 9
17047: ADD
17048: PPUSH
17049: CALL_OW 1
17053: ST_TO_ADDR
// exit ;
17054: POP
17055: POP
17056: POP
17057: POP
17058: GO 17330
// end else
17060: GO 17076
// begin outside := outside + 1 ;
17062: LD_ADDR_VAR 0 6
17066: PUSH
17067: LD_VAR 0 6
17071: PUSH
17072: LD_INT 1
17074: PLUS
17075: ST_TO_ADDR
// end ; end ;
17076: GO 16817
17078: POP
17079: POP
17080: GO 16789
17082: POP
17083: POP
// if areas = outside then
17084: LD_VAR 0 5
17088: PUSH
17089: LD_VAR 0 6
17093: EQUAL
17094: IFFALSE 17330
// begin i := Rand ( 1 , position_drop_zones ) ;
17096: LD_ADDR_VAR 0 2
17100: PUSH
17101: LD_INT 1
17103: PPUSH
17104: LD_EXP 36
17108: PPUSH
17109: CALL_OW 12
17113: ST_TO_ADDR
// j := Rand ( 1 , position_drop_zones [ i ] [ 3 ] ) ;
17114: LD_ADDR_VAR 0 3
17118: PUSH
17119: LD_INT 1
17121: PPUSH
17122: LD_EXP 36
17126: PUSH
17127: LD_VAR 0 2
17131: ARRAY
17132: PUSH
17133: LD_INT 3
17135: ARRAY
17136: PPUSH
17137: CALL_OW 12
17141: ST_TO_ADDR
// human := PrepareCharacters ( side , [ Rand ( 0 , 5 ) , Rand ( 0 , 5 ) , Rand ( 0 , 5 ) , Rand ( 0 , 5 ) , Rand ( 0 , 5 ) , Rand ( 0 , 5 ) , Rand ( 0 , 5 ) , Rand ( 0 , 5 ) ] , new_character_EON ) ;
17142: LD_ADDR_VAR 0 9
17146: PUSH
17147: LD_VAR 0 7
17151: PPUSH
17152: LD_INT 0
17154: PPUSH
17155: LD_INT 5
17157: PPUSH
17158: CALL_OW 12
17162: PUSH
17163: LD_INT 0
17165: PPUSH
17166: LD_INT 5
17168: PPUSH
17169: CALL_OW 12
17173: PUSH
17174: LD_INT 0
17176: PPUSH
17177: LD_INT 5
17179: PPUSH
17180: CALL_OW 12
17184: PUSH
17185: LD_INT 0
17187: PPUSH
17188: LD_INT 5
17190: PPUSH
17191: CALL_OW 12
17195: PUSH
17196: LD_INT 0
17198: PPUSH
17199: LD_INT 5
17201: PPUSH
17202: CALL_OW 12
17206: PUSH
17207: LD_INT 0
17209: PPUSH
17210: LD_INT 5
17212: PPUSH
17213: CALL_OW 12
17217: PUSH
17218: LD_INT 0
17220: PPUSH
17221: LD_INT 5
17223: PPUSH
17224: CALL_OW 12
17228: PUSH
17229: LD_INT 0
17231: PPUSH
17232: LD_INT 5
17234: PPUSH
17235: CALL_OW 12
17239: PUSH
17240: EMPTY
17241: LIST
17242: LIST
17243: LIST
17244: LIST
17245: LIST
17246: LIST
17247: LIST
17248: LIST
17249: PPUSH
17250: LD_EXP 44
17254: PPUSH
17255: CALL 6422 0 3
17259: ST_TO_ADDR
// PlaceUnitArea ( human , position_drop_zones [ i ] [ 3 ] [ j ] , true ) ;
17260: LD_VAR 0 9
17264: PPUSH
17265: LD_EXP 36
17269: PUSH
17270: LD_VAR 0 2
17274: ARRAY
17275: PUSH
17276: LD_INT 3
17278: ARRAY
17279: PUSH
17280: LD_VAR 0 3
17284: ARRAY
17285: PPUSH
17286: LD_INT 1
17288: PPUSH
17289: CALL_OW 49
// side_soldiers := Replace ( side_soldiers , side , side_soldiers [ side ] ^ human ) ;
17293: LD_ADDR_EXP 46
17297: PUSH
17298: LD_EXP 46
17302: PPUSH
17303: LD_VAR 0 7
17307: PPUSH
17308: LD_EXP 46
17312: PUSH
17313: LD_VAR 0 7
17317: ARRAY
17318: PUSH
17319: LD_VAR 0 9
17323: ADD
17324: PPUSH
17325: CALL_OW 1
17329: ST_TO_ADDR
// end ; end ;
17330: LD_VAR 0 1
17334: RET
// export function CYCLIC_Fluctuation ; var change ; begin
17335: LD_INT 0
17337: PPUSH
17338: PPUSH
// current_spawn_rate := Rand ( - 5 , 5 ) ;
17339: LD_ADDR_EXP 41
17343: PUSH
17344: LD_INT 5
17346: NEG
17347: PPUSH
17348: LD_INT 5
17350: PPUSH
17351: CALL_OW 12
17355: ST_TO_ADDR
// fluctuation_modifier_crates := fluctuation_base_crates * current_spawn_rate ;
17356: LD_ADDR_EXP 39
17360: PUSH
17361: LD_EXP 37
17365: PUSH
17366: LD_EXP 41
17370: MUL
17371: ST_TO_ADDR
// fluctuation_modifier_humans := fluctuation_base_humans * current_spawn_rate ;
17372: LD_ADDR_EXP 40
17376: PUSH
17377: LD_EXP 38
17381: PUSH
17382: LD_EXP 41
17386: MUL
17387: ST_TO_ADDR
// change := current_spawn_rate - past_spawn_rate ;
17388: LD_ADDR_VAR 0 2
17392: PUSH
17393: LD_EXP 41
17397: PUSH
17398: LD_EXP 42
17402: MINUS
17403: ST_TO_ADDR
// case change of - 10 .. - 6 :
17404: LD_VAR 0 2
17408: PUSH
17409: LD_INT 10
17411: NEG
17412: DOUBLE
17413: GREATEREQUAL
17414: IFFALSE 17423
17416: LD_INT 6
17418: NEG
17419: DOUBLE
17420: LESSEQUAL
17421: IFTRUE 17425
17423: GO 17428
17425: POP
// begin end ; - 5 .. - 1 :
17426: GO 17493
17428: LD_INT 5
17430: NEG
17431: DOUBLE
17432: GREATEREQUAL
17433: IFFALSE 17442
17435: LD_INT 1
17437: NEG
17438: DOUBLE
17439: LESSEQUAL
17440: IFTRUE 17444
17442: GO 17447
17444: POP
// begin end ; 0 :
17445: GO 17493
17447: LD_INT 0
17449: DOUBLE
17450: EQUAL
17451: IFTRUE 17455
17453: GO 17458
17455: POP
// begin end ; 1 .. 5 :
17456: GO 17493
17458: LD_INT 1
17460: DOUBLE
17461: GREATEREQUAL
17462: IFFALSE 17470
17464: LD_INT 5
17466: DOUBLE
17467: LESSEQUAL
17468: IFTRUE 17472
17470: GO 17475
17472: POP
// begin end ; 6 .. 10 :
17473: GO 17493
17475: LD_INT 6
17477: DOUBLE
17478: GREATEREQUAL
17479: IFFALSE 17487
17481: LD_INT 10
17483: DOUBLE
17484: LESSEQUAL
17485: IFTRUE 17489
17487: GO 17492
17489: POP
// begin end ; end ;
17490: GO 17493
17492: POP
// past_spawn_rate := current_spawn_rate ;
17493: LD_ADDR_EXP 42
17497: PUSH
17498: LD_EXP 41
17502: ST_TO_ADDR
// end ;
17503: LD_VAR 0 1
17507: RET
// export function CYCLIC_CheckTransportsInZones ; var i , cargo_bays ; begin
17508: LD_INT 0
17510: PPUSH
17511: PPUSH
17512: PPUSH
// for i = 1 to 8 do
17513: LD_ADDR_VAR 0 2
17517: PUSH
17518: DOUBLE
17519: LD_INT 1
17521: DEC
17522: ST_TO_ADDR
17523: LD_INT 8
17525: PUSH
17526: FOR_TO
17527: IFFALSE 18324
// begin side_resources_delivered := Replace ( side_resources_delivered , i , [ 0 , 0 , 0 ] ) ;
17529: LD_ADDR_EXP 60
17533: PUSH
17534: LD_EXP 60
17538: PPUSH
17539: LD_VAR 0 2
17543: PPUSH
17544: LD_INT 0
17546: PUSH
17547: LD_INT 0
17549: PUSH
17550: LD_INT 0
17552: PUSH
17553: EMPTY
17554: LIST
17555: LIST
17556: LIST
17557: PPUSH
17558: CALL_OW 1
17562: ST_TO_ADDR
// if not side_zone_locked [ i ] = 0 then
17563: LD_EXP 65
17567: PUSH
17568: LD_VAR 0 2
17572: ARRAY
17573: PUSH
17574: LD_INT 0
17576: EQUAL
17577: NOT
17578: IFFALSE 18322
// begin cargo_bays := FilterUnitsInArea ( team_transfer_zones [ Side_Teams [ i ] ] [ side_chosen_zone [ i ] ] , [ [ f_side , i ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , 12 ] , [ f_weapon , 32 ] , [ f_weapon , 51 ] ] , [ f_or , [ f_and , [ f_control , 2 ] , [ f_linked ] ] , [ f_and , [ f_control , 1 ] , [ f_occupied ] ] , [ f_control , 3 ] ] ] ) ;
17580: LD_ADDR_VAR 0 3
17584: PUSH
17585: LD_EXP 62
17589: PUSH
17590: LD_EXP 5
17594: PUSH
17595: LD_VAR 0 2
17599: ARRAY
17600: ARRAY
17601: PUSH
17602: LD_EXP 64
17606: PUSH
17607: LD_VAR 0 2
17611: ARRAY
17612: ARRAY
17613: PPUSH
17614: LD_INT 22
17616: PUSH
17617: LD_VAR 0 2
17621: PUSH
17622: EMPTY
17623: LIST
17624: LIST
17625: PUSH
17626: LD_INT 21
17628: PUSH
17629: LD_INT 2
17631: PUSH
17632: EMPTY
17633: LIST
17634: LIST
17635: PUSH
17636: LD_INT 2
17638: PUSH
17639: LD_INT 34
17641: PUSH
17642: LD_INT 12
17644: PUSH
17645: EMPTY
17646: LIST
17647: LIST
17648: PUSH
17649: LD_INT 34
17651: PUSH
17652: LD_INT 32
17654: PUSH
17655: EMPTY
17656: LIST
17657: LIST
17658: PUSH
17659: LD_INT 34
17661: PUSH
17662: LD_INT 51
17664: PUSH
17665: EMPTY
17666: LIST
17667: LIST
17668: PUSH
17669: EMPTY
17670: LIST
17671: LIST
17672: LIST
17673: LIST
17674: PUSH
17675: LD_INT 2
17677: PUSH
17678: LD_INT 1
17680: PUSH
17681: LD_INT 33
17683: PUSH
17684: LD_INT 2
17686: PUSH
17687: EMPTY
17688: LIST
17689: LIST
17690: PUSH
17691: LD_INT 61
17693: PUSH
17694: EMPTY
17695: LIST
17696: PUSH
17697: EMPTY
17698: LIST
17699: LIST
17700: LIST
17701: PUSH
17702: LD_INT 1
17704: PUSH
17705: LD_INT 33
17707: PUSH
17708: LD_INT 1
17710: PUSH
17711: EMPTY
17712: LIST
17713: LIST
17714: PUSH
17715: LD_INT 59
17717: PUSH
17718: EMPTY
17719: LIST
17720: PUSH
17721: EMPTY
17722: LIST
17723: LIST
17724: LIST
17725: PUSH
17726: LD_INT 33
17728: PUSH
17729: LD_INT 3
17731: PUSH
17732: EMPTY
17733: LIST
17734: LIST
17735: PUSH
17736: EMPTY
17737: LIST
17738: LIST
17739: LIST
17740: LIST
17741: PUSH
17742: EMPTY
17743: LIST
17744: LIST
17745: LIST
17746: LIST
17747: PPUSH
17748: CALL_OW 70
17752: ST_TO_ADDR
// if not cargo_bays = [ ] then
17753: LD_VAR 0 3
17757: PUSH
17758: EMPTY
17759: EQUAL
17760: NOT
17761: IFFALSE 17919
// begin side_resources_delivered := Replace ( side_resources_delivered , i , Replace ( side_resources_delivered [ i ] , 1 , GetCargo ( cargo_bays , mat_cans ) ) ) ;
17763: LD_ADDR_EXP 60
17767: PUSH
17768: LD_EXP 60
17772: PPUSH
17773: LD_VAR 0 2
17777: PPUSH
17778: LD_EXP 60
17782: PUSH
17783: LD_VAR 0 2
17787: ARRAY
17788: PPUSH
17789: LD_INT 1
17791: PPUSH
17792: LD_VAR 0 3
17796: PPUSH
17797: LD_INT 1
17799: PPUSH
17800: CALL_OW 289
17804: PPUSH
17805: CALL_OW 1
17809: PPUSH
17810: CALL_OW 1
17814: ST_TO_ADDR
// side_resources_delivered := Replace ( side_resources_delivered , i , Replace ( side_resources_delivered [ i ] , 2 , GetCargo ( cargo_bays , mat_oil ) ) ) ;
17815: LD_ADDR_EXP 60
17819: PUSH
17820: LD_EXP 60
17824: PPUSH
17825: LD_VAR 0 2
17829: PPUSH
17830: LD_EXP 60
17834: PUSH
17835: LD_VAR 0 2
17839: ARRAY
17840: PPUSH
17841: LD_INT 2
17843: PPUSH
17844: LD_VAR 0 3
17848: PPUSH
17849: LD_INT 2
17851: PPUSH
17852: CALL_OW 289
17856: PPUSH
17857: CALL_OW 1
17861: PPUSH
17862: CALL_OW 1
17866: ST_TO_ADDR
// side_resources_delivered := Replace ( side_resources_delivered , i , Replace ( side_resources_delivered [ i ] , 3 , GetCargo ( cargo_bays , mat_siberit ) ) ) ;
17867: LD_ADDR_EXP 60
17871: PUSH
17872: LD_EXP 60
17876: PPUSH
17877: LD_VAR 0 2
17881: PPUSH
17882: LD_EXP 60
17886: PUSH
17887: LD_VAR 0 2
17891: ARRAY
17892: PPUSH
17893: LD_INT 3
17895: PPUSH
17896: LD_VAR 0 3
17900: PPUSH
17901: LD_INT 3
17903: PPUSH
17904: CALL_OW 289
17908: PPUSH
17909: CALL_OW 1
17913: PPUSH
17914: CALL_OW 1
17918: ST_TO_ADDR
// end ; if i = Your_Side and ( side_order_type [ i ] = 1 or side_order_type [ i ] = 2 ) then
17919: LD_VAR 0 2
17923: PUSH
17924: LD_OWVAR 2
17928: EQUAL
17929: PUSH
17930: LD_EXP 68
17934: PUSH
17935: LD_VAR 0 2
17939: ARRAY
17940: PUSH
17941: LD_INT 1
17943: EQUAL
17944: PUSH
17945: LD_EXP 68
17949: PUSH
17950: LD_VAR 0 2
17954: ARRAY
17955: PUSH
17956: LD_INT 2
17958: EQUAL
17959: OR
17960: AND
17961: IFFALSE 18054
// ToLua ( LUA_UpdateTransferResources( & side_resources_delivered [ i ] [ 1 ] & , & side_resources_delivered [ i ] [ 2 ] & , & side_resources_delivered [ i ] [ 3 ] & , & 0 & , & side_order_type [ i ] & ); ) ;
17963: LD_STRING LUA_UpdateTransferResources(
17965: PUSH
17966: LD_EXP 60
17970: PUSH
17971: LD_VAR 0 2
17975: ARRAY
17976: PUSH
17977: LD_INT 1
17979: ARRAY
17980: STR
17981: PUSH
17982: LD_STRING ,
17984: STR
17985: PUSH
17986: LD_EXP 60
17990: PUSH
17991: LD_VAR 0 2
17995: ARRAY
17996: PUSH
17997: LD_INT 2
17999: ARRAY
18000: STR
18001: PUSH
18002: LD_STRING ,
18004: STR
18005: PUSH
18006: LD_EXP 60
18010: PUSH
18011: LD_VAR 0 2
18015: ARRAY
18016: PUSH
18017: LD_INT 3
18019: ARRAY
18020: STR
18021: PUSH
18022: LD_STRING ,
18024: STR
18025: PUSH
18026: LD_INT 0
18028: STR
18029: PUSH
18030: LD_STRING ,
18032: STR
18033: PUSH
18034: LD_EXP 68
18038: PUSH
18039: LD_VAR 0 2
18043: ARRAY
18044: STR
18045: PUSH
18046: LD_STRING );
18048: STR
18049: PPUSH
18050: CALL_OW 559
// if i = Your_Side and side_order_type [ i ] = 3 then
18054: LD_VAR 0 2
18058: PUSH
18059: LD_OWVAR 2
18063: EQUAL
18064: PUSH
18065: LD_EXP 68
18069: PUSH
18070: LD_VAR 0 2
18074: ARRAY
18075: PUSH
18076: LD_INT 3
18078: EQUAL
18079: AND
18080: IFFALSE 18173
// ToLua ( LUA_UpdateTransferResources( & 0 & , & 0 & , & side_resources_delivered [ i ] [ 3 ] & + & team_siberite_stocked [ Side_Teams [ i ] ] & , & victory_cond & , & side_order_type [ i ] & ); ) ;
18082: LD_STRING LUA_UpdateTransferResources(
18084: PUSH
18085: LD_INT 0
18087: STR
18088: PUSH
18089: LD_STRING ,
18091: STR
18092: PUSH
18093: LD_INT 0
18095: STR
18096: PUSH
18097: LD_STRING ,
18099: STR
18100: PUSH
18101: LD_EXP 60
18105: PUSH
18106: LD_VAR 0 2
18110: ARRAY
18111: PUSH
18112: LD_INT 3
18114: ARRAY
18115: STR
18116: PUSH
18117: LD_STRING +
18119: STR
18120: PUSH
18121: LD_EXP 61
18125: PUSH
18126: LD_EXP 5
18130: PUSH
18131: LD_VAR 0 2
18135: ARRAY
18136: ARRAY
18137: STR
18138: PUSH
18139: LD_STRING ,
18141: STR
18142: PUSH
18143: LD_EXP 27
18147: STR
18148: PUSH
18149: LD_STRING ,
18151: STR
18152: PUSH
18153: LD_EXP 68
18157: PUSH
18158: LD_VAR 0 2
18162: ARRAY
18163: STR
18164: PUSH
18165: LD_STRING );
18167: STR
18168: PPUSH
18169: CALL_OW 559
// if side_resources_delivered [ i ] [ 1 ] >= side_pending_order [ i ] [ 1 ] and side_resources_delivered [ i ] [ 2 ] >= side_pending_order [ i ] [ 2 ] and side_resources_delivered [ i ] [ 3 ] >= side_pending_order [ i ] [ 3 ] and i = Your_Side then
18173: LD_EXP 60
18177: PUSH
18178: LD_VAR 0 2
18182: ARRAY
18183: PUSH
18184: LD_INT 1
18186: ARRAY
18187: PUSH
18188: LD_EXP 59
18192: PUSH
18193: LD_VAR 0 2
18197: ARRAY
18198: PUSH
18199: LD_INT 1
18201: ARRAY
18202: GREATEREQUAL
18203: PUSH
18204: LD_EXP 60
18208: PUSH
18209: LD_VAR 0 2
18213: ARRAY
18214: PUSH
18215: LD_INT 2
18217: ARRAY
18218: PUSH
18219: LD_EXP 59
18223: PUSH
18224: LD_VAR 0 2
18228: ARRAY
18229: PUSH
18230: LD_INT 2
18232: ARRAY
18233: GREATEREQUAL
18234: AND
18235: PUSH
18236: LD_EXP 60
18240: PUSH
18241: LD_VAR 0 2
18245: ARRAY
18246: PUSH
18247: LD_INT 3
18249: ARRAY
18250: PUSH
18251: LD_EXP 59
18255: PUSH
18256: LD_VAR 0 2
18260: ARRAY
18261: PUSH
18262: LD_INT 3
18264: ARRAY
18265: GREATEREQUAL
18266: AND
18267: PUSH
18268: LD_VAR 0 2
18272: PUSH
18273: LD_OWVAR 2
18277: EQUAL
18278: AND
18279: IFFALSE 18315
// if side_order_type [ i ] = 3 then
18281: LD_EXP 68
18285: PUSH
18286: LD_VAR 0 2
18290: ARRAY
18291: PUSH
18292: LD_INT 3
18294: EQUAL
18295: IFFALSE 18306
// ToLua ( LUA_CanSendShipment(); ) else
18297: LD_STRING LUA_CanSendShipment();
18299: PPUSH
18300: CALL_OW 559
18304: GO 18313
// ToLua ( LUA_AutomaticSend(); ) else
18306: LD_STRING LUA_AutomaticSend();
18308: PPUSH
18309: CALL_OW 559
18313: GO 18322
// ToLua ( LUA_CannotSendShipment(); ) ;
18315: LD_STRING LUA_CannotSendShipment();
18317: PPUSH
18318: CALL_OW 559
// end ; end ;
18322: GO 17526
18324: POP
18325: POP
// end ;
18326: LD_VAR 0 1
18330: RET
// export function CYCLIC_FinalizeTransfer ( side , in1 , in2 , in3 ) ; var human , i , bulk , crates , oil , siberite ; begin
18331: LD_INT 0
18333: PPUSH
18334: PPUSH
18335: PPUSH
18336: PPUSH
18337: PPUSH
18338: PPUSH
18339: PPUSH
// SetCargo ( side_units_outside [ side ] , mat_cans , 0 ) ;
18340: LD_EXP 67
18344: PUSH
18345: LD_VAR 0 1
18349: ARRAY
18350: PPUSH
18351: LD_INT 1
18353: PPUSH
18354: LD_INT 0
18356: PPUSH
18357: CALL_OW 290
// crates := in1 ;
18361: LD_ADDR_VAR 0 9
18365: PUSH
18366: LD_VAR 0 2
18370: ST_TO_ADDR
// oil := in2 ;
18371: LD_ADDR_VAR 0 10
18375: PUSH
18376: LD_VAR 0 3
18380: ST_TO_ADDR
// siberite := in3 ;
18381: LD_ADDR_VAR 0 11
18385: PUSH
18386: LD_VAR 0 4
18390: ST_TO_ADDR
// case side_order_type [ side ] of 1 :
18391: LD_EXP 68
18395: PUSH
18396: LD_VAR 0 1
18400: ARRAY
18401: PUSH
18402: LD_INT 1
18404: DOUBLE
18405: EQUAL
18406: IFTRUE 18410
18408: GO 18928
18410: POP
// begin for i = 1 to side_reinforcement_amount [ side ] do
18411: LD_ADDR_VAR 0 7
18415: PUSH
18416: DOUBLE
18417: LD_INT 1
18419: DEC
18420: ST_TO_ADDR
18421: LD_EXP 57
18425: PUSH
18426: LD_VAR 0 1
18430: ARRAY
18431: PUSH
18432: FOR_TO
18433: IFFALSE 18757
// begin new_character_reinforcements := [ 0 , 1 , [ Rand ( 8 , 12 ) , Rand ( 8 , 12 ) ] , [ 0 , 0 , 0 , 0 ] , [ Rand ( 0 , experience ) , Rand ( 0 , experience ) , Rand ( 0 , experience ) , Rand ( 0 , experience ) ] , 0 ] ;
18435: LD_ADDR_EXP 45
18439: PUSH
18440: LD_INT 0
18442: PUSH
18443: LD_INT 1
18445: PUSH
18446: LD_INT 8
18448: PPUSH
18449: LD_INT 12
18451: PPUSH
18452: CALL_OW 12
18456: PUSH
18457: LD_INT 8
18459: PPUSH
18460: LD_INT 12
18462: PPUSH
18463: CALL_OW 12
18467: PUSH
18468: EMPTY
18469: LIST
18470: LIST
18471: PUSH
18472: LD_INT 0
18474: PUSH
18475: LD_INT 0
18477: PUSH
18478: LD_INT 0
18480: PUSH
18481: LD_INT 0
18483: PUSH
18484: EMPTY
18485: LIST
18486: LIST
18487: LIST
18488: LIST
18489: PUSH
18490: LD_INT 0
18492: PPUSH
18493: LD_EXP 20
18497: PPUSH
18498: CALL_OW 12
18502: PUSH
18503: LD_INT 0
18505: PPUSH
18506: LD_EXP 20
18510: PPUSH
18511: CALL_OW 12
18515: PUSH
18516: LD_INT 0
18518: PPUSH
18519: LD_EXP 20
18523: PPUSH
18524: CALL_OW 12
18528: PUSH
18529: LD_INT 0
18531: PPUSH
18532: LD_EXP 20
18536: PPUSH
18537: CALL_OW 12
18541: PUSH
18542: EMPTY
18543: LIST
18544: LIST
18545: LIST
18546: LIST
18547: PUSH
18548: LD_INT 0
18550: PUSH
18551: EMPTY
18552: LIST
18553: LIST
18554: LIST
18555: LIST
18556: LIST
18557: LIST
18558: ST_TO_ADDR
// human := PrepareCharacters ( side , [ Rand ( 0 , 5 ) , Rand ( 0 , 5 ) , Rand ( 0 , 5 ) , Rand ( 0 , 5 ) , Rand ( 0 , 5 ) , Rand ( 0 , 5 ) , Rand ( 0 , 5 ) , Rand ( 0 , 5 ) ] , new_character_reinforcements ) ;
18559: LD_ADDR_VAR 0 6
18563: PUSH
18564: LD_VAR 0 1
18568: PPUSH
18569: LD_INT 0
18571: PPUSH
18572: LD_INT 5
18574: PPUSH
18575: CALL_OW 12
18579: PUSH
18580: LD_INT 0
18582: PPUSH
18583: LD_INT 5
18585: PPUSH
18586: CALL_OW 12
18590: PUSH
18591: LD_INT 0
18593: PPUSH
18594: LD_INT 5
18596: PPUSH
18597: CALL_OW 12
18601: PUSH
18602: LD_INT 0
18604: PPUSH
18605: LD_INT 5
18607: PPUSH
18608: CALL_OW 12
18612: PUSH
18613: LD_INT 0
18615: PPUSH
18616: LD_INT 5
18618: PPUSH
18619: CALL_OW 12
18623: PUSH
18624: LD_INT 0
18626: PPUSH
18627: LD_INT 5
18629: PPUSH
18630: CALL_OW 12
18634: PUSH
18635: LD_INT 0
18637: PPUSH
18638: LD_INT 5
18640: PPUSH
18641: CALL_OW 12
18645: PUSH
18646: LD_INT 0
18648: PPUSH
18649: LD_INT 5
18651: PPUSH
18652: CALL_OW 12
18656: PUSH
18657: EMPTY
18658: LIST
18659: LIST
18660: LIST
18661: LIST
18662: LIST
18663: LIST
18664: LIST
18665: LIST
18666: PPUSH
18667: LD_EXP 45
18671: PPUSH
18672: CALL 6422 0 3
18676: ST_TO_ADDR
// side_soldiers := Replace ( side_soldiers , side , side_soldiers [ side ] ^ human ) ;
18677: LD_ADDR_EXP 46
18681: PUSH
18682: LD_EXP 46
18686: PPUSH
18687: LD_VAR 0 1
18691: PPUSH
18692: LD_EXP 46
18696: PUSH
18697: LD_VAR 0 1
18701: ARRAY
18702: PUSH
18703: LD_VAR 0 6
18707: ADD
18708: PPUSH
18709: CALL_OW 1
18713: ST_TO_ADDR
// PlaceUnitArea ( human , team_transfer_zones [ Side_Teams [ side ] ] [ side_chosen_zone [ side ] ] , false ) ;
18714: LD_VAR 0 6
18718: PPUSH
18719: LD_EXP 62
18723: PUSH
18724: LD_EXP 5
18728: PUSH
18729: LD_VAR 0 1
18733: ARRAY
18734: ARRAY
18735: PUSH
18736: LD_EXP 64
18740: PUSH
18741: LD_VAR 0 1
18745: ARRAY
18746: ARRAY
18747: PPUSH
18748: LD_INT 0
18750: PPUSH
18751: CALL_OW 49
// end ;
18755: GO 18432
18757: POP
18758: POP
// for i in side_units_outside [ side ] do
18759: LD_ADDR_VAR 0 7
18763: PUSH
18764: LD_EXP 67
18768: PUSH
18769: LD_VAR 0 1
18773: ARRAY
18774: PUSH
18775: FOR_IN
18776: IFFALSE 18924
// begin bulk := FillUpVehicles ( i , crates , oil , siberite ) ;
18778: LD_ADDR_VAR 0 8
18782: PUSH
18783: LD_VAR 0 7
18787: PPUSH
18788: LD_VAR 0 9
18792: PPUSH
18793: LD_VAR 0 10
18797: PPUSH
18798: LD_VAR 0 11
18802: PPUSH
18803: CALL 11081 0 4
18807: ST_TO_ADDR
// crates := bulk [ 2 ] ;
18808: LD_ADDR_VAR 0 9
18812: PUSH
18813: LD_VAR 0 8
18817: PUSH
18818: LD_INT 2
18820: ARRAY
18821: ST_TO_ADDR
// oil := bulk [ 3 ] ;
18822: LD_ADDR_VAR 0 10
18826: PUSH
18827: LD_VAR 0 8
18831: PUSH
18832: LD_INT 3
18834: ARRAY
18835: ST_TO_ADDR
// siberite := bulk [ 4 ] ;
18836: LD_ADDR_VAR 0 11
18840: PUSH
18841: LD_VAR 0 8
18845: PUSH
18846: LD_INT 4
18848: ARRAY
18849: ST_TO_ADDR
// SetDir ( i , RotateUnit ( GetDir ( i ) , 3 ) ) ;
18850: LD_VAR 0 7
18854: PPUSH
18855: LD_VAR 0 7
18859: PPUSH
18860: CALL_OW 254
18864: PPUSH
18865: LD_INT 3
18867: PPUSH
18868: CALL 11363 0 2
18872: PPUSH
18873: CALL_OW 233
// PlaceUnitArea ( bulk [ 1 ] , team_transfer_zones [ Side_Teams [ side ] ] [ side_chosen_zone [ side ] ] , false ) ;
18877: LD_VAR 0 8
18881: PUSH
18882: LD_INT 1
18884: ARRAY
18885: PPUSH
18886: LD_EXP 62
18890: PUSH
18891: LD_EXP 5
18895: PUSH
18896: LD_VAR 0 1
18900: ARRAY
18901: ARRAY
18902: PUSH
18903: LD_EXP 64
18907: PUSH
18908: LD_VAR 0 1
18912: ARRAY
18913: ARRAY
18914: PPUSH
18915: LD_INT 0
18917: PPUSH
18918: CALL_OW 49
// end ;
18922: GO 18775
18924: POP
18925: POP
// end ; 2 :
18926: GO 19639
18928: LD_INT 2
18930: DOUBLE
18931: EQUAL
18932: IFTRUE 18936
18934: GO 19270
18936: POP
// begin side_tech_lvl := Replace ( side_tech_lvl , side , side_tech_lvl [ side ] + 1 ) ;
18937: LD_ADDR_EXP 31
18941: PUSH
18942: LD_EXP 31
18946: PPUSH
18947: LD_VAR 0 1
18951: PPUSH
18952: LD_EXP 31
18956: PUSH
18957: LD_VAR 0 1
18961: ARRAY
18962: PUSH
18963: LD_INT 1
18965: PLUS
18966: PPUSH
18967: CALL_OW 1
18971: ST_TO_ADDR
// TechUpgrade ( side_tech_lvl [ side ] , Side_Nations [ side ] , side ) ;
18972: LD_EXP 31
18976: PUSH
18977: LD_VAR 0 1
18981: ARRAY
18982: PPUSH
18983: LD_EXP 3
18987: PUSH
18988: LD_VAR 0 1
18992: ARRAY
18993: PPUSH
18994: LD_VAR 0 1
18998: PPUSH
18999: CALL 7795 0 3
// if side = Your_Side then
19003: LD_VAR 0 1
19007: PUSH
19008: LD_OWVAR 2
19012: EQUAL
19013: IFFALSE 19048
// ToLua ( LUA_UpdateSideInterface( & side & , & side_tech_lvl [ side ] & ); ) ;
19015: LD_STRING LUA_UpdateSideInterface(
19017: PUSH
19018: LD_VAR 0 1
19022: STR
19023: PUSH
19024: LD_STRING ,
19026: STR
19027: PUSH
19028: LD_EXP 31
19032: PUSH
19033: LD_VAR 0 1
19037: ARRAY
19038: STR
19039: PUSH
19040: LD_STRING );
19042: STR
19043: PPUSH
19044: CALL_OW 559
// if Your_Side = 9 then
19048: LD_OWVAR 2
19052: PUSH
19053: LD_INT 9
19055: EQUAL
19056: IFFALSE 19101
// ToLua ( LUA_UpdateSpecInterface( & side & , & side & , & side_tech_lvl [ side ] & ); ) ;
19058: LD_STRING LUA_UpdateSpecInterface(
19060: PUSH
19061: LD_VAR 0 1
19065: STR
19066: PUSH
19067: LD_STRING ,
19069: STR
19070: PUSH
19071: LD_VAR 0 1
19075: STR
19076: PUSH
19077: LD_STRING ,
19079: STR
19080: PUSH
19081: LD_EXP 31
19085: PUSH
19086: LD_VAR 0 1
19090: ARRAY
19091: STR
19092: PUSH
19093: LD_STRING );
19095: STR
19096: PPUSH
19097: CALL_OW 559
// for i in side_units_outside [ side ] do
19101: LD_ADDR_VAR 0 7
19105: PUSH
19106: LD_EXP 67
19110: PUSH
19111: LD_VAR 0 1
19115: ARRAY
19116: PUSH
19117: FOR_IN
19118: IFFALSE 19266
// begin bulk := FillUpVehicles ( i , crates , oil , siberite ) ;
19120: LD_ADDR_VAR 0 8
19124: PUSH
19125: LD_VAR 0 7
19129: PPUSH
19130: LD_VAR 0 9
19134: PPUSH
19135: LD_VAR 0 10
19139: PPUSH
19140: LD_VAR 0 11
19144: PPUSH
19145: CALL 11081 0 4
19149: ST_TO_ADDR
// crates := bulk [ 2 ] ;
19150: LD_ADDR_VAR 0 9
19154: PUSH
19155: LD_VAR 0 8
19159: PUSH
19160: LD_INT 2
19162: ARRAY
19163: ST_TO_ADDR
// oil := bulk [ 3 ] ;
19164: LD_ADDR_VAR 0 10
19168: PUSH
19169: LD_VAR 0 8
19173: PUSH
19174: LD_INT 3
19176: ARRAY
19177: ST_TO_ADDR
// siberite := bulk [ 4 ] ;
19178: LD_ADDR_VAR 0 11
19182: PUSH
19183: LD_VAR 0 8
19187: PUSH
19188: LD_INT 4
19190: ARRAY
19191: ST_TO_ADDR
// SetDir ( i , RotateUnit ( GetDir ( i ) , 3 ) ) ;
19192: LD_VAR 0 7
19196: PPUSH
19197: LD_VAR 0 7
19201: PPUSH
19202: CALL_OW 254
19206: PPUSH
19207: LD_INT 3
19209: PPUSH
19210: CALL 11363 0 2
19214: PPUSH
19215: CALL_OW 233
// PlaceUnitArea ( bulk [ 1 ] , team_transfer_zones [ Side_Teams [ side ] ] [ side_chosen_zone [ side ] ] , false ) ;
19219: LD_VAR 0 8
19223: PUSH
19224: LD_INT 1
19226: ARRAY
19227: PPUSH
19228: LD_EXP 62
19232: PUSH
19233: LD_EXP 5
19237: PUSH
19238: LD_VAR 0 1
19242: ARRAY
19243: ARRAY
19244: PUSH
19245: LD_EXP 64
19249: PUSH
19250: LD_VAR 0 1
19254: ARRAY
19255: ARRAY
19256: PPUSH
19257: LD_INT 0
19259: PPUSH
19260: CALL_OW 49
// end ;
19264: GO 19117
19266: POP
19267: POP
// end ; 3 :
19268: GO 19639
19270: LD_INT 3
19272: DOUBLE
19273: EQUAL
19274: IFTRUE 19278
19276: GO 19638
19278: POP
// begin team_siberite_stocked := Replace ( team_siberite_stocked , Side_Teams [ side ] , team_siberite_stocked [ Side_Teams [ side ] ] + siberite ) ;
19279: LD_ADDR_EXP 61
19283: PUSH
19284: LD_EXP 61
19288: PPUSH
19289: LD_EXP 5
19293: PUSH
19294: LD_VAR 0 1
19298: ARRAY
19299: PPUSH
19300: LD_EXP 61
19304: PUSH
19305: LD_EXP 5
19309: PUSH
19310: LD_VAR 0 1
19314: ARRAY
19315: ARRAY
19316: PUSH
19317: LD_VAR 0 11
19321: PLUS
19322: PPUSH
19323: CALL_OW 1
19327: ST_TO_ADDR
// RaiseSailEvent ( 67 ) ;
19328: LD_INT 67
19330: PPUSH
19331: CALL_OW 427
// siberite := 0 ;
19335: LD_ADDR_VAR 0 11
19339: PUSH
19340: LD_INT 0
19342: ST_TO_ADDR
// for i in side_units_outside [ side ] do
19343: LD_ADDR_VAR 0 7
19347: PUSH
19348: LD_EXP 67
19352: PUSH
19353: LD_VAR 0 1
19357: ARRAY
19358: PUSH
19359: FOR_IN
19360: IFFALSE 19508
// begin bulk := FillUpVehicles ( i , crates , oil , siberite ) ;
19362: LD_ADDR_VAR 0 8
19366: PUSH
19367: LD_VAR 0 7
19371: PPUSH
19372: LD_VAR 0 9
19376: PPUSH
19377: LD_VAR 0 10
19381: PPUSH
19382: LD_VAR 0 11
19386: PPUSH
19387: CALL 11081 0 4
19391: ST_TO_ADDR
// crates := bulk [ 2 ] ;
19392: LD_ADDR_VAR 0 9
19396: PUSH
19397: LD_VAR 0 8
19401: PUSH
19402: LD_INT 2
19404: ARRAY
19405: ST_TO_ADDR
// oil := bulk [ 3 ] ;
19406: LD_ADDR_VAR 0 10
19410: PUSH
19411: LD_VAR 0 8
19415: PUSH
19416: LD_INT 3
19418: ARRAY
19419: ST_TO_ADDR
// siberite := bulk [ 4 ] ;
19420: LD_ADDR_VAR 0 11
19424: PUSH
19425: LD_VAR 0 8
19429: PUSH
19430: LD_INT 4
19432: ARRAY
19433: ST_TO_ADDR
// SetDir ( i , RotateUnit ( GetDir ( i ) , 3 ) ) ;
19434: LD_VAR 0 7
19438: PPUSH
19439: LD_VAR 0 7
19443: PPUSH
19444: CALL_OW 254
19448: PPUSH
19449: LD_INT 3
19451: PPUSH
19452: CALL 11363 0 2
19456: PPUSH
19457: CALL_OW 233
// PlaceUnitArea ( bulk [ 1 ] , team_transfer_zones [ Side_Teams [ side ] ] [ side_chosen_zone [ side ] ] , false ) ;
19461: LD_VAR 0 8
19465: PUSH
19466: LD_INT 1
19468: ARRAY
19469: PPUSH
19470: LD_EXP 62
19474: PUSH
19475: LD_EXP 5
19479: PUSH
19480: LD_VAR 0 1
19484: ARRAY
19485: ARRAY
19486: PUSH
19487: LD_EXP 64
19491: PUSH
19492: LD_VAR 0 1
19496: ARRAY
19497: ARRAY
19498: PPUSH
19499: LD_INT 0
19501: PPUSH
19502: CALL_OW 49
// end ;
19506: GO 19359
19508: POP
19509: POP
// if side = Your_Side then
19510: LD_VAR 0 1
19514: PUSH
19515: LD_OWVAR 2
19519: EQUAL
19520: IFFALSE 19561
// ToLua ( LUA_UpdateSiberiteSent( & team_siberite_stocked [ Side_Teams [ side ] ] & , & victory_cond & ); ) ;
19522: LD_STRING LUA_UpdateSiberiteSent(
19524: PUSH
19525: LD_EXP 61
19529: PUSH
19530: LD_EXP 5
19534: PUSH
19535: LD_VAR 0 1
19539: ARRAY
19540: ARRAY
19541: STR
19542: PUSH
19543: LD_STRING ,
19545: STR
19546: PUSH
19547: LD_EXP 27
19551: STR
19552: PUSH
19553: LD_STRING );
19555: STR
19556: PPUSH
19557: CALL_OW 559
// if Your_Side = 9 then
19561: LD_OWVAR 2
19565: PUSH
19566: LD_INT 9
19568: EQUAL
19569: IFFALSE 19636
// for i = 1 to Teams do
19571: LD_ADDR_VAR 0 7
19575: PUSH
19576: DOUBLE
19577: LD_INT 1
19579: DEC
19580: ST_TO_ADDR
19581: LD_EXP 6
19585: PUSH
19586: FOR_TO
19587: IFFALSE 19634
// ToLua ( LUA_UpdateSiberiteSpec( & team_siberite_stocked [ i ] & , & victory_cond & , & i & ); ) ;
19589: LD_STRING LUA_UpdateSiberiteSpec(
19591: PUSH
19592: LD_EXP 61
19596: PUSH
19597: LD_VAR 0 7
19601: ARRAY
19602: STR
19603: PUSH
19604: LD_STRING ,
19606: STR
19607: PUSH
19608: LD_EXP 27
19612: STR
19613: PUSH
19614: LD_STRING ,
19616: STR
19617: PUSH
19618: LD_VAR 0 7
19622: STR
19623: PUSH
19624: LD_STRING );
19626: STR
19627: PPUSH
19628: CALL_OW 559
19632: GO 19586
19634: POP
19635: POP
// end ; end ;
19636: GO 19639
19638: POP
// ToLua ( LUA_TransferFinished(); ) ;
19639: LD_STRING LUA_TransferFinished();
19641: PPUSH
19642: CALL_OW 559
// end ; end_of_file
19646: LD_VAR 0 5
19650: RET
// export ExtraStrings ; export WaitServerStrings ; export function ShowTimer ; var AllStrings ; begin
19651: LD_INT 0
19653: PPUSH
19654: PPUSH
// AllStrings := [ #Multi1x1-Time , tick ] ;
19655: LD_ADDR_VAR 0 2
19659: PUSH
19660: LD_STRING #Multi1x1-Time
19662: PUSH
19663: LD_OWVAR 1
19667: PUSH
19668: EMPTY
19669: LIST
19670: LIST
19671: ST_TO_ADDR
// if WaitServerStrings then
19672: LD_EXP 72
19676: IFFALSE 19694
// AllStrings = AllStrings ^ WaitServerStrings ;
19678: LD_ADDR_VAR 0 2
19682: PUSH
19683: LD_VAR 0 2
19687: PUSH
19688: LD_EXP 72
19692: ADD
19693: ST_TO_ADDR
// ExtraStrings :=  ;
19694: LD_ADDR_EXP 71
19698: PUSH
19699: LD_STRING 
19701: ST_TO_ADDR
// if ( ExtraStrings ) then
19702: LD_EXP 71
19706: IFFALSE 19728
// AllStrings := AllStrings ^  ^ ExtraStrings ;
19708: LD_ADDR_VAR 0 2
19712: PUSH
19713: LD_VAR 0 2
19717: PUSH
19718: LD_STRING 
19720: ADD
19721: PUSH
19722: LD_EXP 71
19726: ADD
19727: ST_TO_ADDR
// Display_Strings := AllStrings ;
19728: LD_ADDR_OWVAR 47
19732: PUSH
19733: LD_VAR 0 2
19737: ST_TO_ADDR
// end ; end_of_file
19738: LD_VAR 0 1
19742: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
19743: LD_INT 0
19745: PPUSH
19746: PPUSH
19747: PPUSH
19748: PPUSH
19749: PPUSH
19750: PPUSH
19751: PPUSH
19752: PPUSH
19753: PPUSH
// for i := 1 to 8 do
19754: LD_ADDR_VAR 0 2
19758: PUSH
19759: DOUBLE
19760: LD_INT 1
19762: DEC
19763: ST_TO_ADDR
19764: LD_INT 8
19766: PUSH
19767: FOR_TO
19768: IFFALSE 20152
// begin if Side_Positions [ i ] then
19770: LD_EXP 2
19774: PUSH
19775: LD_VAR 0 2
19779: ARRAY
19780: IFFALSE 20150
// begin people := FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) + 0 ;
19782: LD_ADDR_VAR 0 7
19786: PUSH
19787: LD_INT 22
19789: PUSH
19790: LD_VAR 0 2
19794: PUSH
19795: EMPTY
19796: LIST
19797: LIST
19798: PUSH
19799: LD_INT 21
19801: PUSH
19802: LD_INT 1
19804: PUSH
19805: EMPTY
19806: LIST
19807: LIST
19808: PUSH
19809: EMPTY
19810: LIST
19811: LIST
19812: PPUSH
19813: CALL_OW 69
19817: PUSH
19818: LD_INT 0
19820: PLUS
19821: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19822: LD_ADDR_VAR 0 9
19826: PUSH
19827: LD_INT 22
19829: PUSH
19830: LD_VAR 0 2
19834: PUSH
19835: EMPTY
19836: LIST
19837: LIST
19838: PUSH
19839: LD_INT 2
19841: PUSH
19842: LD_INT 30
19844: PUSH
19845: LD_INT 0
19847: PUSH
19848: EMPTY
19849: LIST
19850: LIST
19851: PUSH
19852: LD_INT 30
19854: PUSH
19855: LD_INT 1
19857: PUSH
19858: EMPTY
19859: LIST
19860: LIST
19861: PUSH
19862: EMPTY
19863: LIST
19864: LIST
19865: LIST
19866: PUSH
19867: EMPTY
19868: LIST
19869: LIST
19870: PPUSH
19871: CALL_OW 69
19875: ST_TO_ADDR
// crates := 0 ;
19876: LD_ADDR_VAR 0 4
19880: PUSH
19881: LD_INT 0
19883: ST_TO_ADDR
// oil := 0 ;
19884: LD_ADDR_VAR 0 5
19888: PUSH
19889: LD_INT 0
19891: ST_TO_ADDR
// sib := 0 ;
19892: LD_ADDR_VAR 0 6
19896: PUSH
19897: LD_INT 0
19899: ST_TO_ADDR
// if bases then
19900: LD_VAR 0 9
19904: IFFALSE 20010
// begin for j in bases do
19906: LD_ADDR_VAR 0 3
19910: PUSH
19911: LD_VAR 0 9
19915: PUSH
19916: FOR_IN
19917: IFFALSE 20008
// begin base := GetBase ( j ) ;
19919: LD_ADDR_VAR 0 8
19923: PUSH
19924: LD_VAR 0 3
19928: PPUSH
19929: CALL_OW 274
19933: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
19934: LD_ADDR_VAR 0 4
19938: PUSH
19939: LD_VAR 0 4
19943: PUSH
19944: LD_VAR 0 8
19948: PPUSH
19949: LD_INT 1
19951: PPUSH
19952: CALL_OW 275
19956: PLUS
19957: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
19958: LD_ADDR_VAR 0 5
19962: PUSH
19963: LD_VAR 0 5
19967: PUSH
19968: LD_VAR 0 8
19972: PPUSH
19973: LD_INT 2
19975: PPUSH
19976: CALL_OW 275
19980: PLUS
19981: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
19982: LD_ADDR_VAR 0 6
19986: PUSH
19987: LD_VAR 0 6
19991: PUSH
19992: LD_VAR 0 8
19996: PPUSH
19997: LD_INT 3
19999: PPUSH
20000: CALL_OW 275
20004: PLUS
20005: ST_TO_ADDR
// end ;
20006: GO 19916
20008: POP
20009: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
20010: LD_STRING setSpecText(
20012: PUSH
20013: LD_VAR 0 2
20017: STR
20018: PUSH
20019: LD_STRING ,
20021: STR
20022: PUSH
20023: LD_INT 2
20025: STR
20026: PUSH
20027: LD_STRING ,
20029: STR
20030: PUSH
20031: LD_VAR 0 4
20035: STR
20036: PUSH
20037: LD_STRING )
20039: STR
20040: PPUSH
20041: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
20045: LD_STRING setSpecText(
20047: PUSH
20048: LD_VAR 0 2
20052: STR
20053: PUSH
20054: LD_STRING ,
20056: STR
20057: PUSH
20058: LD_INT 3
20060: STR
20061: PUSH
20062: LD_STRING ,
20064: STR
20065: PUSH
20066: LD_VAR 0 5
20070: STR
20071: PUSH
20072: LD_STRING )
20074: STR
20075: PPUSH
20076: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
20080: LD_STRING setSpecText(
20082: PUSH
20083: LD_VAR 0 2
20087: STR
20088: PUSH
20089: LD_STRING ,
20091: STR
20092: PUSH
20093: LD_INT 4
20095: STR
20096: PUSH
20097: LD_STRING ,
20099: STR
20100: PUSH
20101: LD_VAR 0 6
20105: STR
20106: PUSH
20107: LD_STRING )
20109: STR
20110: PPUSH
20111: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
20115: LD_STRING setSpecText(
20117: PUSH
20118: LD_VAR 0 2
20122: STR
20123: PUSH
20124: LD_STRING ,
20126: STR
20127: PUSH
20128: LD_INT 5
20130: STR
20131: PUSH
20132: LD_STRING ,
20134: STR
20135: PUSH
20136: LD_VAR 0 7
20140: STR
20141: PUSH
20142: LD_STRING )
20144: STR
20145: PPUSH
20146: CALL_OW 559
// end ; end ;
20150: GO 19767
20152: POP
20153: POP
// end ;
20154: LD_VAR 0 1
20158: RET
// every 0 0$1 do
20159: GO 20161
20161: DISABLE
// begin ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
20162: LD_STRING setSpecLogoNumber(
20164: PUSH
20165: LD_INT 2
20167: STR
20168: PUSH
20169: LD_STRING ,
20171: STR
20172: PUSH
20173: LD_INT 1
20175: STR
20176: PUSH
20177: LD_STRING )
20179: STR
20180: PPUSH
20181: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
20185: LD_STRING setSpecLogoNumber(
20187: PUSH
20188: LD_INT 3
20190: STR
20191: PUSH
20192: LD_STRING ,
20194: STR
20195: PUSH
20196: LD_INT 2
20198: STR
20199: PUSH
20200: LD_STRING )
20202: STR
20203: PPUSH
20204: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
20208: LD_STRING setSpecLogoNumber(
20210: PUSH
20211: LD_INT 4
20213: STR
20214: PUSH
20215: LD_STRING ,
20217: STR
20218: PUSH
20219: LD_INT 3
20221: STR
20222: PUSH
20223: LD_STRING )
20225: STR
20226: PPUSH
20227: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
20231: LD_STRING setSpecLogoNumber(
20233: PUSH
20234: LD_INT 5
20236: STR
20237: PUSH
20238: LD_STRING ,
20240: STR
20241: PUSH
20242: LD_INT 4
20244: STR
20245: PUSH
20246: LD_STRING )
20248: STR
20249: PPUSH
20250: CALL_OW 559
// end ;
20254: END
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
20255: LD_INT 2
20257: PUSH
20258: LD_INT 30
20260: PUSH
20261: LD_INT 0
20263: PUSH
20264: EMPTY
20265: LIST
20266: LIST
20267: PUSH
20268: LD_INT 30
20270: PUSH
20271: LD_INT 1
20273: PUSH
20274: EMPTY
20275: LIST
20276: LIST
20277: PUSH
20278: EMPTY
20279: LIST
20280: LIST
20281: LIST
20282: PPUSH
20283: CALL_OW 69
20287: IFFALSE 20297
20289: GO 20291
20291: DISABLE
// begin enable ;
20292: ENABLE
// UpdateSpectatorBar ;
20293: CALL 19743 0 0
// end ; end_of_file
20297: END
// export function SA_OnSiberiteRocketExploded ( siberite_rocket_vehicle , target_x , target_y , requestSide ) ; begin
20298: LD_INT 0
20300: PPUSH
// if GetSide ( siberite_rocket_vehicle ) = requestSide then
20301: LD_VAR 0 1
20305: PPUSH
20306: CALL_OW 255
20310: PUSH
20311: LD_VAR 0 4
20315: EQUAL
20316: IFFALSE 20335
// begin SetAchievement ( ACH_RAD ) ;
20318: LD_STRING ACH_RAD
20320: PPUSH
20321: CALL_OW 543
// SetAchievementEx ( ACH_NL , 1 ) ;
20325: LD_STRING ACH_NL
20327: PPUSH
20328: LD_INT 1
20330: PPUSH
20331: CALL_OW 564
// end end ;
20335: LD_VAR 0 5
20339: RET
// export function SA_Win ( side ) ; begin
20340: LD_INT 0
20342: PPUSH
// case side of 1 :
20343: LD_VAR 0 1
20347: PUSH
20348: LD_INT 1
20350: DOUBLE
20351: EQUAL
20352: IFTRUE 20356
20354: GO 20369
20356: POP
// SetAchievementEx ( ACH_AH , 1 ) ; 2 :
20357: LD_STRING ACH_AH
20359: PPUSH
20360: LD_INT 1
20362: PPUSH
20363: CALL_OW 564
20367: GO 20532
20369: LD_INT 2
20371: DOUBLE
20372: EQUAL
20373: IFTRUE 20377
20375: GO 20390
20377: POP
// SetAchievementEx ( ACH_E , 1 ) ; 3 :
20378: LD_STRING ACH_E
20380: PPUSH
20381: LD_INT 1
20383: PPUSH
20384: CALL_OW 564
20388: GO 20532
20390: LD_INT 3
20392: DOUBLE
20393: EQUAL
20394: IFTRUE 20398
20396: GO 20411
20398: POP
// SetAchievementEx ( ACH_OOL , 1 ) ; [ 1 , 2 ] :
20399: LD_STRING ACH_OOL
20401: PPUSH
20402: LD_INT 1
20404: PPUSH
20405: CALL_OW 564
20409: GO 20532
20411: LD_INT 1
20413: PUSH
20414: LD_INT 2
20416: PUSH
20417: EMPTY
20418: LIST
20419: LIST
20420: DOUBLE
20421: EQUAL
20422: IFTRUE 20426
20424: GO 20451
20426: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
20427: LD_STRING ACH_AH
20429: PPUSH
20430: LD_REAL  5.00000000000000E-0001
20433: PPUSH
20434: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
20438: LD_STRING ACH_E
20440: PPUSH
20441: LD_REAL  5.00000000000000E-0001
20444: PPUSH
20445: CALL_OW 564
// end ; [ 2 , 3 ] :
20449: GO 20532
20451: LD_INT 2
20453: PUSH
20454: LD_INT 3
20456: PUSH
20457: EMPTY
20458: LIST
20459: LIST
20460: DOUBLE
20461: EQUAL
20462: IFTRUE 20466
20464: GO 20491
20466: POP
// begin SetAchievementEx ( ACH_OOL , 0.5 ) ;
20467: LD_STRING ACH_OOL
20469: PPUSH
20470: LD_REAL  5.00000000000000E-0001
20473: PPUSH
20474: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
20478: LD_STRING ACH_E
20480: PPUSH
20481: LD_REAL  5.00000000000000E-0001
20484: PPUSH
20485: CALL_OW 564
// end ; [ 3 , 1 ] :
20489: GO 20532
20491: LD_INT 3
20493: PUSH
20494: LD_INT 1
20496: PUSH
20497: EMPTY
20498: LIST
20499: LIST
20500: DOUBLE
20501: EQUAL
20502: IFTRUE 20506
20504: GO 20531
20506: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
20507: LD_STRING ACH_AH
20509: PPUSH
20510: LD_REAL  5.00000000000000E-0001
20513: PPUSH
20514: CALL_OW 564
// SetAchievementEx ( ACH_OOL , 0.5 ) ;
20518: LD_STRING ACH_OOL
20520: PPUSH
20521: LD_REAL  5.00000000000000E-0001
20524: PPUSH
20525: CALL_OW 564
// end ; end ;
20529: GO 20532
20531: POP
// end ;
20532: LD_VAR 0 2
20536: RET
